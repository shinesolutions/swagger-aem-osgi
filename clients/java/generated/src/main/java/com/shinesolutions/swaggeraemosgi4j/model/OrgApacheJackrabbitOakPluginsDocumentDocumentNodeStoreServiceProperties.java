/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraemosgi4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyArray;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyBoolean;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyDropDown;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyInteger;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T11:01:16.126+11:00[Australia/Melbourne]")
public class OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {
  public static final String SERIALIZED_NAME_MONGOURI = "mongouri";
  @SerializedName(SERIALIZED_NAME_MONGOURI)
  private ConfigNodePropertyString mongouri;

  public static final String SERIALIZED_NAME_DB = "db";
  @SerializedName(SERIALIZED_NAME_DB)
  private ConfigNodePropertyString db;

  public static final String SERIALIZED_NAME_SOCKET_KEEP_ALIVE = "socketKeepAlive";
  @SerializedName(SERIALIZED_NAME_SOCKET_KEEP_ALIVE)
  private ConfigNodePropertyBoolean socketKeepAlive;

  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private ConfigNodePropertyInteger cache;

  public static final String SERIALIZED_NAME_NODE_CACHE_PERCENTAGE = "nodeCachePercentage";
  @SerializedName(SERIALIZED_NAME_NODE_CACHE_PERCENTAGE)
  private ConfigNodePropertyInteger nodeCachePercentage;

  public static final String SERIALIZED_NAME_PREV_DOC_CACHE_PERCENTAGE = "prevDocCachePercentage";
  @SerializedName(SERIALIZED_NAME_PREV_DOC_CACHE_PERCENTAGE)
  private ConfigNodePropertyInteger prevDocCachePercentage;

  public static final String SERIALIZED_NAME_CHILDREN_CACHE_PERCENTAGE = "childrenCachePercentage";
  @SerializedName(SERIALIZED_NAME_CHILDREN_CACHE_PERCENTAGE)
  private ConfigNodePropertyInteger childrenCachePercentage;

  public static final String SERIALIZED_NAME_DIFF_CACHE_PERCENTAGE = "diffCachePercentage";
  @SerializedName(SERIALIZED_NAME_DIFF_CACHE_PERCENTAGE)
  private ConfigNodePropertyInteger diffCachePercentage;

  public static final String SERIALIZED_NAME_CACHE_SEGMENT_COUNT = "cacheSegmentCount";
  @SerializedName(SERIALIZED_NAME_CACHE_SEGMENT_COUNT)
  private ConfigNodePropertyInteger cacheSegmentCount;

  public static final String SERIALIZED_NAME_CACHE_STACK_MOVE_DISTANCE = "cacheStackMoveDistance";
  @SerializedName(SERIALIZED_NAME_CACHE_STACK_MOVE_DISTANCE)
  private ConfigNodePropertyInteger cacheStackMoveDistance;

  public static final String SERIALIZED_NAME_BLOB_CACHE_SIZE = "blobCacheSize";
  @SerializedName(SERIALIZED_NAME_BLOB_CACHE_SIZE)
  private ConfigNodePropertyInteger blobCacheSize;

  public static final String SERIALIZED_NAME_PERSISTENT_CACHE = "persistentCache";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_CACHE)
  private ConfigNodePropertyString persistentCache;

  public static final String SERIALIZED_NAME_JOURNAL_CACHE = "journalCache";
  @SerializedName(SERIALIZED_NAME_JOURNAL_CACHE)
  private ConfigNodePropertyString journalCache;

  public static final String SERIALIZED_NAME_CUSTOM_BLOB_STORE = "customBlobStore";
  @SerializedName(SERIALIZED_NAME_CUSTOM_BLOB_STORE)
  private ConfigNodePropertyBoolean customBlobStore;

  public static final String SERIALIZED_NAME_JOURNAL_G_C_INTERVAL = "journalGCInterval";
  @SerializedName(SERIALIZED_NAME_JOURNAL_G_C_INTERVAL)
  private ConfigNodePropertyInteger journalGCInterval;

  public static final String SERIALIZED_NAME_JOURNAL_G_C_MAX_AGE = "journalGCMaxAge";
  @SerializedName(SERIALIZED_NAME_JOURNAL_G_C_MAX_AGE)
  private ConfigNodePropertyInteger journalGCMaxAge;

  public static final String SERIALIZED_NAME_PREFETCH_EXTERNAL_CHANGES = "prefetchExternalChanges";
  @SerializedName(SERIALIZED_NAME_PREFETCH_EXTERNAL_CHANGES)
  private ConfigNodePropertyBoolean prefetchExternalChanges;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private ConfigNodePropertyString role;

  public static final String SERIALIZED_NAME_VERSION_GC_MAX_AGE_IN_SECS = "versionGcMaxAgeInSecs";
  @SerializedName(SERIALIZED_NAME_VERSION_GC_MAX_AGE_IN_SECS)
  private ConfigNodePropertyInteger versionGcMaxAgeInSecs;

  public static final String SERIALIZED_NAME_VERSION_G_C_EXPRESSION = "versionGCExpression";
  @SerializedName(SERIALIZED_NAME_VERSION_G_C_EXPRESSION)
  private ConfigNodePropertyString versionGCExpression;

  public static final String SERIALIZED_NAME_VERSION_G_C_TIME_LIMIT_IN_SECS = "versionGCTimeLimitInSecs";
  @SerializedName(SERIALIZED_NAME_VERSION_G_C_TIME_LIMIT_IN_SECS)
  private ConfigNodePropertyInteger versionGCTimeLimitInSecs;

  public static final String SERIALIZED_NAME_BLOB_GC_MAX_AGE_IN_SECS = "blobGcMaxAgeInSecs";
  @SerializedName(SERIALIZED_NAME_BLOB_GC_MAX_AGE_IN_SECS)
  private ConfigNodePropertyInteger blobGcMaxAgeInSecs;

  public static final String SERIALIZED_NAME_BLOB_TRACK_SNAPSHOT_INTERVAL_IN_SECS = "blobTrackSnapshotIntervalInSecs";
  @SerializedName(SERIALIZED_NAME_BLOB_TRACK_SNAPSHOT_INTERVAL_IN_SECS)
  private ConfigNodePropertyInteger blobTrackSnapshotIntervalInSecs;

  public static final String SERIALIZED_NAME_REPOSITORY_HOME = "repository.home";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_HOME)
  private ConfigNodePropertyString repositoryHome;

  public static final String SERIALIZED_NAME_MAX_REPLICATION_LAG_IN_SECS = "maxReplicationLagInSecs";
  @SerializedName(SERIALIZED_NAME_MAX_REPLICATION_LAG_IN_SECS)
  private ConfigNodePropertyInteger maxReplicationLagInSecs;

  public static final String SERIALIZED_NAME_DOCUMENT_STORE_TYPE = "documentStoreType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_STORE_TYPE)
  private ConfigNodePropertyDropDown documentStoreType;

  public static final String SERIALIZED_NAME_BUNDLING_DISABLED = "bundlingDisabled";
  @SerializedName(SERIALIZED_NAME_BUNDLING_DISABLED)
  private ConfigNodePropertyBoolean bundlingDisabled;

  public static final String SERIALIZED_NAME_UPDATE_LIMIT = "updateLimit";
  @SerializedName(SERIALIZED_NAME_UPDATE_LIMIT)
  private ConfigNodePropertyInteger updateLimit;

  public static final String SERIALIZED_NAME_PERSISTENT_CACHE_INCLUDES = "persistentCacheIncludes";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_CACHE_INCLUDES)
  private ConfigNodePropertyArray persistentCacheIncludes;

  public static final String SERIALIZED_NAME_LEASE_CHECK_MODE = "leaseCheckMode";
  @SerializedName(SERIALIZED_NAME_LEASE_CHECK_MODE)
  private ConfigNodePropertyDropDown leaseCheckMode;


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties mongouri(ConfigNodePropertyString mongouri) {
    
    this.mongouri = mongouri;
    return this;
  }

   /**
   * Get mongouri
   * @return mongouri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getMongouri() {
    return mongouri;
  }


  public void setMongouri(ConfigNodePropertyString mongouri) {
    this.mongouri = mongouri;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties db(ConfigNodePropertyString db) {
    
    this.db = db;
    return this;
  }

   /**
   * Get db
   * @return db
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getDb() {
    return db;
  }


  public void setDb(ConfigNodePropertyString db) {
    this.db = db;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties socketKeepAlive(ConfigNodePropertyBoolean socketKeepAlive) {
    
    this.socketKeepAlive = socketKeepAlive;
    return this;
  }

   /**
   * Get socketKeepAlive
   * @return socketKeepAlive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getSocketKeepAlive() {
    return socketKeepAlive;
  }


  public void setSocketKeepAlive(ConfigNodePropertyBoolean socketKeepAlive) {
    this.socketKeepAlive = socketKeepAlive;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties cache(ConfigNodePropertyInteger cache) {
    
    this.cache = cache;
    return this;
  }

   /**
   * Get cache
   * @return cache
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getCache() {
    return cache;
  }


  public void setCache(ConfigNodePropertyInteger cache) {
    this.cache = cache;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties nodeCachePercentage(ConfigNodePropertyInteger nodeCachePercentage) {
    
    this.nodeCachePercentage = nodeCachePercentage;
    return this;
  }

   /**
   * Get nodeCachePercentage
   * @return nodeCachePercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getNodeCachePercentage() {
    return nodeCachePercentage;
  }


  public void setNodeCachePercentage(ConfigNodePropertyInteger nodeCachePercentage) {
    this.nodeCachePercentage = nodeCachePercentage;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties prevDocCachePercentage(ConfigNodePropertyInteger prevDocCachePercentage) {
    
    this.prevDocCachePercentage = prevDocCachePercentage;
    return this;
  }

   /**
   * Get prevDocCachePercentage
   * @return prevDocCachePercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getPrevDocCachePercentage() {
    return prevDocCachePercentage;
  }


  public void setPrevDocCachePercentage(ConfigNodePropertyInteger prevDocCachePercentage) {
    this.prevDocCachePercentage = prevDocCachePercentage;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties childrenCachePercentage(ConfigNodePropertyInteger childrenCachePercentage) {
    
    this.childrenCachePercentage = childrenCachePercentage;
    return this;
  }

   /**
   * Get childrenCachePercentage
   * @return childrenCachePercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getChildrenCachePercentage() {
    return childrenCachePercentage;
  }


  public void setChildrenCachePercentage(ConfigNodePropertyInteger childrenCachePercentage) {
    this.childrenCachePercentage = childrenCachePercentage;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties diffCachePercentage(ConfigNodePropertyInteger diffCachePercentage) {
    
    this.diffCachePercentage = diffCachePercentage;
    return this;
  }

   /**
   * Get diffCachePercentage
   * @return diffCachePercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getDiffCachePercentage() {
    return diffCachePercentage;
  }


  public void setDiffCachePercentage(ConfigNodePropertyInteger diffCachePercentage) {
    this.diffCachePercentage = diffCachePercentage;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties cacheSegmentCount(ConfigNodePropertyInteger cacheSegmentCount) {
    
    this.cacheSegmentCount = cacheSegmentCount;
    return this;
  }

   /**
   * Get cacheSegmentCount
   * @return cacheSegmentCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getCacheSegmentCount() {
    return cacheSegmentCount;
  }


  public void setCacheSegmentCount(ConfigNodePropertyInteger cacheSegmentCount) {
    this.cacheSegmentCount = cacheSegmentCount;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties cacheStackMoveDistance(ConfigNodePropertyInteger cacheStackMoveDistance) {
    
    this.cacheStackMoveDistance = cacheStackMoveDistance;
    return this;
  }

   /**
   * Get cacheStackMoveDistance
   * @return cacheStackMoveDistance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getCacheStackMoveDistance() {
    return cacheStackMoveDistance;
  }


  public void setCacheStackMoveDistance(ConfigNodePropertyInteger cacheStackMoveDistance) {
    this.cacheStackMoveDistance = cacheStackMoveDistance;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties blobCacheSize(ConfigNodePropertyInteger blobCacheSize) {
    
    this.blobCacheSize = blobCacheSize;
    return this;
  }

   /**
   * Get blobCacheSize
   * @return blobCacheSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getBlobCacheSize() {
    return blobCacheSize;
  }


  public void setBlobCacheSize(ConfigNodePropertyInteger blobCacheSize) {
    this.blobCacheSize = blobCacheSize;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties persistentCache(ConfigNodePropertyString persistentCache) {
    
    this.persistentCache = persistentCache;
    return this;
  }

   /**
   * Get persistentCache
   * @return persistentCache
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getPersistentCache() {
    return persistentCache;
  }


  public void setPersistentCache(ConfigNodePropertyString persistentCache) {
    this.persistentCache = persistentCache;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties journalCache(ConfigNodePropertyString journalCache) {
    
    this.journalCache = journalCache;
    return this;
  }

   /**
   * Get journalCache
   * @return journalCache
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getJournalCache() {
    return journalCache;
  }


  public void setJournalCache(ConfigNodePropertyString journalCache) {
    this.journalCache = journalCache;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties customBlobStore(ConfigNodePropertyBoolean customBlobStore) {
    
    this.customBlobStore = customBlobStore;
    return this;
  }

   /**
   * Get customBlobStore
   * @return customBlobStore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getCustomBlobStore() {
    return customBlobStore;
  }


  public void setCustomBlobStore(ConfigNodePropertyBoolean customBlobStore) {
    this.customBlobStore = customBlobStore;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties journalGCInterval(ConfigNodePropertyInteger journalGCInterval) {
    
    this.journalGCInterval = journalGCInterval;
    return this;
  }

   /**
   * Get journalGCInterval
   * @return journalGCInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getJournalGCInterval() {
    return journalGCInterval;
  }


  public void setJournalGCInterval(ConfigNodePropertyInteger journalGCInterval) {
    this.journalGCInterval = journalGCInterval;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties journalGCMaxAge(ConfigNodePropertyInteger journalGCMaxAge) {
    
    this.journalGCMaxAge = journalGCMaxAge;
    return this;
  }

   /**
   * Get journalGCMaxAge
   * @return journalGCMaxAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getJournalGCMaxAge() {
    return journalGCMaxAge;
  }


  public void setJournalGCMaxAge(ConfigNodePropertyInteger journalGCMaxAge) {
    this.journalGCMaxAge = journalGCMaxAge;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties prefetchExternalChanges(ConfigNodePropertyBoolean prefetchExternalChanges) {
    
    this.prefetchExternalChanges = prefetchExternalChanges;
    return this;
  }

   /**
   * Get prefetchExternalChanges
   * @return prefetchExternalChanges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getPrefetchExternalChanges() {
    return prefetchExternalChanges;
  }


  public void setPrefetchExternalChanges(ConfigNodePropertyBoolean prefetchExternalChanges) {
    this.prefetchExternalChanges = prefetchExternalChanges;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties role(ConfigNodePropertyString role) {
    
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getRole() {
    return role;
  }


  public void setRole(ConfigNodePropertyString role) {
    this.role = role;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties versionGcMaxAgeInSecs(ConfigNodePropertyInteger versionGcMaxAgeInSecs) {
    
    this.versionGcMaxAgeInSecs = versionGcMaxAgeInSecs;
    return this;
  }

   /**
   * Get versionGcMaxAgeInSecs
   * @return versionGcMaxAgeInSecs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getVersionGcMaxAgeInSecs() {
    return versionGcMaxAgeInSecs;
  }


  public void setVersionGcMaxAgeInSecs(ConfigNodePropertyInteger versionGcMaxAgeInSecs) {
    this.versionGcMaxAgeInSecs = versionGcMaxAgeInSecs;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties versionGCExpression(ConfigNodePropertyString versionGCExpression) {
    
    this.versionGCExpression = versionGCExpression;
    return this;
  }

   /**
   * Get versionGCExpression
   * @return versionGCExpression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getVersionGCExpression() {
    return versionGCExpression;
  }


  public void setVersionGCExpression(ConfigNodePropertyString versionGCExpression) {
    this.versionGCExpression = versionGCExpression;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties versionGCTimeLimitInSecs(ConfigNodePropertyInteger versionGCTimeLimitInSecs) {
    
    this.versionGCTimeLimitInSecs = versionGCTimeLimitInSecs;
    return this;
  }

   /**
   * Get versionGCTimeLimitInSecs
   * @return versionGCTimeLimitInSecs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getVersionGCTimeLimitInSecs() {
    return versionGCTimeLimitInSecs;
  }


  public void setVersionGCTimeLimitInSecs(ConfigNodePropertyInteger versionGCTimeLimitInSecs) {
    this.versionGCTimeLimitInSecs = versionGCTimeLimitInSecs;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties blobGcMaxAgeInSecs(ConfigNodePropertyInteger blobGcMaxAgeInSecs) {
    
    this.blobGcMaxAgeInSecs = blobGcMaxAgeInSecs;
    return this;
  }

   /**
   * Get blobGcMaxAgeInSecs
   * @return blobGcMaxAgeInSecs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getBlobGcMaxAgeInSecs() {
    return blobGcMaxAgeInSecs;
  }


  public void setBlobGcMaxAgeInSecs(ConfigNodePropertyInteger blobGcMaxAgeInSecs) {
    this.blobGcMaxAgeInSecs = blobGcMaxAgeInSecs;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties blobTrackSnapshotIntervalInSecs(ConfigNodePropertyInteger blobTrackSnapshotIntervalInSecs) {
    
    this.blobTrackSnapshotIntervalInSecs = blobTrackSnapshotIntervalInSecs;
    return this;
  }

   /**
   * Get blobTrackSnapshotIntervalInSecs
   * @return blobTrackSnapshotIntervalInSecs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getBlobTrackSnapshotIntervalInSecs() {
    return blobTrackSnapshotIntervalInSecs;
  }


  public void setBlobTrackSnapshotIntervalInSecs(ConfigNodePropertyInteger blobTrackSnapshotIntervalInSecs) {
    this.blobTrackSnapshotIntervalInSecs = blobTrackSnapshotIntervalInSecs;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties repositoryHome(ConfigNodePropertyString repositoryHome) {
    
    this.repositoryHome = repositoryHome;
    return this;
  }

   /**
   * Get repositoryHome
   * @return repositoryHome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getRepositoryHome() {
    return repositoryHome;
  }


  public void setRepositoryHome(ConfigNodePropertyString repositoryHome) {
    this.repositoryHome = repositoryHome;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties maxReplicationLagInSecs(ConfigNodePropertyInteger maxReplicationLagInSecs) {
    
    this.maxReplicationLagInSecs = maxReplicationLagInSecs;
    return this;
  }

   /**
   * Get maxReplicationLagInSecs
   * @return maxReplicationLagInSecs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getMaxReplicationLagInSecs() {
    return maxReplicationLagInSecs;
  }


  public void setMaxReplicationLagInSecs(ConfigNodePropertyInteger maxReplicationLagInSecs) {
    this.maxReplicationLagInSecs = maxReplicationLagInSecs;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties documentStoreType(ConfigNodePropertyDropDown documentStoreType) {
    
    this.documentStoreType = documentStoreType;
    return this;
  }

   /**
   * Get documentStoreType
   * @return documentStoreType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyDropDown getDocumentStoreType() {
    return documentStoreType;
  }


  public void setDocumentStoreType(ConfigNodePropertyDropDown documentStoreType) {
    this.documentStoreType = documentStoreType;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties bundlingDisabled(ConfigNodePropertyBoolean bundlingDisabled) {
    
    this.bundlingDisabled = bundlingDisabled;
    return this;
  }

   /**
   * Get bundlingDisabled
   * @return bundlingDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getBundlingDisabled() {
    return bundlingDisabled;
  }


  public void setBundlingDisabled(ConfigNodePropertyBoolean bundlingDisabled) {
    this.bundlingDisabled = bundlingDisabled;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties updateLimit(ConfigNodePropertyInteger updateLimit) {
    
    this.updateLimit = updateLimit;
    return this;
  }

   /**
   * Get updateLimit
   * @return updateLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getUpdateLimit() {
    return updateLimit;
  }


  public void setUpdateLimit(ConfigNodePropertyInteger updateLimit) {
    this.updateLimit = updateLimit;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties persistentCacheIncludes(ConfigNodePropertyArray persistentCacheIncludes) {
    
    this.persistentCacheIncludes = persistentCacheIncludes;
    return this;
  }

   /**
   * Get persistentCacheIncludes
   * @return persistentCacheIncludes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getPersistentCacheIncludes() {
    return persistentCacheIncludes;
  }


  public void setPersistentCacheIncludes(ConfigNodePropertyArray persistentCacheIncludes) {
    this.persistentCacheIncludes = persistentCacheIncludes;
  }


  public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties leaseCheckMode(ConfigNodePropertyDropDown leaseCheckMode) {
    
    this.leaseCheckMode = leaseCheckMode;
    return this;
  }

   /**
   * Get leaseCheckMode
   * @return leaseCheckMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyDropDown getLeaseCheckMode() {
    return leaseCheckMode;
  }


  public void setLeaseCheckMode(ConfigNodePropertyDropDown leaseCheckMode) {
    this.leaseCheckMode = leaseCheckMode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties = (OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties) o;
    return Objects.equals(this.mongouri, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.mongouri) &&
        Objects.equals(this.db, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.db) &&
        Objects.equals(this.socketKeepAlive, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.socketKeepAlive) &&
        Objects.equals(this.cache, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.cache) &&
        Objects.equals(this.nodeCachePercentage, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.nodeCachePercentage) &&
        Objects.equals(this.prevDocCachePercentage, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.prevDocCachePercentage) &&
        Objects.equals(this.childrenCachePercentage, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.childrenCachePercentage) &&
        Objects.equals(this.diffCachePercentage, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.diffCachePercentage) &&
        Objects.equals(this.cacheSegmentCount, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.cacheSegmentCount) &&
        Objects.equals(this.cacheStackMoveDistance, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.cacheStackMoveDistance) &&
        Objects.equals(this.blobCacheSize, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.blobCacheSize) &&
        Objects.equals(this.persistentCache, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.persistentCache) &&
        Objects.equals(this.journalCache, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.journalCache) &&
        Objects.equals(this.customBlobStore, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.customBlobStore) &&
        Objects.equals(this.journalGCInterval, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.journalGCInterval) &&
        Objects.equals(this.journalGCMaxAge, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.journalGCMaxAge) &&
        Objects.equals(this.prefetchExternalChanges, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.prefetchExternalChanges) &&
        Objects.equals(this.role, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.role) &&
        Objects.equals(this.versionGcMaxAgeInSecs, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.versionGcMaxAgeInSecs) &&
        Objects.equals(this.versionGCExpression, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.versionGCExpression) &&
        Objects.equals(this.versionGCTimeLimitInSecs, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.versionGCTimeLimitInSecs) &&
        Objects.equals(this.blobGcMaxAgeInSecs, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.blobGcMaxAgeInSecs) &&
        Objects.equals(this.blobTrackSnapshotIntervalInSecs, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.blobTrackSnapshotIntervalInSecs) &&
        Objects.equals(this.repositoryHome, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.repositoryHome) &&
        Objects.equals(this.maxReplicationLagInSecs, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.maxReplicationLagInSecs) &&
        Objects.equals(this.documentStoreType, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.documentStoreType) &&
        Objects.equals(this.bundlingDisabled, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.bundlingDisabled) &&
        Objects.equals(this.updateLimit, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.updateLimit) &&
        Objects.equals(this.persistentCacheIncludes, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.persistentCacheIncludes) &&
        Objects.equals(this.leaseCheckMode, orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.leaseCheckMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties {\n");
    sb.append("    mongouri: ").append(toIndentedString(mongouri)).append("\n");
    sb.append("    db: ").append(toIndentedString(db)).append("\n");
    sb.append("    socketKeepAlive: ").append(toIndentedString(socketKeepAlive)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    nodeCachePercentage: ").append(toIndentedString(nodeCachePercentage)).append("\n");
    sb.append("    prevDocCachePercentage: ").append(toIndentedString(prevDocCachePercentage)).append("\n");
    sb.append("    childrenCachePercentage: ").append(toIndentedString(childrenCachePercentage)).append("\n");
    sb.append("    diffCachePercentage: ").append(toIndentedString(diffCachePercentage)).append("\n");
    sb.append("    cacheSegmentCount: ").append(toIndentedString(cacheSegmentCount)).append("\n");
    sb.append("    cacheStackMoveDistance: ").append(toIndentedString(cacheStackMoveDistance)).append("\n");
    sb.append("    blobCacheSize: ").append(toIndentedString(blobCacheSize)).append("\n");
    sb.append("    persistentCache: ").append(toIndentedString(persistentCache)).append("\n");
    sb.append("    journalCache: ").append(toIndentedString(journalCache)).append("\n");
    sb.append("    customBlobStore: ").append(toIndentedString(customBlobStore)).append("\n");
    sb.append("    journalGCInterval: ").append(toIndentedString(journalGCInterval)).append("\n");
    sb.append("    journalGCMaxAge: ").append(toIndentedString(journalGCMaxAge)).append("\n");
    sb.append("    prefetchExternalChanges: ").append(toIndentedString(prefetchExternalChanges)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    versionGcMaxAgeInSecs: ").append(toIndentedString(versionGcMaxAgeInSecs)).append("\n");
    sb.append("    versionGCExpression: ").append(toIndentedString(versionGCExpression)).append("\n");
    sb.append("    versionGCTimeLimitInSecs: ").append(toIndentedString(versionGCTimeLimitInSecs)).append("\n");
    sb.append("    blobGcMaxAgeInSecs: ").append(toIndentedString(blobGcMaxAgeInSecs)).append("\n");
    sb.append("    blobTrackSnapshotIntervalInSecs: ").append(toIndentedString(blobTrackSnapshotIntervalInSecs)).append("\n");
    sb.append("    repositoryHome: ").append(toIndentedString(repositoryHome)).append("\n");
    sb.append("    maxReplicationLagInSecs: ").append(toIndentedString(maxReplicationLagInSecs)).append("\n");
    sb.append("    documentStoreType: ").append(toIndentedString(documentStoreType)).append("\n");
    sb.append("    bundlingDisabled: ").append(toIndentedString(bundlingDisabled)).append("\n");
    sb.append("    updateLimit: ").append(toIndentedString(updateLimit)).append("\n");
    sb.append("    persistentCacheIncludes: ").append(toIndentedString(persistentCacheIncludes)).append("\n");
    sb.append("    leaseCheckMode: ").append(toIndentedString(leaseCheckMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

