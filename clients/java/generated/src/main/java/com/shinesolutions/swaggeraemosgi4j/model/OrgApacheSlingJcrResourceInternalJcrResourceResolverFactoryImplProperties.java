/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraemosgi4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyArray;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyBoolean;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyInteger;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T11:01:16.126+11:00[Australia/Melbourne]")
public class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_SEARCHPATH = "resource.resolver.searchpath";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_SEARCHPATH)
  private ConfigNodePropertyArray resourceResolverSearchpath;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_MANGLENAMESPACES = "resource.resolver.manglenamespaces";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_MANGLENAMESPACES)
  private ConfigNodePropertyBoolean resourceResolverManglenamespaces;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_ALLOW_DIRECT = "resource.resolver.allowDirect";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_ALLOW_DIRECT)
  private ConfigNodePropertyBoolean resourceResolverAllowDirect;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_REQUIRED_PROVIDERS = "resource.resolver.required.providers";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_REQUIRED_PROVIDERS)
  private ConfigNodePropertyArray resourceResolverRequiredProviders;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_REQUIRED_PROVIDERNAMES = "resource.resolver.required.providernames";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_REQUIRED_PROVIDERNAMES)
  private ConfigNodePropertyArray resourceResolverRequiredProvidernames;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_VIRTUAL = "resource.resolver.virtual";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_VIRTUAL)
  private ConfigNodePropertyArray resourceResolverVirtual;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_MAPPING = "resource.resolver.mapping";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_MAPPING)
  private ConfigNodePropertyArray resourceResolverMapping;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_MAP_LOCATION = "resource.resolver.map.location";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_MAP_LOCATION)
  private ConfigNodePropertyString resourceResolverMapLocation;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_MAP_OBSERVATION = "resource.resolver.map.observation";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_MAP_OBSERVATION)
  private ConfigNodePropertyArray resourceResolverMapObservation;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_DEFAULT_VANITY_REDIRECT_STATUS = "resource.resolver.default.vanity.redirect.status";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_DEFAULT_VANITY_REDIRECT_STATUS)
  private ConfigNodePropertyInteger resourceResolverDefaultVanityRedirectStatus;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_ENABLE_VANITYPATH = "resource.resolver.enable.vanitypath";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_ENABLE_VANITYPATH)
  private ConfigNodePropertyBoolean resourceResolverEnableVanitypath;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_MAX_ENTRIES = "resource.resolver.vanitypath.maxEntries";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_MAX_ENTRIES)
  private ConfigNodePropertyInteger resourceResolverVanitypathMaxEntries;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_MAX_ENTRIES_STARTUP = "resource.resolver.vanitypath.maxEntries.startup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_MAX_ENTRIES_STARTUP)
  private ConfigNodePropertyBoolean resourceResolverVanitypathMaxEntriesStartup;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_BLOOMFILTER_MAX_BYTES = "resource.resolver.vanitypath.bloomfilter.maxBytes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_BLOOMFILTER_MAX_BYTES)
  private ConfigNodePropertyInteger resourceResolverVanitypathBloomfilterMaxBytes;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_OPTIMIZE_ALIAS_RESOLUTION = "resource.resolver.optimize.alias.resolution";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_OPTIMIZE_ALIAS_RESOLUTION)
  private ConfigNodePropertyBoolean resourceResolverOptimizeAliasResolution;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_WHITELIST = "resource.resolver.vanitypath.whitelist";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_WHITELIST)
  private ConfigNodePropertyArray resourceResolverVanitypathWhitelist;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_BLACKLIST = "resource.resolver.vanitypath.blacklist";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_VANITYPATH_BLACKLIST)
  private ConfigNodePropertyArray resourceResolverVanitypathBlacklist;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_VANITY_PRECEDENCE = "resource.resolver.vanity.precedence";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_VANITY_PRECEDENCE)
  private ConfigNodePropertyBoolean resourceResolverVanityPrecedence;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_PROVIDERHANDLING_PARANOID = "resource.resolver.providerhandling.paranoid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_PROVIDERHANDLING_PARANOID)
  private ConfigNodePropertyBoolean resourceResolverProviderhandlingParanoid;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_LOG_CLOSING = "resource.resolver.log.closing";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_LOG_CLOSING)
  private ConfigNodePropertyBoolean resourceResolverLogClosing;

  public static final String SERIALIZED_NAME_RESOURCE_RESOLVER_LOG_UNCLOSED = "resource.resolver.log.unclosed";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RESOLVER_LOG_UNCLOSED)
  private ConfigNodePropertyBoolean resourceResolverLogUnclosed;


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverSearchpath(ConfigNodePropertyArray resourceResolverSearchpath) {
    
    this.resourceResolverSearchpath = resourceResolverSearchpath;
    return this;
  }

   /**
   * Get resourceResolverSearchpath
   * @return resourceResolverSearchpath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getResourceResolverSearchpath() {
    return resourceResolverSearchpath;
  }


  public void setResourceResolverSearchpath(ConfigNodePropertyArray resourceResolverSearchpath) {
    this.resourceResolverSearchpath = resourceResolverSearchpath;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverManglenamespaces(ConfigNodePropertyBoolean resourceResolverManglenamespaces) {
    
    this.resourceResolverManglenamespaces = resourceResolverManglenamespaces;
    return this;
  }

   /**
   * Get resourceResolverManglenamespaces
   * @return resourceResolverManglenamespaces
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getResourceResolverManglenamespaces() {
    return resourceResolverManglenamespaces;
  }


  public void setResourceResolverManglenamespaces(ConfigNodePropertyBoolean resourceResolverManglenamespaces) {
    this.resourceResolverManglenamespaces = resourceResolverManglenamespaces;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverAllowDirect(ConfigNodePropertyBoolean resourceResolverAllowDirect) {
    
    this.resourceResolverAllowDirect = resourceResolverAllowDirect;
    return this;
  }

   /**
   * Get resourceResolverAllowDirect
   * @return resourceResolverAllowDirect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getResourceResolverAllowDirect() {
    return resourceResolverAllowDirect;
  }


  public void setResourceResolverAllowDirect(ConfigNodePropertyBoolean resourceResolverAllowDirect) {
    this.resourceResolverAllowDirect = resourceResolverAllowDirect;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverRequiredProviders(ConfigNodePropertyArray resourceResolverRequiredProviders) {
    
    this.resourceResolverRequiredProviders = resourceResolverRequiredProviders;
    return this;
  }

   /**
   * Get resourceResolverRequiredProviders
   * @return resourceResolverRequiredProviders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getResourceResolverRequiredProviders() {
    return resourceResolverRequiredProviders;
  }


  public void setResourceResolverRequiredProviders(ConfigNodePropertyArray resourceResolverRequiredProviders) {
    this.resourceResolverRequiredProviders = resourceResolverRequiredProviders;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverRequiredProvidernames(ConfigNodePropertyArray resourceResolverRequiredProvidernames) {
    
    this.resourceResolverRequiredProvidernames = resourceResolverRequiredProvidernames;
    return this;
  }

   /**
   * Get resourceResolverRequiredProvidernames
   * @return resourceResolverRequiredProvidernames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getResourceResolverRequiredProvidernames() {
    return resourceResolverRequiredProvidernames;
  }


  public void setResourceResolverRequiredProvidernames(ConfigNodePropertyArray resourceResolverRequiredProvidernames) {
    this.resourceResolverRequiredProvidernames = resourceResolverRequiredProvidernames;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverVirtual(ConfigNodePropertyArray resourceResolverVirtual) {
    
    this.resourceResolverVirtual = resourceResolverVirtual;
    return this;
  }

   /**
   * Get resourceResolverVirtual
   * @return resourceResolverVirtual
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getResourceResolverVirtual() {
    return resourceResolverVirtual;
  }


  public void setResourceResolverVirtual(ConfigNodePropertyArray resourceResolverVirtual) {
    this.resourceResolverVirtual = resourceResolverVirtual;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverMapping(ConfigNodePropertyArray resourceResolverMapping) {
    
    this.resourceResolverMapping = resourceResolverMapping;
    return this;
  }

   /**
   * Get resourceResolverMapping
   * @return resourceResolverMapping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getResourceResolverMapping() {
    return resourceResolverMapping;
  }


  public void setResourceResolverMapping(ConfigNodePropertyArray resourceResolverMapping) {
    this.resourceResolverMapping = resourceResolverMapping;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverMapLocation(ConfigNodePropertyString resourceResolverMapLocation) {
    
    this.resourceResolverMapLocation = resourceResolverMapLocation;
    return this;
  }

   /**
   * Get resourceResolverMapLocation
   * @return resourceResolverMapLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getResourceResolverMapLocation() {
    return resourceResolverMapLocation;
  }


  public void setResourceResolverMapLocation(ConfigNodePropertyString resourceResolverMapLocation) {
    this.resourceResolverMapLocation = resourceResolverMapLocation;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverMapObservation(ConfigNodePropertyArray resourceResolverMapObservation) {
    
    this.resourceResolverMapObservation = resourceResolverMapObservation;
    return this;
  }

   /**
   * Get resourceResolverMapObservation
   * @return resourceResolverMapObservation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getResourceResolverMapObservation() {
    return resourceResolverMapObservation;
  }


  public void setResourceResolverMapObservation(ConfigNodePropertyArray resourceResolverMapObservation) {
    this.resourceResolverMapObservation = resourceResolverMapObservation;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverDefaultVanityRedirectStatus(ConfigNodePropertyInteger resourceResolverDefaultVanityRedirectStatus) {
    
    this.resourceResolverDefaultVanityRedirectStatus = resourceResolverDefaultVanityRedirectStatus;
    return this;
  }

   /**
   * Get resourceResolverDefaultVanityRedirectStatus
   * @return resourceResolverDefaultVanityRedirectStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getResourceResolverDefaultVanityRedirectStatus() {
    return resourceResolverDefaultVanityRedirectStatus;
  }


  public void setResourceResolverDefaultVanityRedirectStatus(ConfigNodePropertyInteger resourceResolverDefaultVanityRedirectStatus) {
    this.resourceResolverDefaultVanityRedirectStatus = resourceResolverDefaultVanityRedirectStatus;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverEnableVanitypath(ConfigNodePropertyBoolean resourceResolverEnableVanitypath) {
    
    this.resourceResolverEnableVanitypath = resourceResolverEnableVanitypath;
    return this;
  }

   /**
   * Get resourceResolverEnableVanitypath
   * @return resourceResolverEnableVanitypath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getResourceResolverEnableVanitypath() {
    return resourceResolverEnableVanitypath;
  }


  public void setResourceResolverEnableVanitypath(ConfigNodePropertyBoolean resourceResolverEnableVanitypath) {
    this.resourceResolverEnableVanitypath = resourceResolverEnableVanitypath;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverVanitypathMaxEntries(ConfigNodePropertyInteger resourceResolverVanitypathMaxEntries) {
    
    this.resourceResolverVanitypathMaxEntries = resourceResolverVanitypathMaxEntries;
    return this;
  }

   /**
   * Get resourceResolverVanitypathMaxEntries
   * @return resourceResolverVanitypathMaxEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getResourceResolverVanitypathMaxEntries() {
    return resourceResolverVanitypathMaxEntries;
  }


  public void setResourceResolverVanitypathMaxEntries(ConfigNodePropertyInteger resourceResolverVanitypathMaxEntries) {
    this.resourceResolverVanitypathMaxEntries = resourceResolverVanitypathMaxEntries;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverVanitypathMaxEntriesStartup(ConfigNodePropertyBoolean resourceResolverVanitypathMaxEntriesStartup) {
    
    this.resourceResolverVanitypathMaxEntriesStartup = resourceResolverVanitypathMaxEntriesStartup;
    return this;
  }

   /**
   * Get resourceResolverVanitypathMaxEntriesStartup
   * @return resourceResolverVanitypathMaxEntriesStartup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getResourceResolverVanitypathMaxEntriesStartup() {
    return resourceResolverVanitypathMaxEntriesStartup;
  }


  public void setResourceResolverVanitypathMaxEntriesStartup(ConfigNodePropertyBoolean resourceResolverVanitypathMaxEntriesStartup) {
    this.resourceResolverVanitypathMaxEntriesStartup = resourceResolverVanitypathMaxEntriesStartup;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverVanitypathBloomfilterMaxBytes(ConfigNodePropertyInteger resourceResolverVanitypathBloomfilterMaxBytes) {
    
    this.resourceResolverVanitypathBloomfilterMaxBytes = resourceResolverVanitypathBloomfilterMaxBytes;
    return this;
  }

   /**
   * Get resourceResolverVanitypathBloomfilterMaxBytes
   * @return resourceResolverVanitypathBloomfilterMaxBytes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyInteger getResourceResolverVanitypathBloomfilterMaxBytes() {
    return resourceResolverVanitypathBloomfilterMaxBytes;
  }


  public void setResourceResolverVanitypathBloomfilterMaxBytes(ConfigNodePropertyInteger resourceResolverVanitypathBloomfilterMaxBytes) {
    this.resourceResolverVanitypathBloomfilterMaxBytes = resourceResolverVanitypathBloomfilterMaxBytes;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverOptimizeAliasResolution(ConfigNodePropertyBoolean resourceResolverOptimizeAliasResolution) {
    
    this.resourceResolverOptimizeAliasResolution = resourceResolverOptimizeAliasResolution;
    return this;
  }

   /**
   * Get resourceResolverOptimizeAliasResolution
   * @return resourceResolverOptimizeAliasResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getResourceResolverOptimizeAliasResolution() {
    return resourceResolverOptimizeAliasResolution;
  }


  public void setResourceResolverOptimizeAliasResolution(ConfigNodePropertyBoolean resourceResolverOptimizeAliasResolution) {
    this.resourceResolverOptimizeAliasResolution = resourceResolverOptimizeAliasResolution;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverVanitypathWhitelist(ConfigNodePropertyArray resourceResolverVanitypathWhitelist) {
    
    this.resourceResolverVanitypathWhitelist = resourceResolverVanitypathWhitelist;
    return this;
  }

   /**
   * Get resourceResolverVanitypathWhitelist
   * @return resourceResolverVanitypathWhitelist
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getResourceResolverVanitypathWhitelist() {
    return resourceResolverVanitypathWhitelist;
  }


  public void setResourceResolverVanitypathWhitelist(ConfigNodePropertyArray resourceResolverVanitypathWhitelist) {
    this.resourceResolverVanitypathWhitelist = resourceResolverVanitypathWhitelist;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverVanitypathBlacklist(ConfigNodePropertyArray resourceResolverVanitypathBlacklist) {
    
    this.resourceResolverVanitypathBlacklist = resourceResolverVanitypathBlacklist;
    return this;
  }

   /**
   * Get resourceResolverVanitypathBlacklist
   * @return resourceResolverVanitypathBlacklist
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getResourceResolverVanitypathBlacklist() {
    return resourceResolverVanitypathBlacklist;
  }


  public void setResourceResolverVanitypathBlacklist(ConfigNodePropertyArray resourceResolverVanitypathBlacklist) {
    this.resourceResolverVanitypathBlacklist = resourceResolverVanitypathBlacklist;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverVanityPrecedence(ConfigNodePropertyBoolean resourceResolverVanityPrecedence) {
    
    this.resourceResolverVanityPrecedence = resourceResolverVanityPrecedence;
    return this;
  }

   /**
   * Get resourceResolverVanityPrecedence
   * @return resourceResolverVanityPrecedence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getResourceResolverVanityPrecedence() {
    return resourceResolverVanityPrecedence;
  }


  public void setResourceResolverVanityPrecedence(ConfigNodePropertyBoolean resourceResolverVanityPrecedence) {
    this.resourceResolverVanityPrecedence = resourceResolverVanityPrecedence;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverProviderhandlingParanoid(ConfigNodePropertyBoolean resourceResolverProviderhandlingParanoid) {
    
    this.resourceResolverProviderhandlingParanoid = resourceResolverProviderhandlingParanoid;
    return this;
  }

   /**
   * Get resourceResolverProviderhandlingParanoid
   * @return resourceResolverProviderhandlingParanoid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getResourceResolverProviderhandlingParanoid() {
    return resourceResolverProviderhandlingParanoid;
  }


  public void setResourceResolverProviderhandlingParanoid(ConfigNodePropertyBoolean resourceResolverProviderhandlingParanoid) {
    this.resourceResolverProviderhandlingParanoid = resourceResolverProviderhandlingParanoid;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverLogClosing(ConfigNodePropertyBoolean resourceResolverLogClosing) {
    
    this.resourceResolverLogClosing = resourceResolverLogClosing;
    return this;
  }

   /**
   * Get resourceResolverLogClosing
   * @return resourceResolverLogClosing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getResourceResolverLogClosing() {
    return resourceResolverLogClosing;
  }


  public void setResourceResolverLogClosing(ConfigNodePropertyBoolean resourceResolverLogClosing) {
    this.resourceResolverLogClosing = resourceResolverLogClosing;
  }


  public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties resourceResolverLogUnclosed(ConfigNodePropertyBoolean resourceResolverLogUnclosed) {
    
    this.resourceResolverLogUnclosed = resourceResolverLogUnclosed;
    return this;
  }

   /**
   * Get resourceResolverLogUnclosed
   * @return resourceResolverLogUnclosed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyBoolean getResourceResolverLogUnclosed() {
    return resourceResolverLogUnclosed;
  }


  public void setResourceResolverLogUnclosed(ConfigNodePropertyBoolean resourceResolverLogUnclosed) {
    this.resourceResolverLogUnclosed = resourceResolverLogUnclosed;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties = (OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties) o;
    return Objects.equals(this.resourceResolverSearchpath, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverSearchpath) &&
        Objects.equals(this.resourceResolverManglenamespaces, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverManglenamespaces) &&
        Objects.equals(this.resourceResolverAllowDirect, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverAllowDirect) &&
        Objects.equals(this.resourceResolverRequiredProviders, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverRequiredProviders) &&
        Objects.equals(this.resourceResolverRequiredProvidernames, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverRequiredProvidernames) &&
        Objects.equals(this.resourceResolverVirtual, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVirtual) &&
        Objects.equals(this.resourceResolverMapping, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverMapping) &&
        Objects.equals(this.resourceResolverMapLocation, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverMapLocation) &&
        Objects.equals(this.resourceResolverMapObservation, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverMapObservation) &&
        Objects.equals(this.resourceResolverDefaultVanityRedirectStatus, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverDefaultVanityRedirectStatus) &&
        Objects.equals(this.resourceResolverEnableVanitypath, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverEnableVanitypath) &&
        Objects.equals(this.resourceResolverVanitypathMaxEntries, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathMaxEntries) &&
        Objects.equals(this.resourceResolverVanitypathMaxEntriesStartup, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathMaxEntriesStartup) &&
        Objects.equals(this.resourceResolverVanitypathBloomfilterMaxBytes, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathBloomfilterMaxBytes) &&
        Objects.equals(this.resourceResolverOptimizeAliasResolution, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverOptimizeAliasResolution) &&
        Objects.equals(this.resourceResolverVanitypathWhitelist, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathWhitelist) &&
        Objects.equals(this.resourceResolverVanitypathBlacklist, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanitypathBlacklist) &&
        Objects.equals(this.resourceResolverVanityPrecedence, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverVanityPrecedence) &&
        Objects.equals(this.resourceResolverProviderhandlingParanoid, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverProviderhandlingParanoid) &&
        Objects.equals(this.resourceResolverLogClosing, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverLogClosing) &&
        Objects.equals(this.resourceResolverLogUnclosed, orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.resourceResolverLogUnclosed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {\n");
    sb.append("    resourceResolverSearchpath: ").append(toIndentedString(resourceResolverSearchpath)).append("\n");
    sb.append("    resourceResolverManglenamespaces: ").append(toIndentedString(resourceResolverManglenamespaces)).append("\n");
    sb.append("    resourceResolverAllowDirect: ").append(toIndentedString(resourceResolverAllowDirect)).append("\n");
    sb.append("    resourceResolverRequiredProviders: ").append(toIndentedString(resourceResolverRequiredProviders)).append("\n");
    sb.append("    resourceResolverRequiredProvidernames: ").append(toIndentedString(resourceResolverRequiredProvidernames)).append("\n");
    sb.append("    resourceResolverVirtual: ").append(toIndentedString(resourceResolverVirtual)).append("\n");
    sb.append("    resourceResolverMapping: ").append(toIndentedString(resourceResolverMapping)).append("\n");
    sb.append("    resourceResolverMapLocation: ").append(toIndentedString(resourceResolverMapLocation)).append("\n");
    sb.append("    resourceResolverMapObservation: ").append(toIndentedString(resourceResolverMapObservation)).append("\n");
    sb.append("    resourceResolverDefaultVanityRedirectStatus: ").append(toIndentedString(resourceResolverDefaultVanityRedirectStatus)).append("\n");
    sb.append("    resourceResolverEnableVanitypath: ").append(toIndentedString(resourceResolverEnableVanitypath)).append("\n");
    sb.append("    resourceResolverVanitypathMaxEntries: ").append(toIndentedString(resourceResolverVanitypathMaxEntries)).append("\n");
    sb.append("    resourceResolverVanitypathMaxEntriesStartup: ").append(toIndentedString(resourceResolverVanitypathMaxEntriesStartup)).append("\n");
    sb.append("    resourceResolverVanitypathBloomfilterMaxBytes: ").append(toIndentedString(resourceResolverVanitypathBloomfilterMaxBytes)).append("\n");
    sb.append("    resourceResolverOptimizeAliasResolution: ").append(toIndentedString(resourceResolverOptimizeAliasResolution)).append("\n");
    sb.append("    resourceResolverVanitypathWhitelist: ").append(toIndentedString(resourceResolverVanitypathWhitelist)).append("\n");
    sb.append("    resourceResolverVanitypathBlacklist: ").append(toIndentedString(resourceResolverVanitypathBlacklist)).append("\n");
    sb.append("    resourceResolverVanityPrecedence: ").append(toIndentedString(resourceResolverVanityPrecedence)).append("\n");
    sb.append("    resourceResolverProviderhandlingParanoid: ").append(toIndentedString(resourceResolverProviderhandlingParanoid)).append("\n");
    sb.append("    resourceResolverLogClosing: ").append(toIndentedString(resourceResolverLogClosing)).append("\n");
    sb.append("    resourceResolverLogUnclosed: ").append(toIndentedString(resourceResolverLogUnclosed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

