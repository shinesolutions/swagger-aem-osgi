/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraemosgi4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyArray;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T11:01:16.126+11:00[Australia/Melbourne]")
public class OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties {
  public static final String SERIALIZED_NAME_DATASOURCE_NAME = "datasource.name";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_NAME)
  private ConfigNodePropertyString datasourceName;

  public static final String SERIALIZED_NAME_DATASOURCE_SVC_PROP_NAME = "datasource.svc.prop.name";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_SVC_PROP_NAME)
  private ConfigNodePropertyString datasourceSvcPropName;

  public static final String SERIALIZED_NAME_DATASOURCE_JNDI_NAME = "datasource.jndi.name";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_JNDI_NAME)
  private ConfigNodePropertyString datasourceJndiName;

  public static final String SERIALIZED_NAME_JNDI_PROPERTIES = "jndi.properties";
  @SerializedName(SERIALIZED_NAME_JNDI_PROPERTIES)
  private ConfigNodePropertyArray jndiProperties;


  public OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties datasourceName(ConfigNodePropertyString datasourceName) {
    
    this.datasourceName = datasourceName;
    return this;
  }

   /**
   * Get datasourceName
   * @return datasourceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getDatasourceName() {
    return datasourceName;
  }


  public void setDatasourceName(ConfigNodePropertyString datasourceName) {
    this.datasourceName = datasourceName;
  }


  public OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties datasourceSvcPropName(ConfigNodePropertyString datasourceSvcPropName) {
    
    this.datasourceSvcPropName = datasourceSvcPropName;
    return this;
  }

   /**
   * Get datasourceSvcPropName
   * @return datasourceSvcPropName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getDatasourceSvcPropName() {
    return datasourceSvcPropName;
  }


  public void setDatasourceSvcPropName(ConfigNodePropertyString datasourceSvcPropName) {
    this.datasourceSvcPropName = datasourceSvcPropName;
  }


  public OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties datasourceJndiName(ConfigNodePropertyString datasourceJndiName) {
    
    this.datasourceJndiName = datasourceJndiName;
    return this;
  }

   /**
   * Get datasourceJndiName
   * @return datasourceJndiName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyString getDatasourceJndiName() {
    return datasourceJndiName;
  }


  public void setDatasourceJndiName(ConfigNodePropertyString datasourceJndiName) {
    this.datasourceJndiName = datasourceJndiName;
  }


  public OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties jndiProperties(ConfigNodePropertyArray jndiProperties) {
    
    this.jndiProperties = jndiProperties;
    return this;
  }

   /**
   * Get jndiProperties
   * @return jndiProperties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConfigNodePropertyArray getJndiProperties() {
    return jndiProperties;
  }


  public void setJndiProperties(ConfigNodePropertyArray jndiProperties) {
    this.jndiProperties = jndiProperties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties orgApacheSlingDatasourceJNDIDataSourceFactoryProperties = (OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties) o;
    return Objects.equals(this.datasourceName, orgApacheSlingDatasourceJNDIDataSourceFactoryProperties.datasourceName) &&
        Objects.equals(this.datasourceSvcPropName, orgApacheSlingDatasourceJNDIDataSourceFactoryProperties.datasourceSvcPropName) &&
        Objects.equals(this.datasourceJndiName, orgApacheSlingDatasourceJNDIDataSourceFactoryProperties.datasourceJndiName) &&
        Objects.equals(this.jndiProperties, orgApacheSlingDatasourceJNDIDataSourceFactoryProperties.jndiProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties {\n");
    sb.append("    datasourceName: ").append(toIndentedString(datasourceName)).append("\n");
    sb.append("    datasourceSvcPropName: ").append(toIndentedString(datasourceSvcPropName)).append("\n");
    sb.append("    datasourceJndiName: ").append(toIndentedString(datasourceJndiName)).append("\n");
    sb.append("    jndiProperties: ").append(toIndentedString(jndiProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

