=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties
    attr_accessor :service_ranking

    attr_accessor :global_size

    attr_accessor :max_disk_usage

    attr_accessor :persistence_enabled

    attr_accessor :thread_pool_max_size

    attr_accessor :scheduled_thread_pool_max_size

    attr_accessor :graceful_shutdown_timeout

    attr_accessor :queues

    attr_accessor :topics

    attr_accessor :addresses_max_delivery_attempts

    attr_accessor :addresses_expiry_delay

    attr_accessor :addresses_address_full_message_policy

    attr_accessor :addresses_max_size_bytes

    attr_accessor :addresses_page_size_bytes

    attr_accessor :addresses_page_cache_max_size

    attr_accessor :cluster_user

    attr_accessor :cluster_password

    attr_accessor :cluster_call_timeout

    attr_accessor :cluster_call_failover_timeout

    attr_accessor :cluster_client_failure_check_period

    attr_accessor :cluster_notification_attempts

    attr_accessor :cluster_notification_interval

    attr_accessor :id_cache_size

    attr_accessor :cluster_confirmation_window_size

    attr_accessor :cluster_connection_ttl

    attr_accessor :cluster_duplicate_detection

    attr_accessor :cluster_initial_connect_attempts

    attr_accessor :cluster_max_retry_interval

    attr_accessor :cluster_min_large_message_size

    attr_accessor :cluster_producer_window_size

    attr_accessor :cluster_reconnect_attempts

    attr_accessor :cluster_retry_interval

    attr_accessor :cluster_retry_interval_multiplier

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'service_ranking' => :'service.ranking',
        :'global_size' => :'global.size',
        :'max_disk_usage' => :'max.disk.usage',
        :'persistence_enabled' => :'persistence.enabled',
        :'thread_pool_max_size' => :'thread.pool.max.size',
        :'scheduled_thread_pool_max_size' => :'scheduled.thread.pool.max.size',
        :'graceful_shutdown_timeout' => :'graceful.shutdown.timeout',
        :'queues' => :'queues',
        :'topics' => :'topics',
        :'addresses_max_delivery_attempts' => :'addresses.max.delivery.attempts',
        :'addresses_expiry_delay' => :'addresses.expiry.delay',
        :'addresses_address_full_message_policy' => :'addresses.address.full.message.policy',
        :'addresses_max_size_bytes' => :'addresses.max.size.bytes',
        :'addresses_page_size_bytes' => :'addresses.page.size.bytes',
        :'addresses_page_cache_max_size' => :'addresses.page.cache.max.size',
        :'cluster_user' => :'cluster.user',
        :'cluster_password' => :'cluster.password',
        :'cluster_call_timeout' => :'cluster.call.timeout',
        :'cluster_call_failover_timeout' => :'cluster.call.failover.timeout',
        :'cluster_client_failure_check_period' => :'cluster.client.failure.check.period',
        :'cluster_notification_attempts' => :'cluster.notification.attempts',
        :'cluster_notification_interval' => :'cluster.notification.interval',
        :'id_cache_size' => :'id.cache.size',
        :'cluster_confirmation_window_size' => :'cluster.confirmation.window.size',
        :'cluster_connection_ttl' => :'cluster.connection.ttl',
        :'cluster_duplicate_detection' => :'cluster.duplicate.detection',
        :'cluster_initial_connect_attempts' => :'cluster.initial.connect.attempts',
        :'cluster_max_retry_interval' => :'cluster.max.retry.interval',
        :'cluster_min_large_message_size' => :'cluster.min.large.message.size',
        :'cluster_producer_window_size' => :'cluster.producer.window.size',
        :'cluster_reconnect_attempts' => :'cluster.reconnect.attempts',
        :'cluster_retry_interval' => :'cluster.retry.interval',
        :'cluster_retry_interval_multiplier' => :'cluster.retry.interval.multiplier'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'service_ranking' => :'ConfigNodePropertyInteger',
        :'global_size' => :'ConfigNodePropertyInteger',
        :'max_disk_usage' => :'ConfigNodePropertyInteger',
        :'persistence_enabled' => :'ConfigNodePropertyBoolean',
        :'thread_pool_max_size' => :'ConfigNodePropertyInteger',
        :'scheduled_thread_pool_max_size' => :'ConfigNodePropertyInteger',
        :'graceful_shutdown_timeout' => :'ConfigNodePropertyInteger',
        :'queues' => :'ConfigNodePropertyArray',
        :'topics' => :'ConfigNodePropertyArray',
        :'addresses_max_delivery_attempts' => :'ConfigNodePropertyInteger',
        :'addresses_expiry_delay' => :'ConfigNodePropertyInteger',
        :'addresses_address_full_message_policy' => :'ConfigNodePropertyDropDown',
        :'addresses_max_size_bytes' => :'ConfigNodePropertyInteger',
        :'addresses_page_size_bytes' => :'ConfigNodePropertyInteger',
        :'addresses_page_cache_max_size' => :'ConfigNodePropertyInteger',
        :'cluster_user' => :'ConfigNodePropertyString',
        :'cluster_password' => :'ConfigNodePropertyString',
        :'cluster_call_timeout' => :'ConfigNodePropertyInteger',
        :'cluster_call_failover_timeout' => :'ConfigNodePropertyInteger',
        :'cluster_client_failure_check_period' => :'ConfigNodePropertyInteger',
        :'cluster_notification_attempts' => :'ConfigNodePropertyInteger',
        :'cluster_notification_interval' => :'ConfigNodePropertyInteger',
        :'id_cache_size' => :'ConfigNodePropertyInteger',
        :'cluster_confirmation_window_size' => :'ConfigNodePropertyInteger',
        :'cluster_connection_ttl' => :'ConfigNodePropertyInteger',
        :'cluster_duplicate_detection' => :'ConfigNodePropertyBoolean',
        :'cluster_initial_connect_attempts' => :'ConfigNodePropertyInteger',
        :'cluster_max_retry_interval' => :'ConfigNodePropertyInteger',
        :'cluster_min_large_message_size' => :'ConfigNodePropertyInteger',
        :'cluster_producer_window_size' => :'ConfigNodePropertyInteger',
        :'cluster_reconnect_attempts' => :'ConfigNodePropertyInteger',
        :'cluster_retry_interval' => :'ConfigNodePropertyInteger',
        :'cluster_retry_interval_multiplier' => :'ConfigNodePropertyFloat'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::ComAdobeCqScreensMqActivemqImplArtemisJMSProviderProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'service_ranking')
        self.service_ranking = attributes[:'service_ranking']
      end

      if attributes.key?(:'global_size')
        self.global_size = attributes[:'global_size']
      end

      if attributes.key?(:'max_disk_usage')
        self.max_disk_usage = attributes[:'max_disk_usage']
      end

      if attributes.key?(:'persistence_enabled')
        self.persistence_enabled = attributes[:'persistence_enabled']
      end

      if attributes.key?(:'thread_pool_max_size')
        self.thread_pool_max_size = attributes[:'thread_pool_max_size']
      end

      if attributes.key?(:'scheduled_thread_pool_max_size')
        self.scheduled_thread_pool_max_size = attributes[:'scheduled_thread_pool_max_size']
      end

      if attributes.key?(:'graceful_shutdown_timeout')
        self.graceful_shutdown_timeout = attributes[:'graceful_shutdown_timeout']
      end

      if attributes.key?(:'queues')
        self.queues = attributes[:'queues']
      end

      if attributes.key?(:'topics')
        self.topics = attributes[:'topics']
      end

      if attributes.key?(:'addresses_max_delivery_attempts')
        self.addresses_max_delivery_attempts = attributes[:'addresses_max_delivery_attempts']
      end

      if attributes.key?(:'addresses_expiry_delay')
        self.addresses_expiry_delay = attributes[:'addresses_expiry_delay']
      end

      if attributes.key?(:'addresses_address_full_message_policy')
        self.addresses_address_full_message_policy = attributes[:'addresses_address_full_message_policy']
      end

      if attributes.key?(:'addresses_max_size_bytes')
        self.addresses_max_size_bytes = attributes[:'addresses_max_size_bytes']
      end

      if attributes.key?(:'addresses_page_size_bytes')
        self.addresses_page_size_bytes = attributes[:'addresses_page_size_bytes']
      end

      if attributes.key?(:'addresses_page_cache_max_size')
        self.addresses_page_cache_max_size = attributes[:'addresses_page_cache_max_size']
      end

      if attributes.key?(:'cluster_user')
        self.cluster_user = attributes[:'cluster_user']
      end

      if attributes.key?(:'cluster_password')
        self.cluster_password = attributes[:'cluster_password']
      end

      if attributes.key?(:'cluster_call_timeout')
        self.cluster_call_timeout = attributes[:'cluster_call_timeout']
      end

      if attributes.key?(:'cluster_call_failover_timeout')
        self.cluster_call_failover_timeout = attributes[:'cluster_call_failover_timeout']
      end

      if attributes.key?(:'cluster_client_failure_check_period')
        self.cluster_client_failure_check_period = attributes[:'cluster_client_failure_check_period']
      end

      if attributes.key?(:'cluster_notification_attempts')
        self.cluster_notification_attempts = attributes[:'cluster_notification_attempts']
      end

      if attributes.key?(:'cluster_notification_interval')
        self.cluster_notification_interval = attributes[:'cluster_notification_interval']
      end

      if attributes.key?(:'id_cache_size')
        self.id_cache_size = attributes[:'id_cache_size']
      end

      if attributes.key?(:'cluster_confirmation_window_size')
        self.cluster_confirmation_window_size = attributes[:'cluster_confirmation_window_size']
      end

      if attributes.key?(:'cluster_connection_ttl')
        self.cluster_connection_ttl = attributes[:'cluster_connection_ttl']
      end

      if attributes.key?(:'cluster_duplicate_detection')
        self.cluster_duplicate_detection = attributes[:'cluster_duplicate_detection']
      end

      if attributes.key?(:'cluster_initial_connect_attempts')
        self.cluster_initial_connect_attempts = attributes[:'cluster_initial_connect_attempts']
      end

      if attributes.key?(:'cluster_max_retry_interval')
        self.cluster_max_retry_interval = attributes[:'cluster_max_retry_interval']
      end

      if attributes.key?(:'cluster_min_large_message_size')
        self.cluster_min_large_message_size = attributes[:'cluster_min_large_message_size']
      end

      if attributes.key?(:'cluster_producer_window_size')
        self.cluster_producer_window_size = attributes[:'cluster_producer_window_size']
      end

      if attributes.key?(:'cluster_reconnect_attempts')
        self.cluster_reconnect_attempts = attributes[:'cluster_reconnect_attempts']
      end

      if attributes.key?(:'cluster_retry_interval')
        self.cluster_retry_interval = attributes[:'cluster_retry_interval']
      end

      if attributes.key?(:'cluster_retry_interval_multiplier')
        self.cluster_retry_interval_multiplier = attributes[:'cluster_retry_interval_multiplier']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          service_ranking == o.service_ranking &&
          global_size == o.global_size &&
          max_disk_usage == o.max_disk_usage &&
          persistence_enabled == o.persistence_enabled &&
          thread_pool_max_size == o.thread_pool_max_size &&
          scheduled_thread_pool_max_size == o.scheduled_thread_pool_max_size &&
          graceful_shutdown_timeout == o.graceful_shutdown_timeout &&
          queues == o.queues &&
          topics == o.topics &&
          addresses_max_delivery_attempts == o.addresses_max_delivery_attempts &&
          addresses_expiry_delay == o.addresses_expiry_delay &&
          addresses_address_full_message_policy == o.addresses_address_full_message_policy &&
          addresses_max_size_bytes == o.addresses_max_size_bytes &&
          addresses_page_size_bytes == o.addresses_page_size_bytes &&
          addresses_page_cache_max_size == o.addresses_page_cache_max_size &&
          cluster_user == o.cluster_user &&
          cluster_password == o.cluster_password &&
          cluster_call_timeout == o.cluster_call_timeout &&
          cluster_call_failover_timeout == o.cluster_call_failover_timeout &&
          cluster_client_failure_check_period == o.cluster_client_failure_check_period &&
          cluster_notification_attempts == o.cluster_notification_attempts &&
          cluster_notification_interval == o.cluster_notification_interval &&
          id_cache_size == o.id_cache_size &&
          cluster_confirmation_window_size == o.cluster_confirmation_window_size &&
          cluster_connection_ttl == o.cluster_connection_ttl &&
          cluster_duplicate_detection == o.cluster_duplicate_detection &&
          cluster_initial_connect_attempts == o.cluster_initial_connect_attempts &&
          cluster_max_retry_interval == o.cluster_max_retry_interval &&
          cluster_min_large_message_size == o.cluster_min_large_message_size &&
          cluster_producer_window_size == o.cluster_producer_window_size &&
          cluster_reconnect_attempts == o.cluster_reconnect_attempts &&
          cluster_retry_interval == o.cluster_retry_interval &&
          cluster_retry_interval_multiplier == o.cluster_retry_interval_multiplier
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [service_ranking, global_size, max_disk_usage, persistence_enabled, thread_pool_max_size, scheduled_thread_pool_max_size, graceful_shutdown_timeout, queues, topics, addresses_max_delivery_attempts, addresses_expiry_delay, addresses_address_full_message_policy, addresses_max_size_bytes, addresses_page_size_bytes, addresses_page_cache_max_size, cluster_user, cluster_password, cluster_call_timeout, cluster_call_failover_timeout, cluster_client_failure_check_period, cluster_notification_attempts, cluster_notification_interval, id_cache_size, cluster_confirmation_window_size, cluster_connection_ttl, cluster_duplicate_detection, cluster_initial_connect_attempts, cluster_max_retry_interval, cluster_min_large_message_size, cluster_producer_window_size, cluster_reconnect_attempts, cluster_retry_interval, cluster_retry_interval_multiplier].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
