=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties
    attr_accessor :message_properties

    attr_accessor :message_box_size_limit

    attr_accessor :message_count_limit

    attr_accessor :notify_failure

    attr_accessor :failure_message_from

    attr_accessor :failure_template_path

    attr_accessor :max_retries

    attr_accessor :min_wait_between_retries

    attr_accessor :count_update_pool_size

    attr_accessor :inbox_path

    attr_accessor :sentitems_path

    attr_accessor :support_attachments

    attr_accessor :support_group_messaging

    attr_accessor :max_total_recipients

    attr_accessor :batch_size

    attr_accessor :max_total_attachment_size

    attr_accessor :attachment_type_blacklist

    attr_accessor :allowed_attachment_types

    attr_accessor :service_selector

    attr_accessor :field_whitelist

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'message_properties' => :'message.properties',
        :'message_box_size_limit' => :'messageBoxSizeLimit',
        :'message_count_limit' => :'messageCountLimit',
        :'notify_failure' => :'notifyFailure',
        :'failure_message_from' => :'failureMessageFrom',
        :'failure_template_path' => :'failureTemplatePath',
        :'max_retries' => :'maxRetries',
        :'min_wait_between_retries' => :'minWaitBetweenRetries',
        :'count_update_pool_size' => :'countUpdatePoolSize',
        :'inbox_path' => :'inbox.path',
        :'sentitems_path' => :'sentitems.path',
        :'support_attachments' => :'supportAttachments',
        :'support_group_messaging' => :'supportGroupMessaging',
        :'max_total_recipients' => :'maxTotalRecipients',
        :'batch_size' => :'batchSize',
        :'max_total_attachment_size' => :'maxTotalAttachmentSize',
        :'attachment_type_blacklist' => :'attachmentTypeBlacklist',
        :'allowed_attachment_types' => :'allowedAttachmentTypes',
        :'service_selector' => :'serviceSelector',
        :'field_whitelist' => :'fieldWhitelist'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'message_properties' => :'ConfigNodePropertyArray',
        :'message_box_size_limit' => :'ConfigNodePropertyInteger',
        :'message_count_limit' => :'ConfigNodePropertyInteger',
        :'notify_failure' => :'ConfigNodePropertyBoolean',
        :'failure_message_from' => :'ConfigNodePropertyString',
        :'failure_template_path' => :'ConfigNodePropertyString',
        :'max_retries' => :'ConfigNodePropertyInteger',
        :'min_wait_between_retries' => :'ConfigNodePropertyInteger',
        :'count_update_pool_size' => :'ConfigNodePropertyInteger',
        :'inbox_path' => :'ConfigNodePropertyString',
        :'sentitems_path' => :'ConfigNodePropertyString',
        :'support_attachments' => :'ConfigNodePropertyBoolean',
        :'support_group_messaging' => :'ConfigNodePropertyBoolean',
        :'max_total_recipients' => :'ConfigNodePropertyInteger',
        :'batch_size' => :'ConfigNodePropertyInteger',
        :'max_total_attachment_size' => :'ConfigNodePropertyInteger',
        :'attachment_type_blacklist' => :'ConfigNodePropertyArray',
        :'allowed_attachment_types' => :'ConfigNodePropertyArray',
        :'service_selector' => :'ConfigNodePropertyString',
        :'field_whitelist' => :'ConfigNodePropertyArray'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'message_properties')
        self.message_properties = attributes[:'message_properties']
      end

      if attributes.key?(:'message_box_size_limit')
        self.message_box_size_limit = attributes[:'message_box_size_limit']
      end

      if attributes.key?(:'message_count_limit')
        self.message_count_limit = attributes[:'message_count_limit']
      end

      if attributes.key?(:'notify_failure')
        self.notify_failure = attributes[:'notify_failure']
      end

      if attributes.key?(:'failure_message_from')
        self.failure_message_from = attributes[:'failure_message_from']
      end

      if attributes.key?(:'failure_template_path')
        self.failure_template_path = attributes[:'failure_template_path']
      end

      if attributes.key?(:'max_retries')
        self.max_retries = attributes[:'max_retries']
      end

      if attributes.key?(:'min_wait_between_retries')
        self.min_wait_between_retries = attributes[:'min_wait_between_retries']
      end

      if attributes.key?(:'count_update_pool_size')
        self.count_update_pool_size = attributes[:'count_update_pool_size']
      end

      if attributes.key?(:'inbox_path')
        self.inbox_path = attributes[:'inbox_path']
      end

      if attributes.key?(:'sentitems_path')
        self.sentitems_path = attributes[:'sentitems_path']
      end

      if attributes.key?(:'support_attachments')
        self.support_attachments = attributes[:'support_attachments']
      end

      if attributes.key?(:'support_group_messaging')
        self.support_group_messaging = attributes[:'support_group_messaging']
      end

      if attributes.key?(:'max_total_recipients')
        self.max_total_recipients = attributes[:'max_total_recipients']
      end

      if attributes.key?(:'batch_size')
        self.batch_size = attributes[:'batch_size']
      end

      if attributes.key?(:'max_total_attachment_size')
        self.max_total_attachment_size = attributes[:'max_total_attachment_size']
      end

      if attributes.key?(:'attachment_type_blacklist')
        self.attachment_type_blacklist = attributes[:'attachment_type_blacklist']
      end

      if attributes.key?(:'allowed_attachment_types')
        self.allowed_attachment_types = attributes[:'allowed_attachment_types']
      end

      if attributes.key?(:'service_selector')
        self.service_selector = attributes[:'service_selector']
      end

      if attributes.key?(:'field_whitelist')
        self.field_whitelist = attributes[:'field_whitelist']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          message_properties == o.message_properties &&
          message_box_size_limit == o.message_box_size_limit &&
          message_count_limit == o.message_count_limit &&
          notify_failure == o.notify_failure &&
          failure_message_from == o.failure_message_from &&
          failure_template_path == o.failure_template_path &&
          max_retries == o.max_retries &&
          min_wait_between_retries == o.min_wait_between_retries &&
          count_update_pool_size == o.count_update_pool_size &&
          inbox_path == o.inbox_path &&
          sentitems_path == o.sentitems_path &&
          support_attachments == o.support_attachments &&
          support_group_messaging == o.support_group_messaging &&
          max_total_recipients == o.max_total_recipients &&
          batch_size == o.batch_size &&
          max_total_attachment_size == o.max_total_attachment_size &&
          attachment_type_blacklist == o.attachment_type_blacklist &&
          allowed_attachment_types == o.allowed_attachment_types &&
          service_selector == o.service_selector &&
          field_whitelist == o.field_whitelist
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [message_properties, message_box_size_limit, message_count_limit, notify_failure, failure_message_from, failure_template_path, max_retries, min_wait_between_retries, count_update_pool_size, inbox_path, sentitems_path, support_attachments, support_group_messaging, max_total_recipients, batch_size, max_total_attachment_size, attachment_type_blacklist, allowed_attachment_types, service_selector, field_whitelist].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
