=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties
    attr_accessor :disabled

    attr_accessor :debug

    attr_accessor :local_index_dir

    attr_accessor :enable_open_index_async

    attr_accessor :thread_pool_size

    attr_accessor :prefetch_index_files

    attr_accessor :extracted_text_cache_size_in_mb

    attr_accessor :extracted_text_cache_expiry_in_secs

    attr_accessor :always_use_pre_extracted_cache

    attr_accessor :boolean_clause_limit

    attr_accessor :enable_hybrid_indexing

    attr_accessor :hybrid_queue_size

    attr_accessor :disable_stored_index_definition

    attr_accessor :deleted_blobs_collection_enabled

    attr_accessor :prop_index_cleaner_interval_in_secs

    attr_accessor :enable_single_blob_index_files

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'disabled' => :'disabled',
        :'debug' => :'debug',
        :'local_index_dir' => :'localIndexDir',
        :'enable_open_index_async' => :'enableOpenIndexAsync',
        :'thread_pool_size' => :'threadPoolSize',
        :'prefetch_index_files' => :'prefetchIndexFiles',
        :'extracted_text_cache_size_in_mb' => :'extractedTextCacheSizeInMB',
        :'extracted_text_cache_expiry_in_secs' => :'extractedTextCacheExpiryInSecs',
        :'always_use_pre_extracted_cache' => :'alwaysUsePreExtractedCache',
        :'boolean_clause_limit' => :'booleanClauseLimit',
        :'enable_hybrid_indexing' => :'enableHybridIndexing',
        :'hybrid_queue_size' => :'hybridQueueSize',
        :'disable_stored_index_definition' => :'disableStoredIndexDefinition',
        :'deleted_blobs_collection_enabled' => :'deletedBlobsCollectionEnabled',
        :'prop_index_cleaner_interval_in_secs' => :'propIndexCleanerIntervalInSecs',
        :'enable_single_blob_index_files' => :'enableSingleBlobIndexFiles'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'disabled' => :'ConfigNodePropertyBoolean',
        :'debug' => :'ConfigNodePropertyBoolean',
        :'local_index_dir' => :'ConfigNodePropertyString',
        :'enable_open_index_async' => :'ConfigNodePropertyBoolean',
        :'thread_pool_size' => :'ConfigNodePropertyInteger',
        :'prefetch_index_files' => :'ConfigNodePropertyBoolean',
        :'extracted_text_cache_size_in_mb' => :'ConfigNodePropertyInteger',
        :'extracted_text_cache_expiry_in_secs' => :'ConfigNodePropertyInteger',
        :'always_use_pre_extracted_cache' => :'ConfigNodePropertyBoolean',
        :'boolean_clause_limit' => :'ConfigNodePropertyInteger',
        :'enable_hybrid_indexing' => :'ConfigNodePropertyBoolean',
        :'hybrid_queue_size' => :'ConfigNodePropertyInteger',
        :'disable_stored_index_definition' => :'ConfigNodePropertyBoolean',
        :'deleted_blobs_collection_enabled' => :'ConfigNodePropertyBoolean',
        :'prop_index_cleaner_interval_in_secs' => :'ConfigNodePropertyInteger',
        :'enable_single_blob_index_files' => :'ConfigNodePropertyBoolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.key?(:'debug')
        self.debug = attributes[:'debug']
      end

      if attributes.key?(:'local_index_dir')
        self.local_index_dir = attributes[:'local_index_dir']
      end

      if attributes.key?(:'enable_open_index_async')
        self.enable_open_index_async = attributes[:'enable_open_index_async']
      end

      if attributes.key?(:'thread_pool_size')
        self.thread_pool_size = attributes[:'thread_pool_size']
      end

      if attributes.key?(:'prefetch_index_files')
        self.prefetch_index_files = attributes[:'prefetch_index_files']
      end

      if attributes.key?(:'extracted_text_cache_size_in_mb')
        self.extracted_text_cache_size_in_mb = attributes[:'extracted_text_cache_size_in_mb']
      end

      if attributes.key?(:'extracted_text_cache_expiry_in_secs')
        self.extracted_text_cache_expiry_in_secs = attributes[:'extracted_text_cache_expiry_in_secs']
      end

      if attributes.key?(:'always_use_pre_extracted_cache')
        self.always_use_pre_extracted_cache = attributes[:'always_use_pre_extracted_cache']
      end

      if attributes.key?(:'boolean_clause_limit')
        self.boolean_clause_limit = attributes[:'boolean_clause_limit']
      end

      if attributes.key?(:'enable_hybrid_indexing')
        self.enable_hybrid_indexing = attributes[:'enable_hybrid_indexing']
      end

      if attributes.key?(:'hybrid_queue_size')
        self.hybrid_queue_size = attributes[:'hybrid_queue_size']
      end

      if attributes.key?(:'disable_stored_index_definition')
        self.disable_stored_index_definition = attributes[:'disable_stored_index_definition']
      end

      if attributes.key?(:'deleted_blobs_collection_enabled')
        self.deleted_blobs_collection_enabled = attributes[:'deleted_blobs_collection_enabled']
      end

      if attributes.key?(:'prop_index_cleaner_interval_in_secs')
        self.prop_index_cleaner_interval_in_secs = attributes[:'prop_index_cleaner_interval_in_secs']
      end

      if attributes.key?(:'enable_single_blob_index_files')
        self.enable_single_blob_index_files = attributes[:'enable_single_blob_index_files']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          disabled == o.disabled &&
          debug == o.debug &&
          local_index_dir == o.local_index_dir &&
          enable_open_index_async == o.enable_open_index_async &&
          thread_pool_size == o.thread_pool_size &&
          prefetch_index_files == o.prefetch_index_files &&
          extracted_text_cache_size_in_mb == o.extracted_text_cache_size_in_mb &&
          extracted_text_cache_expiry_in_secs == o.extracted_text_cache_expiry_in_secs &&
          always_use_pre_extracted_cache == o.always_use_pre_extracted_cache &&
          boolean_clause_limit == o.boolean_clause_limit &&
          enable_hybrid_indexing == o.enable_hybrid_indexing &&
          hybrid_queue_size == o.hybrid_queue_size &&
          disable_stored_index_definition == o.disable_stored_index_definition &&
          deleted_blobs_collection_enabled == o.deleted_blobs_collection_enabled &&
          prop_index_cleaner_interval_in_secs == o.prop_index_cleaner_interval_in_secs &&
          enable_single_blob_index_files == o.enable_single_blob_index_files
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [disabled, debug, local_index_dir, enable_open_index_async, thread_pool_size, prefetch_index_files, extracted_text_cache_size_in_mb, extracted_text_cache_expiry_in_secs, always_use_pre_extracted_cache, boolean_clause_limit, enable_hybrid_indexing, hybrid_queue_size, disable_stored_index_definition, deleted_blobs_collection_enabled, prop_index_cleaner_interval_in_secs, enable_single_blob_index_files].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
