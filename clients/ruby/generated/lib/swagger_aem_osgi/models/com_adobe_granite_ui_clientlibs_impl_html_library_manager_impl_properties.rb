=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties
    attr_accessor :htmllibmanager_timing

    attr_accessor :htmllibmanager_debug_init_js

    attr_accessor :htmllibmanager_minify

    attr_accessor :htmllibmanager_debug

    attr_accessor :htmllibmanager_gzip

    attr_accessor :htmllibmanager_max_data_uri_size

    attr_accessor :htmllibmanager_maxage

    attr_accessor :htmllibmanager_force_cq_url_info

    attr_accessor :htmllibmanager_defaultthemename

    attr_accessor :htmllibmanager_defaultuserthemename

    attr_accessor :htmllibmanager_clientmanager

    attr_accessor :htmllibmanager_path_list

    attr_accessor :htmllibmanager_excluded_path_list

    attr_accessor :htmllibmanager_processor_js

    attr_accessor :htmllibmanager_processor_css

    attr_accessor :htmllibmanager_longcache_patterns

    attr_accessor :htmllibmanager_longcache_format

    attr_accessor :htmllibmanager_use_file_system_output_cache

    attr_accessor :htmllibmanager_file_system_output_cache_location

    attr_accessor :htmllibmanager_disable_replacement

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'htmllibmanager_timing' => :'htmllibmanager.timing',
        :'htmllibmanager_debug_init_js' => :'htmllibmanager.debug.init.js',
        :'htmllibmanager_minify' => :'htmllibmanager.minify',
        :'htmllibmanager_debug' => :'htmllibmanager.debug',
        :'htmllibmanager_gzip' => :'htmllibmanager.gzip',
        :'htmllibmanager_max_data_uri_size' => :'htmllibmanager.maxDataUriSize',
        :'htmllibmanager_maxage' => :'htmllibmanager.maxage',
        :'htmllibmanager_force_cq_url_info' => :'htmllibmanager.forceCQUrlInfo',
        :'htmllibmanager_defaultthemename' => :'htmllibmanager.defaultthemename',
        :'htmllibmanager_defaultuserthemename' => :'htmllibmanager.defaultuserthemename',
        :'htmllibmanager_clientmanager' => :'htmllibmanager.clientmanager',
        :'htmllibmanager_path_list' => :'htmllibmanager.path.list',
        :'htmllibmanager_excluded_path_list' => :'htmllibmanager.excluded.path.list',
        :'htmllibmanager_processor_js' => :'htmllibmanager.processor.js',
        :'htmllibmanager_processor_css' => :'htmllibmanager.processor.css',
        :'htmllibmanager_longcache_patterns' => :'htmllibmanager.longcache.patterns',
        :'htmllibmanager_longcache_format' => :'htmllibmanager.longcache.format',
        :'htmllibmanager_use_file_system_output_cache' => :'htmllibmanager.useFileSystemOutputCache',
        :'htmllibmanager_file_system_output_cache_location' => :'htmllibmanager.fileSystemOutputCacheLocation',
        :'htmllibmanager_disable_replacement' => :'htmllibmanager.disable.replacement'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'htmllibmanager_timing' => :'ConfigNodePropertyBoolean',
        :'htmllibmanager_debug_init_js' => :'ConfigNodePropertyString',
        :'htmllibmanager_minify' => :'ConfigNodePropertyBoolean',
        :'htmllibmanager_debug' => :'ConfigNodePropertyBoolean',
        :'htmllibmanager_gzip' => :'ConfigNodePropertyBoolean',
        :'htmllibmanager_max_data_uri_size' => :'ConfigNodePropertyInteger',
        :'htmllibmanager_maxage' => :'ConfigNodePropertyInteger',
        :'htmllibmanager_force_cq_url_info' => :'ConfigNodePropertyBoolean',
        :'htmllibmanager_defaultthemename' => :'ConfigNodePropertyString',
        :'htmllibmanager_defaultuserthemename' => :'ConfigNodePropertyString',
        :'htmllibmanager_clientmanager' => :'ConfigNodePropertyString',
        :'htmllibmanager_path_list' => :'ConfigNodePropertyArray',
        :'htmllibmanager_excluded_path_list' => :'ConfigNodePropertyArray',
        :'htmllibmanager_processor_js' => :'ConfigNodePropertyArray',
        :'htmllibmanager_processor_css' => :'ConfigNodePropertyArray',
        :'htmllibmanager_longcache_patterns' => :'ConfigNodePropertyArray',
        :'htmllibmanager_longcache_format' => :'ConfigNodePropertyString',
        :'htmllibmanager_use_file_system_output_cache' => :'ConfigNodePropertyBoolean',
        :'htmllibmanager_file_system_output_cache_location' => :'ConfigNodePropertyString',
        :'htmllibmanager_disable_replacement' => :'ConfigNodePropertyArray'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'htmllibmanager_timing')
        self.htmllibmanager_timing = attributes[:'htmllibmanager_timing']
      end

      if attributes.key?(:'htmllibmanager_debug_init_js')
        self.htmllibmanager_debug_init_js = attributes[:'htmllibmanager_debug_init_js']
      end

      if attributes.key?(:'htmllibmanager_minify')
        self.htmllibmanager_minify = attributes[:'htmllibmanager_minify']
      end

      if attributes.key?(:'htmllibmanager_debug')
        self.htmllibmanager_debug = attributes[:'htmllibmanager_debug']
      end

      if attributes.key?(:'htmllibmanager_gzip')
        self.htmllibmanager_gzip = attributes[:'htmllibmanager_gzip']
      end

      if attributes.key?(:'htmllibmanager_max_data_uri_size')
        self.htmllibmanager_max_data_uri_size = attributes[:'htmllibmanager_max_data_uri_size']
      end

      if attributes.key?(:'htmllibmanager_maxage')
        self.htmllibmanager_maxage = attributes[:'htmllibmanager_maxage']
      end

      if attributes.key?(:'htmllibmanager_force_cq_url_info')
        self.htmllibmanager_force_cq_url_info = attributes[:'htmllibmanager_force_cq_url_info']
      end

      if attributes.key?(:'htmllibmanager_defaultthemename')
        self.htmllibmanager_defaultthemename = attributes[:'htmllibmanager_defaultthemename']
      end

      if attributes.key?(:'htmllibmanager_defaultuserthemename')
        self.htmllibmanager_defaultuserthemename = attributes[:'htmllibmanager_defaultuserthemename']
      end

      if attributes.key?(:'htmllibmanager_clientmanager')
        self.htmllibmanager_clientmanager = attributes[:'htmllibmanager_clientmanager']
      end

      if attributes.key?(:'htmllibmanager_path_list')
        self.htmllibmanager_path_list = attributes[:'htmllibmanager_path_list']
      end

      if attributes.key?(:'htmllibmanager_excluded_path_list')
        self.htmllibmanager_excluded_path_list = attributes[:'htmllibmanager_excluded_path_list']
      end

      if attributes.key?(:'htmllibmanager_processor_js')
        self.htmllibmanager_processor_js = attributes[:'htmllibmanager_processor_js']
      end

      if attributes.key?(:'htmllibmanager_processor_css')
        self.htmllibmanager_processor_css = attributes[:'htmllibmanager_processor_css']
      end

      if attributes.key?(:'htmllibmanager_longcache_patterns')
        self.htmllibmanager_longcache_patterns = attributes[:'htmllibmanager_longcache_patterns']
      end

      if attributes.key?(:'htmllibmanager_longcache_format')
        self.htmllibmanager_longcache_format = attributes[:'htmllibmanager_longcache_format']
      end

      if attributes.key?(:'htmllibmanager_use_file_system_output_cache')
        self.htmllibmanager_use_file_system_output_cache = attributes[:'htmllibmanager_use_file_system_output_cache']
      end

      if attributes.key?(:'htmllibmanager_file_system_output_cache_location')
        self.htmllibmanager_file_system_output_cache_location = attributes[:'htmllibmanager_file_system_output_cache_location']
      end

      if attributes.key?(:'htmllibmanager_disable_replacement')
        self.htmllibmanager_disable_replacement = attributes[:'htmllibmanager_disable_replacement']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          htmllibmanager_timing == o.htmllibmanager_timing &&
          htmllibmanager_debug_init_js == o.htmllibmanager_debug_init_js &&
          htmllibmanager_minify == o.htmllibmanager_minify &&
          htmllibmanager_debug == o.htmllibmanager_debug &&
          htmllibmanager_gzip == o.htmllibmanager_gzip &&
          htmllibmanager_max_data_uri_size == o.htmllibmanager_max_data_uri_size &&
          htmllibmanager_maxage == o.htmllibmanager_maxage &&
          htmllibmanager_force_cq_url_info == o.htmllibmanager_force_cq_url_info &&
          htmllibmanager_defaultthemename == o.htmllibmanager_defaultthemename &&
          htmllibmanager_defaultuserthemename == o.htmllibmanager_defaultuserthemename &&
          htmllibmanager_clientmanager == o.htmllibmanager_clientmanager &&
          htmllibmanager_path_list == o.htmllibmanager_path_list &&
          htmllibmanager_excluded_path_list == o.htmllibmanager_excluded_path_list &&
          htmllibmanager_processor_js == o.htmllibmanager_processor_js &&
          htmllibmanager_processor_css == o.htmllibmanager_processor_css &&
          htmllibmanager_longcache_patterns == o.htmllibmanager_longcache_patterns &&
          htmllibmanager_longcache_format == o.htmllibmanager_longcache_format &&
          htmllibmanager_use_file_system_output_cache == o.htmllibmanager_use_file_system_output_cache &&
          htmllibmanager_file_system_output_cache_location == o.htmllibmanager_file_system_output_cache_location &&
          htmllibmanager_disable_replacement == o.htmllibmanager_disable_replacement
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [htmllibmanager_timing, htmllibmanager_debug_init_js, htmllibmanager_minify, htmllibmanager_debug, htmllibmanager_gzip, htmllibmanager_max_data_uri_size, htmllibmanager_maxage, htmllibmanager_force_cq_url_info, htmllibmanager_defaultthemename, htmllibmanager_defaultuserthemename, htmllibmanager_clientmanager, htmllibmanager_path_list, htmllibmanager_excluded_path_list, htmllibmanager_processor_js, htmllibmanager_processor_css, htmllibmanager_longcache_patterns, htmllibmanager_longcache_format, htmllibmanager_use_file_system_output_cache, htmllibmanager_file_system_output_cache_location, htmllibmanager_disable_replacement].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
