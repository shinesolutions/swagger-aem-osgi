=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties
    attr_accessor :provider_name

    attr_accessor :host_name

    attr_accessor :host_port

    attr_accessor :host_ssl

    attr_accessor :host_tls

    attr_accessor :host_no_cert_check

    attr_accessor :bind_dn

    attr_accessor :bind_password

    attr_accessor :search_timeout

    attr_accessor :admin_pool_max_active

    attr_accessor :admin_pool_lookup_on_validate

    attr_accessor :user_pool_max_active

    attr_accessor :user_pool_lookup_on_validate

    attr_accessor :user_base_dn

    attr_accessor :user_objectclass

    attr_accessor :user_id_attribute

    attr_accessor :user_extra_filter

    attr_accessor :user_make_dn_path

    attr_accessor :group_base_dn

    attr_accessor :group_objectclass

    attr_accessor :group_name_attribute

    attr_accessor :group_extra_filter

    attr_accessor :group_make_dn_path

    attr_accessor :group_member_attribute

    attr_accessor :use_uid_for_ext_id

    attr_accessor :customattributes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'provider_name' => :'provider.name',
        :'host_name' => :'host.name',
        :'host_port' => :'host.port',
        :'host_ssl' => :'host.ssl',
        :'host_tls' => :'host.tls',
        :'host_no_cert_check' => :'host.noCertCheck',
        :'bind_dn' => :'bind.dn',
        :'bind_password' => :'bind.password',
        :'search_timeout' => :'searchTimeout',
        :'admin_pool_max_active' => :'adminPool.maxActive',
        :'admin_pool_lookup_on_validate' => :'adminPool.lookupOnValidate',
        :'user_pool_max_active' => :'userPool.maxActive',
        :'user_pool_lookup_on_validate' => :'userPool.lookupOnValidate',
        :'user_base_dn' => :'user.baseDN',
        :'user_objectclass' => :'user.objectclass',
        :'user_id_attribute' => :'user.idAttribute',
        :'user_extra_filter' => :'user.extraFilter',
        :'user_make_dn_path' => :'user.makeDnPath',
        :'group_base_dn' => :'group.baseDN',
        :'group_objectclass' => :'group.objectclass',
        :'group_name_attribute' => :'group.nameAttribute',
        :'group_extra_filter' => :'group.extraFilter',
        :'group_make_dn_path' => :'group.makeDnPath',
        :'group_member_attribute' => :'group.memberAttribute',
        :'use_uid_for_ext_id' => :'useUidForExtId',
        :'customattributes' => :'customattributes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'provider_name' => :'ConfigNodePropertyString',
        :'host_name' => :'ConfigNodePropertyString',
        :'host_port' => :'ConfigNodePropertyInteger',
        :'host_ssl' => :'ConfigNodePropertyBoolean',
        :'host_tls' => :'ConfigNodePropertyBoolean',
        :'host_no_cert_check' => :'ConfigNodePropertyBoolean',
        :'bind_dn' => :'ConfigNodePropertyString',
        :'bind_password' => :'ConfigNodePropertyString',
        :'search_timeout' => :'ConfigNodePropertyString',
        :'admin_pool_max_active' => :'ConfigNodePropertyInteger',
        :'admin_pool_lookup_on_validate' => :'ConfigNodePropertyBoolean',
        :'user_pool_max_active' => :'ConfigNodePropertyInteger',
        :'user_pool_lookup_on_validate' => :'ConfigNodePropertyBoolean',
        :'user_base_dn' => :'ConfigNodePropertyString',
        :'user_objectclass' => :'ConfigNodePropertyArray',
        :'user_id_attribute' => :'ConfigNodePropertyString',
        :'user_extra_filter' => :'ConfigNodePropertyString',
        :'user_make_dn_path' => :'ConfigNodePropertyBoolean',
        :'group_base_dn' => :'ConfigNodePropertyString',
        :'group_objectclass' => :'ConfigNodePropertyArray',
        :'group_name_attribute' => :'ConfigNodePropertyString',
        :'group_extra_filter' => :'ConfigNodePropertyString',
        :'group_make_dn_path' => :'ConfigNodePropertyBoolean',
        :'group_member_attribute' => :'ConfigNodePropertyString',
        :'use_uid_for_ext_id' => :'ConfigNodePropertyBoolean',
        :'customattributes' => :'ConfigNodePropertyArray'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'provider_name')
        self.provider_name = attributes[:'provider_name']
      end

      if attributes.key?(:'host_name')
        self.host_name = attributes[:'host_name']
      end

      if attributes.key?(:'host_port')
        self.host_port = attributes[:'host_port']
      end

      if attributes.key?(:'host_ssl')
        self.host_ssl = attributes[:'host_ssl']
      end

      if attributes.key?(:'host_tls')
        self.host_tls = attributes[:'host_tls']
      end

      if attributes.key?(:'host_no_cert_check')
        self.host_no_cert_check = attributes[:'host_no_cert_check']
      end

      if attributes.key?(:'bind_dn')
        self.bind_dn = attributes[:'bind_dn']
      end

      if attributes.key?(:'bind_password')
        self.bind_password = attributes[:'bind_password']
      end

      if attributes.key?(:'search_timeout')
        self.search_timeout = attributes[:'search_timeout']
      end

      if attributes.key?(:'admin_pool_max_active')
        self.admin_pool_max_active = attributes[:'admin_pool_max_active']
      end

      if attributes.key?(:'admin_pool_lookup_on_validate')
        self.admin_pool_lookup_on_validate = attributes[:'admin_pool_lookup_on_validate']
      end

      if attributes.key?(:'user_pool_max_active')
        self.user_pool_max_active = attributes[:'user_pool_max_active']
      end

      if attributes.key?(:'user_pool_lookup_on_validate')
        self.user_pool_lookup_on_validate = attributes[:'user_pool_lookup_on_validate']
      end

      if attributes.key?(:'user_base_dn')
        self.user_base_dn = attributes[:'user_base_dn']
      end

      if attributes.key?(:'user_objectclass')
        self.user_objectclass = attributes[:'user_objectclass']
      end

      if attributes.key?(:'user_id_attribute')
        self.user_id_attribute = attributes[:'user_id_attribute']
      end

      if attributes.key?(:'user_extra_filter')
        self.user_extra_filter = attributes[:'user_extra_filter']
      end

      if attributes.key?(:'user_make_dn_path')
        self.user_make_dn_path = attributes[:'user_make_dn_path']
      end

      if attributes.key?(:'group_base_dn')
        self.group_base_dn = attributes[:'group_base_dn']
      end

      if attributes.key?(:'group_objectclass')
        self.group_objectclass = attributes[:'group_objectclass']
      end

      if attributes.key?(:'group_name_attribute')
        self.group_name_attribute = attributes[:'group_name_attribute']
      end

      if attributes.key?(:'group_extra_filter')
        self.group_extra_filter = attributes[:'group_extra_filter']
      end

      if attributes.key?(:'group_make_dn_path')
        self.group_make_dn_path = attributes[:'group_make_dn_path']
      end

      if attributes.key?(:'group_member_attribute')
        self.group_member_attribute = attributes[:'group_member_attribute']
      end

      if attributes.key?(:'use_uid_for_ext_id')
        self.use_uid_for_ext_id = attributes[:'use_uid_for_ext_id']
      end

      if attributes.key?(:'customattributes')
        self.customattributes = attributes[:'customattributes']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          provider_name == o.provider_name &&
          host_name == o.host_name &&
          host_port == o.host_port &&
          host_ssl == o.host_ssl &&
          host_tls == o.host_tls &&
          host_no_cert_check == o.host_no_cert_check &&
          bind_dn == o.bind_dn &&
          bind_password == o.bind_password &&
          search_timeout == o.search_timeout &&
          admin_pool_max_active == o.admin_pool_max_active &&
          admin_pool_lookup_on_validate == o.admin_pool_lookup_on_validate &&
          user_pool_max_active == o.user_pool_max_active &&
          user_pool_lookup_on_validate == o.user_pool_lookup_on_validate &&
          user_base_dn == o.user_base_dn &&
          user_objectclass == o.user_objectclass &&
          user_id_attribute == o.user_id_attribute &&
          user_extra_filter == o.user_extra_filter &&
          user_make_dn_path == o.user_make_dn_path &&
          group_base_dn == o.group_base_dn &&
          group_objectclass == o.group_objectclass &&
          group_name_attribute == o.group_name_attribute &&
          group_extra_filter == o.group_extra_filter &&
          group_make_dn_path == o.group_make_dn_path &&
          group_member_attribute == o.group_member_attribute &&
          use_uid_for_ext_id == o.use_uid_for_ext_id &&
          customattributes == o.customattributes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [provider_name, host_name, host_port, host_ssl, host_tls, host_no_cert_check, bind_dn, bind_password, search_timeout, admin_pool_max_active, admin_pool_lookup_on_validate, user_pool_max_active, user_pool_lookup_on_validate, user_base_dn, user_objectclass, user_id_attribute, user_extra_filter, user_make_dn_path, group_base_dn, group_objectclass, group_name_attribute, group_extra_filter, group_make_dn_path, group_member_attribute, use_uid_for_ext_id, customattributes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
