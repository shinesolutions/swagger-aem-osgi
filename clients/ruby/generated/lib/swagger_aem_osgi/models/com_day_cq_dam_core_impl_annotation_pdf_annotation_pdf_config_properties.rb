=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties
    attr_accessor :cq_dam_config_annotation_pdf_document_width

    attr_accessor :cq_dam_config_annotation_pdf_document_height

    attr_accessor :cq_dam_config_annotation_pdf_document_padding_horizontal

    attr_accessor :cq_dam_config_annotation_pdf_document_padding_vertical

    attr_accessor :cq_dam_config_annotation_pdf_font_size

    attr_accessor :cq_dam_config_annotation_pdf_font_color

    attr_accessor :cq_dam_config_annotation_pdf_font_family

    attr_accessor :cq_dam_config_annotation_pdf_font_light

    attr_accessor :cq_dam_config_annotation_pdf_margin_text_image

    attr_accessor :cq_dam_config_annotation_pdf_min_image_height

    attr_accessor :cq_dam_config_annotation_pdf_review_status_width

    attr_accessor :cq_dam_config_annotation_pdf_review_status_color_approved

    attr_accessor :cq_dam_config_annotation_pdf_review_status_color_rejected

    attr_accessor :cq_dam_config_annotation_pdf_review_status_color_changes_requested

    attr_accessor :cq_dam_config_annotation_pdf_annotation_marker_width

    attr_accessor :cq_dam_config_annotation_pdf_asset_minheight

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cq_dam_config_annotation_pdf_document_width' => :'cq.dam.config.annotation.pdf.document.width',
        :'cq_dam_config_annotation_pdf_document_height' => :'cq.dam.config.annotation.pdf.document.height',
        :'cq_dam_config_annotation_pdf_document_padding_horizontal' => :'cq.dam.config.annotation.pdf.document.padding.horizontal',
        :'cq_dam_config_annotation_pdf_document_padding_vertical' => :'cq.dam.config.annotation.pdf.document.padding.vertical',
        :'cq_dam_config_annotation_pdf_font_size' => :'cq.dam.config.annotation.pdf.font.size',
        :'cq_dam_config_annotation_pdf_font_color' => :'cq.dam.config.annotation.pdf.font.color',
        :'cq_dam_config_annotation_pdf_font_family' => :'cq.dam.config.annotation.pdf.font.family',
        :'cq_dam_config_annotation_pdf_font_light' => :'cq.dam.config.annotation.pdf.font.light',
        :'cq_dam_config_annotation_pdf_margin_text_image' => :'cq.dam.config.annotation.pdf.marginTextImage',
        :'cq_dam_config_annotation_pdf_min_image_height' => :'cq.dam.config.annotation.pdf.minImageHeight',
        :'cq_dam_config_annotation_pdf_review_status_width' => :'cq.dam.config.annotation.pdf.reviewStatus.width',
        :'cq_dam_config_annotation_pdf_review_status_color_approved' => :'cq.dam.config.annotation.pdf.reviewStatus.color.approved',
        :'cq_dam_config_annotation_pdf_review_status_color_rejected' => :'cq.dam.config.annotation.pdf.reviewStatus.color.rejected',
        :'cq_dam_config_annotation_pdf_review_status_color_changes_requested' => :'cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested',
        :'cq_dam_config_annotation_pdf_annotation_marker_width' => :'cq.dam.config.annotation.pdf.annotationMarker.width',
        :'cq_dam_config_annotation_pdf_asset_minheight' => :'cq.dam.config.annotation.pdf.asset.minheight'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cq_dam_config_annotation_pdf_document_width' => :'ConfigNodePropertyInteger',
        :'cq_dam_config_annotation_pdf_document_height' => :'ConfigNodePropertyInteger',
        :'cq_dam_config_annotation_pdf_document_padding_horizontal' => :'ConfigNodePropertyInteger',
        :'cq_dam_config_annotation_pdf_document_padding_vertical' => :'ConfigNodePropertyInteger',
        :'cq_dam_config_annotation_pdf_font_size' => :'ConfigNodePropertyInteger',
        :'cq_dam_config_annotation_pdf_font_color' => :'ConfigNodePropertyString',
        :'cq_dam_config_annotation_pdf_font_family' => :'ConfigNodePropertyString',
        :'cq_dam_config_annotation_pdf_font_light' => :'ConfigNodePropertyString',
        :'cq_dam_config_annotation_pdf_margin_text_image' => :'ConfigNodePropertyInteger',
        :'cq_dam_config_annotation_pdf_min_image_height' => :'ConfigNodePropertyInteger',
        :'cq_dam_config_annotation_pdf_review_status_width' => :'ConfigNodePropertyInteger',
        :'cq_dam_config_annotation_pdf_review_status_color_approved' => :'ConfigNodePropertyString',
        :'cq_dam_config_annotation_pdf_review_status_color_rejected' => :'ConfigNodePropertyString',
        :'cq_dam_config_annotation_pdf_review_status_color_changes_requested' => :'ConfigNodePropertyString',
        :'cq_dam_config_annotation_pdf_annotation_marker_width' => :'ConfigNodePropertyInteger',
        :'cq_dam_config_annotation_pdf_asset_minheight' => :'ConfigNodePropertyInteger'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cq_dam_config_annotation_pdf_document_width')
        self.cq_dam_config_annotation_pdf_document_width = attributes[:'cq_dam_config_annotation_pdf_document_width']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_document_height')
        self.cq_dam_config_annotation_pdf_document_height = attributes[:'cq_dam_config_annotation_pdf_document_height']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_document_padding_horizontal')
        self.cq_dam_config_annotation_pdf_document_padding_horizontal = attributes[:'cq_dam_config_annotation_pdf_document_padding_horizontal']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_document_padding_vertical')
        self.cq_dam_config_annotation_pdf_document_padding_vertical = attributes[:'cq_dam_config_annotation_pdf_document_padding_vertical']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_font_size')
        self.cq_dam_config_annotation_pdf_font_size = attributes[:'cq_dam_config_annotation_pdf_font_size']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_font_color')
        self.cq_dam_config_annotation_pdf_font_color = attributes[:'cq_dam_config_annotation_pdf_font_color']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_font_family')
        self.cq_dam_config_annotation_pdf_font_family = attributes[:'cq_dam_config_annotation_pdf_font_family']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_font_light')
        self.cq_dam_config_annotation_pdf_font_light = attributes[:'cq_dam_config_annotation_pdf_font_light']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_margin_text_image')
        self.cq_dam_config_annotation_pdf_margin_text_image = attributes[:'cq_dam_config_annotation_pdf_margin_text_image']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_min_image_height')
        self.cq_dam_config_annotation_pdf_min_image_height = attributes[:'cq_dam_config_annotation_pdf_min_image_height']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_review_status_width')
        self.cq_dam_config_annotation_pdf_review_status_width = attributes[:'cq_dam_config_annotation_pdf_review_status_width']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_review_status_color_approved')
        self.cq_dam_config_annotation_pdf_review_status_color_approved = attributes[:'cq_dam_config_annotation_pdf_review_status_color_approved']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_review_status_color_rejected')
        self.cq_dam_config_annotation_pdf_review_status_color_rejected = attributes[:'cq_dam_config_annotation_pdf_review_status_color_rejected']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_review_status_color_changes_requested')
        self.cq_dam_config_annotation_pdf_review_status_color_changes_requested = attributes[:'cq_dam_config_annotation_pdf_review_status_color_changes_requested']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_annotation_marker_width')
        self.cq_dam_config_annotation_pdf_annotation_marker_width = attributes[:'cq_dam_config_annotation_pdf_annotation_marker_width']
      end

      if attributes.key?(:'cq_dam_config_annotation_pdf_asset_minheight')
        self.cq_dam_config_annotation_pdf_asset_minheight = attributes[:'cq_dam_config_annotation_pdf_asset_minheight']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cq_dam_config_annotation_pdf_document_width == o.cq_dam_config_annotation_pdf_document_width &&
          cq_dam_config_annotation_pdf_document_height == o.cq_dam_config_annotation_pdf_document_height &&
          cq_dam_config_annotation_pdf_document_padding_horizontal == o.cq_dam_config_annotation_pdf_document_padding_horizontal &&
          cq_dam_config_annotation_pdf_document_padding_vertical == o.cq_dam_config_annotation_pdf_document_padding_vertical &&
          cq_dam_config_annotation_pdf_font_size == o.cq_dam_config_annotation_pdf_font_size &&
          cq_dam_config_annotation_pdf_font_color == o.cq_dam_config_annotation_pdf_font_color &&
          cq_dam_config_annotation_pdf_font_family == o.cq_dam_config_annotation_pdf_font_family &&
          cq_dam_config_annotation_pdf_font_light == o.cq_dam_config_annotation_pdf_font_light &&
          cq_dam_config_annotation_pdf_margin_text_image == o.cq_dam_config_annotation_pdf_margin_text_image &&
          cq_dam_config_annotation_pdf_min_image_height == o.cq_dam_config_annotation_pdf_min_image_height &&
          cq_dam_config_annotation_pdf_review_status_width == o.cq_dam_config_annotation_pdf_review_status_width &&
          cq_dam_config_annotation_pdf_review_status_color_approved == o.cq_dam_config_annotation_pdf_review_status_color_approved &&
          cq_dam_config_annotation_pdf_review_status_color_rejected == o.cq_dam_config_annotation_pdf_review_status_color_rejected &&
          cq_dam_config_annotation_pdf_review_status_color_changes_requested == o.cq_dam_config_annotation_pdf_review_status_color_changes_requested &&
          cq_dam_config_annotation_pdf_annotation_marker_width == o.cq_dam_config_annotation_pdf_annotation_marker_width &&
          cq_dam_config_annotation_pdf_asset_minheight == o.cq_dam_config_annotation_pdf_asset_minheight
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cq_dam_config_annotation_pdf_document_width, cq_dam_config_annotation_pdf_document_height, cq_dam_config_annotation_pdf_document_padding_horizontal, cq_dam_config_annotation_pdf_document_padding_vertical, cq_dam_config_annotation_pdf_font_size, cq_dam_config_annotation_pdf_font_color, cq_dam_config_annotation_pdf_font_family, cq_dam_config_annotation_pdf_font_light, cq_dam_config_annotation_pdf_margin_text_image, cq_dam_config_annotation_pdf_min_image_height, cq_dam_config_annotation_pdf_review_status_width, cq_dam_config_annotation_pdf_review_status_color_approved, cq_dam_config_annotation_pdf_review_status_color_rejected, cq_dam_config_annotation_pdf_review_status_color_changes_requested, cq_dam_config_annotation_pdf_annotation_marker_width, cq_dam_config_annotation_pdf_asset_minheight].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
