=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
    attr_accessor :enabled

    attr_accessor :interval_seconds

    attr_accessor :commits_per_interval_threshold

    attr_accessor :max_location_length

    attr_accessor :max_details_shown

    attr_accessor :min_details_percentage

    attr_accessor :thread_matchers

    attr_accessor :max_greedy_depth

    attr_accessor :greedy_stack_matchers

    attr_accessor :stack_filters

    attr_accessor :stack_matchers

    attr_accessor :stack_categorizers

    attr_accessor :stack_shorteners

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enabled' => :'enabled',
        :'interval_seconds' => :'intervalSeconds',
        :'commits_per_interval_threshold' => :'commitsPerIntervalThreshold',
        :'max_location_length' => :'maxLocationLength',
        :'max_details_shown' => :'maxDetailsShown',
        :'min_details_percentage' => :'minDetailsPercentage',
        :'thread_matchers' => :'threadMatchers',
        :'max_greedy_depth' => :'maxGreedyDepth',
        :'greedy_stack_matchers' => :'greedyStackMatchers',
        :'stack_filters' => :'stackFilters',
        :'stack_matchers' => :'stackMatchers',
        :'stack_categorizers' => :'stackCategorizers',
        :'stack_shorteners' => :'stackShorteners'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'enabled' => :'ConfigNodePropertyBoolean',
        :'interval_seconds' => :'ConfigNodePropertyInteger',
        :'commits_per_interval_threshold' => :'ConfigNodePropertyInteger',
        :'max_location_length' => :'ConfigNodePropertyInteger',
        :'max_details_shown' => :'ConfigNodePropertyInteger',
        :'min_details_percentage' => :'ConfigNodePropertyInteger',
        :'thread_matchers' => :'ConfigNodePropertyArray',
        :'max_greedy_depth' => :'ConfigNodePropertyInteger',
        :'greedy_stack_matchers' => :'ConfigNodePropertyString',
        :'stack_filters' => :'ConfigNodePropertyArray',
        :'stack_matchers' => :'ConfigNodePropertyArray',
        :'stack_categorizers' => :'ConfigNodePropertyArray',
        :'stack_shorteners' => :'ConfigNodePropertyArray'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::ComAdobeGraniteRepositoryImplCommitStatsConfigProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::ComAdobeGraniteRepositoryImplCommitStatsConfigProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'interval_seconds')
        self.interval_seconds = attributes[:'interval_seconds']
      end

      if attributes.key?(:'commits_per_interval_threshold')
        self.commits_per_interval_threshold = attributes[:'commits_per_interval_threshold']
      end

      if attributes.key?(:'max_location_length')
        self.max_location_length = attributes[:'max_location_length']
      end

      if attributes.key?(:'max_details_shown')
        self.max_details_shown = attributes[:'max_details_shown']
      end

      if attributes.key?(:'min_details_percentage')
        self.min_details_percentage = attributes[:'min_details_percentage']
      end

      if attributes.key?(:'thread_matchers')
        self.thread_matchers = attributes[:'thread_matchers']
      end

      if attributes.key?(:'max_greedy_depth')
        self.max_greedy_depth = attributes[:'max_greedy_depth']
      end

      if attributes.key?(:'greedy_stack_matchers')
        self.greedy_stack_matchers = attributes[:'greedy_stack_matchers']
      end

      if attributes.key?(:'stack_filters')
        self.stack_filters = attributes[:'stack_filters']
      end

      if attributes.key?(:'stack_matchers')
        self.stack_matchers = attributes[:'stack_matchers']
      end

      if attributes.key?(:'stack_categorizers')
        self.stack_categorizers = attributes[:'stack_categorizers']
      end

      if attributes.key?(:'stack_shorteners')
        self.stack_shorteners = attributes[:'stack_shorteners']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enabled == o.enabled &&
          interval_seconds == o.interval_seconds &&
          commits_per_interval_threshold == o.commits_per_interval_threshold &&
          max_location_length == o.max_location_length &&
          max_details_shown == o.max_details_shown &&
          min_details_percentage == o.min_details_percentage &&
          thread_matchers == o.thread_matchers &&
          max_greedy_depth == o.max_greedy_depth &&
          greedy_stack_matchers == o.greedy_stack_matchers &&
          stack_filters == o.stack_filters &&
          stack_matchers == o.stack_matchers &&
          stack_categorizers == o.stack_categorizers &&
          stack_shorteners == o.stack_shorteners
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [enabled, interval_seconds, commits_per_interval_threshold, max_location_length, max_details_shown, min_details_percentage, thread_matchers, max_greedy_depth, greedy_stack_matchers, stack_filters, stack_matchers, stack_categorizers, stack_shorteners].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
