=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class OrgApacheSlingDiscoveryOakConfigProperties
    attr_accessor :connector_ping_timeout

    attr_accessor :connector_ping_interval

    attr_accessor :discovery_lite_check_interval

    attr_accessor :cluster_sync_service_timeout

    attr_accessor :cluster_sync_service_interval

    attr_accessor :enable_sync_token

    attr_accessor :min_event_delay

    attr_accessor :socket_connect_timeout

    attr_accessor :so_timeout

    attr_accessor :topology_connector_urls

    attr_accessor :topology_connector_whitelist

    attr_accessor :auto_stop_local_loop_enabled

    attr_accessor :gzip_connector_requests_enabled

    attr_accessor :hmac_enabled

    attr_accessor :enable_encryption

    attr_accessor :shared_key

    attr_accessor :hmac_shared_key_ttl

    attr_accessor :backoff_standby_factor

    attr_accessor :backoff_stable_factor

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'connector_ping_timeout' => :'connectorPingTimeout',
        :'connector_ping_interval' => :'connectorPingInterval',
        :'discovery_lite_check_interval' => :'discoveryLiteCheckInterval',
        :'cluster_sync_service_timeout' => :'clusterSyncServiceTimeout',
        :'cluster_sync_service_interval' => :'clusterSyncServiceInterval',
        :'enable_sync_token' => :'enableSyncToken',
        :'min_event_delay' => :'minEventDelay',
        :'socket_connect_timeout' => :'socketConnectTimeout',
        :'so_timeout' => :'soTimeout',
        :'topology_connector_urls' => :'topologyConnectorUrls',
        :'topology_connector_whitelist' => :'topologyConnectorWhitelist',
        :'auto_stop_local_loop_enabled' => :'autoStopLocalLoopEnabled',
        :'gzip_connector_requests_enabled' => :'gzipConnectorRequestsEnabled',
        :'hmac_enabled' => :'hmacEnabled',
        :'enable_encryption' => :'enableEncryption',
        :'shared_key' => :'sharedKey',
        :'hmac_shared_key_ttl' => :'hmacSharedKeyTTL',
        :'backoff_standby_factor' => :'backoffStandbyFactor',
        :'backoff_stable_factor' => :'backoffStableFactor'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'connector_ping_timeout' => :'ConfigNodePropertyInteger',
        :'connector_ping_interval' => :'ConfigNodePropertyInteger',
        :'discovery_lite_check_interval' => :'ConfigNodePropertyInteger',
        :'cluster_sync_service_timeout' => :'ConfigNodePropertyInteger',
        :'cluster_sync_service_interval' => :'ConfigNodePropertyInteger',
        :'enable_sync_token' => :'ConfigNodePropertyBoolean',
        :'min_event_delay' => :'ConfigNodePropertyInteger',
        :'socket_connect_timeout' => :'ConfigNodePropertyInteger',
        :'so_timeout' => :'ConfigNodePropertyInteger',
        :'topology_connector_urls' => :'ConfigNodePropertyArray',
        :'topology_connector_whitelist' => :'ConfigNodePropertyArray',
        :'auto_stop_local_loop_enabled' => :'ConfigNodePropertyBoolean',
        :'gzip_connector_requests_enabled' => :'ConfigNodePropertyBoolean',
        :'hmac_enabled' => :'ConfigNodePropertyBoolean',
        :'enable_encryption' => :'ConfigNodePropertyBoolean',
        :'shared_key' => :'ConfigNodePropertyString',
        :'hmac_shared_key_ttl' => :'ConfigNodePropertyInteger',
        :'backoff_standby_factor' => :'ConfigNodePropertyString',
        :'backoff_stable_factor' => :'ConfigNodePropertyString'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::OrgApacheSlingDiscoveryOakConfigProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::OrgApacheSlingDiscoveryOakConfigProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'connector_ping_timeout')
        self.connector_ping_timeout = attributes[:'connector_ping_timeout']
      end

      if attributes.key?(:'connector_ping_interval')
        self.connector_ping_interval = attributes[:'connector_ping_interval']
      end

      if attributes.key?(:'discovery_lite_check_interval')
        self.discovery_lite_check_interval = attributes[:'discovery_lite_check_interval']
      end

      if attributes.key?(:'cluster_sync_service_timeout')
        self.cluster_sync_service_timeout = attributes[:'cluster_sync_service_timeout']
      end

      if attributes.key?(:'cluster_sync_service_interval')
        self.cluster_sync_service_interval = attributes[:'cluster_sync_service_interval']
      end

      if attributes.key?(:'enable_sync_token')
        self.enable_sync_token = attributes[:'enable_sync_token']
      end

      if attributes.key?(:'min_event_delay')
        self.min_event_delay = attributes[:'min_event_delay']
      end

      if attributes.key?(:'socket_connect_timeout')
        self.socket_connect_timeout = attributes[:'socket_connect_timeout']
      end

      if attributes.key?(:'so_timeout')
        self.so_timeout = attributes[:'so_timeout']
      end

      if attributes.key?(:'topology_connector_urls')
        self.topology_connector_urls = attributes[:'topology_connector_urls']
      end

      if attributes.key?(:'topology_connector_whitelist')
        self.topology_connector_whitelist = attributes[:'topology_connector_whitelist']
      end

      if attributes.key?(:'auto_stop_local_loop_enabled')
        self.auto_stop_local_loop_enabled = attributes[:'auto_stop_local_loop_enabled']
      end

      if attributes.key?(:'gzip_connector_requests_enabled')
        self.gzip_connector_requests_enabled = attributes[:'gzip_connector_requests_enabled']
      end

      if attributes.key?(:'hmac_enabled')
        self.hmac_enabled = attributes[:'hmac_enabled']
      end

      if attributes.key?(:'enable_encryption')
        self.enable_encryption = attributes[:'enable_encryption']
      end

      if attributes.key?(:'shared_key')
        self.shared_key = attributes[:'shared_key']
      end

      if attributes.key?(:'hmac_shared_key_ttl')
        self.hmac_shared_key_ttl = attributes[:'hmac_shared_key_ttl']
      end

      if attributes.key?(:'backoff_standby_factor')
        self.backoff_standby_factor = attributes[:'backoff_standby_factor']
      end

      if attributes.key?(:'backoff_stable_factor')
        self.backoff_stable_factor = attributes[:'backoff_stable_factor']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          connector_ping_timeout == o.connector_ping_timeout &&
          connector_ping_interval == o.connector_ping_interval &&
          discovery_lite_check_interval == o.discovery_lite_check_interval &&
          cluster_sync_service_timeout == o.cluster_sync_service_timeout &&
          cluster_sync_service_interval == o.cluster_sync_service_interval &&
          enable_sync_token == o.enable_sync_token &&
          min_event_delay == o.min_event_delay &&
          socket_connect_timeout == o.socket_connect_timeout &&
          so_timeout == o.so_timeout &&
          topology_connector_urls == o.topology_connector_urls &&
          topology_connector_whitelist == o.topology_connector_whitelist &&
          auto_stop_local_loop_enabled == o.auto_stop_local_loop_enabled &&
          gzip_connector_requests_enabled == o.gzip_connector_requests_enabled &&
          hmac_enabled == o.hmac_enabled &&
          enable_encryption == o.enable_encryption &&
          shared_key == o.shared_key &&
          hmac_shared_key_ttl == o.hmac_shared_key_ttl &&
          backoff_standby_factor == o.backoff_standby_factor &&
          backoff_stable_factor == o.backoff_stable_factor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [connector_ping_timeout, connector_ping_interval, discovery_lite_check_interval, cluster_sync_service_timeout, cluster_sync_service_interval, enable_sync_token, min_event_delay, socket_connect_timeout, so_timeout, topology_connector_urls, topology_connector_whitelist, auto_stop_local_loop_enabled, gzip_connector_requests_enabled, hmac_enabled, enable_encryption, shared_key, hmac_shared_key_ttl, backoff_standby_factor, backoff_stable_factor].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
