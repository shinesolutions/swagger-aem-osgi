=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties
    attr_accessor :path_desc_field

    attr_accessor :path_child_field

    attr_accessor :path_parent_field

    attr_accessor :path_exact_field

    attr_accessor :catch_all_field

    attr_accessor :collapsed_path_field

    attr_accessor :path_depth_field

    attr_accessor :commit_policy

    attr_accessor :rows

    attr_accessor :path_restrictions

    attr_accessor :property_restrictions

    attr_accessor :primarytypes_restrictions

    attr_accessor :ignored_properties

    attr_accessor :used_properties

    attr_accessor :type_mappings

    attr_accessor :property_mappings

    attr_accessor :collapse_jcrcontent_nodes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'path_desc_field' => :'path.desc.field',
        :'path_child_field' => :'path.child.field',
        :'path_parent_field' => :'path.parent.field',
        :'path_exact_field' => :'path.exact.field',
        :'catch_all_field' => :'catch.all.field',
        :'collapsed_path_field' => :'collapsed.path.field',
        :'path_depth_field' => :'path.depth.field',
        :'commit_policy' => :'commit.policy',
        :'rows' => :'rows',
        :'path_restrictions' => :'path.restrictions',
        :'property_restrictions' => :'property.restrictions',
        :'primarytypes_restrictions' => :'primarytypes.restrictions',
        :'ignored_properties' => :'ignored.properties',
        :'used_properties' => :'used.properties',
        :'type_mappings' => :'type.mappings',
        :'property_mappings' => :'property.mappings',
        :'collapse_jcrcontent_nodes' => :'collapse.jcrcontent.nodes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'path_desc_field' => :'ConfigNodePropertyString',
        :'path_child_field' => :'ConfigNodePropertyString',
        :'path_parent_field' => :'ConfigNodePropertyString',
        :'path_exact_field' => :'ConfigNodePropertyString',
        :'catch_all_field' => :'ConfigNodePropertyString',
        :'collapsed_path_field' => :'ConfigNodePropertyString',
        :'path_depth_field' => :'ConfigNodePropertyString',
        :'commit_policy' => :'ConfigNodePropertyDropDown',
        :'rows' => :'ConfigNodePropertyInteger',
        :'path_restrictions' => :'ConfigNodePropertyBoolean',
        :'property_restrictions' => :'ConfigNodePropertyBoolean',
        :'primarytypes_restrictions' => :'ConfigNodePropertyBoolean',
        :'ignored_properties' => :'ConfigNodePropertyArray',
        :'used_properties' => :'ConfigNodePropertyArray',
        :'type_mappings' => :'ConfigNodePropertyArray',
        :'property_mappings' => :'ConfigNodePropertyArray',
        :'collapse_jcrcontent_nodes' => :'ConfigNodePropertyBoolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'path_desc_field')
        self.path_desc_field = attributes[:'path_desc_field']
      end

      if attributes.key?(:'path_child_field')
        self.path_child_field = attributes[:'path_child_field']
      end

      if attributes.key?(:'path_parent_field')
        self.path_parent_field = attributes[:'path_parent_field']
      end

      if attributes.key?(:'path_exact_field')
        self.path_exact_field = attributes[:'path_exact_field']
      end

      if attributes.key?(:'catch_all_field')
        self.catch_all_field = attributes[:'catch_all_field']
      end

      if attributes.key?(:'collapsed_path_field')
        self.collapsed_path_field = attributes[:'collapsed_path_field']
      end

      if attributes.key?(:'path_depth_field')
        self.path_depth_field = attributes[:'path_depth_field']
      end

      if attributes.key?(:'commit_policy')
        self.commit_policy = attributes[:'commit_policy']
      end

      if attributes.key?(:'rows')
        self.rows = attributes[:'rows']
      end

      if attributes.key?(:'path_restrictions')
        self.path_restrictions = attributes[:'path_restrictions']
      end

      if attributes.key?(:'property_restrictions')
        self.property_restrictions = attributes[:'property_restrictions']
      end

      if attributes.key?(:'primarytypes_restrictions')
        self.primarytypes_restrictions = attributes[:'primarytypes_restrictions']
      end

      if attributes.key?(:'ignored_properties')
        self.ignored_properties = attributes[:'ignored_properties']
      end

      if attributes.key?(:'used_properties')
        self.used_properties = attributes[:'used_properties']
      end

      if attributes.key?(:'type_mappings')
        self.type_mappings = attributes[:'type_mappings']
      end

      if attributes.key?(:'property_mappings')
        self.property_mappings = attributes[:'property_mappings']
      end

      if attributes.key?(:'collapse_jcrcontent_nodes')
        self.collapse_jcrcontent_nodes = attributes[:'collapse_jcrcontent_nodes']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          path_desc_field == o.path_desc_field &&
          path_child_field == o.path_child_field &&
          path_parent_field == o.path_parent_field &&
          path_exact_field == o.path_exact_field &&
          catch_all_field == o.catch_all_field &&
          collapsed_path_field == o.collapsed_path_field &&
          path_depth_field == o.path_depth_field &&
          commit_policy == o.commit_policy &&
          rows == o.rows &&
          path_restrictions == o.path_restrictions &&
          property_restrictions == o.property_restrictions &&
          primarytypes_restrictions == o.primarytypes_restrictions &&
          ignored_properties == o.ignored_properties &&
          used_properties == o.used_properties &&
          type_mappings == o.type_mappings &&
          property_mappings == o.property_mappings &&
          collapse_jcrcontent_nodes == o.collapse_jcrcontent_nodes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [path_desc_field, path_child_field, path_parent_field, path_exact_field, catch_all_field, collapsed_path_field, path_depth_field, commit_policy, rows, path_restrictions, property_restrictions, primarytypes_restrictions, ignored_properties, used_properties, type_mappings, property_mappings, collapse_jcrcontent_nodes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
