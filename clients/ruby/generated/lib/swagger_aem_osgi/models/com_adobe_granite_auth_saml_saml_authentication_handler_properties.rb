=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties
    attr_accessor :path

    attr_accessor :service_ranking

    attr_accessor :idp_url

    attr_accessor :idp_cert_alias

    attr_accessor :idp_http_redirect

    attr_accessor :service_provider_entity_id

    attr_accessor :assertion_consumer_service_url

    attr_accessor :sp_private_key_alias

    attr_accessor :key_store_password

    attr_accessor :default_redirect_url

    attr_accessor :user_id_attribute

    attr_accessor :use_encryption

    attr_accessor :create_user

    attr_accessor :user_intermediate_path

    attr_accessor :add_group_memberships

    attr_accessor :group_membership_attribute

    attr_accessor :default_groups

    attr_accessor :name_id_format

    attr_accessor :synchronize_attributes

    attr_accessor :handle_logout

    attr_accessor :logout_url

    attr_accessor :clock_tolerance

    attr_accessor :digest_method

    attr_accessor :signature_method

    attr_accessor :identity_sync_type

    attr_accessor :idp_identifier

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'path' => :'path',
        :'service_ranking' => :'service.ranking',
        :'idp_url' => :'idpUrl',
        :'idp_cert_alias' => :'idpCertAlias',
        :'idp_http_redirect' => :'idpHttpRedirect',
        :'service_provider_entity_id' => :'serviceProviderEntityId',
        :'assertion_consumer_service_url' => :'assertionConsumerServiceURL',
        :'sp_private_key_alias' => :'spPrivateKeyAlias',
        :'key_store_password' => :'keyStorePassword',
        :'default_redirect_url' => :'defaultRedirectUrl',
        :'user_id_attribute' => :'userIDAttribute',
        :'use_encryption' => :'useEncryption',
        :'create_user' => :'createUser',
        :'user_intermediate_path' => :'userIntermediatePath',
        :'add_group_memberships' => :'addGroupMemberships',
        :'group_membership_attribute' => :'groupMembershipAttribute',
        :'default_groups' => :'defaultGroups',
        :'name_id_format' => :'nameIdFormat',
        :'synchronize_attributes' => :'synchronizeAttributes',
        :'handle_logout' => :'handleLogout',
        :'logout_url' => :'logoutUrl',
        :'clock_tolerance' => :'clockTolerance',
        :'digest_method' => :'digestMethod',
        :'signature_method' => :'signatureMethod',
        :'identity_sync_type' => :'identitySyncType',
        :'idp_identifier' => :'idpIdentifier'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'path' => :'ConfigNodePropertyArray',
        :'service_ranking' => :'ConfigNodePropertyInteger',
        :'idp_url' => :'ConfigNodePropertyString',
        :'idp_cert_alias' => :'ConfigNodePropertyString',
        :'idp_http_redirect' => :'ConfigNodePropertyBoolean',
        :'service_provider_entity_id' => :'ConfigNodePropertyString',
        :'assertion_consumer_service_url' => :'ConfigNodePropertyString',
        :'sp_private_key_alias' => :'ConfigNodePropertyString',
        :'key_store_password' => :'ConfigNodePropertyString',
        :'default_redirect_url' => :'ConfigNodePropertyString',
        :'user_id_attribute' => :'ConfigNodePropertyString',
        :'use_encryption' => :'ConfigNodePropertyBoolean',
        :'create_user' => :'ConfigNodePropertyBoolean',
        :'user_intermediate_path' => :'ConfigNodePropertyString',
        :'add_group_memberships' => :'ConfigNodePropertyBoolean',
        :'group_membership_attribute' => :'ConfigNodePropertyString',
        :'default_groups' => :'ConfigNodePropertyArray',
        :'name_id_format' => :'ConfigNodePropertyString',
        :'synchronize_attributes' => :'ConfigNodePropertyArray',
        :'handle_logout' => :'ConfigNodePropertyBoolean',
        :'logout_url' => :'ConfigNodePropertyString',
        :'clock_tolerance' => :'ConfigNodePropertyInteger',
        :'digest_method' => :'ConfigNodePropertyString',
        :'signature_method' => :'ConfigNodePropertyString',
        :'identity_sync_type' => :'ConfigNodePropertyDropDown',
        :'idp_identifier' => :'ConfigNodePropertyString'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::ComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.key?(:'service_ranking')
        self.service_ranking = attributes[:'service_ranking']
      end

      if attributes.key?(:'idp_url')
        self.idp_url = attributes[:'idp_url']
      end

      if attributes.key?(:'idp_cert_alias')
        self.idp_cert_alias = attributes[:'idp_cert_alias']
      end

      if attributes.key?(:'idp_http_redirect')
        self.idp_http_redirect = attributes[:'idp_http_redirect']
      end

      if attributes.key?(:'service_provider_entity_id')
        self.service_provider_entity_id = attributes[:'service_provider_entity_id']
      end

      if attributes.key?(:'assertion_consumer_service_url')
        self.assertion_consumer_service_url = attributes[:'assertion_consumer_service_url']
      end

      if attributes.key?(:'sp_private_key_alias')
        self.sp_private_key_alias = attributes[:'sp_private_key_alias']
      end

      if attributes.key?(:'key_store_password')
        self.key_store_password = attributes[:'key_store_password']
      end

      if attributes.key?(:'default_redirect_url')
        self.default_redirect_url = attributes[:'default_redirect_url']
      end

      if attributes.key?(:'user_id_attribute')
        self.user_id_attribute = attributes[:'user_id_attribute']
      end

      if attributes.key?(:'use_encryption')
        self.use_encryption = attributes[:'use_encryption']
      end

      if attributes.key?(:'create_user')
        self.create_user = attributes[:'create_user']
      end

      if attributes.key?(:'user_intermediate_path')
        self.user_intermediate_path = attributes[:'user_intermediate_path']
      end

      if attributes.key?(:'add_group_memberships')
        self.add_group_memberships = attributes[:'add_group_memberships']
      end

      if attributes.key?(:'group_membership_attribute')
        self.group_membership_attribute = attributes[:'group_membership_attribute']
      end

      if attributes.key?(:'default_groups')
        self.default_groups = attributes[:'default_groups']
      end

      if attributes.key?(:'name_id_format')
        self.name_id_format = attributes[:'name_id_format']
      end

      if attributes.key?(:'synchronize_attributes')
        self.synchronize_attributes = attributes[:'synchronize_attributes']
      end

      if attributes.key?(:'handle_logout')
        self.handle_logout = attributes[:'handle_logout']
      end

      if attributes.key?(:'logout_url')
        self.logout_url = attributes[:'logout_url']
      end

      if attributes.key?(:'clock_tolerance')
        self.clock_tolerance = attributes[:'clock_tolerance']
      end

      if attributes.key?(:'digest_method')
        self.digest_method = attributes[:'digest_method']
      end

      if attributes.key?(:'signature_method')
        self.signature_method = attributes[:'signature_method']
      end

      if attributes.key?(:'identity_sync_type')
        self.identity_sync_type = attributes[:'identity_sync_type']
      end

      if attributes.key?(:'idp_identifier')
        self.idp_identifier = attributes[:'idp_identifier']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          path == o.path &&
          service_ranking == o.service_ranking &&
          idp_url == o.idp_url &&
          idp_cert_alias == o.idp_cert_alias &&
          idp_http_redirect == o.idp_http_redirect &&
          service_provider_entity_id == o.service_provider_entity_id &&
          assertion_consumer_service_url == o.assertion_consumer_service_url &&
          sp_private_key_alias == o.sp_private_key_alias &&
          key_store_password == o.key_store_password &&
          default_redirect_url == o.default_redirect_url &&
          user_id_attribute == o.user_id_attribute &&
          use_encryption == o.use_encryption &&
          create_user == o.create_user &&
          user_intermediate_path == o.user_intermediate_path &&
          add_group_memberships == o.add_group_memberships &&
          group_membership_attribute == o.group_membership_attribute &&
          default_groups == o.default_groups &&
          name_id_format == o.name_id_format &&
          synchronize_attributes == o.synchronize_attributes &&
          handle_logout == o.handle_logout &&
          logout_url == o.logout_url &&
          clock_tolerance == o.clock_tolerance &&
          digest_method == o.digest_method &&
          signature_method == o.signature_method &&
          identity_sync_type == o.identity_sync_type &&
          idp_identifier == o.idp_identifier
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [path, service_ranking, idp_url, idp_cert_alias, idp_http_redirect, service_provider_entity_id, assertion_consumer_service_url, sp_private_key_alias, key_store_password, default_redirect_url, user_id_attribute, use_encryption, create_user, user_intermediate_path, add_group_memberships, group_membership_attribute, default_groups, name_id_format, synchronize_attributes, handle_logout, logout_url, clock_tolerance, digest_method, signature_method, identity_sync_type, idp_identifier].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
