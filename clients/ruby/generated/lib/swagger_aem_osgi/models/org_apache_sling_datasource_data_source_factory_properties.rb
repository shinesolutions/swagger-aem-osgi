=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module SwaggerAemOsgiClient
  class OrgApacheSlingDatasourceDataSourceFactoryProperties
    attr_accessor :datasource_name

    attr_accessor :datasource_svc_prop_name

    attr_accessor :driver_class_name

    attr_accessor :url

    attr_accessor :username

    attr_accessor :password

    attr_accessor :default_auto_commit

    attr_accessor :default_read_only

    attr_accessor :default_transaction_isolation

    attr_accessor :default_catalog

    attr_accessor :max_active

    attr_accessor :max_idle

    attr_accessor :min_idle

    attr_accessor :initial_size

    attr_accessor :max_wait

    attr_accessor :max_age

    attr_accessor :test_on_borrow

    attr_accessor :test_on_return

    attr_accessor :test_while_idle

    attr_accessor :validation_query

    attr_accessor :validation_query_timeout

    attr_accessor :time_between_eviction_runs_millis

    attr_accessor :min_evictable_idle_time_millis

    attr_accessor :connection_properties

    attr_accessor :init_sql

    attr_accessor :jdbc_interceptors

    attr_accessor :validation_interval

    attr_accessor :log_validation_errors

    attr_accessor :datasource_svc_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'datasource_name' => :'datasource.name',
        :'datasource_svc_prop_name' => :'datasource.svc.prop.name',
        :'driver_class_name' => :'driverClassName',
        :'url' => :'url',
        :'username' => :'username',
        :'password' => :'password',
        :'default_auto_commit' => :'defaultAutoCommit',
        :'default_read_only' => :'defaultReadOnly',
        :'default_transaction_isolation' => :'defaultTransactionIsolation',
        :'default_catalog' => :'defaultCatalog',
        :'max_active' => :'maxActive',
        :'max_idle' => :'maxIdle',
        :'min_idle' => :'minIdle',
        :'initial_size' => :'initialSize',
        :'max_wait' => :'maxWait',
        :'max_age' => :'maxAge',
        :'test_on_borrow' => :'testOnBorrow',
        :'test_on_return' => :'testOnReturn',
        :'test_while_idle' => :'testWhileIdle',
        :'validation_query' => :'validationQuery',
        :'validation_query_timeout' => :'validationQueryTimeout',
        :'time_between_eviction_runs_millis' => :'timeBetweenEvictionRunsMillis',
        :'min_evictable_idle_time_millis' => :'minEvictableIdleTimeMillis',
        :'connection_properties' => :'connectionProperties',
        :'init_sql' => :'initSQL',
        :'jdbc_interceptors' => :'jdbcInterceptors',
        :'validation_interval' => :'validationInterval',
        :'log_validation_errors' => :'logValidationErrors',
        :'datasource_svc_properties' => :'datasource.svc.properties'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'datasource_name' => :'ConfigNodePropertyString',
        :'datasource_svc_prop_name' => :'ConfigNodePropertyString',
        :'driver_class_name' => :'ConfigNodePropertyString',
        :'url' => :'ConfigNodePropertyString',
        :'username' => :'ConfigNodePropertyString',
        :'password' => :'ConfigNodePropertyString',
        :'default_auto_commit' => :'ConfigNodePropertyDropDown',
        :'default_read_only' => :'ConfigNodePropertyDropDown',
        :'default_transaction_isolation' => :'ConfigNodePropertyDropDown',
        :'default_catalog' => :'ConfigNodePropertyString',
        :'max_active' => :'ConfigNodePropertyInteger',
        :'max_idle' => :'ConfigNodePropertyInteger',
        :'min_idle' => :'ConfigNodePropertyInteger',
        :'initial_size' => :'ConfigNodePropertyInteger',
        :'max_wait' => :'ConfigNodePropertyInteger',
        :'max_age' => :'ConfigNodePropertyInteger',
        :'test_on_borrow' => :'ConfigNodePropertyBoolean',
        :'test_on_return' => :'ConfigNodePropertyBoolean',
        :'test_while_idle' => :'ConfigNodePropertyBoolean',
        :'validation_query' => :'ConfigNodePropertyString',
        :'validation_query_timeout' => :'ConfigNodePropertyInteger',
        :'time_between_eviction_runs_millis' => :'ConfigNodePropertyInteger',
        :'min_evictable_idle_time_millis' => :'ConfigNodePropertyInteger',
        :'connection_properties' => :'ConfigNodePropertyString',
        :'init_sql' => :'ConfigNodePropertyString',
        :'jdbc_interceptors' => :'ConfigNodePropertyString',
        :'validation_interval' => :'ConfigNodePropertyInteger',
        :'log_validation_errors' => :'ConfigNodePropertyBoolean',
        :'datasource_svc_properties' => :'ConfigNodePropertyArray'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerAemOsgiClient::OrgApacheSlingDatasourceDataSourceFactoryProperties` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerAemOsgiClient::OrgApacheSlingDatasourceDataSourceFactoryProperties`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'datasource_name')
        self.datasource_name = attributes[:'datasource_name']
      end

      if attributes.key?(:'datasource_svc_prop_name')
        self.datasource_svc_prop_name = attributes[:'datasource_svc_prop_name']
      end

      if attributes.key?(:'driver_class_name')
        self.driver_class_name = attributes[:'driver_class_name']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'default_auto_commit')
        self.default_auto_commit = attributes[:'default_auto_commit']
      end

      if attributes.key?(:'default_read_only')
        self.default_read_only = attributes[:'default_read_only']
      end

      if attributes.key?(:'default_transaction_isolation')
        self.default_transaction_isolation = attributes[:'default_transaction_isolation']
      end

      if attributes.key?(:'default_catalog')
        self.default_catalog = attributes[:'default_catalog']
      end

      if attributes.key?(:'max_active')
        self.max_active = attributes[:'max_active']
      end

      if attributes.key?(:'max_idle')
        self.max_idle = attributes[:'max_idle']
      end

      if attributes.key?(:'min_idle')
        self.min_idle = attributes[:'min_idle']
      end

      if attributes.key?(:'initial_size')
        self.initial_size = attributes[:'initial_size']
      end

      if attributes.key?(:'max_wait')
        self.max_wait = attributes[:'max_wait']
      end

      if attributes.key?(:'max_age')
        self.max_age = attributes[:'max_age']
      end

      if attributes.key?(:'test_on_borrow')
        self.test_on_borrow = attributes[:'test_on_borrow']
      end

      if attributes.key?(:'test_on_return')
        self.test_on_return = attributes[:'test_on_return']
      end

      if attributes.key?(:'test_while_idle')
        self.test_while_idle = attributes[:'test_while_idle']
      end

      if attributes.key?(:'validation_query')
        self.validation_query = attributes[:'validation_query']
      end

      if attributes.key?(:'validation_query_timeout')
        self.validation_query_timeout = attributes[:'validation_query_timeout']
      end

      if attributes.key?(:'time_between_eviction_runs_millis')
        self.time_between_eviction_runs_millis = attributes[:'time_between_eviction_runs_millis']
      end

      if attributes.key?(:'min_evictable_idle_time_millis')
        self.min_evictable_idle_time_millis = attributes[:'min_evictable_idle_time_millis']
      end

      if attributes.key?(:'connection_properties')
        self.connection_properties = attributes[:'connection_properties']
      end

      if attributes.key?(:'init_sql')
        self.init_sql = attributes[:'init_sql']
      end

      if attributes.key?(:'jdbc_interceptors')
        self.jdbc_interceptors = attributes[:'jdbc_interceptors']
      end

      if attributes.key?(:'validation_interval')
        self.validation_interval = attributes[:'validation_interval']
      end

      if attributes.key?(:'log_validation_errors')
        self.log_validation_errors = attributes[:'log_validation_errors']
      end

      if attributes.key?(:'datasource_svc_properties')
        self.datasource_svc_properties = attributes[:'datasource_svc_properties']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          datasource_name == o.datasource_name &&
          datasource_svc_prop_name == o.datasource_svc_prop_name &&
          driver_class_name == o.driver_class_name &&
          url == o.url &&
          username == o.username &&
          password == o.password &&
          default_auto_commit == o.default_auto_commit &&
          default_read_only == o.default_read_only &&
          default_transaction_isolation == o.default_transaction_isolation &&
          default_catalog == o.default_catalog &&
          max_active == o.max_active &&
          max_idle == o.max_idle &&
          min_idle == o.min_idle &&
          initial_size == o.initial_size &&
          max_wait == o.max_wait &&
          max_age == o.max_age &&
          test_on_borrow == o.test_on_borrow &&
          test_on_return == o.test_on_return &&
          test_while_idle == o.test_while_idle &&
          validation_query == o.validation_query &&
          validation_query_timeout == o.validation_query_timeout &&
          time_between_eviction_runs_millis == o.time_between_eviction_runs_millis &&
          min_evictable_idle_time_millis == o.min_evictable_idle_time_millis &&
          connection_properties == o.connection_properties &&
          init_sql == o.init_sql &&
          jdbc_interceptors == o.jdbc_interceptors &&
          validation_interval == o.validation_interval &&
          log_validation_errors == o.log_validation_errors &&
          datasource_svc_properties == o.datasource_svc_properties
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [datasource_name, datasource_svc_prop_name, driver_class_name, url, username, password, default_auto_commit, default_read_only, default_transaction_isolation, default_catalog, max_active, max_idle, min_idle, initial_size, max_wait, max_age, test_on_borrow, test_on_return, test_while_idle, validation_query, validation_query_timeout, time_between_eviction_runs_millis, min_evictable_idle_time_millis, connection_properties, init_sql, jdbc_interceptors, validation_interval, log_validation_errors, datasource_svc_properties].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SwaggerAemOsgiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
