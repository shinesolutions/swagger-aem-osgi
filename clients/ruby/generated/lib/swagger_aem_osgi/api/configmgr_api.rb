=begin
#Adobe Experience Manager OSGI config (AEM) API

#Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

The version of the OpenAPI document: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module SwaggerAemOsgiClient
  class ConfigmgrApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :show_placeholder 
    # @option opts [Integer] :maximum_cache_entries 
    # @option opts [String] :af_scripting_compatversion 
    # @option opts [Boolean] :make_file_name_unique 
    # @option opts [Boolean] :generating_compliant_data 
    # @return [AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo]
    def adaptive_form_and_interactive_communication_web_channel_configuration(opts = {})
      data, _status_code, _headers = adaptive_form_and_interactive_communication_web_channel_configuration_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :show_placeholder 
    # @option opts [Integer] :maximum_cache_entries 
    # @option opts [String] :af_scripting_compatversion 
    # @option opts [Boolean] :make_file_name_unique 
    # @option opts [Boolean] :generating_compliant_data 
    # @return [Array<(AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo, Integer, Hash)>] AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo data, response status code and response headers
    def adaptive_form_and_interactive_communication_web_channel_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.adaptive_form_and_interactive_communication_web_channel_configuration ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'showPlaceholder'] = opts[:'show_placeholder'] if !opts[:'show_placeholder'].nil?
      query_params[:'maximumCacheEntries'] = opts[:'maximum_cache_entries'] if !opts[:'maximum_cache_entries'].nil?
      query_params[:'af.scripting.compatversion'] = opts[:'af_scripting_compatversion'] if !opts[:'af_scripting_compatversion'].nil?
      query_params[:'makeFileNameUnique'] = opts[:'make_file_name_unique'] if !opts[:'make_file_name_unique'].nil?
      query_params[:'generatingCompliantData'] = opts[:'generating_compliant_data'] if !opts[:'generating_compliant_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.adaptive_form_and_interactive_communication_web_channel_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#adaptive_form_and_interactive_communication_web_channel_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :font_list 
    # @return [AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo]
    def adaptive_form_and_interactive_communication_web_channel_theme_configur(opts = {})
      data, _status_code, _headers = adaptive_form_and_interactive_communication_web_channel_theme_configur_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :font_list 
    # @return [Array<(AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo, Integer, Hash)>] AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo data, response status code and response headers
    def adaptive_form_and_interactive_communication_web_channel_theme_configur_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.adaptive_form_and_interactive_communication_web_channel_theme_configur ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fontList'] = @api_client.build_collection_param(opts[:'font_list'], :multi) if !opts[:'font_list'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.adaptive_form_and_interactive_communication_web_channel_theme_configur",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#adaptive_form_and_interactive_communication_web_channel_theme_configur\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_analytics_component_query_cache_size 
    # @return [AnalyticsComponentQueryCacheServiceInfo]
    def analytics_component_query_cache_service(opts = {})
      data, _status_code, _headers = analytics_component_query_cache_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_analytics_component_query_cache_size 
    # @return [Array<(AnalyticsComponentQueryCacheServiceInfo, Integer, Hash)>] AnalyticsComponentQueryCacheServiceInfo data, response status code and response headers
    def analytics_component_query_cache_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.analytics_component_query_cache_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/Analytics Component Query Cache Service'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.analytics.component.query.cache.size'] = opts[:'cq_analytics_component_query_cache_size'] if !opts[:'cq_analytics_component_query_cache_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnalyticsComponentQueryCacheServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.analytics_component_query_cache_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#analytics_component_query_cache_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :style_string 
    # @return [ApacheSlingHealthCheckResultHTMLSerializerInfo]
    def apache_sling_health_check_result_html_serializer(opts = {})
      data, _status_code, _headers = apache_sling_health_check_result_html_serializer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :style_string 
    # @return [Array<(ApacheSlingHealthCheckResultHTMLSerializerInfo, Integer, Hash)>] ApacheSlingHealthCheckResultHTMLSerializerInfo data, response status code and response headers
    def apache_sling_health_check_result_html_serializer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.apache_sling_health_check_result_html_serializer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/Apache Sling Health Check Result HTML Serializer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'styleString'] = opts[:'style_string'] if !opts[:'style_string'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApacheSlingHealthCheckResultHTMLSerializerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.apache_sling_health_check_result_html_serializer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#apache_sling_health_check_result_html_serializer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :forms_manager_config_include_ootb_templates 
    # @option opts [Boolean] :forms_manager_config_include_deprecated_templates 
    # @return [ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo]
    def com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration(opts = {})
      data, _status_code, _headers = com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :forms_manager_config_include_ootb_templates 
    # @option opts [Boolean] :forms_manager_config_include_deprecated_templates 
    # @return [Array<(ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo, Integer, Hash)>] ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo data, response status code and response headers
    def com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'formsManagerConfig.includeOOTBTemplates'] = opts[:'forms_manager_config_include_ootb_templates'] if !opts[:'forms_manager_config_include_ootb_templates'].nil?
      query_params[:'formsManagerConfig.includeDeprecatedTemplates'] = opts[:'forms_manager_config_include_deprecated_templates'] if !opts[:'forms_manager_config_include_deprecated_templates'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_aem_formsndocuments_config_aem_forms_manager_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_transaction_recording_enabled 
    # @return [ComAdobeAemTransactionCoreImplTransactionRecorderInfo]
    def com_adobe_aem_transaction_core_impl_transaction_recorder(opts = {})
      data, _status_code, _headers = com_adobe_aem_transaction_core_impl_transaction_recorder_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_transaction_recording_enabled 
    # @return [Array<(ComAdobeAemTransactionCoreImplTransactionRecorderInfo, Integer, Hash)>] ComAdobeAemTransactionCoreImplTransactionRecorderInfo data, response status code and response headers
    def com_adobe_aem_transaction_core_impl_transaction_recorder_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_aem_transaction_core_impl_transaction_recorder ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'isTransactionRecordingEnabled'] = opts[:'is_transaction_recording_enabled'] if !opts[:'is_transaction_recording_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeAemTransactionCoreImplTransactionRecorderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_aem_transaction_core_impl_transaction_recorder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_aem_transaction_core_impl_transaction_recorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @return [ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo]
    def com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc(opts = {})
      data, _status_code, _headers = com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @return [Array<(ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo, Integer, Hash)>] ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo data, response status code and response headers
    def com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.name'] = opts[:'hc_name'] if !opts[:'hc_name'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'hc.mbean.name'] = opts[:'hc_mbean_name'] if !opts[:'hc_mbean_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_aem_upgrade_prechecks_hc_impl_deprecate_indexes_hc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @return [ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo]
    def com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc(opts = {})
      data, _status_code, _headers = com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @return [Array<(ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo, Integer, Hash)>] ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo data, response status code and response headers
    def com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.name'] = opts[:'hc_name'] if !opts[:'hc_name'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'hc.mbean.name'] = opts[:'hc_mbean_name'] if !opts[:'hc_mbean_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_aem_upgrade_prechecks_hc_impl_replication_agents_disabled_hc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :pre_upgrade_maintenance_tasks 
    # @option opts [Array<String>] :pre_upgrade_hc_tags 
    # @return [ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo]
    def com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl(opts = {})
      data, _status_code, _headers = com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :pre_upgrade_maintenance_tasks 
    # @option opts [Array<String>] :pre_upgrade_hc_tags 
    # @return [Array<(ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo, Integer, Hash)>] ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo data, response status code and response headers
    def com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'pre-upgrade.maintenance.tasks'] = @api_client.build_collection_param(opts[:'pre_upgrade_maintenance_tasks'], :multi) if !opts[:'pre_upgrade_maintenance_tasks'].nil?
      query_params[:'pre-upgrade.hc.tags'] = @api_client.build_collection_param(opts[:'pre_upgrade_hc_tags'], :multi) if !opts[:'pre_upgrade_hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_aem_upgrade_prechecks_mbean_impl_pre_upgrade_tasks_m_bean_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :root_path 
    # @option opts [Boolean] :fix_inconsistencies 
    # @return [ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo]
    def com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl(opts = {})
      data, _status_code, _headers = com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :root_path 
    # @option opts [Boolean] :fix_inconsistencies 
    # @return [Array<(ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo, Integer, Hash)>] ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo data, response status code and response headers
    def com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'root.path'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'fix.inconsistencies'] = opts[:'fix_inconsistencies'] if !opts[:'fix_inconsistencies'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_aem_upgrade_prechecks_tasks_impl_consistency_check_task_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_accountmanager_token_validity_period 
    # @option opts [String] :cq_accountmanager_config_requestnewaccount_mail 
    # @option opts [String] :cq_accountmanager_config_requestnewpwd_mail 
    # @return [ComAdobeCqAccountApiAccountManagementServiceInfo]
    def com_adobe_cq_account_api_account_management_service(opts = {})
      data, _status_code, _headers = com_adobe_cq_account_api_account_management_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_accountmanager_token_validity_period 
    # @option opts [String] :cq_accountmanager_config_requestnewaccount_mail 
    # @option opts [String] :cq_accountmanager_config_requestnewpwd_mail 
    # @return [Array<(ComAdobeCqAccountApiAccountManagementServiceInfo, Integer, Hash)>] ComAdobeCqAccountApiAccountManagementServiceInfo data, response status code and response headers
    def com_adobe_cq_account_api_account_management_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_account_api_account_management_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.accountmanager.token.validity.period'] = opts[:'cq_accountmanager_token_validity_period'] if !opts[:'cq_accountmanager_token_validity_period'].nil?
      query_params[:'cq.accountmanager.config.requestnewaccount.mail'] = opts[:'cq_accountmanager_config_requestnewaccount_mail'] if !opts[:'cq_accountmanager_config_requestnewaccount_mail'].nil?
      query_params[:'cq.accountmanager.config.requestnewpwd.mail'] = opts[:'cq_accountmanager_config_requestnewpwd_mail'] if !opts[:'cq_accountmanager_config_requestnewpwd_mail'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqAccountApiAccountManagementServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_account_api_account_management_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_account_api_account_management_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_accountmanager_config_informnewaccount_mail 
    # @option opts [String] :cq_accountmanager_config_informnewpwd_mail 
    # @return [ComAdobeCqAccountImplAccountManagementServletInfo]
    def com_adobe_cq_account_impl_account_management_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_account_impl_account_management_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_accountmanager_config_informnewaccount_mail 
    # @option opts [String] :cq_accountmanager_config_informnewpwd_mail 
    # @return [Array<(ComAdobeCqAccountImplAccountManagementServletInfo, Integer, Hash)>] ComAdobeCqAccountImplAccountManagementServletInfo data, response status code and response headers
    def com_adobe_cq_account_impl_account_management_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_account_impl_account_management_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.accountmanager.config.informnewaccount.mail'] = opts[:'cq_accountmanager_config_informnewaccount_mail'] if !opts[:'cq_accountmanager_config_informnewaccount_mail'].nil?
      query_params[:'cq.accountmanager.config.informnewpwd.mail'] = opts[:'cq_accountmanager_config_informnewpwd_mail'] if !opts[:'cq_accountmanager_config_informnewpwd_mail'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqAccountImplAccountManagementServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_account_impl_account_management_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_account_impl_account_management_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_address_location_default_max_results 
    # @return [ComAdobeCqAddressImplLocationLocationListServletInfo]
    def com_adobe_cq_address_impl_location_location_list_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_address_impl_location_location_list_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_address_location_default_max_results 
    # @return [Array<(ComAdobeCqAddressImplLocationLocationListServletInfo, Integer, Hash)>] ComAdobeCqAddressImplLocationLocationListServletInfo data, response status code and response headers
    def com_adobe_cq_address_impl_location_location_list_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_address_impl_location_location_list_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.address.location.default.maxResults'] = opts[:'cq_address_location_default_max_results'] if !opts[:'cq_address_location_default_max_results'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqAddressImplLocationLocationListServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_address_impl_location_location_list_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_address_impl_location_location_list_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auditlog_rule_name 
    # @option opts [String] :auditlog_rule_contentpath 
    # @option opts [Integer] :auditlog_rule_minimumage 
    # @option opts [String] :auditlog_rule_types 
    # @return [ComAdobeCqAuditPurgeDamInfo]
    def com_adobe_cq_audit_purge_dam(opts = {})
      data, _status_code, _headers = com_adobe_cq_audit_purge_dam_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auditlog_rule_name 
    # @option opts [String] :auditlog_rule_contentpath 
    # @option opts [Integer] :auditlog_rule_minimumage 
    # @option opts [String] :auditlog_rule_types 
    # @return [Array<(ComAdobeCqAuditPurgeDamInfo, Integer, Hash)>] ComAdobeCqAuditPurgeDamInfo data, response status code and response headers
    def com_adobe_cq_audit_purge_dam_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_audit_purge_dam ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.audit.purge.Dam'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'auditlog.rule.name'] = opts[:'auditlog_rule_name'] if !opts[:'auditlog_rule_name'].nil?
      query_params[:'auditlog.rule.contentpath'] = opts[:'auditlog_rule_contentpath'] if !opts[:'auditlog_rule_contentpath'].nil?
      query_params[:'auditlog.rule.minimumage'] = opts[:'auditlog_rule_minimumage'] if !opts[:'auditlog_rule_minimumage'].nil?
      query_params[:'auditlog.rule.types'] = opts[:'auditlog_rule_types'] if !opts[:'auditlog_rule_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqAuditPurgeDamInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_audit_purge_dam",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_audit_purge_dam\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auditlog_rule_name 
    # @option opts [String] :auditlog_rule_contentpath 
    # @option opts [Integer] :auditlog_rule_minimumage 
    # @option opts [String] :auditlog_rule_types 
    # @return [ComAdobeCqAuditPurgePagesInfo]
    def com_adobe_cq_audit_purge_pages(opts = {})
      data, _status_code, _headers = com_adobe_cq_audit_purge_pages_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auditlog_rule_name 
    # @option opts [String] :auditlog_rule_contentpath 
    # @option opts [Integer] :auditlog_rule_minimumage 
    # @option opts [String] :auditlog_rule_types 
    # @return [Array<(ComAdobeCqAuditPurgePagesInfo, Integer, Hash)>] ComAdobeCqAuditPurgePagesInfo data, response status code and response headers
    def com_adobe_cq_audit_purge_pages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_audit_purge_pages ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.audit.purge.Pages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'auditlog.rule.name'] = opts[:'auditlog_rule_name'] if !opts[:'auditlog_rule_name'].nil?
      query_params[:'auditlog.rule.contentpath'] = opts[:'auditlog_rule_contentpath'] if !opts[:'auditlog_rule_contentpath'].nil?
      query_params[:'auditlog.rule.minimumage'] = opts[:'auditlog_rule_minimumage'] if !opts[:'auditlog_rule_minimumage'].nil?
      query_params[:'auditlog.rule.types'] = opts[:'auditlog_rule_types'] if !opts[:'auditlog_rule_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqAuditPurgePagesInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_audit_purge_pages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_audit_purge_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auditlog_rule_name 
    # @option opts [String] :auditlog_rule_contentpath 
    # @option opts [Integer] :auditlog_rule_minimumage 
    # @option opts [String] :auditlog_rule_types 
    # @return [ComAdobeCqAuditPurgeReplicationInfo]
    def com_adobe_cq_audit_purge_replication(opts = {})
      data, _status_code, _headers = com_adobe_cq_audit_purge_replication_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auditlog_rule_name 
    # @option opts [String] :auditlog_rule_contentpath 
    # @option opts [Integer] :auditlog_rule_minimumage 
    # @option opts [String] :auditlog_rule_types 
    # @return [Array<(ComAdobeCqAuditPurgeReplicationInfo, Integer, Hash)>] ComAdobeCqAuditPurgeReplicationInfo data, response status code and response headers
    def com_adobe_cq_audit_purge_replication_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_audit_purge_replication ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.audit.purge.Replication'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'auditlog.rule.name'] = opts[:'auditlog_rule_name'] if !opts[:'auditlog_rule_name'].nil?
      query_params[:'auditlog.rule.contentpath'] = opts[:'auditlog_rule_contentpath'] if !opts[:'auditlog_rule_contentpath'].nil?
      query_params[:'auditlog.rule.minimumage'] = opts[:'auditlog_rule_minimumage'] if !opts[:'auditlog_rule_minimumage'].nil?
      query_params[:'auditlog.rule.types'] = opts[:'auditlog_rule_types'] if !opts[:'auditlog_rule_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqAuditPurgeReplicationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_audit_purge_replication",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_audit_purge_replication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :keypair_id 
    # @option opts [String] :keypair_alias 
    # @option opts [Array<String>] :cdnrewriter_attributes 
    # @option opts [String] :cdn_rewriter_distribution_domain 
    # @return [ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo]
    def com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter(opts = {})
      data, _status_code, _headers = com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :keypair_id 
    # @option opts [String] :keypair_alias 
    # @option opts [Array<String>] :cdnrewriter_attributes 
    # @option opts [String] :cdn_rewriter_distribution_domain 
    # @return [Array<(ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo, Integer, Hash)>] ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo data, response status code and response headers
    def com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'keypair.id'] = opts[:'keypair_id'] if !opts[:'keypair_id'].nil?
      query_params[:'keypair.alias'] = opts[:'keypair_alias'] if !opts[:'keypair_alias'].nil?
      query_params[:'cdnrewriter.attributes'] = @api_client.build_collection_param(opts[:'cdnrewriter_attributes'], :multi) if !opts[:'cdnrewriter_attributes'].nil?
      query_params[:'cdn.rewriter.distribution.domain'] = opts[:'cdn_rewriter_distribution_domain'] if !opts[:'cdn_rewriter_distribution_domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_cdn_rewriter_impl_aws_cloud_front_rewriter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cdn_config_distribution_domain 
    # @option opts [Boolean] :cdn_config_enable_rewriting 
    # @option opts [Array<String>] :cdn_config_path_prefixes 
    # @option opts [Integer] :cdn_config_cdnttl 
    # @option opts [String] :cdn_config_application_protocol 
    # @return [ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo]
    def com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cdn_config_distribution_domain 
    # @option opts [Boolean] :cdn_config_enable_rewriting 
    # @option opts [Array<String>] :cdn_config_path_prefixes 
    # @option opts [Integer] :cdn_config_cdnttl 
    # @option opts [String] :cdn_config_application_protocol 
    # @return [Array<(ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo, Integer, Hash)>] ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo data, response status code and response headers
    def com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cdn.config.distribution.domain'] = opts[:'cdn_config_distribution_domain'] if !opts[:'cdn_config_distribution_domain'].nil?
      query_params[:'cdn.config.enable.rewriting'] = opts[:'cdn_config_enable_rewriting'] if !opts[:'cdn_config_enable_rewriting'].nil?
      query_params[:'cdn.config.path.prefixes'] = @api_client.build_collection_param(opts[:'cdn_config_path_prefixes'], :multi) if !opts[:'cdn_config_path_prefixes'].nil?
      query_params[:'cdn.config.cdnttl'] = opts[:'cdn_config_cdnttl'] if !opts[:'cdn_config_cdnttl'].nil?
      query_params[:'cdn.config.application.protocol'] = opts[:'cdn_config_application_protocol'] if !opts[:'cdn_config_application_protocol'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_cdn_rewriter_impl_cdn_config_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Array<String>] :cdnrewriter_attributes 
    # @option opts [String] :cdn_rewriter_distribution_domain 
    # @return [ComAdobeCqCdnRewriterImplCDNRewriterInfo]
    def com_adobe_cq_cdn_rewriter_impl_cdn_rewriter(opts = {})
      data, _status_code, _headers = com_adobe_cq_cdn_rewriter_impl_cdn_rewriter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Array<String>] :cdnrewriter_attributes 
    # @option opts [String] :cdn_rewriter_distribution_domain 
    # @return [Array<(ComAdobeCqCdnRewriterImplCDNRewriterInfo, Integer, Hash)>] ComAdobeCqCdnRewriterImplCDNRewriterInfo data, response status code and response headers
    def com_adobe_cq_cdn_rewriter_impl_cdn_rewriter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_cdn_rewriter_impl_cdn_rewriter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'cdnrewriter.attributes'] = @api_client.build_collection_param(opts[:'cdnrewriter_attributes'], :multi) if !opts[:'cdnrewriter_attributes'].nil?
      query_params[:'cdn.rewriter.distribution.domain'] = opts[:'cdn_rewriter_distribution_domain'] if !opts[:'cdn_rewriter_distribution_domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCdnRewriterImplCDNRewriterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_cdn_rewriter_impl_cdn_rewriter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_cdn_rewriter_impl_cdn_rewriter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :flush_agents 
    # @return [ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo]
    def com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle(opts = {})
      data, _status_code, _headers = com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :flush_agents 
    # @return [Array<(ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo, Integer, Hash)>] ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo data, response status code and response headers
    def com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'flush.agents'] = @api_client.build_collection_param(opts[:'flush_agents'], :multi) if !opts[:'flush_agents'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_cloudconfig_core_impl_configuration_replication_event_handle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_commerce_asset_handler_active 
    # @option opts [String] :cq_commerce_asset_handler_name 
    # @return [ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo]
    def com_adobe_cq_commerce_impl_asset_dynamic_image_handler(opts = {})
      data, _status_code, _headers = com_adobe_cq_commerce_impl_asset_dynamic_image_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_commerce_asset_handler_active 
    # @option opts [String] :cq_commerce_asset_handler_name 
    # @return [Array<(ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo, Integer, Hash)>] ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo data, response status code and response headers
    def com_adobe_cq_commerce_impl_asset_dynamic_image_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_commerce_impl_asset_dynamic_image_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.commerce.asset.handler.active'] = opts[:'cq_commerce_asset_handler_active'] if !opts[:'cq_commerce_asset_handler_active'].nil?
      query_params[:'cq.commerce.asset.handler.name'] = opts[:'cq_commerce_asset_handler_name'] if !opts[:'cq_commerce_asset_handler_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_commerce_impl_asset_dynamic_image_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_commerce_impl_asset_dynamic_image_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_commerce_asset_handler_fallback 
    # @return [ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo]
    def com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_commerce_asset_handler_fallback 
    # @return [Array<(ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo, Integer, Hash)>] ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo data, response status code and response headers
    def com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.commerce.asset.handler.fallback'] = opts[:'cq_commerce_asset_handler_fallback'] if !opts[:'cq_commerce_asset_handler_fallback'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_commerce_impl_asset_product_asset_handler_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_commerce_asset_handler_active 
    # @option opts [String] :cq_commerce_asset_handler_name 
    # @return [ComAdobeCqCommerceImplAssetStaticImageHandlerInfo]
    def com_adobe_cq_commerce_impl_asset_static_image_handler(opts = {})
      data, _status_code, _headers = com_adobe_cq_commerce_impl_asset_static_image_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_commerce_asset_handler_active 
    # @option opts [String] :cq_commerce_asset_handler_name 
    # @return [Array<(ComAdobeCqCommerceImplAssetStaticImageHandlerInfo, Integer, Hash)>] ComAdobeCqCommerceImplAssetStaticImageHandlerInfo data, response status code and response headers
    def com_adobe_cq_commerce_impl_asset_static_image_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_commerce_impl_asset_static_image_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.commerce.asset.handler.active'] = opts[:'cq_commerce_asset_handler_active'] if !opts[:'cq_commerce_asset_handler_active'].nil?
      query_params[:'cq.commerce.asset.handler.name'] = opts[:'cq_commerce_asset_handler_name'] if !opts[:'cq_commerce_asset_handler_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCommerceImplAssetStaticImageHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_commerce_impl_asset_static_image_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_commerce_impl_asset_static_image_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_commerce_asset_handler_active 
    # @option opts [String] :cq_commerce_asset_handler_name 
    # @return [ComAdobeCqCommerceImplAssetVideoHandlerInfo]
    def com_adobe_cq_commerce_impl_asset_video_handler(opts = {})
      data, _status_code, _headers = com_adobe_cq_commerce_impl_asset_video_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_commerce_asset_handler_active 
    # @option opts [String] :cq_commerce_asset_handler_name 
    # @return [Array<(ComAdobeCqCommerceImplAssetVideoHandlerInfo, Integer, Hash)>] ComAdobeCqCommerceImplAssetVideoHandlerInfo data, response status code and response headers
    def com_adobe_cq_commerce_impl_asset_video_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_commerce_impl_asset_video_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.commerce.asset.handler.active'] = opts[:'cq_commerce_asset_handler_active'] if !opts[:'cq_commerce_asset_handler_active'].nil?
      query_params[:'cq.commerce.asset.handler.name'] = opts[:'cq_commerce_asset_handler_name'] if !opts[:'cq_commerce_asset_handler_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCommerceImplAssetVideoHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_commerce_impl_asset_video_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_commerce_impl_asset_video_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_commerce_promotion_root 
    # @return [ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo]
    def com_adobe_cq_commerce_impl_promotion_promotion_manager_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_commerce_impl_promotion_promotion_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_commerce_promotion_root 
    # @return [Array<(ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo, Integer, Hash)>] ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo data, response status code and response headers
    def com_adobe_cq_commerce_impl_promotion_promotion_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_commerce_impl_promotion_promotion_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.commerce.promotion.root'] = opts[:'cq_commerce_promotion_root'] if !opts[:'cq_commerce_promotion_root'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_commerce_impl_promotion_promotion_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_commerce_impl_promotion_promotion_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_commerce_cataloggenerator_bucketsize 
    # @option opts [String] :cq_commerce_cataloggenerator_bucketname 
    # @option opts [Array<String>] :cq_commerce_cataloggenerator_excludedtemplateproperties 
    # @return [ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo]
    def com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_commerce_cataloggenerator_bucketsize 
    # @option opts [String] :cq_commerce_cataloggenerator_bucketname 
    # @option opts [Array<String>] :cq_commerce_cataloggenerator_excludedtemplateproperties 
    # @return [Array<(ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo, Integer, Hash)>] ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo data, response status code and response headers
    def com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.commerce.cataloggenerator.bucketsize'] = opts[:'cq_commerce_cataloggenerator_bucketsize'] if !opts[:'cq_commerce_cataloggenerator_bucketsize'].nil?
      query_params[:'cq.commerce.cataloggenerator.bucketname'] = opts[:'cq_commerce_cataloggenerator_bucketname'] if !opts[:'cq_commerce_cataloggenerator_bucketname'].nil?
      query_params[:'cq.commerce.cataloggenerator.excludedtemplateproperties'] = @api_client.build_collection_param(opts[:'cq_commerce_cataloggenerator_excludedtemplateproperties'], :multi) if !opts[:'cq_commerce_cataloggenerator_excludedtemplateproperties'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_commerce_pim_impl_cataloggenerator_catalog_generator_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_commerce_pageeventlistener_enabled 
    # @return [ComAdobeCqCommercePimImplPageEventListenerInfo]
    def com_adobe_cq_commerce_pim_impl_page_event_listener(opts = {})
      data, _status_code, _headers = com_adobe_cq_commerce_pim_impl_page_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_commerce_pageeventlistener_enabled 
    # @return [Array<(ComAdobeCqCommercePimImplPageEventListenerInfo, Integer, Hash)>] ComAdobeCqCommercePimImplPageEventListenerInfo data, response status code and response headers
    def com_adobe_cq_commerce_pim_impl_page_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_commerce_pim_impl_page_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.commerce.pageeventlistener.enabled'] = opts[:'cq_commerce_pageeventlistener_enabled'] if !opts[:'cq_commerce_pageeventlistener_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCommercePimImplPageEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_commerce_pim_impl_page_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_commerce_pim_impl_page_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :feed_generator_algorithm 
    # @return [ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo]
    def com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :feed_generator_algorithm 
    # @return [Array<(ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo, Integer, Hash)>] ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo data, response status code and response headers
    def com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'Feed generator algorithm'] = opts[:'feed_generator_algorithm'] if !opts[:'feed_generator_algorithm'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_commerce_pim_impl_productfeed_product_feed_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :reportingservices_url 
    # @return [ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo]
    def com_adobe_cq_contentinsight_impl_reporting_services_settings_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_contentinsight_impl_reporting_services_settings_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :reportingservices_url 
    # @return [Array<(ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo, Integer, Hash)>] ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo data, response status code and response headers
    def com_adobe_cq_contentinsight_impl_reporting_services_settings_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_contentinsight_impl_reporting_services_settings_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'reportingservices.url'] = opts[:'reportingservices_url'] if !opts[:'reportingservices_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_contentinsight_impl_reporting_services_settings_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_contentinsight_impl_reporting_services_settings_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :brightedge_url 
    # @return [ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo]
    def com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :brightedge_url 
    # @return [Array<(ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo, Integer, Hash)>] ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo data, response status code and response headers
    def com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'brightedge.url'] = opts[:'brightedge_url'] if !opts[:'brightedge_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_contentinsight_impl_servlets_bright_edge_proxy_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :reportingservices_proxy_whitelist 
    # @return [ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo]
    def com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle(opts = {})
      data, _status_code, _headers = com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :reportingservices_proxy_whitelist 
    # @return [Array<(ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo, Integer, Hash)>] ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo data, response status code and response headers
    def com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'reportingservices.proxy.whitelist'] = @api_client.build_collection_param(opts[:'reportingservices_proxy_whitelist'], :multi) if !opts[:'reportingservices_proxy_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_contentinsight_impl_servlets_reporting_services_proxy_servle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :dam_cfm_component_resource_type 
    # @option opts [String] :dam_cfm_component_file_reference_prop 
    # @option opts [String] :dam_cfm_component_elements_prop 
    # @option opts [String] :dam_cfm_component_variation_prop 
    # @return [ComAdobeCqDamCfmImplComponentComponentConfigImplInfo]
    def com_adobe_cq_dam_cfm_impl_component_component_config_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_cfm_impl_component_component_config_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :dam_cfm_component_resource_type 
    # @option opts [String] :dam_cfm_component_file_reference_prop 
    # @option opts [String] :dam_cfm_component_elements_prop 
    # @option opts [String] :dam_cfm_component_variation_prop 
    # @return [Array<(ComAdobeCqDamCfmImplComponentComponentConfigImplInfo, Integer, Hash)>] ComAdobeCqDamCfmImplComponentComponentConfigImplInfo data, response status code and response headers
    def com_adobe_cq_dam_cfm_impl_component_component_config_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_cfm_impl_component_component_config_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'dam.cfm.component.resourceType'] = opts[:'dam_cfm_component_resource_type'] if !opts[:'dam_cfm_component_resource_type'].nil?
      query_params[:'dam.cfm.component.fileReferenceProp'] = opts[:'dam_cfm_component_file_reference_prop'] if !opts[:'dam_cfm_component_file_reference_prop'].nil?
      query_params[:'dam.cfm.component.elementsProp'] = opts[:'dam_cfm_component_elements_prop'] if !opts[:'dam_cfm_component_elements_prop'].nil?
      query_params[:'dam.cfm.component.variationProp'] = opts[:'dam_cfm_component_variation_prop'] if !opts[:'dam_cfm_component_variation_prop'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamCfmImplComponentComponentConfigImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_cfm_impl_component_component_config_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_cfm_impl_component_component_config_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :dam_cfm_resource_types 
    # @option opts [Array<String>] :dam_cfm_reference_properties 
    # @return [ComAdobeCqDamCfmImplConfFeatureConfigImplInfo]
    def com_adobe_cq_dam_cfm_impl_conf_feature_config_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_cfm_impl_conf_feature_config_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :dam_cfm_resource_types 
    # @option opts [Array<String>] :dam_cfm_reference_properties 
    # @return [Array<(ComAdobeCqDamCfmImplConfFeatureConfigImplInfo, Integer, Hash)>] ComAdobeCqDamCfmImplConfFeatureConfigImplInfo data, response status code and response headers
    def com_adobe_cq_dam_cfm_impl_conf_feature_config_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_cfm_impl_conf_feature_config_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'dam.cfm.resourceTypes'] = @api_client.build_collection_param(opts[:'dam_cfm_resource_types'], :multi) if !opts[:'dam_cfm_resource_types'].nil?
      query_params[:'dam.cfm.referenceProperties'] = @api_client.build_collection_param(opts[:'dam_cfm_reference_properties'], :multi) if !opts[:'dam_cfm_reference_properties'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamCfmImplConfFeatureConfigImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_cfm_impl_conf_feature_config_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_cfm_impl_conf_feature_config_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pipeline_type 
    # @return [ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo]
    def com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pipeline_type 
    # @return [Array<(ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo, Integer, Hash)>] ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo data, response status code and response headers
    def com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'pipeline.type'] = opts[:'pipeline_type'] if !opts[:'pipeline_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_cfm_impl_content_rewriter_asset_processor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pipeline_type 
    # @return [ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo]
    def com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pipeline_type 
    # @return [Array<(ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo, Integer, Hash)>] ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo data, response status code and response headers
    def com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'pipeline.type'] = opts[:'pipeline_type'] if !opts[:'pipeline_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_cfm_impl_content_rewriter_par_range_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pipeline_type 
    # @return [ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo]
    def com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pipeline_type 
    # @return [Array<(ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo, Integer, Hash)>] ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo data, response status code and response headers
    def com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'pipeline.type'] = opts[:'pipeline_type'] if !opts[:'pipeline_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_cfm_impl_content_rewriter_payload_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_memory 
    # @return [ComAdobeCqDamDmProcessImagePTiffManagerImplInfo]
    def com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_memory 
    # @return [Array<(ComAdobeCqDamDmProcessImagePTiffManagerImplInfo, Integer, Hash)>] ComAdobeCqDamDmProcessImagePTiffManagerImplInfo data, response status code and response headers
    def com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'maxMemory'] = opts[:'max_memory'] if !opts[:'max_memory'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamDmProcessImagePTiffManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_dm_process_image_p_tiff_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :dmreplicateonmodify_enabled 
    # @option opts [Boolean] :dmreplicateonmodify_forcesyncdeletes 
    # @return [ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo]
    def com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :dmreplicateonmodify_enabled 
    # @option opts [Boolean] :dmreplicateonmodify_forcesyncdeletes 
    # @return [Array<(ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo, Integer, Hash)>] ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo data, response status code and response headers
    def com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'dmreplicateonmodify.enabled'] = opts[:'dmreplicateonmodify_enabled'] if !opts[:'dmreplicateonmodify_enabled'].nil?
      query_params[:'dmreplicateonmodify.forcesyncdeletes'] = opts[:'dmreplicateonmodify_forcesyncdeletes'] if !opts[:'dmreplicateonmodify_forcesyncdeletes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_ips_impl_replication_trigger_replicate_on_modify_worker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :com_adobe_dam_mac_sync_client_so_timeout 
    # @return [ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo]
    def com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :com_adobe_dam_mac_sync_client_so_timeout 
    # @return [Array<(ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo, Integer, Hash)>] ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo data, response status code and response headers
    def com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.dam.mac.sync.client.so.timeout'] = opts[:'com_adobe_dam_mac_sync_client_so_timeout'] if !opts[:'com_adobe_dam_mac_sync_client_so_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_mac_sync_helper_impl_mac_sync_client_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths 
    # @option opts [Boolean] :com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions 
    # @option opts [Integer] :com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms 
    # @option opts [String] :com_adobe_cq_dam_mac_sync_damsyncservice_platform 
    # @return [ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo]
    def com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths 
    # @option opts [Boolean] :com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions 
    # @option opts [Integer] :com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms 
    # @option opts [String] :com_adobe_cq_dam_mac_sync_damsyncservice_platform 
    # @return [Array<(ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo, Integer, Hash)>] ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo data, response status code and response headers
    def com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths'] = @api_client.build_collection_param(opts[:'com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths'], :multi) if !opts[:'com_adobe_cq_dam_mac_sync_damsyncservice_registered_paths'].nil?
      query_params[:'com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions'] = opts[:'com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions'] if !opts[:'com_adobe_cq_dam_mac_sync_damsyncservice_sync_renditions'].nil?
      query_params[:'com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms'] = opts[:'com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms'] if !opts[:'com_adobe_cq_dam_mac_sync_damsyncservice_replicate_thread_wait_ms'].nil?
      query_params[:'com.adobe.cq.dam.mac.sync.damsyncservice.platform'] = opts[:'com_adobe_cq_dam_mac_sync_damsyncservice_platform'] if !opts[:'com_adobe_cq_dam_mac_sync_damsyncservice_platform'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_mac_sync_impl_dam_sync_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :nui_enabled 
    # @option opts [String] :nui_service_url 
    # @option opts [String] :nui_api_key 
    # @return [ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo]
    def com_adobe_cq_dam_processor_nui_impl_nui_asset_processor(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_processor_nui_impl_nui_asset_processor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :nui_enabled 
    # @option opts [String] :nui_service_url 
    # @option opts [String] :nui_api_key 
    # @return [Array<(ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo, Integer, Hash)>] ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo data, response status code and response headers
    def com_adobe_cq_dam_processor_nui_impl_nui_asset_processor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_processor_nui_impl_nui_asset_processor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'nuiEnabled'] = opts[:'nui_enabled'] if !opts[:'nui_enabled'].nil?
      query_params[:'nuiServiceUrl'] = opts[:'nui_service_url'] if !opts[:'nui_service_url'].nil?
      query_params[:'nuiApiKey'] = opts[:'nui_api_key'] if !opts[:'nui_api_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_processor_nui_impl_nui_asset_processor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_processor_nui_impl_nui_asset_processor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :tcp_port 
    # @option opts [Boolean] :allow_remote_access 
    # @option opts [String] :max_render_rgn_pixels 
    # @option opts [String] :max_message_size 
    # @option opts [Integer] :random_access_url_timeout 
    # @option opts [Integer] :worker_threads 
    # @return [ComAdobeCqDamS7imagingImplIsImageServerComponentInfo]
    def com_adobe_cq_dam_s7imaging_impl_is_image_server_component(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_s7imaging_impl_is_image_server_component_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :tcp_port 
    # @option opts [Boolean] :allow_remote_access 
    # @option opts [String] :max_render_rgn_pixels 
    # @option opts [String] :max_message_size 
    # @option opts [Integer] :random_access_url_timeout 
    # @option opts [Integer] :worker_threads 
    # @return [Array<(ComAdobeCqDamS7imagingImplIsImageServerComponentInfo, Integer, Hash)>] ComAdobeCqDamS7imagingImplIsImageServerComponentInfo data, response status code and response headers
    def com_adobe_cq_dam_s7imaging_impl_is_image_server_component_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_s7imaging_impl_is_image_server_component ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'TcpPort'] = opts[:'tcp_port'] if !opts[:'tcp_port'].nil?
      query_params[:'AllowRemoteAccess'] = opts[:'allow_remote_access'] if !opts[:'allow_remote_access'].nil?
      query_params[:'MaxRenderRgnPixels'] = opts[:'max_render_rgn_pixels'] if !opts[:'max_render_rgn_pixels'].nil?
      query_params[:'MaxMessageSize'] = opts[:'max_message_size'] if !opts[:'max_message_size'].nil?
      query_params[:'RandomAccessUrlTimeout'] = opts[:'random_access_url_timeout'] if !opts[:'random_access_url_timeout'].nil?
      query_params[:'WorkerThreads'] = opts[:'worker_threads'] if !opts[:'worker_threads'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamS7imagingImplIsImageServerComponentInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_s7imaging_impl_is_image_server_component",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_s7imaging_impl_is_image_server_component\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cache_enable 
    # @option opts [Array<String>] :cache_root_paths 
    # @option opts [Integer] :cache_max_size 
    # @option opts [Integer] :cache_max_entries 
    # @return [ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo]
    def com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cache_enable 
    # @option opts [Array<String>] :cache_root_paths 
    # @option opts [Integer] :cache_max_size 
    # @option opts [Integer] :cache_max_entries 
    # @return [Array<(ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo, Integer, Hash)>] ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo data, response status code and response headers
    def com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cache.enable'] = opts[:'cache_enable'] if !opts[:'cache_enable'].nil?
      query_params[:'cache.rootPaths'] = @api_client.build_collection_param(opts[:'cache_root_paths'], :multi) if !opts[:'cache_root_paths'].nil?
      query_params[:'cache.maxSize'] = opts[:'cache_max_size'] if !opts[:'cache_max_size'].nil?
      query_params[:'cache.maxEntries'] = opts[:'cache_max_entries'] if !opts[:'cache_max_entries'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_s7imaging_impl_ps_platform_server_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :path_prefix 
    # @option opts [Boolean] :create_version 
    # @return [ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo]
    def com_adobe_cq_dam_webdav_impl_io_asset_io_handler(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_webdav_impl_io_asset_io_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :path_prefix 
    # @option opts [Boolean] :create_version 
    # @return [Array<(ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo, Integer, Hash)>] ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo data, response status code and response headers
    def com_adobe_cq_dam_webdav_impl_io_asset_io_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_webdav_impl_io_asset_io_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'pathPrefix'] = opts[:'path_prefix'] if !opts[:'path_prefix'].nil?
      query_params[:'createVersion'] = opts[:'create_version'] if !opts[:'create_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_webdav_impl_io_asset_io_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_webdav_impl_io_asset_io_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_webdav_version_linking_enable 
    # @option opts [Integer] :cq_dam_webdav_version_linking_scheduler_period 
    # @option opts [Integer] :cq_dam_webdav_version_linking_staging_timeout 
    # @return [ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo]
    def com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_webdav_version_linking_enable 
    # @option opts [Integer] :cq_dam_webdav_version_linking_scheduler_period 
    # @option opts [Integer] :cq_dam_webdav_version_linking_staging_timeout 
    # @return [Array<(ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo, Integer, Hash)>] ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo data, response status code and response headers
    def com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.webdav.version.linking.enable'] = opts[:'cq_dam_webdav_version_linking_enable'] if !opts[:'cq_dam_webdav_version_linking_enable'].nil?
      query_params[:'cq.dam.webdav.version.linking.scheduler.period'] = opts[:'cq_dam_webdav_version_linking_scheduler_period'] if !opts[:'cq_dam_webdav_version_linking_scheduler_period'].nil?
      query_params[:'cq.dam.webdav.version.linking.staging.timeout'] = opts[:'cq_dam_webdav_version_linking_staging_timeout'] if !opts[:'cq_dam_webdav_version_linking_staging_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_webdav_impl_io_dam_webdav_version_linking_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_day_cq_dam_core_impl_io_special_files_handler_filepatters 
    # @return [ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo]
    def com_adobe_cq_dam_webdav_impl_io_special_files_handler(opts = {})
      data, _status_code, _headers = com_adobe_cq_dam_webdav_impl_io_special_files_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_day_cq_dam_core_impl_io_special_files_handler_filepatters 
    # @return [Array<(ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo, Integer, Hash)>] ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo data, response status code and response headers
    def com_adobe_cq_dam_webdav_impl_io_special_files_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dam_webdav_impl_io_special_files_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters'] = @api_client.build_collection_param(opts[:'com_day_cq_dam_core_impl_io_special_files_handler_filepatters'], :multi) if !opts[:'com_day_cq_dam_core_impl_io_special_files_handler_filepatters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dam_webdav_impl_io_special_files_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dam_webdav_impl_io_special_files_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :firewall_deserialization_whitelist 
    # @option opts [Array<String>] :firewall_deserialization_blacklist 
    # @option opts [String] :firewall_deserialization_diagnostics 
    # @return [ComAdobeCqDeserfwImplDeserializationFirewallImplInfo]
    def com_adobe_cq_deserfw_impl_deserialization_firewall_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_deserfw_impl_deserialization_firewall_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :firewall_deserialization_whitelist 
    # @option opts [Array<String>] :firewall_deserialization_blacklist 
    # @option opts [String] :firewall_deserialization_diagnostics 
    # @return [Array<(ComAdobeCqDeserfwImplDeserializationFirewallImplInfo, Integer, Hash)>] ComAdobeCqDeserfwImplDeserializationFirewallImplInfo data, response status code and response headers
    def com_adobe_cq_deserfw_impl_deserialization_firewall_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_deserfw_impl_deserialization_firewall_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'firewall.deserialization.whitelist'] = @api_client.build_collection_param(opts[:'firewall_deserialization_whitelist'], :multi) if !opts[:'firewall_deserialization_whitelist'].nil?
      query_params[:'firewall.deserialization.blacklist'] = @api_client.build_collection_param(opts[:'firewall_deserialization_blacklist'], :multi) if !opts[:'firewall_deserialization_blacklist'].nil?
      query_params[:'firewall.deserialization.diagnostics'] = opts[:'firewall_deserialization_diagnostics'] if !opts[:'firewall_deserialization_diagnostics'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDeserfwImplDeserializationFirewallImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_deserfw_impl_deserialization_firewall_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_deserfw_impl_deserialization_firewall_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [ComAdobeCqDtmImplServiceDTMWebServiceImplInfo]
    def com_adobe_cq_dtm_impl_service_dtm_web_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_dtm_impl_service_dtm_web_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [Array<(ComAdobeCqDtmImplServiceDTMWebServiceImplInfo, Integer, Hash)>] ComAdobeCqDtmImplServiceDTMWebServiceImplInfo data, response status code and response headers
    def com_adobe_cq_dtm_impl_service_dtm_web_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dtm_impl_service_dtm_web_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'connection.timeout'] = opts[:'connection_timeout'] if !opts[:'connection_timeout'].nil?
      query_params[:'socket.timeout'] = opts[:'socket_timeout'] if !opts[:'socket_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDtmImplServiceDTMWebServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dtm_impl_service_dtm_web_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dtm_impl_service_dtm_web_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :dtm_staging_ip_whitelist 
    # @option opts [Array<String>] :dtm_production_ip_whitelist 
    # @return [ComAdobeCqDtmImplServletsDTMDeployHookServletInfo]
    def com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :dtm_staging_ip_whitelist 
    # @option opts [Array<String>] :dtm_production_ip_whitelist 
    # @return [Array<(ComAdobeCqDtmImplServletsDTMDeployHookServletInfo, Integer, Hash)>] ComAdobeCqDtmImplServletsDTMDeployHookServletInfo data, response status code and response headers
    def com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'dtm.staging.ip.whitelist'] = @api_client.build_collection_param(opts[:'dtm_staging_ip_whitelist'], :multi) if !opts[:'dtm_staging_ip_whitelist'].nil?
      query_params[:'dtm.production.ip.whitelist'] = @api_client.build_collection_param(opts[:'dtm_production_ip_whitelist'], :multi) if !opts[:'dtm_production_ip_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDtmImplServletsDTMDeployHookServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dtm_impl_servlets_dtm_deploy_hook_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :endpoint_uri 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [ComAdobeCqDtmReactorImplServiceWebServiceImplInfo]
    def com_adobe_cq_dtm_reactor_impl_service_web_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_dtm_reactor_impl_service_web_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :endpoint_uri 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [Array<(ComAdobeCqDtmReactorImplServiceWebServiceImplInfo, Integer, Hash)>] ComAdobeCqDtmReactorImplServiceWebServiceImplInfo data, response status code and response headers
    def com_adobe_cq_dtm_reactor_impl_service_web_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_dtm_reactor_impl_service_web_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'endpointUri'] = opts[:'endpoint_uri'] if !opts[:'endpoint_uri'].nil?
      query_params[:'connectionTimeout'] = opts[:'connection_timeout'] if !opts[:'connection_timeout'].nil?
      query_params[:'socketTimeout'] = opts[:'socket_timeout'] if !opts[:'socket_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqDtmReactorImplServiceWebServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_dtm_reactor_impl_service_web_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_dtm_reactor_impl_service_web_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :disabled_for_groups 
    # @return [ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo]
    def com_adobe_cq_experiencelog_impl_experience_log_config_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_experiencelog_impl_experience_log_config_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :disabled_for_groups 
    # @return [Array<(ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo, Integer, Hash)>] ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo data, response status code and response headers
    def com_adobe_cq_experiencelog_impl_experience_log_config_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_experiencelog_impl_experience_log_config_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'disabledForGroups'] = @api_client.build_collection_param(opts[:'disabled_for_groups'], :multi) if !opts[:'disabled_for_groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_experiencelog_impl_experience_log_config_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_experiencelog_impl_experience_log_config_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [Array<String>] :package_names 
    # @return [ComAdobeCqHcContentPackagesHealthCheckInfo]
    def com_adobe_cq_hc_content_packages_health_check(opts = {})
      data, _status_code, _headers = com_adobe_cq_hc_content_packages_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [Array<String>] :package_names 
    # @return [Array<(ComAdobeCqHcContentPackagesHealthCheckInfo, Integer, Hash)>] ComAdobeCqHcContentPackagesHealthCheckInfo data, response status code and response headers
    def com_adobe_cq_hc_content_packages_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_hc_content_packages_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.name'] = opts[:'hc_name'] if !opts[:'hc_name'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'hc.mbean.name'] = opts[:'hc_mbean_name'] if !opts[:'hc_mbean_name'].nil?
      query_params[:'package.names'] = @api_client.build_collection_param(opts[:'package_names'], :multi) if !opts[:'package_names'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqHcContentPackagesHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_hc_content_packages_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_hc_content_packages_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :history_request_filter_excluded_selectors 
    # @option opts [Array<String>] :history_request_filter_excluded_extensions 
    # @return [ComAdobeCqHistoryImplHistoryRequestFilterInfo]
    def com_adobe_cq_history_impl_history_request_filter(opts = {})
      data, _status_code, _headers = com_adobe_cq_history_impl_history_request_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :history_request_filter_excluded_selectors 
    # @option opts [Array<String>] :history_request_filter_excluded_extensions 
    # @return [Array<(ComAdobeCqHistoryImplHistoryRequestFilterInfo, Integer, Hash)>] ComAdobeCqHistoryImplHistoryRequestFilterInfo data, response status code and response headers
    def com_adobe_cq_history_impl_history_request_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_history_impl_history_request_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'history.requestFilter.excludedSelectors'] = @api_client.build_collection_param(opts[:'history_request_filter_excluded_selectors'], :multi) if !opts[:'history_request_filter_excluded_selectors'].nil?
      query_params[:'history.requestFilter.excludedExtensions'] = @api_client.build_collection_param(opts[:'history_request_filter_excluded_extensions'], :multi) if !opts[:'history_request_filter_excluded_extensions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqHistoryImplHistoryRequestFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_history_impl_history_request_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_history_impl_history_request_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :history_service_resource_types 
    # @option opts [Array<String>] :history_service_path_filter 
    # @return [ComAdobeCqHistoryImplHistoryServiceImplInfo]
    def com_adobe_cq_history_impl_history_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_history_impl_history_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :history_service_resource_types 
    # @option opts [Array<String>] :history_service_path_filter 
    # @return [Array<(ComAdobeCqHistoryImplHistoryServiceImplInfo, Integer, Hash)>] ComAdobeCqHistoryImplHistoryServiceImplInfo data, response status code and response headers
    def com_adobe_cq_history_impl_history_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_history_impl_history_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'history.service.resourceTypes'] = @api_client.build_collection_param(opts[:'history_service_resource_types'], :multi) if !opts[:'history_service_resource_types'].nil?
      query_params[:'history.service.pathFilter'] = @api_client.build_collection_param(opts[:'history_service_path_filter'], :multi) if !opts[:'history_service_path_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqHistoryImplHistoryServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_history_impl_history_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_history_impl_history_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :inbox_impl_typeprovider_registrypaths 
    # @option opts [Array<String>] :inbox_impl_typeprovider_legacypaths 
    # @option opts [String] :inbox_impl_typeprovider_defaulturl_failureitem 
    # @option opts [String] :inbox_impl_typeprovider_defaulturl_workitem 
    # @option opts [String] :inbox_impl_typeprovider_defaulturl_task 
    # @return [ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo]
    def com_adobe_cq_inbox_impl_typeprovider_item_type_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_inbox_impl_typeprovider_item_type_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :inbox_impl_typeprovider_registrypaths 
    # @option opts [Array<String>] :inbox_impl_typeprovider_legacypaths 
    # @option opts [String] :inbox_impl_typeprovider_defaulturl_failureitem 
    # @option opts [String] :inbox_impl_typeprovider_defaulturl_workitem 
    # @option opts [String] :inbox_impl_typeprovider_defaulturl_task 
    # @return [Array<(ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo, Integer, Hash)>] ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo data, response status code and response headers
    def com_adobe_cq_inbox_impl_typeprovider_item_type_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_inbox_impl_typeprovider_item_type_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'inbox.impl.typeprovider.registrypaths'] = @api_client.build_collection_param(opts[:'inbox_impl_typeprovider_registrypaths'], :multi) if !opts[:'inbox_impl_typeprovider_registrypaths'].nil?
      query_params[:'inbox.impl.typeprovider.legacypaths'] = @api_client.build_collection_param(opts[:'inbox_impl_typeprovider_legacypaths'], :multi) if !opts[:'inbox_impl_typeprovider_legacypaths'].nil?
      query_params[:'inbox.impl.typeprovider.defaulturl.failureitem'] = opts[:'inbox_impl_typeprovider_defaulturl_failureitem'] if !opts[:'inbox_impl_typeprovider_defaulturl_failureitem'].nil?
      query_params[:'inbox.impl.typeprovider.defaulturl.workitem'] = opts[:'inbox_impl_typeprovider_defaulturl_workitem'] if !opts[:'inbox_impl_typeprovider_defaulturl_workitem'].nil?
      query_params[:'inbox.impl.typeprovider.defaulturl.task'] = opts[:'inbox_impl_typeprovider_defaulturl_task'] if !opts[:'inbox_impl_typeprovider_defaulturl_task'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_inbox_impl_typeprovider_item_type_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_inbox_impl_typeprovider_item_type_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :image_quality 
    # @option opts [String] :image_supported_resolutions 
    # @return [ComAdobeCqProjectsImplServletProjectImageServletInfo]
    def com_adobe_cq_projects_impl_servlet_project_image_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_projects_impl_servlet_project_image_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :image_quality 
    # @option opts [String] :image_supported_resolutions 
    # @return [Array<(ComAdobeCqProjectsImplServletProjectImageServletInfo, Integer, Hash)>] ComAdobeCqProjectsImplServletProjectImageServletInfo data, response status code and response headers
    def com_adobe_cq_projects_impl_servlet_project_image_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_projects_impl_servlet_project_image_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'image.quality'] = opts[:'image_quality'] if !opts[:'image_quality'].nil?
      query_params[:'image.supported.resolutions'] = opts[:'image_supported_resolutions'] if !opts[:'image_supported_resolutions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqProjectsImplServletProjectImageServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_projects_impl_servlet_project_image_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_projects_impl_servlet_project_image_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduledpurge_name 
    # @option opts [Boolean] :scheduledpurge_purge_active 
    # @option opts [Array<String>] :scheduledpurge_templates 
    # @option opts [Boolean] :scheduledpurge_purge_groups 
    # @option opts [Boolean] :scheduledpurge_purge_assets 
    # @option opts [Boolean] :scheduledpurge_terminate_running_workflows 
    # @option opts [Integer] :scheduledpurge_daysold 
    # @option opts [Integer] :scheduledpurge_save_threshold 
    # @return [ComAdobeCqProjectsPurgeSchedulerInfo]
    def com_adobe_cq_projects_purge_scheduler(opts = {})
      data, _status_code, _headers = com_adobe_cq_projects_purge_scheduler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduledpurge_name 
    # @option opts [Boolean] :scheduledpurge_purge_active 
    # @option opts [Array<String>] :scheduledpurge_templates 
    # @option opts [Boolean] :scheduledpurge_purge_groups 
    # @option opts [Boolean] :scheduledpurge_purge_assets 
    # @option opts [Boolean] :scheduledpurge_terminate_running_workflows 
    # @option opts [Integer] :scheduledpurge_daysold 
    # @option opts [Integer] :scheduledpurge_save_threshold 
    # @return [Array<(ComAdobeCqProjectsPurgeSchedulerInfo, Integer, Hash)>] ComAdobeCqProjectsPurgeSchedulerInfo data, response status code and response headers
    def com_adobe_cq_projects_purge_scheduler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_projects_purge_scheduler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduledpurge.name'] = opts[:'scheduledpurge_name'] if !opts[:'scheduledpurge_name'].nil?
      query_params[:'scheduledpurge.purgeActive'] = opts[:'scheduledpurge_purge_active'] if !opts[:'scheduledpurge_purge_active'].nil?
      query_params[:'scheduledpurge.templates'] = @api_client.build_collection_param(opts[:'scheduledpurge_templates'], :multi) if !opts[:'scheduledpurge_templates'].nil?
      query_params[:'scheduledpurge.purgeGroups'] = opts[:'scheduledpurge_purge_groups'] if !opts[:'scheduledpurge_purge_groups'].nil?
      query_params[:'scheduledpurge.purgeAssets'] = opts[:'scheduledpurge_purge_assets'] if !opts[:'scheduledpurge_purge_assets'].nil?
      query_params[:'scheduledpurge.terminateRunningWorkflows'] = opts[:'scheduledpurge_terminate_running_workflows'] if !opts[:'scheduledpurge_terminate_running_workflows'].nil?
      query_params[:'scheduledpurge.daysold'] = opts[:'scheduledpurge_daysold'] if !opts[:'scheduledpurge_daysold'].nil?
      query_params[:'scheduledpurge.saveThreshold'] = opts[:'scheduledpurge_save_threshold'] if !opts[:'scheduledpurge_save_threshold'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqProjectsPurgeSchedulerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_projects_purge_scheduler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_projects_purge_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :include_paths 
    # @option opts [String] :exporter_user 
    # @return [ComAdobeCqScheduledExporterImplScheduledExporterImplInfo]
    def com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :include_paths 
    # @option opts [String] :exporter_user 
    # @return [Array<(ComAdobeCqScheduledExporterImplScheduledExporterImplInfo, Integer, Hash)>] ComAdobeCqScheduledExporterImplScheduledExporterImplInfo data, response status code and response headers
    def com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'include.paths'] = @api_client.build_collection_param(opts[:'include_paths'], :multi) if !opts[:'include_paths'].nil?
      query_params[:'exporter.user'] = opts[:'exporter_user'] if !opts[:'exporter_user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScheduledExporterImplScheduledExporterImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_scheduled_exporter_impl_scheduled_exporter_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :com_adobe_cq_screens_analytics_impl_url 
    # @option opts [String] :com_adobe_cq_screens_analytics_impl_apikey 
    # @option opts [String] :com_adobe_cq_screens_analytics_impl_project 
    # @option opts [String] :com_adobe_cq_screens_analytics_impl_environment 
    # @option opts [Integer] :com_adobe_cq_screens_analytics_impl_send_frequency 
    # @return [ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo]
    def com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :com_adobe_cq_screens_analytics_impl_url 
    # @option opts [String] :com_adobe_cq_screens_analytics_impl_apikey 
    # @option opts [String] :com_adobe_cq_screens_analytics_impl_project 
    # @option opts [String] :com_adobe_cq_screens_analytics_impl_environment 
    # @option opts [Integer] :com_adobe_cq_screens_analytics_impl_send_frequency 
    # @return [Array<(ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo, Integer, Hash)>] ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo data, response status code and response headers
    def com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.cq.screens.analytics.impl.url'] = opts[:'com_adobe_cq_screens_analytics_impl_url'] if !opts[:'com_adobe_cq_screens_analytics_impl_url'].nil?
      query_params[:'com.adobe.cq.screens.analytics.impl.apikey'] = opts[:'com_adobe_cq_screens_analytics_impl_apikey'] if !opts[:'com_adobe_cq_screens_analytics_impl_apikey'].nil?
      query_params[:'com.adobe.cq.screens.analytics.impl.project'] = opts[:'com_adobe_cq_screens_analytics_impl_project'] if !opts[:'com_adobe_cq_screens_analytics_impl_project'].nil?
      query_params[:'com.adobe.cq.screens.analytics.impl.environment'] = opts[:'com_adobe_cq_screens_analytics_impl_environment'] if !opts[:'com_adobe_cq_screens_analytics_impl_environment'].nil?
      query_params[:'com.adobe.cq.screens.analytics.impl.sendFrequency'] = opts[:'com_adobe_cq_screens_analytics_impl_send_frequency'] if !opts[:'com_adobe_cq_screens_analytics_impl_send_frequency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_analytics_impl_screens_analytics_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :com_adobe_aem_screens_player_pingfrequency 
    # @option opts [String] :com_adobe_aem_screens_device_pasword_specialchars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minlowercasechars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minuppercasechars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minnumberchars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minspecialchars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minlength 
    # @return [ComAdobeCqScreensDeviceImplDeviceServiceInfo]
    def com_adobe_cq_screens_device_impl_device_service(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_device_impl_device_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :com_adobe_aem_screens_player_pingfrequency 
    # @option opts [String] :com_adobe_aem_screens_device_pasword_specialchars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minlowercasechars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minuppercasechars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minnumberchars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minspecialchars 
    # @option opts [Integer] :com_adobe_aem_screens_device_pasword_minlength 
    # @return [Array<(ComAdobeCqScreensDeviceImplDeviceServiceInfo, Integer, Hash)>] ComAdobeCqScreensDeviceImplDeviceServiceInfo data, response status code and response headers
    def com_adobe_cq_screens_device_impl_device_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_device_impl_device_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.aem.screens.player.pingfrequency'] = opts[:'com_adobe_aem_screens_player_pingfrequency'] if !opts[:'com_adobe_aem_screens_player_pingfrequency'].nil?
      query_params[:'com.adobe.aem.screens.device.pasword.specialchars'] = opts[:'com_adobe_aem_screens_device_pasword_specialchars'] if !opts[:'com_adobe_aem_screens_device_pasword_specialchars'].nil?
      query_params[:'com.adobe.aem.screens.device.pasword.minlowercasechars'] = opts[:'com_adobe_aem_screens_device_pasword_minlowercasechars'] if !opts[:'com_adobe_aem_screens_device_pasword_minlowercasechars'].nil?
      query_params[:'com.adobe.aem.screens.device.pasword.minuppercasechars'] = opts[:'com_adobe_aem_screens_device_pasword_minuppercasechars'] if !opts[:'com_adobe_aem_screens_device_pasword_minuppercasechars'].nil?
      query_params[:'com.adobe.aem.screens.device.pasword.minnumberchars'] = opts[:'com_adobe_aem_screens_device_pasword_minnumberchars'] if !opts[:'com_adobe_aem_screens_device_pasword_minnumberchars'].nil?
      query_params[:'com.adobe.aem.screens.device.pasword.minspecialchars'] = opts[:'com_adobe_aem_screens_device_pasword_minspecialchars'] if !opts[:'com_adobe_aem_screens_device_pasword_minspecialchars'].nil?
      query_params[:'com.adobe.aem.screens.device.pasword.minlength'] = opts[:'com_adobe_aem_screens_device_pasword_minlength'] if !opts[:'com_adobe_aem_screens_device_pasword_minlength'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensDeviceImplDeviceServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_device_impl_device_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_device_impl_device_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :device_registration_timeout 
    # @return [ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo]
    def com_adobe_cq_screens_device_registration_impl_registration_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_device_registration_impl_registration_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :device_registration_timeout 
    # @return [Array<(ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo, Integer, Hash)>] ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo data, response status code and response headers
    def com_adobe_cq_screens_device_registration_impl_registration_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_device_registration_impl_registration_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'deviceRegistrationTimeout'] = opts[:'device_registration_timeout'] if !opts[:'device_registration_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_device_registration_impl_registration_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_device_registration_impl_registration_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_pagesupdatehandler_imageresourcetypes 
    # @option opts [Array<String>] :cq_pagesupdatehandler_productresourcetypes 
    # @option opts [Array<String>] :cq_pagesupdatehandler_videoresourcetypes 
    # @option opts [Array<String>] :cq_pagesupdatehandler_dynamicsequenceresourcetypes 
    # @option opts [Array<String>] :cq_pagesupdatehandler_previewmodepaths 
    # @return [ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo]
    def com_adobe_cq_screens_impl_handler_channels_update_handler(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_impl_handler_channels_update_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_pagesupdatehandler_imageresourcetypes 
    # @option opts [Array<String>] :cq_pagesupdatehandler_productresourcetypes 
    # @option opts [Array<String>] :cq_pagesupdatehandler_videoresourcetypes 
    # @option opts [Array<String>] :cq_pagesupdatehandler_dynamicsequenceresourcetypes 
    # @option opts [Array<String>] :cq_pagesupdatehandler_previewmodepaths 
    # @return [Array<(ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo, Integer, Hash)>] ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo data, response status code and response headers
    def com_adobe_cq_screens_impl_handler_channels_update_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_impl_handler_channels_update_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.pagesupdatehandler.imageresourcetypes'] = @api_client.build_collection_param(opts[:'cq_pagesupdatehandler_imageresourcetypes'], :multi) if !opts[:'cq_pagesupdatehandler_imageresourcetypes'].nil?
      query_params[:'cq.pagesupdatehandler.productresourcetypes'] = @api_client.build_collection_param(opts[:'cq_pagesupdatehandler_productresourcetypes'], :multi) if !opts[:'cq_pagesupdatehandler_productresourcetypes'].nil?
      query_params[:'cq.pagesupdatehandler.videoresourcetypes'] = @api_client.build_collection_param(opts[:'cq_pagesupdatehandler_videoresourcetypes'], :multi) if !opts[:'cq_pagesupdatehandler_videoresourcetypes'].nil?
      query_params[:'cq.pagesupdatehandler.dynamicsequenceresourcetypes'] = @api_client.build_collection_param(opts[:'cq_pagesupdatehandler_dynamicsequenceresourcetypes'], :multi) if !opts[:'cq_pagesupdatehandler_dynamicsequenceresourcetypes'].nil?
      query_params[:'cq.pagesupdatehandler.previewmodepaths'] = @api_client.build_collection_param(opts[:'cq_pagesupdatehandler_previewmodepaths'], :multi) if !opts[:'cq_pagesupdatehandler_previewmodepaths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_impl_handler_channels_update_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_impl_handler_channels_update_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @return [ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo]
    def com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @return [Array<(ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo, Integer, Hash)>] ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo data, response status code and response headers
    def com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_impl_jobs_distributed_devices_stati_update_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :com_adobe_aem_screens_impl_remote_request_timeout 
    # @return [ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo]
    def com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :com_adobe_aem_screens_impl_remote_request_timeout 
    # @return [Array<(ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo, Integer, Hash)>] ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo data, response status code and response headers
    def com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.aem.screens.impl.remote.request_timeout'] = opts[:'com_adobe_aem_screens_impl_remote_request_timeout'] if !opts[:'com_adobe_aem_screens_impl_remote_request_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_impl_remote_impl_distributed_http_client_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :screens_channels_properties_to_remove 
    # @return [ComAdobeCqScreensImplScreensChannelPostProcessorInfo]
    def com_adobe_cq_screens_impl_screens_channel_post_processor(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_impl_screens_channel_post_processor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :screens_channels_properties_to_remove 
    # @return [Array<(ComAdobeCqScreensImplScreensChannelPostProcessorInfo, Integer, Hash)>] ComAdobeCqScreensImplScreensChannelPostProcessorInfo data, response status code and response headers
    def com_adobe_cq_screens_impl_screens_channel_post_processor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_impl_screens_channel_post_processor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'screens.channels.properties.to.remove'] = @api_client.build_collection_param(opts[:'screens_channels_properties_to_remove'], :multi) if !opts[:'screens_channels_properties_to_remove'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensImplScreensChannelPostProcessorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_impl_screens_channel_post_processor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_impl_screens_channel_post_processor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency 
    # @option opts [Integer] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver 
    # @option opts [Integer] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport 
    # @option opts [Boolean] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password 
    # @return [ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo]
    def com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency 
    # @option opts [Integer] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver 
    # @option opts [Integer] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport 
    # @option opts [Boolean] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username 
    # @option opts [String] :com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password 
    # @return [Array<(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo, Integer, Hash)>] ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo data, response status code and response headers
    def com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath'] = @api_client.build_collection_param(opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path'], :multi) if !opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path'].nil?
      query_params[:'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency'] = opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency'] if !opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency'].nil?
      query_params[:'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout'] = opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout'] if !opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout'].nil?
      query_params[:'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients'] = opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients'] if !opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients'].nil?
      query_params[:'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver'] = opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver'] if !opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver'].nil?
      query_params[:'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport'] = opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport'] if !opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport'].nil?
      query_params[:'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls'] = opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls'] if !opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls'].nil?
      query_params[:'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username'] = opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username'] if !opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username'].nil?
      query_params[:'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password'] = opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password'] if !opts[:'com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Integer] :global_size 
    # @option opts [Integer] :max_disk_usage 
    # @option opts [Boolean] :persistence_enabled 
    # @option opts [Integer] :thread_pool_max_size 
    # @option opts [Integer] :scheduled_thread_pool_max_size 
    # @option opts [Integer] :graceful_shutdown_timeout 
    # @option opts [Array<String>] :queues 
    # @option opts [Array<String>] :topics 
    # @option opts [Integer] :addresses_max_delivery_attempts 
    # @option opts [Integer] :addresses_expiry_delay 
    # @option opts [String] :addresses_address_full_message_policy 
    # @option opts [Integer] :addresses_max_size_bytes 
    # @option opts [Integer] :addresses_page_size_bytes 
    # @option opts [Integer] :addresses_page_cache_max_size 
    # @option opts [String] :cluster_user 
    # @option opts [String] :cluster_password 
    # @option opts [Integer] :cluster_call_timeout 
    # @option opts [Integer] :cluster_call_failover_timeout 
    # @option opts [Integer] :cluster_client_failure_check_period 
    # @option opts [Integer] :cluster_notification_attempts 
    # @option opts [Integer] :cluster_notification_interval 
    # @option opts [Integer] :id_cache_size 
    # @option opts [Integer] :cluster_confirmation_window_size 
    # @option opts [Integer] :cluster_connection_ttl 
    # @option opts [Boolean] :cluster_duplicate_detection 
    # @option opts [Integer] :cluster_initial_connect_attempts 
    # @option opts [Integer] :cluster_max_retry_interval 
    # @option opts [Integer] :cluster_min_large_message_size 
    # @option opts [Integer] :cluster_producer_window_size 
    # @option opts [Integer] :cluster_reconnect_attempts 
    # @option opts [Integer] :cluster_retry_interval 
    # @option opts [Float] :cluster_retry_interval_multiplier 
    # @return [ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo]
    def com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Integer] :global_size 
    # @option opts [Integer] :max_disk_usage 
    # @option opts [Boolean] :persistence_enabled 
    # @option opts [Integer] :thread_pool_max_size 
    # @option opts [Integer] :scheduled_thread_pool_max_size 
    # @option opts [Integer] :graceful_shutdown_timeout 
    # @option opts [Array<String>] :queues 
    # @option opts [Array<String>] :topics 
    # @option opts [Integer] :addresses_max_delivery_attempts 
    # @option opts [Integer] :addresses_expiry_delay 
    # @option opts [String] :addresses_address_full_message_policy 
    # @option opts [Integer] :addresses_max_size_bytes 
    # @option opts [Integer] :addresses_page_size_bytes 
    # @option opts [Integer] :addresses_page_cache_max_size 
    # @option opts [String] :cluster_user 
    # @option opts [String] :cluster_password 
    # @option opts [Integer] :cluster_call_timeout 
    # @option opts [Integer] :cluster_call_failover_timeout 
    # @option opts [Integer] :cluster_client_failure_check_period 
    # @option opts [Integer] :cluster_notification_attempts 
    # @option opts [Integer] :cluster_notification_interval 
    # @option opts [Integer] :id_cache_size 
    # @option opts [Integer] :cluster_confirmation_window_size 
    # @option opts [Integer] :cluster_connection_ttl 
    # @option opts [Boolean] :cluster_duplicate_detection 
    # @option opts [Integer] :cluster_initial_connect_attempts 
    # @option opts [Integer] :cluster_max_retry_interval 
    # @option opts [Integer] :cluster_min_large_message_size 
    # @option opts [Integer] :cluster_producer_window_size 
    # @option opts [Integer] :cluster_reconnect_attempts 
    # @option opts [Integer] :cluster_retry_interval 
    # @option opts [Float] :cluster_retry_interval_multiplier 
    # @return [Array<(ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo, Integer, Hash)>] ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo data, response status code and response headers
    def com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'global.size'] = opts[:'global_size'] if !opts[:'global_size'].nil?
      query_params[:'max.disk.usage'] = opts[:'max_disk_usage'] if !opts[:'max_disk_usage'].nil?
      query_params[:'persistence.enabled'] = opts[:'persistence_enabled'] if !opts[:'persistence_enabled'].nil?
      query_params[:'thread.pool.max.size'] = opts[:'thread_pool_max_size'] if !opts[:'thread_pool_max_size'].nil?
      query_params[:'scheduled.thread.pool.max.size'] = opts[:'scheduled_thread_pool_max_size'] if !opts[:'scheduled_thread_pool_max_size'].nil?
      query_params[:'graceful.shutdown.timeout'] = opts[:'graceful_shutdown_timeout'] if !opts[:'graceful_shutdown_timeout'].nil?
      query_params[:'queues'] = @api_client.build_collection_param(opts[:'queues'], :multi) if !opts[:'queues'].nil?
      query_params[:'topics'] = @api_client.build_collection_param(opts[:'topics'], :multi) if !opts[:'topics'].nil?
      query_params[:'addresses.max.delivery.attempts'] = opts[:'addresses_max_delivery_attempts'] if !opts[:'addresses_max_delivery_attempts'].nil?
      query_params[:'addresses.expiry.delay'] = opts[:'addresses_expiry_delay'] if !opts[:'addresses_expiry_delay'].nil?
      query_params[:'addresses.address.full.message.policy'] = opts[:'addresses_address_full_message_policy'] if !opts[:'addresses_address_full_message_policy'].nil?
      query_params[:'addresses.max.size.bytes'] = opts[:'addresses_max_size_bytes'] if !opts[:'addresses_max_size_bytes'].nil?
      query_params[:'addresses.page.size.bytes'] = opts[:'addresses_page_size_bytes'] if !opts[:'addresses_page_size_bytes'].nil?
      query_params[:'addresses.page.cache.max.size'] = opts[:'addresses_page_cache_max_size'] if !opts[:'addresses_page_cache_max_size'].nil?
      query_params[:'cluster.user'] = opts[:'cluster_user'] if !opts[:'cluster_user'].nil?
      query_params[:'cluster.password'] = opts[:'cluster_password'] if !opts[:'cluster_password'].nil?
      query_params[:'cluster.call.timeout'] = opts[:'cluster_call_timeout'] if !opts[:'cluster_call_timeout'].nil?
      query_params[:'cluster.call.failover.timeout'] = opts[:'cluster_call_failover_timeout'] if !opts[:'cluster_call_failover_timeout'].nil?
      query_params[:'cluster.client.failure.check.period'] = opts[:'cluster_client_failure_check_period'] if !opts[:'cluster_client_failure_check_period'].nil?
      query_params[:'cluster.notification.attempts'] = opts[:'cluster_notification_attempts'] if !opts[:'cluster_notification_attempts'].nil?
      query_params[:'cluster.notification.interval'] = opts[:'cluster_notification_interval'] if !opts[:'cluster_notification_interval'].nil?
      query_params[:'id.cache.size'] = opts[:'id_cache_size'] if !opts[:'id_cache_size'].nil?
      query_params[:'cluster.confirmation.window.size'] = opts[:'cluster_confirmation_window_size'] if !opts[:'cluster_confirmation_window_size'].nil?
      query_params[:'cluster.connection.ttl'] = opts[:'cluster_connection_ttl'] if !opts[:'cluster_connection_ttl'].nil?
      query_params[:'cluster.duplicate.detection'] = opts[:'cluster_duplicate_detection'] if !opts[:'cluster_duplicate_detection'].nil?
      query_params[:'cluster.initial.connect.attempts'] = opts[:'cluster_initial_connect_attempts'] if !opts[:'cluster_initial_connect_attempts'].nil?
      query_params[:'cluster.max.retry.interval'] = opts[:'cluster_max_retry_interval'] if !opts[:'cluster_max_retry_interval'].nil?
      query_params[:'cluster.min.large.message.size'] = opts[:'cluster_min_large_message_size'] if !opts[:'cluster_min_large_message_size'].nil?
      query_params[:'cluster.producer.window.size'] = opts[:'cluster_producer_window_size'] if !opts[:'cluster_producer_window_size'].nil?
      query_params[:'cluster.reconnect.attempts'] = opts[:'cluster_reconnect_attempts'] if !opts[:'cluster_reconnect_attempts'].nil?
      query_params[:'cluster.retry.interval'] = opts[:'cluster_retry_interval'] if !opts[:'cluster_retry_interval'].nil?
      query_params[:'cluster.retry.interval.multiplier'] = opts[:'cluster_retry_interval_multiplier'] if !opts[:'cluster_retry_interval_multiplier'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_mq_activemq_impl_artemis_jms_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path 
    # @option opts [String] :com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency 
    # @return [ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo]
    def com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path 
    # @option opts [String] :com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency 
    # @return [Array<(ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo, Integer, Hash)>] ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo data, response status code and response headers
    def com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath'] = @api_client.build_collection_param(opts[:'com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path'], :multi) if !opts[:'com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_project_path'].nil?
      query_params[:'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency'] = opts[:'com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency'] if !opts[:'com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl_schedule_frequency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_offlinecontent_impl_bulk_offline_update_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :disable_smart_sync 
    # @return [ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo]
    def com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :disable_smart_sync 
    # @return [Array<(ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo, Integer, Hash)>] ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo data, response status code and response headers
    def com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'disableSmartSync'] = opts[:'disable_smart_sync'] if !opts[:'disable_smart_sync'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_offlinecontent_impl_offline_content_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_data_triggered_content 
    # @return [ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo]
    def com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag(opts = {})
      data, _status_code, _headers = com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_data_triggered_content 
    # @return [Array<(ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo, Integer, Hash)>] ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo data, response status code and response headers
    def com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enableDataTriggeredContent'] = opts[:'enable_data_triggered_content'] if !opts[:'enable_data_triggered_content'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_screens_segmentation_impl_segmentation_feature_flag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo]
    def com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch(opts = {})
      data, _status_code, _headers = com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo, Integer, Hash)>] ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo data, response status code and response headers
    def com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_security_hc_bundles_impl_html_library_manager_config_health_ch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo]
    def com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check(opts = {})
      data, _status_code, _headers = com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo, Integer, Hash)>] ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo data, response status code and response headers
    def com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_security_hc_bundles_impl_wcm_filter_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :dispatcher_address 
    # @option opts [Array<String>] :dispatcher_filter_allowed 
    # @option opts [Array<String>] :dispatcher_filter_blocked 
    # @return [ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo]
    def com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check(opts = {})
      data, _status_code, _headers = com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :dispatcher_address 
    # @option opts [Array<String>] :dispatcher_filter_allowed 
    # @option opts [Array<String>] :dispatcher_filter_blocked 
    # @return [Array<(ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo, Integer, Hash)>] ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo data, response status code and response headers
    def com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'dispatcher.address'] = opts[:'dispatcher_address'] if !opts[:'dispatcher_address'].nil?
      query_params[:'dispatcher.filter.allowed'] = @api_client.build_collection_param(opts[:'dispatcher_filter_allowed'], :multi) if !opts[:'dispatcher_filter_allowed'].nil?
      query_params[:'dispatcher.filter.blocked'] = @api_client.build_collection_param(opts[:'dispatcher_filter_blocked'], :multi) if !opts[:'dispatcher_filter_blocked'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_security_hc_dispatcher_impl_dispatcher_access_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo]
    def com_adobe_cq_security_hc_packages_impl_example_content_health_check(opts = {})
      data, _status_code, _headers = com_adobe_cq_security_hc_packages_impl_example_content_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo, Integer, Hash)>] ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo data, response status code and response headers
    def com_adobe_cq_security_hc_packages_impl_example_content_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_security_hc_packages_impl_example_content_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_security_hc_packages_impl_example_content_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_security_hc_packages_impl_example_content_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :webserver_address 
    # @return [ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo]
    def com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check(opts = {})
      data, _status_code, _headers = com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :webserver_address 
    # @return [Array<(ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo, Integer, Hash)>] ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo data, response status code and response headers
    def com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'webserver.address'] = opts[:'webserver_address'] if !opts[:'webserver_address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_security_hc_webserver_impl_clickjacking_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable 
    # @option opts [Integer] :ttl1 
    # @option opts [Integer] :ttl2 
    # @return [ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo]
    def com_adobe_cq_social_accountverification_impl_account_management_config_im(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_accountverification_impl_account_management_config_im_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable 
    # @option opts [Integer] :ttl1 
    # @option opts [Integer] :ttl2 
    # @return [Array<(ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo, Integer, Hash)>] ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo data, response status code and response headers
    def com_adobe_cq_social_accountverification_impl_account_management_config_im_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_accountverification_impl_account_management_config_im ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enable'] = opts[:'enable'] if !opts[:'enable'].nil?
      query_params[:'ttl1'] = opts[:'ttl1'] if !opts[:'ttl1'].nil?
      query_params[:'ttl2'] = opts[:'ttl2'] if !opts[:'ttl2'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_accountverification_impl_account_management_config_im",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_accountverification_impl_account_management_config_im\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo]
    def com_adobe_cq_social_activitystreams_client_impl_social_activity_componen(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_activitystreams_client_impl_social_activity_componen_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [Array<(ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo, Integer, Hash)>] ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo data, response status code and response headers
    def com_adobe_cq_social_activitystreams_client_impl_social_activity_componen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_activitystreams_client_impl_social_activity_componen ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_activitystreams_client_impl_social_activity_componen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_activitystreams_client_impl_social_activity_componen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo]
    def com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [Array<(ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo, Integer, Hash)>] ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo data, response status code and response headers
    def com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_activitystreams_client_impl_social_activity_stream_co\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @return [ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo]
    def com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @return [Array<(ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo, Integer, Hash)>] ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo data, response status code and response headers
    def com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.topics'] = opts[:'event_topics'] if !opts[:'event_topics'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_activitystreams_listener_impl_event_listener_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :accepted 
    # @option opts [Integer] :ranked 
    # @return [ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo]
    def com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :accepted 
    # @option opts [Integer] :ranked 
    # @return [Array<(ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo, Integer, Hash)>] ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo data, response status code and response headers
    def com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'accepted'] = opts[:'accepted'] if !opts[:'accepted'].nil?
      query_params[:'ranked'] = opts[:'ranked'] if !opts[:'ranked'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_activitystreams_listener_impl_moderation_event_exten\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :ranking 
    # @option opts [Boolean] :enable 
    # @return [ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo]
    def com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :ranking 
    # @option opts [Boolean] :enable 
    # @return [Array<(ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo, Integer, Hash)>] ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo data, response status code and response headers
    def com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'ranking'] = opts[:'ranking'] if !opts[:'ranking'].nil?
      query_params[:'enable'] = opts[:'enable'] if !opts[:'enable'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_activitystreams_listener_impl_rating_event_activity_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :stream_path 
    # @option opts [String] :stream_name 
    # @return [ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo]
    def com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :stream_path 
    # @option opts [String] :stream_name 
    # @return [Array<(ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo, Integer, Hash)>] ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo data, response status code and response headers
    def com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'streamPath'] = opts[:'stream_path'] if !opts[:'stream_path'].nil?
      query_params[:'streamName'] = opts[:'stream_name'] if !opts[:'stream_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_activitystreams_listener_impl_resource_activity_stre\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_retry 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo]
    def com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_retry 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo, Integer, Hash)>] ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo data, response status code and response headers
    def com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'MaxRetry'] = opts[:'max_retry'] if !opts[:'max_retry'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_calendar_client_endpoints_impl_calendar_operations_i\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :attachment_type_blacklist 
    # @option opts [Integer] :extension_order 
    # @return [ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo]
    def com_adobe_cq_social_calendar_client_operationextensions_event_attachmen(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_calendar_client_operationextensions_event_attachmen_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :attachment_type_blacklist 
    # @option opts [Integer] :extension_order 
    # @return [Array<(ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo, Integer, Hash)>] ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo data, response status code and response headers
    def com_adobe_cq_social_calendar_client_operationextensions_event_attachmen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_calendar_client_operationextensions_event_attachmen ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'attachmentTypeBlacklist'] = opts[:'attachment_type_blacklist'] if !opts[:'attachment_type_blacklist'].nil?
      query_params[:'extension.order'] = opts[:'extension_order'] if !opts[:'extension_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_calendar_client_operationextensions_event_attachmen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_calendar_client_operationextensions_event_attachmen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :timezones_expirytime 
    # @return [ComAdobeCqSocialCalendarServletsTimeZoneServletInfo]
    def com_adobe_cq_social_calendar_servlets_time_zone_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_calendar_servlets_time_zone_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :timezones_expirytime 
    # @return [Array<(ComAdobeCqSocialCalendarServletsTimeZoneServletInfo, Integer, Hash)>] ComAdobeCqSocialCalendarServletsTimeZoneServletInfo data, response status code and response headers
    def com_adobe_cq_social_calendar_servlets_time_zone_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_calendar_servlets_time_zone_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'timezones.expirytime'] = opts[:'timezones_expirytime'] if !opts[:'timezones_expirytime'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCalendarServletsTimeZoneServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_calendar_servlets_time_zone_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_calendar_servlets_time_zone_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :ranking 
    # @return [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo]
    def com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :ranking 
    # @return [Array<(ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo, Integer, Hash)>] ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo data, response status code and response headers
    def com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'ranking'] = opts[:'ranking'] if !opts[:'ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_comments_endpoints_impl_comment_delete_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo]
    def com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo, Integer, Hash)>] ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo data, response status code and response headers
    def com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_comments_endpoints_impl_comment_operation_se\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo]
    def com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo, Integer, Hash)>] ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo data, response status code and response headers
    def com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_comments_endpoints_impl_translation_operati\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :num_user_limit 
    # @return [ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo]
    def com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :num_user_limit 
    # @return [Array<(ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo, Integer, Hash)>] ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo data, response status code and response headers
    def com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'numUserLimit'] = opts[:'num_user_limit'] if !opts[:'num_user_limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_comments_listing_impl_search_comment_social_c\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_scheduled_posts_search 
    # @option opts [Integer] :number_of_minutes 
    # @option opts [Integer] :max_search_limit 
    # @return [ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo]
    def com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_scheduled_posts_search 
    # @option opts [Integer] :number_of_minutes 
    # @option opts [Integer] :max_search_limit 
    # @return [Array<(ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo, Integer, Hash)>] ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo data, response status code and response headers
    def com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enableScheduledPostsSearch'] = opts[:'enable_scheduled_posts_search'] if !opts[:'enable_scheduled_posts_search'].nil?
      query_params[:'numberOfMinutes'] = opts[:'number_of_minutes'] if !opts[:'number_of_minutes'].nil?
      query_params[:'maxSearchLimit'] = opts[:'max_search_limit'] if !opts[:'max_search_limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_comments_scheduler_impl_search_scheduled_pos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cors_enabling 
    # @return [ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo]
    def com_adobe_cq_social_commons_cors_cors_authentication_filter(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_cors_cors_authentication_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cors_enabling 
    # @return [Array<(ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo, Integer, Hash)>] ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo data, response status code and response headers
    def com_adobe_cq_social_commons_cors_cors_authentication_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_cors_cors_authentication_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cors.enabling'] = opts[:'cors_enabling'] if !opts[:'cors_enabling'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_cors_cors_authentication_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_cors_cors_authentication_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo]
    def com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priorityOrder'] = opts[:'priority_order'] if !opts[:'priority_order'].nil?
      query_params[:'replyEmailPatterns'] = @api_client.build_collection_param(opts[:'reply_email_patterns'], :multi) if !opts[:'reply_email_patterns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_android_email_client_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :context_path 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo]
    def com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :context_path 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'context.path'] = opts[:'context_path'] if !opts[:'context_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_comment_email_builder_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo]
    def com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.topics'] = opts[:'event_topics'] if !opts[:'event_topics'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_comment_email_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo]
    def com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priorityOrder'] = opts[:'priority_order'] if !opts[:'priority_order'].nil?
      query_params[:'replyEmailPatterns'] = @api_client.build_collection_param(opts[:'reply_email_patterns'], :multi) if !opts[:'reply_email_patterns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_custom_email_client_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pattern_time 
    # @option opts [String] :pattern_newline 
    # @option opts [String] :pattern_day_of_month 
    # @option opts [String] :pattern_month 
    # @option opts [String] :pattern_year 
    # @option opts [String] :pattern_date 
    # @option opts [String] :pattern_date_time 
    # @option opts [String] :pattern_email 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo]
    def com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pattern_time 
    # @option opts [String] :pattern_newline 
    # @option opts [String] :pattern_day_of_month 
    # @option opts [String] :pattern_month 
    # @option opts [String] :pattern_year 
    # @option opts [String] :pattern_date 
    # @option opts [String] :pattern_date_time 
    # @option opts [String] :pattern_email 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'pattern.time'] = opts[:'pattern_time'] if !opts[:'pattern_time'].nil?
      query_params[:'pattern.newline'] = opts[:'pattern_newline'] if !opts[:'pattern_newline'].nil?
      query_params[:'pattern.dayOfMonth'] = opts[:'pattern_day_of_month'] if !opts[:'pattern_day_of_month'].nil?
      query_params[:'pattern.month'] = opts[:'pattern_month'] if !opts[:'pattern_month'].nil?
      query_params[:'pattern.year'] = opts[:'pattern_year'] if !opts[:'pattern_year'].nil?
      query_params[:'pattern.date'] = opts[:'pattern_date'] if !opts[:'pattern_date'].nil?
      query_params[:'pattern.dateTime'] = opts[:'pattern_date_time'] if !opts[:'pattern_date_time'].nil?
      query_params[:'pattern.email'] = opts[:'pattern_email'] if !opts[:'pattern_email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_email_quoted_text_patterns_imp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :email_name 
    # @option opts [Boolean] :email_create_post_from_reply 
    # @option opts [String] :email_add_comment_id_to 
    # @option opts [Integer] :email_subject_maximum_length 
    # @option opts [String] :email_reply_to_address 
    # @option opts [String] :email_reply_to_delimiter 
    # @option opts [String] :email_tracker_id_prefix_in_subject 
    # @option opts [String] :email_tracker_id_prefix_in_body 
    # @option opts [Boolean] :email_as_html 
    # @option opts [String] :email_default_user_name 
    # @option opts [String] :email_templates_root_path 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo]
    def com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :email_name 
    # @option opts [Boolean] :email_create_post_from_reply 
    # @option opts [String] :email_add_comment_id_to 
    # @option opts [Integer] :email_subject_maximum_length 
    # @option opts [String] :email_reply_to_address 
    # @option opts [String] :email_reply_to_delimiter 
    # @option opts [String] :email_tracker_id_prefix_in_subject 
    # @option opts [String] :email_tracker_id_prefix_in_body 
    # @option opts [Boolean] :email_as_html 
    # @option opts [String] :email_default_user_name 
    # @option opts [String] :email_templates_root_path 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'email.name'] = opts[:'email_name'] if !opts[:'email_name'].nil?
      query_params[:'email.createPostFromReply'] = opts[:'email_create_post_from_reply'] if !opts[:'email_create_post_from_reply'].nil?
      query_params[:'email.addCommentIdTo'] = opts[:'email_add_comment_id_to'] if !opts[:'email_add_comment_id_to'].nil?
      query_params[:'email.subjectMaximumLength'] = opts[:'email_subject_maximum_length'] if !opts[:'email_subject_maximum_length'].nil?
      query_params[:'email.replyToAddress'] = opts[:'email_reply_to_address'] if !opts[:'email_reply_to_address'].nil?
      query_params[:'email.replyToDelimiter'] = opts[:'email_reply_to_delimiter'] if !opts[:'email_reply_to_delimiter'].nil?
      query_params[:'email.trackerIdPrefixInSubject'] = opts[:'email_tracker_id_prefix_in_subject'] if !opts[:'email_tracker_id_prefix_in_subject'].nil?
      query_params[:'email.trackerIdPrefixInBody'] = opts[:'email_tracker_id_prefix_in_body'] if !opts[:'email_tracker_id_prefix_in_body'].nil?
      query_params[:'email.asHTML'] = opts[:'email_as_html'] if !opts[:'email_as_html'].nil?
      query_params[:'email.defaultUserName'] = opts[:'email_default_user_name'] if !opts[:'email_default_user_name'].nil?
      query_params[:'email.templates.rootPath'] = opts[:'email_templates_root_path'] if !opts[:'email_templates_root_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_email_reply_configuration_imp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :connect_protocol 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo]
    def com_adobe_cq_social_commons_emailreply_impl_email_reply_importer(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_email_reply_importer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :connect_protocol 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_email_reply_importer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_email_reply_importer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'connectProtocol'] = opts[:'connect_protocol'] if !opts[:'connect_protocol'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_email_reply_importer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_email_reply_importer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo]
    def com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priorityOrder'] = opts[:'priority_order'] if !opts[:'priority_order'].nil?
      query_params[:'replyEmailPatterns'] = @api_client.build_collection_param(opts[:'reply_email_patterns'], :multi) if !opts[:'reply_email_patterns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_gmail_email_client_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo]
    def com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priorityOrder'] = opts[:'priority_order'] if !opts[:'priority_order'].nil?
      query_params[:'replyEmailPatterns'] = @api_client.build_collection_param(opts[:'reply_email_patterns'], :multi) if !opts[:'reply_email_patterns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_ios_email_client_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo]
    def com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priorityOrder'] = opts[:'priority_order'] if !opts[:'priority_order'].nil?
      query_params[:'replyEmailPatterns'] = @api_client.build_collection_param(opts[:'reply_email_patterns'], :multi) if !opts[:'reply_email_patterns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_macmail_email_client_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo]
    def com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priorityOrder'] = opts[:'priority_order'] if !opts[:'priority_order'].nil?
      query_params[:'replyEmailPatterns'] = @api_client.build_collection_param(opts[:'reply_email_patterns'], :multi) if !opts[:'reply_email_patterns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_out_look_email_client_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :reply_email_patterns 
    # @option opts [Integer] :priority_order 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo]
    def com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :reply_email_patterns 
    # @option opts [Integer] :priority_order 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'replyEmailPatterns'] = @api_client.build_collection_param(opts[:'reply_email_patterns'], :multi) if !opts[:'reply_email_patterns'].nil?
      query_params[:'priorityOrder'] = opts[:'priority_order'] if !opts[:'priority_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_unknown_email_client_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo]
    def com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority_order 
    # @option opts [Array<String>] :reply_email_patterns 
    # @return [Array<(ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo, Integer, Hash)>] ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo data, response status code and response headers
    def com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priorityOrder'] = opts[:'priority_order'] if !opts[:'priority_order'].nil?
      query_params[:'replyEmailPatterns'] = @api_client.build_collection_param(opts[:'reply_email_patterns'], :multi) if !opts[:'reply_email_patterns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_emailreply_impl_yahoo_email_client_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :number_of_days 
    # @option opts [Integer] :age_of_file 
    # @return [ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo]
    def com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :number_of_days 
    # @option opts [Integer] :age_of_file 
    # @return [Array<(ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo, Integer, Hash)>] ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo data, response status code and response headers
    def com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'numberOfDays'] = opts[:'number_of_days'] if !opts[:'number_of_days'].nil?
      query_params[:'ageOfFile'] = opts[:'age_of_file'] if !opts[:'age_of_file'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_maintainance_impl_delete_temp_ugc_image_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @option opts [Array<String>] :verbs 
    # @return [ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo]
    def com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @option opts [Array<String>] :verbs 
    # @return [Array<(ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo, Integer, Hash)>] ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo data, response status code and response headers
    def com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.topics'] = opts[:'event_topics'] if !opts[:'event_topics'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?
      query_params[:'verbs'] = @api_client.build_collection_param(opts[:'verbs'], :multi) if !opts[:'verbs'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_ugclimiter_impl_ugc_limiter_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable 
    # @option opts [Integer] :ugc_limit 
    # @option opts [Integer] :ugc_limit_duration 
    # @option opts [Array<String>] :domains 
    # @option opts [Array<String>] :to_list 
    # @return [ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo]
    def com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable 
    # @option opts [Integer] :ugc_limit 
    # @option opts [Integer] :ugc_limit_duration 
    # @option opts [Array<String>] :domains 
    # @option opts [Array<String>] :to_list 
    # @return [Array<(ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo, Integer, Hash)>] ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo data, response status code and response headers
    def com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enable'] = opts[:'enable'] if !opts[:'enable'].nil?
      query_params[:'UGCLimit'] = opts[:'ugc_limit'] if !opts[:'ugc_limit'].nil?
      query_params[:'ugcLimitDuration'] = opts[:'ugc_limit_duration'] if !opts[:'ugc_limit_duration'].nil?
      query_params[:'domains'] = @api_client.build_collection_param(opts[:'domains'], :multi) if !opts[:'domains'].nil?
      query_params[:'toList'] = @api_client.build_collection_param(opts[:'to_list'], :multi) if !opts[:'to_list'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_commons_ugclimitsconfig_impl_community_user_ugc_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_cloud_config_root 
    # @option opts [String] :provider_config_root 
    # @option opts [Boolean] :provider_config_create_tags_enabled 
    # @option opts [String] :provider_config_user_folder 
    # @option opts [Boolean] :provider_config_facebook_fetch_fields 
    # @option opts [Array<String>] :provider_config_facebook_fields 
    # @option opts [Boolean] :provider_config_refresh_userdata_enabled 
    # @return [ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo]
    def com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_cloud_config_root 
    # @option opts [String] :provider_config_root 
    # @option opts [Boolean] :provider_config_create_tags_enabled 
    # @option opts [String] :provider_config_user_folder 
    # @option opts [Boolean] :provider_config_facebook_fetch_fields 
    # @option opts [Array<String>] :provider_config_facebook_fields 
    # @option opts [Boolean] :provider_config_refresh_userdata_enabled 
    # @return [Array<(ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo, Integer, Hash)>] ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo data, response status code and response headers
    def com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.provider.id'] = opts[:'oauth_provider_id'] if !opts[:'oauth_provider_id'].nil?
      query_params[:'oauth.cloud.config.root'] = opts[:'oauth_cloud_config_root'] if !opts[:'oauth_cloud_config_root'].nil?
      query_params[:'provider.config.root'] = opts[:'provider_config_root'] if !opts[:'provider_config_root'].nil?
      query_params[:'provider.config.create.tags.enabled'] = opts[:'provider_config_create_tags_enabled'] if !opts[:'provider_config_create_tags_enabled'].nil?
      query_params[:'provider.config.user.folder'] = opts[:'provider_config_user_folder'] if !opts[:'provider_config_user_folder'].nil?
      query_params[:'provider.config.facebook.fetch.fields'] = opts[:'provider_config_facebook_fetch_fields'] if !opts[:'provider_config_facebook_fetch_fields'].nil?
      query_params[:'provider.config.facebook.fields'] = @api_client.build_collection_param(opts[:'provider_config_facebook_fields'], :multi) if !opts[:'provider_config_facebook_fields'].nil?
      query_params[:'provider.config.refresh.userdata.enabled'] = opts[:'provider_config_refresh_userdata_enabled'] if !opts[:'provider_config_refresh_userdata_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_connect_oauth_impl_facebook_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :path 
    # @option opts [Integer] :service_ranking 
    # @return [ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo]
    def com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :path 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo, Integer, Hash)>] ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo data, response status code and response headers
    def com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = @api_client.build_collection_param(opts[:'path'], :multi) if !opts[:'path'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_connect_oauth_impl_social_o_auth_authentication_handle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :facebook 
    # @option opts [Array<String>] :twitter 
    # @option opts [String] :provider_config_user_folder 
    # @return [ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo]
    def com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :facebook 
    # @option opts [Array<String>] :twitter 
    # @option opts [String] :provider_config_user_folder 
    # @return [Array<(ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo, Integer, Hash)>] ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo data, response status code and response headers
    def com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'facebook'] = @api_client.build_collection_param(opts[:'facebook'], :multi) if !opts[:'facebook'].nil?
      query_params[:'twitter'] = @api_client.build_collection_param(opts[:'twitter'], :multi) if !opts[:'twitter'].nil?
      query_params[:'provider.config.user.folder'] = opts[:'provider_config_user_folder'] if !opts[:'provider_config_user_folder'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_connect_oauth_impl_social_o_auth_user_profile_mapper\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_cloud_config_root 
    # @option opts [String] :provider_config_root 
    # @option opts [String] :provider_config_user_folder 
    # @option opts [Boolean] :provider_config_twitter_enable_params 
    # @option opts [Array<String>] :provider_config_twitter_params 
    # @option opts [Boolean] :provider_config_refresh_userdata_enabled 
    # @return [ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo]
    def com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_cloud_config_root 
    # @option opts [String] :provider_config_root 
    # @option opts [String] :provider_config_user_folder 
    # @option opts [Boolean] :provider_config_twitter_enable_params 
    # @option opts [Array<String>] :provider_config_twitter_params 
    # @option opts [Boolean] :provider_config_refresh_userdata_enabled 
    # @return [Array<(ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo, Integer, Hash)>] ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo data, response status code and response headers
    def com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.provider.id'] = opts[:'oauth_provider_id'] if !opts[:'oauth_provider_id'].nil?
      query_params[:'oauth.cloud.config.root'] = opts[:'oauth_cloud_config_root'] if !opts[:'oauth_cloud_config_root'].nil?
      query_params[:'provider.config.root'] = opts[:'provider_config_root'] if !opts[:'provider_config_root'].nil?
      query_params[:'provider.config.user.folder'] = opts[:'provider_config_user_folder'] if !opts[:'provider_config_user_folder'].nil?
      query_params[:'provider.config.twitter.enable.params'] = opts[:'provider_config_twitter_enable_params'] if !opts[:'provider_config_twitter_enable_params'].nil?
      query_params[:'provider.config.twitter.params'] = @api_client.build_collection_param(opts[:'provider_config_twitter_params'], :multi) if !opts[:'provider_config_twitter_params'].nil?
      query_params[:'provider.config.refresh.userdata.enabled'] = opts[:'provider_config_refresh_userdata_enabled'] if !opts[:'provider_config_refresh_userdata_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_connect_oauth_impl_twitter_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_social_content_fragments_services_enabled 
    # @option opts [Integer] :cq_social_content_fragments_services_wait_time_seconds 
    # @return [ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo]
    def com_adobe_cq_social_content_fragments_services_impl_communities_fragmen(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_content_fragments_services_impl_communities_fragmen_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_social_content_fragments_services_enabled 
    # @option opts [Integer] :cq_social_content_fragments_services_wait_time_seconds 
    # @return [Array<(ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo, Integer, Hash)>] ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo data, response status code and response headers
    def com_adobe_cq_social_content_fragments_services_impl_communities_fragmen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_content_fragments_services_impl_communities_fragmen ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.social.content.fragments.services.enabled'] = opts[:'cq_social_content_fragments_services_enabled'] if !opts[:'cq_social_content_fragments_services_enabled'].nil?
      query_params[:'cq.social.content.fragments.services.waitTimeSeconds'] = opts[:'cq_social_content_fragments_services_wait_time_seconds'] if !opts[:'cq_social_content_fragments_services_wait_time_seconds'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_content_fragments_services_impl_communities_fragmen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_content_fragments_services_impl_communities_fragmen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :version_id 
    # @option opts [Boolean] :cache_on 
    # @option opts [Integer] :concurrency_level 
    # @option opts [Integer] :cache_start_size 
    # @option opts [Integer] :cache_ttl 
    # @option opts [Integer] :cache_size 
    # @option opts [Integer] :time_limit 
    # @return [ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo]
    def com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :version_id 
    # @option opts [Boolean] :cache_on 
    # @option opts [Integer] :concurrency_level 
    # @option opts [Integer] :cache_start_size 
    # @option opts [Integer] :cache_ttl 
    # @option opts [Integer] :cache_size 
    # @option opts [Integer] :time_limit 
    # @return [Array<(ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo, Integer, Hash)>] ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo data, response status code and response headers
    def com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'version.id'] = opts[:'version_id'] if !opts[:'version_id'].nil?
      query_params[:'cache.on'] = opts[:'cache_on'] if !opts[:'cache_on'].nil?
      query_params[:'concurrency.level'] = opts[:'concurrency_level'] if !opts[:'concurrency_level'].nil?
      query_params[:'cache.start.size'] = opts[:'cache_start_size'] if !opts[:'cache_start_size'].nil?
      query_params[:'cache.ttl'] = opts[:'cache_ttl'] if !opts[:'cache_ttl'].nil?
      query_params[:'cache.size'] = opts[:'cache_size'] if !opts[:'cache_size'].nil?
      query_params[:'time.limit'] = opts[:'time_limit'] if !opts[:'time_limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_datastore_as_impl_as_resource_provider_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :solr_zk_timeout 
    # @option opts [String] :solr_commit 
    # @option opts [Boolean] :cache_on 
    # @option opts [Integer] :concurrency_level 
    # @option opts [Integer] :cache_start_size 
    # @option opts [Integer] :cache_ttl 
    # @option opts [Integer] :cache_size 
    # @return [ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo]
    def com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :solr_zk_timeout 
    # @option opts [String] :solr_commit 
    # @option opts [Boolean] :cache_on 
    # @option opts [Integer] :concurrency_level 
    # @option opts [Integer] :cache_start_size 
    # @option opts [Integer] :cache_ttl 
    # @option opts [Integer] :cache_size 
    # @return [Array<(ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo, Integer, Hash)>] ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo data, response status code and response headers
    def com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'solr.zk.timeout'] = opts[:'solr_zk_timeout'] if !opts[:'solr_zk_timeout'].nil?
      query_params[:'solr.commit'] = opts[:'solr_commit'] if !opts[:'solr_commit'].nil?
      query_params[:'cache.on'] = opts[:'cache_on'] if !opts[:'cache_on'].nil?
      query_params[:'concurrency.level'] = opts[:'concurrency_level'] if !opts[:'concurrency_level'].nil?
      query_params[:'cache.start.size'] = opts[:'cache_start_size'] if !opts[:'cache_start_size'].nil?
      query_params[:'cache.ttl'] = opts[:'cache_ttl'] if !opts[:'cache_ttl'].nil?
      query_params[:'cache.size'] = opts[:'cache_size'] if !opts[:'cache_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_datastore_op_impl_social_ms_resource_provider_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :solr_zk_timeout 
    # @option opts [String] :solr_commit 
    # @option opts [Boolean] :cache_on 
    # @option opts [Integer] :concurrency_level 
    # @option opts [Integer] :cache_start_size 
    # @option opts [Integer] :cache_ttl 
    # @option opts [Integer] :cache_size 
    # @return [ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo]
    def com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :solr_zk_timeout 
    # @option opts [String] :solr_commit 
    # @option opts [Boolean] :cache_on 
    # @option opts [Integer] :concurrency_level 
    # @option opts [Integer] :cache_start_size 
    # @option opts [Integer] :cache_ttl 
    # @option opts [Integer] :cache_size 
    # @return [Array<(ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo, Integer, Hash)>] ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo data, response status code and response headers
    def com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'solr.zk.timeout'] = opts[:'solr_zk_timeout'] if !opts[:'solr_zk_timeout'].nil?
      query_params[:'solr.commit'] = opts[:'solr_commit'] if !opts[:'solr_commit'].nil?
      query_params[:'cache.on'] = opts[:'cache_on'] if !opts[:'cache_on'].nil?
      query_params[:'concurrency.level'] = opts[:'concurrency_level'] if !opts[:'concurrency_level'].nil?
      query_params[:'cache.start.size'] = opts[:'cache_start_size'] if !opts[:'cache_start_size'].nil?
      query_params[:'cache.ttl'] = opts[:'cache_ttl'] if !opts[:'cache_ttl'].nil?
      query_params[:'cache.size'] = opts[:'cache_size'] if !opts[:'cache_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_datastore_rdb_impl_social_rdb_resource_provider_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_member_check 
    # @return [ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo]
    def com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_member_check 
    # @return [Array<(ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo, Integer, Hash)>] ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo data, response status code and response headers
    def com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'isMemberCheck'] = opts[:'is_member_check'] if !opts[:'is_member_check'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_enablement_adaptors_enablement_learning_path_adaptor_f\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_member_check 
    # @return [ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo]
    def com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_member_check 
    # @return [Array<(ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo, Integer, Hash)>] ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo data, response status code and response headers
    def com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'isMemberCheck'] = opts[:'is_member_check'] if !opts[:'is_member_check'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_enablement_adaptors_enablement_resource_adaptor_facto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @return [ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo]
    def com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @return [Array<(ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo, Integer, Hash)>] ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo data, response status code and response headers
    def com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_enablement_learningpath_endpoints_impl_enablement_l\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @return [ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo]
    def com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @return [Array<(ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo, Integer, Hash)>] ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo data, response status code and response headers
    def com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_enablement_resource_endpoints_impl_enablement_resou\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @return [ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo]
    def com_adobe_cq_social_enablement_services_impl_author_marker_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_enablement_services_impl_author_marker_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo, Integer, Hash)>] ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo data, response status code and response headers
    def com_adobe_cq_social_enablement_services_impl_author_marker_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_enablement_services_impl_author_marker_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_enablement_services_impl_author_marker_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_enablement_services_impl_author_marker_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [String] :sling_servlet_extensions 
    # @return [ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo]
    def com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [String] :sling_servlet_extensions 
    # @return [Array<(ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo, Integer, Hash)>] ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo data, response status code and response headers
    def com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.selectors'] = opts[:'sling_servlet_selectors'] if !opts[:'sling_servlet_selectors'].nil?
      query_params[:'sling.servlet.extensions'] = opts[:'sling_servlet_extensions'] if !opts[:'sling_servlet_extensions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_filelibrary_client_endpoints_filelibrary_download_ge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo]
    def com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo, Integer, Hash)>] ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo data, response status code and response headers
    def com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_filelibrary_client_endpoints_impl_file_library_opera\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo]
    def com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo, Integer, Hash)>] ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo data, response status code and response headers
    def com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_forum_client_endpoints_impl_forum_operations_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :extension_order 
    # @option opts [Boolean] :flush_forumontopic 
    # @return [ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo]
    def com_adobe_cq_social_forum_dispatcher_impl_flush_operations(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_forum_dispatcher_impl_flush_operations_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :extension_order 
    # @option opts [Boolean] :flush_forumontopic 
    # @return [Array<(ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo, Integer, Hash)>] ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo data, response status code and response headers
    def com_adobe_cq_social_forum_dispatcher_impl_flush_operations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_forum_dispatcher_impl_flush_operations ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'extension.order'] = opts[:'extension_order'] if !opts[:'extension_order'].nil?
      query_params[:'flush.forumontopic'] = opts[:'flush_forumontopic'] if !opts[:'flush_forumontopic'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_forum_dispatcher_impl_flush_operations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_forum_dispatcher_impl_flush_operations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :group_listing_pagination_enable 
    # @option opts [Boolean] :group_listing_lazyloading_enable 
    # @option opts [Integer] :page_size 
    # @option opts [Integer] :priority 
    # @return [ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo]
    def com_adobe_cq_social_group_client_impl_community_group_collection_componen(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_group_client_impl_community_group_collection_componen_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :group_listing_pagination_enable 
    # @option opts [Boolean] :group_listing_lazyloading_enable 
    # @option opts [Integer] :page_size 
    # @option opts [Integer] :priority 
    # @return [Array<(ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo, Integer, Hash)>] ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo data, response status code and response headers
    def com_adobe_cq_social_group_client_impl_community_group_collection_componen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_group_client_impl_community_group_collection_componen ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'group.listing.pagination.enable'] = opts[:'group_listing_pagination_enable'] if !opts[:'group_listing_pagination_enable'].nil?
      query_params[:'group.listing.lazyloading.enable'] = opts[:'group_listing_lazyloading_enable'] if !opts[:'group_listing_lazyloading_enable'].nil?
      query_params[:'page.size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_group_client_impl_community_group_collection_componen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_group_client_impl_community_group_collection_componen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_wait_time 
    # @option opts [Integer] :min_wait_between_retries 
    # @return [ComAdobeCqSocialGroupImplGroupServiceImplInfo]
    def com_adobe_cq_social_group_impl_group_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_group_impl_group_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_wait_time 
    # @option opts [Integer] :min_wait_between_retries 
    # @return [Array<(ComAdobeCqSocialGroupImplGroupServiceImplInfo, Integer, Hash)>] ComAdobeCqSocialGroupImplGroupServiceImplInfo data, response status code and response headers
    def com_adobe_cq_social_group_impl_group_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_group_impl_group_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'maxWaitTime'] = opts[:'max_wait_time'] if !opts[:'max_wait_time'].nil?
      query_params[:'minWaitBetweenRetries'] = opts[:'min_wait_between_retries'] if !opts[:'min_wait_between_retries'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialGroupImplGroupServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_group_impl_group_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_group_impl_group_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :parameter_guava_cache_enabled 
    # @option opts [String] :parameter_guava_cache_params 
    # @option opts [Boolean] :parameter_guava_cache_reload 
    # @option opts [Integer] :service_ranking 
    # @return [ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo]
    def com_adobe_cq_social_handlebars_guava_template_cache_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_handlebars_guava_template_cache_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :parameter_guava_cache_enabled 
    # @option opts [String] :parameter_guava_cache_params 
    # @option opts [Boolean] :parameter_guava_cache_reload 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo, Integer, Hash)>] ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo data, response status code and response headers
    def com_adobe_cq_social_handlebars_guava_template_cache_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_handlebars_guava_template_cache_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'parameter.guava.cache.enabled'] = opts[:'parameter_guava_cache_enabled'] if !opts[:'parameter_guava_cache_enabled'].nil?
      query_params[:'parameter.guava.cache.params'] = opts[:'parameter_guava_cache_params'] if !opts[:'parameter_guava_cache_params'].nil?
      query_params[:'parameter.guava.cache.reload'] = opts[:'parameter_guava_cache_reload'] if !opts[:'parameter_guava_cache_reload'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_handlebars_guava_template_cache_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_handlebars_guava_template_cache_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo]
    def com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo, Integer, Hash)>] ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo data, response status code and response headers
    def com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_ideation_client_endpoints_impl_ideation_operations_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo]
    def com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo, Integer, Hash)>] ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo data, response status code and response headers
    def com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_journal_client_endpoints_impl_journal_operations_ser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @return [ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo]
    def com_adobe_cq_social_members_endpoints_impl_community_member_group_profile(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_members_endpoints_impl_community_member_group_profile_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @return [Array<(ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo, Integer, Hash)>] ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo data, response status code and response headers
    def com_adobe_cq_social_members_endpoints_impl_community_member_group_profile_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_members_endpoints_impl_community_member_group_profile ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_members_endpoints_impl_community_member_group_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_members_endpoints_impl_community_member_group_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @return [ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo]
    def com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @return [Array<(ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo, Integer, Hash)>] ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo data, response status code and response headers
    def com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_members_endpoints_impl_community_member_user_profile_o\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :everyone_limit 
    # @option opts [Integer] :priority 
    # @return [ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo]
    def com_adobe_cq_social_members_impl_community_member_group_profile_component_f(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_members_impl_community_member_group_profile_component_f_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :everyone_limit 
    # @option opts [Integer] :priority 
    # @return [Array<(ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo, Integer, Hash)>] ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo data, response status code and response headers
    def com_adobe_cq_social_members_impl_community_member_group_profile_component_f_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_members_impl_community_member_group_profile_component_f ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'everyoneLimit'] = opts[:'everyone_limit'] if !opts[:'everyone_limit'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_members_impl_community_member_group_profile_component_f",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_members_impl_community_member_group_profile_component_f\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :message_properties 
    # @option opts [Integer] :message_box_size_limit 
    # @option opts [Integer] :message_count_limit 
    # @option opts [Boolean] :notify_failure 
    # @option opts [String] :failure_message_from 
    # @option opts [String] :failure_template_path 
    # @option opts [Integer] :max_retries 
    # @option opts [Integer] :min_wait_between_retries 
    # @option opts [Integer] :count_update_pool_size 
    # @option opts [String] :inbox_path 
    # @option opts [String] :sentitems_path 
    # @option opts [Boolean] :support_attachments 
    # @option opts [Boolean] :support_group_messaging 
    # @option opts [Integer] :max_total_recipients 
    # @option opts [Integer] :batch_size 
    # @option opts [Integer] :max_total_attachment_size 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @option opts [Array<String>] :allowed_attachment_types 
    # @option opts [String] :service_selector 
    # @option opts [Array<String>] :field_whitelist 
    # @return [ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo]
    def com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :message_properties 
    # @option opts [Integer] :message_box_size_limit 
    # @option opts [Integer] :message_count_limit 
    # @option opts [Boolean] :notify_failure 
    # @option opts [String] :failure_message_from 
    # @option opts [String] :failure_template_path 
    # @option opts [Integer] :max_retries 
    # @option opts [Integer] :min_wait_between_retries 
    # @option opts [Integer] :count_update_pool_size 
    # @option opts [String] :inbox_path 
    # @option opts [String] :sentitems_path 
    # @option opts [Boolean] :support_attachments 
    # @option opts [Boolean] :support_group_messaging 
    # @option opts [Integer] :max_total_recipients 
    # @option opts [Integer] :batch_size 
    # @option opts [Integer] :max_total_attachment_size 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @option opts [Array<String>] :allowed_attachment_types 
    # @option opts [String] :service_selector 
    # @option opts [Array<String>] :field_whitelist 
    # @return [Array<(ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo, Integer, Hash)>] ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo data, response status code and response headers
    def com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'message.properties'] = @api_client.build_collection_param(opts[:'message_properties'], :multi) if !opts[:'message_properties'].nil?
      query_params[:'messageBoxSizeLimit'] = opts[:'message_box_size_limit'] if !opts[:'message_box_size_limit'].nil?
      query_params[:'messageCountLimit'] = opts[:'message_count_limit'] if !opts[:'message_count_limit'].nil?
      query_params[:'notifyFailure'] = opts[:'notify_failure'] if !opts[:'notify_failure'].nil?
      query_params[:'failureMessageFrom'] = opts[:'failure_message_from'] if !opts[:'failure_message_from'].nil?
      query_params[:'failureTemplatePath'] = opts[:'failure_template_path'] if !opts[:'failure_template_path'].nil?
      query_params[:'maxRetries'] = opts[:'max_retries'] if !opts[:'max_retries'].nil?
      query_params[:'minWaitBetweenRetries'] = opts[:'min_wait_between_retries'] if !opts[:'min_wait_between_retries'].nil?
      query_params[:'countUpdatePoolSize'] = opts[:'count_update_pool_size'] if !opts[:'count_update_pool_size'].nil?
      query_params[:'inbox.path'] = opts[:'inbox_path'] if !opts[:'inbox_path'].nil?
      query_params[:'sentitems.path'] = opts[:'sentitems_path'] if !opts[:'sentitems_path'].nil?
      query_params[:'supportAttachments'] = opts[:'support_attachments'] if !opts[:'support_attachments'].nil?
      query_params[:'supportGroupMessaging'] = opts[:'support_group_messaging'] if !opts[:'support_group_messaging'].nil?
      query_params[:'maxTotalRecipients'] = opts[:'max_total_recipients'] if !opts[:'max_total_recipients'].nil?
      query_params[:'batchSize'] = opts[:'batch_size'] if !opts[:'batch_size'].nil?
      query_params[:'maxTotalAttachmentSize'] = opts[:'max_total_attachment_size'] if !opts[:'max_total_attachment_size'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?
      query_params[:'allowedAttachmentTypes'] = @api_client.build_collection_param(opts[:'allowed_attachment_types'], :multi) if !opts[:'allowed_attachment_types'].nil?
      query_params[:'serviceSelector'] = opts[:'service_selector'] if !opts[:'service_selector'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_messaging_client_endpoints_impl_messaging_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :resource_type_filters 
    # @option opts [Integer] :priority 
    # @return [ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo]
    def com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :resource_type_filters 
    # @option opts [Integer] :priority 
    # @return [Array<(ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo, Integer, Hash)>] ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo data, response status code and response headers
    def com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'resourceType.filters'] = @api_client.build_collection_param(opts[:'resource_type_filters'], :multi) if !opts[:'resource_type_filters'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_moderation_dashboard_api_filter_group_social_componen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo]
    def com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [Array<(ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo, Integer, Hash)>] ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo data, response status code and response headers
    def com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_moderation_dashboard_api_moderation_dashboard_social\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo]
    def com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [Array<(ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo, Integer, Hash)>] ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo data, response status code and response headers
    def com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_moderation_dashboard_api_user_details_social_componen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :resource_type_filters 
    # @option opts [Integer] :priority 
    # @return [ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo]
    def com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :resource_type_filters 
    # @option opts [Integer] :priority 
    # @return [Array<(ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo, Integer, Hash)>] ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo data, response status code and response headers
    def com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'resourceType.filters'] = @api_client.build_collection_param(opts[:'resource_type_filters'], :multi) if !opts[:'resource_type_filters'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_moderation_dashboard_internal_impl_filter_group_soci\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @return [ComAdobeCqSocialNotificationsImplMentionsRouterInfo]
    def com_adobe_cq_social_notifications_impl_mentions_router(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_notifications_impl_mentions_router_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @return [Array<(ComAdobeCqSocialNotificationsImplMentionsRouterInfo, Integer, Hash)>] ComAdobeCqSocialNotificationsImplMentionsRouterInfo data, response status code and response headers
    def com_adobe_cq_social_notifications_impl_mentions_router_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_notifications_impl_mentions_router ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.topics'] = opts[:'event_topics'] if !opts[:'event_topics'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialNotificationsImplMentionsRouterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_notifications_impl_mentions_router",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_notifications_impl_mentions_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_unread_notification_count 
    # @return [ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo]
    def com_adobe_cq_social_notifications_impl_notification_manager_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_notifications_impl_notification_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_unread_notification_count 
    # @return [Array<(ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo, Integer, Hash)>] ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo data, response status code and response headers
    def com_adobe_cq_social_notifications_impl_notification_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_notifications_impl_notification_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'max.unread.notification.count'] = opts[:'max_unread_notification_count'] if !opts[:'max_unread_notification_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_notifications_impl_notification_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_notifications_impl_notification_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @return [ComAdobeCqSocialNotificationsImplNotificationsRouterInfo]
    def com_adobe_cq_social_notifications_impl_notifications_router(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_notifications_impl_notifications_router_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @return [Array<(ComAdobeCqSocialNotificationsImplNotificationsRouterInfo, Integer, Hash)>] ComAdobeCqSocialNotificationsImplNotificationsRouterInfo data, response status code and response headers
    def com_adobe_cq_social_notifications_impl_notifications_router_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_notifications_impl_notifications_router ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.topics'] = opts[:'event_topics'] if !opts[:'event_topics'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialNotificationsImplNotificationsRouterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_notifications_impl_notifications_router",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_notifications_impl_notifications_router\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo]
    def com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo, Integer, Hash)>] ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo data, response status code and response headers
    def com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_qna_client_endpoints_impl_qna_forum_operations_servic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_social_reporting_analytics_polling_importer_interval 
    # @option opts [Integer] :cq_social_reporting_analytics_polling_importer_page_size 
    # @return [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo]
    def com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_social_reporting_analytics_polling_importer_interval 
    # @option opts [Integer] :cq_social_reporting_analytics_polling_importer_page_size 
    # @return [Array<(ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo, Integer, Hash)>] ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo data, response status code and response headers
    def com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.social.reporting.analytics.polling.importer.interval'] = opts[:'cq_social_reporting_analytics_polling_importer_interval'] if !opts[:'cq_social_reporting_analytics_polling_importer_interval'].nil?
      query_params[:'cq.social.reporting.analytics.polling.importer.pageSize'] = opts[:'cq_social_reporting_analytics_polling_importer_page_size'] if !opts[:'cq_social_reporting_analytics_polling_importer_page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_i\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :report_fetch_delay 
    # @return [ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo]
    def com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :report_fetch_delay 
    # @return [Array<(ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo, Integer, Hash)>] ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo data, response status code and response headers
    def com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'report.fetch.delay'] = opts[:'report_fetch_delay'] if !opts[:'report_fetch_delay'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_reporting_analytics_services_impl_analytics_report_m\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_social_console_analytics_sites_mapping 
    # @option opts [Integer] :priority 
    # @return [ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo]
    def com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_social_console_analytics_sites_mapping 
    # @option opts [Integer] :priority 
    # @return [Array<(ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo, Integer, Hash)>] ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo data, response status code and response headers
    def com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.social.console.analytics.sites.mapping'] = @api_client.build_collection_param(opts[:'cq_social_console_analytics_sites_mapping'], :multi) if !opts[:'cq_social_console_analytics_sites_mapping'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_reporting_analytics_services_impl_site_trend_report_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo]
    def com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo, Integer, Hash)>] ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo data, response status code and response headers
    def com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'attachmentTypeBlacklist'] = @api_client.build_collection_param(opts[:'attachment_type_blacklist'], :multi) if !opts[:'attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_review_client_endpoints_impl_review_operations_servi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [String] :sling_servlet_extensions 
    # @return [ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo]
    def com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [String] :sling_servlet_extensions 
    # @return [Array<(ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo, Integer, Hash)>] ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo data, response status code and response headers
    def com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.selectors'] = opts[:'sling_servlet_selectors'] if !opts[:'sling_servlet_selectors'].nil?
      query_params[:'sling.servlet.extensions'] = opts[:'sling_servlet_extensions'] if !opts[:'sling_servlet_extensions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_scf_core_operations_impl_social_operations_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_selectors 
    # @option opts [String] :sling_servlet_extensions 
    # @return [ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo]
    def com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_selectors 
    # @option opts [String] :sling_servlet_extensions 
    # @return [Array<(ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo, Integer, Hash)>] ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo data, response status code and response headers
    def com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.selectors'] = @api_client.build_collection_param(opts[:'sling_servlet_selectors'], :multi) if !opts[:'sling_servlet_selectors'].nil?
      query_params[:'sling.servlet.extensions'] = opts[:'sling_servlet_extensions'] if !opts[:'sling_servlet_extensions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_scf_endpoints_impl_default_social_get_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @return [ComAdobeCqSocialScoringImplScoringEventListenerInfo]
    def com_adobe_cq_social_scoring_impl_scoring_event_listener(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_scoring_impl_scoring_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @return [Array<(ComAdobeCqSocialScoringImplScoringEventListenerInfo, Integer, Hash)>] ComAdobeCqSocialScoringImplScoringEventListenerInfo data, response status code and response headers
    def com_adobe_cq_social_scoring_impl_scoring_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_scoring_impl_scoring_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.topics'] = opts[:'event_topics'] if !opts[:'event_topics'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialScoringImplScoringEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_scoring_impl_scoring_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_scoring_impl_scoring_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_fallback 
    # @return [ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo]
    def com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_fallback 
    # @return [Array<(ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo, Integer, Hash)>] ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo data, response status code and response headers
    def com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enableFallback'] = opts[:'enable_fallback'] if !opts[:'enable_fallback'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_serviceusers_internal_impl_service_user_wrapper_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :site_path_filters 
    # @option opts [String] :site_package_group 
    # @return [ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo]
    def com_adobe_cq_social_site_endpoints_impl_site_operation_service(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_site_endpoints_impl_site_operation_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :field_whitelist 
    # @option opts [Array<String>] :site_path_filters 
    # @option opts [String] :site_package_group 
    # @return [Array<(ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo, Integer, Hash)>] ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo data, response status code and response headers
    def com_adobe_cq_social_site_endpoints_impl_site_operation_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_site_endpoints_impl_site_operation_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fieldWhitelist'] = @api_client.build_collection_param(opts[:'field_whitelist'], :multi) if !opts[:'field_whitelist'].nil?
      query_params[:'sitePathFilters'] = @api_client.build_collection_param(opts[:'site_path_filters'], :multi) if !opts[:'site_path_filters'].nil?
      query_params[:'sitePackageGroup'] = opts[:'site_package_group'] if !opts[:'site_package_group'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_site_endpoints_impl_site_operation_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_site_endpoints_impl_site_operation_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_social_console_analytics_components 
    # @return [ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo]
    def com_adobe_cq_social_site_impl_analytics_component_configuration_service_im(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_site_impl_analytics_component_configuration_service_im_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_social_console_analytics_components 
    # @return [Array<(ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo, Integer, Hash)>] ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo data, response status code and response headers
    def com_adobe_cq_social_site_impl_analytics_component_configuration_service_im_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_site_impl_analytics_component_configuration_service_im ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.social.console.analytics.components'] = @api_client.build_collection_param(opts[:'cq_social_console_analytics_components'], :multi) if !opts[:'cq_social_console_analytics_components'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_site_impl_analytics_component_configuration_service_im",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_site_impl_analytics_component_configuration_service_im\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :components_using_tags 
    # @return [ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo]
    def com_adobe_cq_social_site_impl_site_configurator_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_site_impl_site_configurator_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :components_using_tags 
    # @return [Array<(ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo, Integer, Hash)>] ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo data, response status code and response headers
    def com_adobe_cq_social_site_impl_site_configurator_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_site_impl_site_configurator_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'componentsUsingTags'] = @api_client.build_collection_param(opts[:'components_using_tags'], :multi) if !opts[:'components_using_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_site_impl_site_configurator_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_site_impl_site_configurator_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :srp_type 
    # @return [ComAdobeCqSocialSrpImplSocialSolrConnectorInfo]
    def com_adobe_cq_social_srp_impl_social_solr_connector(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_srp_impl_social_solr_connector_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :srp_type 
    # @return [Array<(ComAdobeCqSocialSrpImplSocialSolrConnectorInfo, Integer, Hash)>] ComAdobeCqSocialSrpImplSocialSolrConnectorInfo data, response status code and response headers
    def com_adobe_cq_social_srp_impl_social_solr_connector_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_srp_impl_social_solr_connector ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'srp.type'] = opts[:'srp_type'] if !opts[:'srp_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialSrpImplSocialSolrConnectorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_srp_impl_social_solr_connector",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_srp_impl_social_solr_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :agent_name 
    # @option opts [String] :diff_path 
    # @option opts [String] :property_names 
    # @return [ComAdobeCqSocialSyncImplDiffChangesObserverInfo]
    def com_adobe_cq_social_sync_impl_diff_changes_observer(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_sync_impl_diff_changes_observer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :agent_name 
    # @option opts [String] :diff_path 
    # @option opts [String] :property_names 
    # @return [Array<(ComAdobeCqSocialSyncImplDiffChangesObserverInfo, Integer, Hash)>] ComAdobeCqSocialSyncImplDiffChangesObserverInfo data, response status code and response headers
    def com_adobe_cq_social_sync_impl_diff_changes_observer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_sync_impl_diff_changes_observer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'agentName'] = opts[:'agent_name'] if !opts[:'agent_name'].nil?
      query_params[:'diffPath'] = opts[:'diff_path'] if !opts[:'diff_path'].nil?
      query_params[:'propertyNames'] = opts[:'property_names'] if !opts[:'property_names'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialSyncImplDiffChangesObserverInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_sync_impl_diff_changes_observer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_sync_impl_diff_changes_observer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :nodetypes 
    # @option opts [Array<String>] :ignorableprops 
    # @option opts [String] :ignorablenodes 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :distfolders 
    # @return [ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo]
    def com_adobe_cq_social_sync_impl_group_sync_listener_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_sync_impl_group_sync_listener_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :nodetypes 
    # @option opts [Array<String>] :ignorableprops 
    # @option opts [String] :ignorablenodes 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :distfolders 
    # @return [Array<(ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo, Integer, Hash)>] ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo data, response status code and response headers
    def com_adobe_cq_social_sync_impl_group_sync_listener_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_sync_impl_group_sync_listener_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'nodetypes'] = @api_client.build_collection_param(opts[:'nodetypes'], :multi) if !opts[:'nodetypes'].nil?
      query_params[:'ignorableprops'] = @api_client.build_collection_param(opts[:'ignorableprops'], :multi) if !opts[:'ignorableprops'].nil?
      query_params[:'ignorablenodes'] = opts[:'ignorablenodes'] if !opts[:'ignorablenodes'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'distfolders'] = opts[:'distfolders'] if !opts[:'distfolders'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_sync_impl_group_sync_listener_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_sync_impl_group_sync_listener_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :active_run_modes 
    # @return [ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo]
    def com_adobe_cq_social_sync_impl_publisher_sync_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_sync_impl_publisher_sync_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :active_run_modes 
    # @return [Array<(ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo, Integer, Hash)>] ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo data, response status code and response headers
    def com_adobe_cq_social_sync_impl_publisher_sync_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_sync_impl_publisher_sync_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'activeRunModes'] = @api_client.build_collection_param(opts[:'active_run_modes'], :multi) if !opts[:'active_run_modes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_sync_impl_publisher_sync_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_sync_impl_publisher_sync_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :nodetypes 
    # @option opts [Array<String>] :ignorableprops 
    # @option opts [Array<String>] :ignorablenodes 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :distfolders 
    # @return [ComAdobeCqSocialSyncImplUserSyncListenerImplInfo]
    def com_adobe_cq_social_sync_impl_user_sync_listener_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_sync_impl_user_sync_listener_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :nodetypes 
    # @option opts [Array<String>] :ignorableprops 
    # @option opts [Array<String>] :ignorablenodes 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :distfolders 
    # @return [Array<(ComAdobeCqSocialSyncImplUserSyncListenerImplInfo, Integer, Hash)>] ComAdobeCqSocialSyncImplUserSyncListenerImplInfo data, response status code and response headers
    def com_adobe_cq_social_sync_impl_user_sync_listener_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_sync_impl_user_sync_listener_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'nodetypes'] = @api_client.build_collection_param(opts[:'nodetypes'], :multi) if !opts[:'nodetypes'].nil?
      query_params[:'ignorableprops'] = @api_client.build_collection_param(opts[:'ignorableprops'], :multi) if !opts[:'ignorableprops'].nil?
      query_params[:'ignorablenodes'] = @api_client.build_collection_param(opts[:'ignorablenodes'], :multi) if !opts[:'ignorablenodes'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'distfolders'] = @api_client.build_collection_param(opts[:'distfolders'], :multi) if !opts[:'distfolders'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialSyncImplUserSyncListenerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_sync_impl_user_sync_listener_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_sync_impl_user_sync_listener_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :translate_language 
    # @option opts [String] :translate_display 
    # @option opts [Boolean] :translate_attribution 
    # @option opts [String] :translate_caching 
    # @option opts [String] :translate_smart_rendering 
    # @option opts [String] :translate_caching_duration 
    # @option opts [String] :translate_session_save_interval 
    # @option opts [String] :translate_session_save_batch_limit 
    # @return [ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo]
    def com_adobe_cq_social_translation_impl_translation_service_config_manager(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_translation_impl_translation_service_config_manager_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :translate_language 
    # @option opts [String] :translate_display 
    # @option opts [Boolean] :translate_attribution 
    # @option opts [String] :translate_caching 
    # @option opts [String] :translate_smart_rendering 
    # @option opts [String] :translate_caching_duration 
    # @option opts [String] :translate_session_save_interval 
    # @option opts [String] :translate_session_save_batch_limit 
    # @return [Array<(ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo, Integer, Hash)>] ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo data, response status code and response headers
    def com_adobe_cq_social_translation_impl_translation_service_config_manager_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_translation_impl_translation_service_config_manager ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'translate.language'] = opts[:'translate_language'] if !opts[:'translate_language'].nil?
      query_params[:'translate.display'] = opts[:'translate_display'] if !opts[:'translate_display'].nil?
      query_params[:'translate.attribution'] = opts[:'translate_attribution'] if !opts[:'translate_attribution'].nil?
      query_params[:'translate.caching'] = opts[:'translate_caching'] if !opts[:'translate_caching'].nil?
      query_params[:'translate.smart.rendering'] = opts[:'translate_smart_rendering'] if !opts[:'translate_smart_rendering'].nil?
      query_params[:'translate.caching.duration'] = opts[:'translate_caching_duration'] if !opts[:'translate_caching_duration'].nil?
      query_params[:'translate.session.save.interval'] = opts[:'translate_session_save_interval'] if !opts[:'translate_session_save_interval'].nil?
      query_params[:'translate.session.save.batchLimit'] = opts[:'translate_session_save_batch_limit'] if !opts[:'translate_session_save_batch_limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_translation_impl_translation_service_config_manager",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_translation_impl_translation_service_config_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @option opts [Array<String>] :translate_listener_type 
    # @option opts [Array<String>] :translate_property_list 
    # @option opts [Integer] :pool_size 
    # @option opts [Integer] :max_pool_size 
    # @option opts [Integer] :queue_size 
    # @option opts [Integer] :keep_alive_time 
    # @return [ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo]
    def com_adobe_cq_social_translation_impl_ugc_language_detector(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_translation_impl_ugc_language_detector_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_topics 
    # @option opts [String] :event_filter 
    # @option opts [Array<String>] :translate_listener_type 
    # @option opts [Array<String>] :translate_property_list 
    # @option opts [Integer] :pool_size 
    # @option opts [Integer] :max_pool_size 
    # @option opts [Integer] :queue_size 
    # @option opts [Integer] :keep_alive_time 
    # @return [Array<(ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo, Integer, Hash)>] ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo data, response status code and response headers
    def com_adobe_cq_social_translation_impl_ugc_language_detector_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_translation_impl_ugc_language_detector ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.topics'] = opts[:'event_topics'] if !opts[:'event_topics'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?
      query_params[:'translate.listener.type'] = @api_client.build_collection_param(opts[:'translate_listener_type'], :multi) if !opts[:'translate_listener_type'].nil?
      query_params[:'translate.property.list'] = @api_client.build_collection_param(opts[:'translate_property_list'], :multi) if !opts[:'translate_property_list'].nil?
      query_params[:'poolSize'] = opts[:'pool_size'] if !opts[:'pool_size'].nil?
      query_params[:'maxPoolSize'] = opts[:'max_pool_size'] if !opts[:'max_pool_size'].nil?
      query_params[:'queueSize'] = opts[:'queue_size'] if !opts[:'queue_size'].nil?
      query_params[:'keepAliveTime'] = opts[:'keep_alive_time'] if !opts[:'keep_alive_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_translation_impl_ugc_language_detector",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_translation_impl_ugc_language_detector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :thread_pool_size 
    # @option opts [Integer] :delay_time 
    # @option opts [Integer] :worker_sleep_time 
    # @return [ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo]
    def com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :thread_pool_size 
    # @option opts [Integer] :delay_time 
    # @option opts [Integer] :worker_sleep_time 
    # @return [Array<(ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo, Integer, Hash)>] ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo data, response status code and response headers
    def com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'threadPoolSize'] = opts[:'thread_pool_size'] if !opts[:'thread_pool_size'].nil?
      query_params[:'delayTime'] = opts[:'delay_time'] if !opts[:'delay_time'].nil?
      query_params[:'workerSleepTime'] = opts[:'worker_sleep_time'] if !opts[:'worker_sleep_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_ugcbase_dispatcher_impl_flush_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :pool_size 
    # @option opts [Integer] :max_pool_size 
    # @option opts [Integer] :queue_size 
    # @option opts [Integer] :keep_alive_time 
    # @return [ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo]
    def com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :pool_size 
    # @option opts [Integer] :max_pool_size 
    # @option opts [Integer] :queue_size 
    # @option opts [Integer] :keep_alive_time 
    # @return [Array<(ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo, Integer, Hash)>] ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo data, response status code and response headers
    def com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'poolSize'] = opts[:'pool_size'] if !opts[:'pool_size'].nil?
      query_params[:'maxPoolSize'] = opts[:'max_pool_size'] if !opts[:'max_pool_size'].nil?
      query_params[:'queueSize'] = opts[:'queue_size'] if !opts[:'queue_size'].nil?
      query_params[:'keepAliveTime'] = opts[:'keep_alive_time'] if !opts[:'keep_alive_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_ugcbase_impl_aysnc_reverse_replicator_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_primary_publisher 
    # @return [ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo]
    def com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_primary_publisher 
    # @return [Array<(ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo, Integer, Hash)>] ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo data, response status code and response headers
    def com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'isPrimaryPublisher'] = opts[:'is_primary_publisher'] if !opts[:'is_primary_publisher'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_ugcbase_impl_publisher_configuration_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :legacy_cloud_ugc_path_mapping 
    # @return [ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo]
    def com_adobe_cq_social_ugcbase_impl_social_utils_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_ugcbase_impl_social_utils_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :legacy_cloud_ugc_path_mapping 
    # @return [Array<(ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo, Integer, Hash)>] ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo data, response status code and response headers
    def com_adobe_cq_social_ugcbase_impl_social_utils_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_ugcbase_impl_social_utils_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'legacyCloudUGCPathMapping'] = opts[:'legacy_cloud_ugc_path_mapping'] if !opts[:'legacy_cloud_ugc_path_mapping'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_ugcbase_impl_social_utils_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_ugcbase_impl_social_utils_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :automoderation_sequence 
    # @option opts [Boolean] :automoderation_onfailurestop 
    # @return [ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo]
    def com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :automoderation_sequence 
    # @option opts [Boolean] :automoderation_onfailurestop 
    # @return [Array<(ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo, Integer, Hash)>] ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo data, response status code and response headers
    def com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'automoderation.sequence'] = @api_client.build_collection_param(opts[:'automoderation_sequence'], :multi) if !opts[:'automoderation_sequence'].nil?
      query_params[:'automoderation.onfailurestop'] = opts[:'automoderation_onfailurestop'] if !opts[:'automoderation_onfailurestop'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_ugcbase_moderation_impl_auto_moderation_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :watchwords_positive 
    # @option opts [Array<String>] :watchwords_negative 
    # @option opts [String] :watchwords_path 
    # @option opts [String] :sentiment_path 
    # @return [ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo]
    def com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :watchwords_positive 
    # @option opts [Array<String>] :watchwords_negative 
    # @option opts [String] :watchwords_path 
    # @option opts [String] :sentiment_path 
    # @return [Array<(ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo, Integer, Hash)>] ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo data, response status code and response headers
    def com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'watchwords.positive'] = @api_client.build_collection_param(opts[:'watchwords_positive'], :multi) if !opts[:'watchwords_positive'].nil?
      query_params[:'watchwords.negative'] = @api_client.build_collection_param(opts[:'watchwords_negative'], :multi) if !opts[:'watchwords_negative'].nil?
      query_params[:'watchwords.path'] = opts[:'watchwords_path'] if !opts[:'watchwords_path'].nil?
      query_params[:'sentiment.path'] = opts[:'sentiment_path'] if !opts[:'sentiment_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_ugcbase_moderation_impl_sentiment_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :default_attachment_type_blacklist 
    # @option opts [Array<String>] :baseline_attachment_type_blacklist 
    # @return [ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo]
    def com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :default_attachment_type_blacklist 
    # @option opts [Array<String>] :baseline_attachment_type_blacklist 
    # @return [Array<(ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo, Integer, Hash)>] ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo data, response status code and response headers
    def com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'default.attachment.type.blacklist'] = @api_client.build_collection_param(opts[:'default_attachment_type_blacklist'], :multi) if !opts[:'default_attachment_type_blacklist'].nil?
      query_params[:'baseline.attachment.type.blacklist'] = @api_client.build_collection_param(opts[:'baseline_attachment_type_blacklist'], :multi) if !opts[:'baseline_attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_ugcbase_security_impl_default_attachment_type_blackli\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :parameter_whitelist 
    # @option opts [Array<String>] :parameter_whitelist_prefixes 
    # @option opts [Array<String>] :binary_parameter_whitelist 
    # @option opts [Array<String>] :modifier_whitelist 
    # @option opts [Array<String>] :operation_whitelist 
    # @option opts [Array<String>] :operation_whitelist_prefixes 
    # @option opts [Array<String>] :typehint_whitelist 
    # @option opts [Array<String>] :resourcetype_whitelist 
    # @return [ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo]
    def com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :parameter_whitelist 
    # @option opts [Array<String>] :parameter_whitelist_prefixes 
    # @option opts [Array<String>] :binary_parameter_whitelist 
    # @option opts [Array<String>] :modifier_whitelist 
    # @option opts [Array<String>] :operation_whitelist 
    # @option opts [Array<String>] :operation_whitelist_prefixes 
    # @option opts [Array<String>] :typehint_whitelist 
    # @option opts [Array<String>] :resourcetype_whitelist 
    # @return [Array<(ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo, Integer, Hash)>] ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo data, response status code and response headers
    def com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'parameter.whitelist'] = @api_client.build_collection_param(opts[:'parameter_whitelist'], :multi) if !opts[:'parameter_whitelist'].nil?
      query_params[:'parameter.whitelist.prefixes'] = @api_client.build_collection_param(opts[:'parameter_whitelist_prefixes'], :multi) if !opts[:'parameter_whitelist_prefixes'].nil?
      query_params[:'binary.parameter.whitelist'] = @api_client.build_collection_param(opts[:'binary_parameter_whitelist'], :multi) if !opts[:'binary_parameter_whitelist'].nil?
      query_params[:'modifier.whitelist'] = @api_client.build_collection_param(opts[:'modifier_whitelist'], :multi) if !opts[:'modifier_whitelist'].nil?
      query_params[:'operation.whitelist'] = @api_client.build_collection_param(opts[:'operation_whitelist'], :multi) if !opts[:'operation_whitelist'].nil?
      query_params[:'operation.whitelist.prefixes'] = @api_client.build_collection_param(opts[:'operation_whitelist_prefixes'], :multi) if !opts[:'operation_whitelist_prefixes'].nil?
      query_params[:'typehint.whitelist'] = @api_client.build_collection_param(opts[:'typehint_whitelist'], :multi) if !opts[:'typehint_whitelist'].nil?
      query_params[:'resourcetype.whitelist'] = @api_client.build_collection_param(opts[:'resourcetype_whitelist'], :multi) if !opts[:'resourcetype_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_ugcbase_security_impl_safer_sling_post_validator_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_extensions 
    # @option opts [String] :sling_servlet_paths 
    # @option opts [String] :sling_servlet_methods 
    # @return [ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo]
    def com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_extensions 
    # @option opts [String] :sling_servlet_paths 
    # @option opts [String] :sling_servlet_methods 
    # @return [Array<(ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo, Integer, Hash)>] ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo data, response status code and response headers
    def com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.extensions'] = opts[:'sling_servlet_extensions'] if !opts[:'sling_servlet_extensions'].nil?
      query_params[:'sling.servlet.paths'] = opts[:'sling_servlet_paths'] if !opts[:'sling_servlet_paths'].nil?
      query_params[:'sling.servlet.methods'] = opts[:'sling_servlet_methods'] if !opts[:'sling_servlet_methods'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_user_endpoints_impl_users_group_from_publish_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable 
    # @option opts [Array<String>] :agent_configuration 
    # @option opts [String] :context_path 
    # @option opts [Array<String>] :disabled_cipher_suites 
    # @option opts [Array<String>] :enabled_cipher_suites 
    # @return [ComAdobeCqSocialUserImplTransportHttpToPublisherInfo]
    def com_adobe_cq_social_user_impl_transport_http_to_publisher(opts = {})
      data, _status_code, _headers = com_adobe_cq_social_user_impl_transport_http_to_publisher_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable 
    # @option opts [Array<String>] :agent_configuration 
    # @option opts [String] :context_path 
    # @option opts [Array<String>] :disabled_cipher_suites 
    # @option opts [Array<String>] :enabled_cipher_suites 
    # @return [Array<(ComAdobeCqSocialUserImplTransportHttpToPublisherInfo, Integer, Hash)>] ComAdobeCqSocialUserImplTransportHttpToPublisherInfo data, response status code and response headers
    def com_adobe_cq_social_user_impl_transport_http_to_publisher_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_social_user_impl_transport_http_to_publisher ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enable'] = opts[:'enable'] if !opts[:'enable'].nil?
      query_params[:'agent.configuration'] = @api_client.build_collection_param(opts[:'agent_configuration'], :multi) if !opts[:'agent_configuration'].nil?
      query_params[:'context.path'] = opts[:'context_path'] if !opts[:'context_path'].nil?
      query_params[:'disabled.cipher.suites'] = @api_client.build_collection_param(opts[:'disabled_cipher_suites'], :multi) if !opts[:'disabled_cipher_suites'].nil?
      query_params[:'enabled.cipher.suites'] = @api_client.build_collection_param(opts[:'enabled_cipher_suites'], :multi) if !opts[:'enabled_cipher_suites'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqSocialUserImplTransportHttpToPublisherInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_social_user_impl_transport_http_to_publisher",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_social_user_impl_transport_http_to_publisher\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :resource_types 
    # @return [ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo]
    def com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact(opts = {})
      data, _status_code, _headers = com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :resource_types 
    # @return [Array<(ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo, Integer, Hash)>] ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo data, response status code and response headers
    def com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'resource.types'] = @api_client.build_collection_param(opts[:'resource_types'], :multi) if !opts[:'resource_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_ui_wcm_commons_internal_servlets_rte_rte_filter_servlet_fact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :delete_path_regexps 
    # @option opts [String] :delete_sql2_query 
    # @return [ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo]
    def com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup(opts = {})
      data, _status_code, _headers = com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :delete_path_regexps 
    # @option opts [String] :delete_sql2_query 
    # @return [Array<(ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo, Integer, Hash)>] ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo data, response status code and response headers
    def com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'delete.path.regexps'] = @api_client.build_collection_param(opts[:'delete_path_regexps'], :multi) if !opts[:'delete_path_regexps'].nil?
      query_params[:'delete.sql2.query'] = opts[:'delete_sql2_query'] if !opts[:'delete_sql2_query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_upgrades_cleanup_impl_upgrade_content_cleanup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :delete_name_regexps 
    # @return [ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo]
    def com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup(opts = {})
      data, _status_code, _headers = com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :delete_name_regexps 
    # @return [Array<(ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo, Integer, Hash)>] ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo data, response status code and response headers
    def com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'delete.name.regexps'] = @api_client.build_collection_param(opts[:'delete_name_regexps'], :multi) if !opts[:'delete_name_regexps'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_upgrades_cleanup_impl_upgrade_install_folder_cleanup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :threshold 
    # @option opts [String] :job_topic_name 
    # @option opts [Boolean] :email_enabled 
    # @return [ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo]
    def com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service(opts = {})
      data, _status_code, _headers = com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :threshold 
    # @option opts [String] :job_topic_name 
    # @option opts [Boolean] :email_enabled 
    # @return [Array<(ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo, Integer, Hash)>] ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo data, response status code and response headers
    def com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'threshold'] = opts[:'threshold'] if !opts[:'threshold'].nil?
      query_params[:'jobTopicName'] = opts[:'job_topic_name'] if !opts[:'job_topic_name'].nil?
      query_params[:'emailEnabled'] = opts[:'email_enabled'] if !opts[:'email_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_wcm_jobs_async_impl_async_delete_config_provider_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :job_purge_threshold 
    # @option opts [Integer] :job_purge_max_jobs 
    # @return [ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo]
    def com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task(opts = {})
      data, _status_code, _headers = com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :job_purge_threshold 
    # @option opts [Integer] :job_purge_max_jobs 
    # @return [Array<(ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo, Integer, Hash)>] ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo data, response status code and response headers
    def com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?
      query_params[:'job.purge.threshold'] = opts[:'job_purge_threshold'] if !opts[:'job_purge_threshold'].nil?
      query_params[:'job.purge.max.jobs'] = opts[:'job_purge_max_jobs'] if !opts[:'job_purge_max_jobs'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_wcm_jobs_async_impl_async_job_clean_up_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :threshold 
    # @option opts [String] :job_topic_name 
    # @option opts [Boolean] :email_enabled 
    # @return [ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo]
    def com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service(opts = {})
      data, _status_code, _headers = com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :threshold 
    # @option opts [String] :job_topic_name 
    # @option opts [Boolean] :email_enabled 
    # @return [Array<(ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo, Integer, Hash)>] ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo data, response status code and response headers
    def com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'threshold'] = opts[:'threshold'] if !opts[:'threshold'].nil?
      query_params[:'jobTopicName'] = opts[:'job_topic_name'] if !opts[:'job_topic_name'].nil?
      query_params[:'emailEnabled'] = opts[:'email_enabled'] if !opts[:'email_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_wcm_jobs_async_impl_async_move_config_provider_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :threshold 
    # @option opts [String] :job_topic_name 
    # @option opts [Boolean] :email_enabled 
    # @return [ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo]
    def com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service(opts = {})
      data, _status_code, _headers = com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :threshold 
    # @option opts [String] :job_topic_name 
    # @option opts [Boolean] :email_enabled 
    # @return [Array<(ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo, Integer, Hash)>] ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo data, response status code and response headers
    def com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'threshold'] = opts[:'threshold'] if !opts[:'threshold'].nil?
      query_params[:'jobTopicName'] = opts[:'job_topic_name'] if !opts[:'job_topic_name'].nil?
      query_params[:'emailEnabled'] = opts[:'email_enabled'] if !opts[:'email_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_wcm_jobs_async_impl_async_page_move_config_provider_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Integer] :launches_eventhandler_threadpool_maxsize 
    # @option opts [String] :launches_eventhandler_threadpool_priority 
    # @option opts [Boolean] :launches_eventhandler_updatelastmodification 
    # @return [ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo]
    def com_adobe_cq_wcm_launches_impl_launches_event_handler(opts = {})
      data, _status_code, _headers = com_adobe_cq_wcm_launches_impl_launches_event_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Integer] :launches_eventhandler_threadpool_maxsize 
    # @option opts [String] :launches_eventhandler_threadpool_priority 
    # @option opts [Boolean] :launches_eventhandler_updatelastmodification 
    # @return [Array<(ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo, Integer, Hash)>] ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo data, response status code and response headers
    def com_adobe_cq_wcm_launches_impl_launches_event_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_wcm_launches_impl_launches_event_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?
      query_params[:'launches.eventhandler.threadpool.maxsize'] = opts[:'launches_eventhandler_threadpool_maxsize'] if !opts[:'launches_eventhandler_threadpool_maxsize'].nil?
      query_params[:'launches.eventhandler.threadpool.priority'] = opts[:'launches_eventhandler_threadpool_priority'] if !opts[:'launches_eventhandler_threadpool_priority'].nil?
      query_params[:'launches.eventhandler.updatelastmodification'] = opts[:'launches_eventhandler_updatelastmodification'] if !opts[:'launches_eventhandler_updatelastmodification'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_wcm_launches_impl_launches_event_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_wcm_launches_impl_launches_event_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_qrcode_servlet_whitelist 
    # @return [ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo]
    def com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator(opts = {})
      data, _status_code, _headers = com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_qrcode_servlet_whitelist 
    # @return [Array<(ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo, Integer, Hash)>] ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo data, response status code and response headers
    def com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.wcm.qrcode.servlet.whitelist'] = @api_client.build_collection_param(opts[:'cq_wcm_qrcode_servlet_whitelist'], :multi) if !opts[:'cq_wcm_qrcode_servlet_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_wcm_mobile_qrcode_servlet_qr_code_image_generator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :size 
    # @return [ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo]
    def com_adobe_cq_wcm_style_internal_component_style_info_cache_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_wcm_style_internal_component_style_info_cache_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :size 
    # @return [Array<(ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo, Integer, Hash)>] ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo data, response status code and response headers
    def com_adobe_cq_wcm_style_internal_component_style_info_cache_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_wcm_style_internal_component_style_info_cache_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_wcm_style_internal_component_style_info_cache_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_wcm_style_internal_component_style_info_cache_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sync_translation_state_scheduling_format 
    # @option opts [String] :scheduling_repeat_translation_scheduling_format 
    # @option opts [String] :sync_translation_state_lock_timeout_in_minutes 
    # @option opts [String] :export_format 
    # @return [ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo]
    def com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl(opts = {})
      data, _status_code, _headers = com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sync_translation_state_scheduling_format 
    # @option opts [String] :scheduling_repeat_translation_scheduling_format 
    # @option opts [String] :sync_translation_state_lock_timeout_in_minutes 
    # @option opts [String] :export_format 
    # @return [Array<(ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo, Integer, Hash)>] ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo data, response status code and response headers
    def com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'syncTranslationState.schedulingFormat'] = opts[:'sync_translation_state_scheduling_format'] if !opts[:'sync_translation_state_scheduling_format'].nil?
      query_params[:'schedulingRepeatTranslation.schedulingFormat'] = opts[:'scheduling_repeat_translation_scheduling_format'] if !opts[:'scheduling_repeat_translation_scheduling_format'].nil?
      query_params[:'syncTranslationState.lockTimeoutInMinutes'] = opts[:'sync_translation_state_lock_timeout_in_minutes'] if !opts[:'sync_translation_state_lock_timeout_in_minutes'].nil?
      query_params[:'export.format'] = opts[:'export_format'] if !opts[:'export_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_cq_wcm_translation_impl_translation_platform_configuration_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :portal_outboxes 
    # @option opts [String] :draft_data_service 
    # @option opts [String] :draft_metadata_service 
    # @option opts [String] :submit_data_service 
    # @option opts [String] :submit_metadata_service 
    # @option opts [String] :pending_sign_data_service 
    # @option opts [String] :pending_sign_metadata_service 
    # @return [ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo]
    def com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service(opts = {})
      data, _status_code, _headers = com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :portal_outboxes 
    # @option opts [String] :draft_data_service 
    # @option opts [String] :draft_metadata_service 
    # @option opts [String] :submit_data_service 
    # @option opts [String] :submit_metadata_service 
    # @option opts [String] :pending_sign_data_service 
    # @option opts [String] :pending_sign_metadata_service 
    # @return [Array<(ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo, Integer, Hash)>] ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo data, response status code and response headers
    def com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'portal.outboxes'] = @api_client.build_collection_param(opts[:'portal_outboxes'], :multi) if !opts[:'portal_outboxes'].nil?
      query_params[:'draft.data.service'] = opts[:'draft_data_service'] if !opts[:'draft_data_service'].nil?
      query_params[:'draft.metadata.service'] = opts[:'draft_metadata_service'] if !opts[:'draft_metadata_service'].nil?
      query_params[:'submit.data.service'] = opts[:'submit_data_service'] if !opts[:'submit_data_service'].nil?
      query_params[:'submit.metadata.service'] = opts[:'submit_metadata_service'] if !opts[:'submit_metadata_service'].nil?
      query_params[:'pendingSign.data.service'] = opts[:'pending_sign_data_service'] if !opts[:'pending_sign_data_service'].nil?
      query_params[:'pendingSign.metadata.service'] = opts[:'pending_sign_metadata_service'] if !opts[:'pending_sign_metadata_service'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_fd_fp_config_forms_portal_draftsand_submission_config_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :formportal_interval 
    # @return [ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo]
    def com_adobe_fd_fp_config_forms_portal_scheduler_service(opts = {})
      data, _status_code, _headers = com_adobe_fd_fp_config_forms_portal_scheduler_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :formportal_interval 
    # @return [Array<(ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo, Integer, Hash)>] ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo data, response status code and response headers
    def com_adobe_fd_fp_config_forms_portal_scheduler_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_fd_fp_config_forms_portal_scheduler_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'formportal.interval'] = opts[:'formportal_interval'] if !opts[:'formportal_interval'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_fd_fp_config_forms_portal_scheduler_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_fd_fp_config_forms_portal_scheduler_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :alloweddata_file_locations 
    # @return [ComAdobeFormsCommonServiceImplDefaultDataProviderInfo]
    def com_adobe_forms_common_service_impl_default_data_provider(opts = {})
      data, _status_code, _headers = com_adobe_forms_common_service_impl_default_data_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :alloweddata_file_locations 
    # @return [Array<(ComAdobeFormsCommonServiceImplDefaultDataProviderInfo, Integer, Hash)>] ComAdobeFormsCommonServiceImplDefaultDataProviderInfo data, response status code and response headers
    def com_adobe_forms_common_service_impl_default_data_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_forms_common_service_impl_default_data_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'alloweddataFileLocations'] = @api_client.build_collection_param(opts[:'alloweddata_file_locations'], :multi) if !opts[:'alloweddata_file_locations'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeFormsCommonServiceImplDefaultDataProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_forms_common_service_impl_default_data_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_forms_common_service_impl_default_data_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :temp_storage_config 
    # @return [ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo]
    def com_adobe_forms_common_service_impl_forms_common_configuration_service_imp(opts = {})
      data, _status_code, _headers = com_adobe_forms_common_service_impl_forms_common_configuration_service_imp_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :temp_storage_config 
    # @return [Array<(ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo, Integer, Hash)>] ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo data, response status code and response headers
    def com_adobe_forms_common_service_impl_forms_common_configuration_service_imp_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_forms_common_service_impl_forms_common_configuration_service_imp ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'tempStorageConfig'] = opts[:'temp_storage_config'] if !opts[:'temp_storage_config'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_forms_common_service_impl_forms_common_configuration_service_imp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_forms_common_service_impl_forms_common_configuration_service_imp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [String] :duration_for_temporary_storage 
    # @option opts [String] :duration_for_anonymous_storage 
    # @return [ComAdobeFormsCommonServletTempCleanUpTaskInfo]
    def com_adobe_forms_common_servlet_temp_clean_up_task(opts = {})
      data, _status_code, _headers = com_adobe_forms_common_servlet_temp_clean_up_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [String] :duration_for_temporary_storage 
    # @option opts [String] :duration_for_anonymous_storage 
    # @return [Array<(ComAdobeFormsCommonServletTempCleanUpTaskInfo, Integer, Hash)>] ComAdobeFormsCommonServletTempCleanUpTaskInfo data, response status code and response headers
    def com_adobe_forms_common_servlet_temp_clean_up_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_forms_common_servlet_temp_clean_up_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?
      query_params[:'Duration for Temporary Storage'] = opts[:'duration_for_temporary_storage'] if !opts[:'duration_for_temporary_storage'].nil?
      query_params[:'Duration for Anonymous Storage'] = opts[:'duration_for_anonymous_storage'] if !opts[:'duration_for_anonymous_storage'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeFormsCommonServletTempCleanUpTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_forms_common_servlet_temp_clean_up_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_forms_common_servlet_temp_clean_up_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :query_limit 
    # @option opts [Array<String>] :file_type_extension_map 
    # @return [ComAdobeGraniteAcpPlatformPlatformServletInfo]
    def com_adobe_granite_acp_platform_platform_servlet(opts = {})
      data, _status_code, _headers = com_adobe_granite_acp_platform_platform_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :query_limit 
    # @option opts [Array<String>] :file_type_extension_map 
    # @return [Array<(ComAdobeGraniteAcpPlatformPlatformServletInfo, Integer, Hash)>] ComAdobeGraniteAcpPlatformPlatformServletInfo data, response status code and response headers
    def com_adobe_granite_acp_platform_platform_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_acp_platform_platform_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'query.limit'] = opts[:'query_limit'] if !opts[:'query_limit'].nil?
      query_params[:'file.type.extension.map'] = @api_client.build_collection_param(opts[:'file_type_extension_map'], :multi) if !opts[:'file_type_extension_map'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAcpPlatformPlatformServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_acp_platform_platform_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_acp_platform_platform_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :aggregate_relationships 
    # @option opts [Boolean] :aggregate_descend_virtual 
    # @return [ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo]
    def com_adobe_granite_activitystreams_impl_activity_manager_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_activitystreams_impl_activity_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :aggregate_relationships 
    # @option opts [Boolean] :aggregate_descend_virtual 
    # @return [Array<(ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo, Integer, Hash)>] ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo data, response status code and response headers
    def com_adobe_granite_activitystreams_impl_activity_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_activitystreams_impl_activity_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'aggregate.relationships'] = @api_client.build_collection_param(opts[:'aggregate_relationships'], :multi) if !opts[:'aggregate_relationships'].nil?
      query_params[:'aggregate.descend.virtual'] = opts[:'aggregate_descend_virtual'] if !opts[:'aggregate_descend_virtual'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_activitystreams_impl_activity_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_activitystreams_impl_activity_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :disabled 
    # @return [ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo]
    def com_adobe_granite_analyzer_base_system_status_servlet(opts = {})
      data, _status_code, _headers = com_adobe_granite_analyzer_base_system_status_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :disabled 
    # @return [Array<(ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo, Integer, Hash)>] ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo data, response status code and response headers
    def com_adobe_granite_analyzer_base_system_status_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_analyzer_base_system_status_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'disabled'] = opts[:'disabled'] if !opts[:'disabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_analyzer_base_system_status_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_analyzer_base_system_status_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :disabled 
    # @return [ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo]
    def com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet(opts = {})
      data, _status_code, _headers = com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :disabled 
    # @return [Array<(ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo, Integer, Hash)>] ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo data, response status code and response headers
    def com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'disabled'] = opts[:'disabled'] if !opts[:'disabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_analyzer_scripts_compile_all_scripts_compiler_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :com_adobe_cq_cdn_cdn_rewriter 
    # @option opts [String] :com_adobe_cq_cloud_config_components 
    # @option opts [String] :com_adobe_cq_cloud_config_core 
    # @option opts [String] :com_adobe_cq_cloud_config_ui 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_editor 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_projects_core 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_projects_wcm_core 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_ui_commons 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_wcm_style 
    # @option opts [String] :com_adobe_cq_cq_activitymap_integration 
    # @option opts [String] :com_adobe_cq_cq_contexthub_commons 
    # @option opts [String] :com_adobe_cq_cq_dtm 
    # @option opts [String] :com_adobe_cq_cq_healthcheck 
    # @option opts [String] :com_adobe_cq_cq_multisite_targeting 
    # @option opts [String] :com_adobe_cq_cq_pre_upgrade_cleanup 
    # @option opts [String] :com_adobe_cq_cq_product_info_provider 
    # @option opts [String] :com_adobe_cq_cq_rest_sites 
    # @option opts [String] :com_adobe_cq_cq_security_hc 
    # @option opts [String] :com_adobe_cq_dam_cq_dam_svg_handler 
    # @option opts [String] :com_adobe_cq_dam_cq_scene7_imaging 
    # @option opts [String] :com_adobe_cq_dtm_reactor_core 
    # @option opts [String] :com_adobe_cq_dtm_reactor_ui 
    # @option opts [String] :com_adobe_cq_exp_jspel_resolver 
    # @option opts [String] :com_adobe_cq_inbox_cq_inbox 
    # @option opts [String] :com_adobe_cq_json_schema_parser 
    # @option opts [String] :com_adobe_cq_media_cq_media_publishing_dps_fp_core 
    # @option opts [String] :com_adobe_cq_mobile_cq_mobile_caas 
    # @option opts [String] :com_adobe_cq_mobile_cq_mobile_index_builder 
    # @option opts [String] :com_adobe_cq_mobile_cq_mobile_phonegap_build 
    # @option opts [String] :com_adobe_cq_myspell 
    # @option opts [String] :com_adobe_cq_sample_we_retail_core 
    # @option opts [String] :com_adobe_cq_screens_com_adobe_cq_screens_dcc 
    # @option opts [String] :com_adobe_cq_screens_com_adobe_cq_screens_mq_core 
    # @option opts [String] :com_adobe_cq_social_cq_social_as_provider 
    # @option opts [String] :com_adobe_cq_social_cq_social_badging_basic_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_badging_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_calendar_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_content_fragments_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_enablement_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_graph_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_ideation_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_jcr_provider 
    # @option opts [String] :com_adobe_cq_social_cq_social_members_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_ms_provider 
    # @option opts [String] :com_adobe_cq_social_cq_social_notifications_channels_web 
    # @option opts [String] :com_adobe_cq_social_cq_social_notifications_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_rdb_provider 
    # @option opts [String] :com_adobe_cq_social_cq_social_scf_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_scoring_basic_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_scoring_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_serviceusers_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_srp_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_ugcbase_impl 
    # @option opts [String] :com_adobe_dam_cq_dam_cfm_impl 
    # @option opts [String] :com_adobe_forms_foundation_forms_foundation_base 
    # @option opts [String] :com_adobe_granite_apicontroller 
    # @option opts [String] :com_adobe_granite_asset_core 
    # @option opts [String] :com_adobe_granite_auth_sso 
    # @option opts [String] :com_adobe_granite_bundles_hc_impl 
    # @option opts [String] :com_adobe_granite_compat_router 
    # @option opts [String] :com_adobe_granite_conf 
    # @option opts [String] :com_adobe_granite_conf_ui_core 
    # @option opts [String] :com_adobe_granite_cors 
    # @option opts [String] :com_adobe_granite_crx_explorer 
    # @option opts [String] :com_adobe_granite_crxde_lite 
    # @option opts [String] :com_adobe_granite_crypto_config 
    # @option opts [String] :com_adobe_granite_crypto_extension 
    # @option opts [String] :com_adobe_granite_crypto_file 
    # @option opts [String] :com_adobe_granite_crypto_jcr 
    # @option opts [String] :com_adobe_granite_csrf 
    # @option opts [String] :com_adobe_granite_distribution_core 
    # @option opts [String] :com_adobe_granite_dropwizard_metrics 
    # @option opts [String] :com_adobe_granite_frags_impl 
    # @option opts [String] :com_adobe_granite_gibson 
    # @option opts [String] :com_adobe_granite_infocollector 
    # @option opts [String] :com_adobe_granite_installer_factory_packages 
    # @option opts [String] :com_adobe_granite_jetty_ssl 
    # @option opts [String] :com_adobe_granite_jobs_async 
    # @option opts [String] :com_adobe_granite_maintenance_oak 
    # @option opts [String] :com_adobe_granite_monitoring_core 
    # @option opts [String] :com_adobe_granite_queries 
    # @option opts [String] :com_adobe_granite_replication_hc_impl 
    # @option opts [String] :com_adobe_granite_repository_checker 
    # @option opts [String] :com_adobe_granite_repository_hc_impl 
    # @option opts [String] :com_adobe_granite_rest_assets 
    # @option opts [String] :com_adobe_granite_security_ui 
    # @option opts [String] :com_adobe_granite_startup 
    # @option opts [String] :com_adobe_granite_tagsoup 
    # @option opts [String] :com_adobe_granite_taskmanagement_core 
    # @option opts [String] :com_adobe_granite_taskmanagement_workflow 
    # @option opts [String] :com_adobe_granite_ui_clientlibs_compiler_less 
    # @option opts [String] :com_adobe_granite_ui_clientlibs_processor_gcc 
    # @option opts [String] :com_adobe_granite_webconsole_plugins 
    # @option opts [String] :com_adobe_granite_workflow_console 
    # @option opts [String] :com_adobe_xmp_worker_files_native_fragment_linux 
    # @option opts [String] :com_adobe_xmp_worker_files_native_fragment_macosx 
    # @option opts [String] :com_adobe_xmp_worker_files_native_fragment_win 
    # @option opts [String] :com_day_commons_osgi_wrapper_simple_jndi 
    # @option opts [String] :com_day_cq_cq_authhandler 
    # @option opts [String] :com_day_cq_cq_compat_configupdate 
    # @option opts [String] :com_day_cq_cq_licensebranding 
    # @option opts [String] :com_day_cq_cq_notifcation_impl 
    # @option opts [String] :com_day_cq_cq_replication_audit 
    # @option opts [String] :com_day_cq_cq_search_ext 
    # @option opts [String] :com_day_cq_dam_cq_dam_annotation_print 
    # @option opts [String] :com_day_cq_dam_cq_dam_asset_usage 
    # @option opts [String] :com_day_cq_dam_cq_dam_s7dam 
    # @option opts [String] :com_day_cq_dam_cq_dam_similaritysearch 
    # @option opts [String] :com_day_cq_dam_dam_webdav_support 
    # @option opts [String] :com_day_cq_pre_upgrade_tasks 
    # @option opts [String] :com_day_cq_replication_extensions 
    # @option opts [String] :com_day_cq_wcm_cq_msm_core 
    # @option opts [String] :com_day_cq_wcm_cq_wcm_translation 
    # @option opts [String] :day_commons_jrawio 
    # @option opts [String] :org_apache_aries_jmx_whiteboard 
    # @option opts [String] :org_apache_felix_http_sslfilter 
    # @option opts [String] :org_apache_felix_org_apache_felix_threaddump 
    # @option opts [String] :org_apache_felix_webconsole_plugins_ds 
    # @option opts [String] :org_apache_felix_webconsole_plugins_event 
    # @option opts [String] :org_apache_felix_webconsole_plugins_memoryusage 
    # @option opts [String] :org_apache_felix_webconsole_plugins_packageadmin 
    # @option opts [String] :org_apache_jackrabbit_oak_auth_ldap 
    # @option opts [String] :org_apache_jackrabbit_oak_segment_tar 
    # @option opts [String] :org_apache_jackrabbit_oak_solr_osgi 
    # @option opts [String] :org_apache_sling_bundleresource_impl 
    # @option opts [String] :org_apache_sling_commons_fsclassloader 
    # @option opts [String] :org_apache_sling_commons_log_webconsole 
    # @option opts [String] :org_apache_sling_datasource 
    # @option opts [String] :org_apache_sling_discovery_base 
    # @option opts [String] :org_apache_sling_discovery_oak 
    # @option opts [String] :org_apache_sling_discovery_support 
    # @option opts [String] :org_apache_sling_distribution_api 
    # @option opts [String] :org_apache_sling_distribution_core 
    # @option opts [String] :org_apache_sling_extensions_webconsolesecurityprovider 
    # @option opts [String] :org_apache_sling_hc_webconsole 
    # @option opts [String] :org_apache_sling_installer_console 
    # @option opts [String] :org_apache_sling_installer_provider_file 
    # @option opts [String] :org_apache_sling_installer_provider_jcr 
    # @option opts [String] :org_apache_sling_jcr_davex 
    # @option opts [String] :org_apache_sling_jcr_resourcesecurity 
    # @option opts [String] :org_apache_sling_jmx_provider 
    # @option opts [String] :org_apache_sling_launchpad_installer 
    # @option opts [String] :org_apache_sling_models_impl 
    # @option opts [String] :org_apache_sling_repoinit_parser 
    # @option opts [String] :org_apache_sling_resource_inventory 
    # @option opts [String] :org_apache_sling_resourceresolver 
    # @option opts [String] :org_apache_sling_scripting_javascript 
    # @option opts [String] :org_apache_sling_scripting_jst 
    # @option opts [String] :org_apache_sling_scripting_sightly_js_provider 
    # @option opts [String] :org_apache_sling_scripting_sightly_models_provider 
    # @option opts [String] :org_apache_sling_security 
    # @option opts [String] :org_apache_sling_servlets_compat 
    # @option opts [String] :org_apache_sling_servlets_get 
    # @option opts [String] :org_apache_sling_startupfilter_disabler 
    # @option opts [String] :org_apache_sling_tracer 
    # @option opts [String] :we_retail_client_app_core 
    # @return [ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo]
    def com_adobe_granite_apicontroller_filter_resolver_hook_factory(opts = {})
      data, _status_code, _headers = com_adobe_granite_apicontroller_filter_resolver_hook_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :com_adobe_cq_cdn_cdn_rewriter 
    # @option opts [String] :com_adobe_cq_cloud_config_components 
    # @option opts [String] :com_adobe_cq_cloud_config_core 
    # @option opts [String] :com_adobe_cq_cloud_config_ui 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_editor 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_projects_core 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_projects_wcm_core 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_ui_commons 
    # @option opts [String] :com_adobe_cq_com_adobe_cq_wcm_style 
    # @option opts [String] :com_adobe_cq_cq_activitymap_integration 
    # @option opts [String] :com_adobe_cq_cq_contexthub_commons 
    # @option opts [String] :com_adobe_cq_cq_dtm 
    # @option opts [String] :com_adobe_cq_cq_healthcheck 
    # @option opts [String] :com_adobe_cq_cq_multisite_targeting 
    # @option opts [String] :com_adobe_cq_cq_pre_upgrade_cleanup 
    # @option opts [String] :com_adobe_cq_cq_product_info_provider 
    # @option opts [String] :com_adobe_cq_cq_rest_sites 
    # @option opts [String] :com_adobe_cq_cq_security_hc 
    # @option opts [String] :com_adobe_cq_dam_cq_dam_svg_handler 
    # @option opts [String] :com_adobe_cq_dam_cq_scene7_imaging 
    # @option opts [String] :com_adobe_cq_dtm_reactor_core 
    # @option opts [String] :com_adobe_cq_dtm_reactor_ui 
    # @option opts [String] :com_adobe_cq_exp_jspel_resolver 
    # @option opts [String] :com_adobe_cq_inbox_cq_inbox 
    # @option opts [String] :com_adobe_cq_json_schema_parser 
    # @option opts [String] :com_adobe_cq_media_cq_media_publishing_dps_fp_core 
    # @option opts [String] :com_adobe_cq_mobile_cq_mobile_caas 
    # @option opts [String] :com_adobe_cq_mobile_cq_mobile_index_builder 
    # @option opts [String] :com_adobe_cq_mobile_cq_mobile_phonegap_build 
    # @option opts [String] :com_adobe_cq_myspell 
    # @option opts [String] :com_adobe_cq_sample_we_retail_core 
    # @option opts [String] :com_adobe_cq_screens_com_adobe_cq_screens_dcc 
    # @option opts [String] :com_adobe_cq_screens_com_adobe_cq_screens_mq_core 
    # @option opts [String] :com_adobe_cq_social_cq_social_as_provider 
    # @option opts [String] :com_adobe_cq_social_cq_social_badging_basic_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_badging_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_calendar_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_content_fragments_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_enablement_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_graph_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_ideation_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_jcr_provider 
    # @option opts [String] :com_adobe_cq_social_cq_social_members_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_ms_provider 
    # @option opts [String] :com_adobe_cq_social_cq_social_notifications_channels_web 
    # @option opts [String] :com_adobe_cq_social_cq_social_notifications_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_rdb_provider 
    # @option opts [String] :com_adobe_cq_social_cq_social_scf_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_scoring_basic_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_scoring_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_serviceusers_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_srp_impl 
    # @option opts [String] :com_adobe_cq_social_cq_social_ugcbase_impl 
    # @option opts [String] :com_adobe_dam_cq_dam_cfm_impl 
    # @option opts [String] :com_adobe_forms_foundation_forms_foundation_base 
    # @option opts [String] :com_adobe_granite_apicontroller 
    # @option opts [String] :com_adobe_granite_asset_core 
    # @option opts [String] :com_adobe_granite_auth_sso 
    # @option opts [String] :com_adobe_granite_bundles_hc_impl 
    # @option opts [String] :com_adobe_granite_compat_router 
    # @option opts [String] :com_adobe_granite_conf 
    # @option opts [String] :com_adobe_granite_conf_ui_core 
    # @option opts [String] :com_adobe_granite_cors 
    # @option opts [String] :com_adobe_granite_crx_explorer 
    # @option opts [String] :com_adobe_granite_crxde_lite 
    # @option opts [String] :com_adobe_granite_crypto_config 
    # @option opts [String] :com_adobe_granite_crypto_extension 
    # @option opts [String] :com_adobe_granite_crypto_file 
    # @option opts [String] :com_adobe_granite_crypto_jcr 
    # @option opts [String] :com_adobe_granite_csrf 
    # @option opts [String] :com_adobe_granite_distribution_core 
    # @option opts [String] :com_adobe_granite_dropwizard_metrics 
    # @option opts [String] :com_adobe_granite_frags_impl 
    # @option opts [String] :com_adobe_granite_gibson 
    # @option opts [String] :com_adobe_granite_infocollector 
    # @option opts [String] :com_adobe_granite_installer_factory_packages 
    # @option opts [String] :com_adobe_granite_jetty_ssl 
    # @option opts [String] :com_adobe_granite_jobs_async 
    # @option opts [String] :com_adobe_granite_maintenance_oak 
    # @option opts [String] :com_adobe_granite_monitoring_core 
    # @option opts [String] :com_adobe_granite_queries 
    # @option opts [String] :com_adobe_granite_replication_hc_impl 
    # @option opts [String] :com_adobe_granite_repository_checker 
    # @option opts [String] :com_adobe_granite_repository_hc_impl 
    # @option opts [String] :com_adobe_granite_rest_assets 
    # @option opts [String] :com_adobe_granite_security_ui 
    # @option opts [String] :com_adobe_granite_startup 
    # @option opts [String] :com_adobe_granite_tagsoup 
    # @option opts [String] :com_adobe_granite_taskmanagement_core 
    # @option opts [String] :com_adobe_granite_taskmanagement_workflow 
    # @option opts [String] :com_adobe_granite_ui_clientlibs_compiler_less 
    # @option opts [String] :com_adobe_granite_ui_clientlibs_processor_gcc 
    # @option opts [String] :com_adobe_granite_webconsole_plugins 
    # @option opts [String] :com_adobe_granite_workflow_console 
    # @option opts [String] :com_adobe_xmp_worker_files_native_fragment_linux 
    # @option opts [String] :com_adobe_xmp_worker_files_native_fragment_macosx 
    # @option opts [String] :com_adobe_xmp_worker_files_native_fragment_win 
    # @option opts [String] :com_day_commons_osgi_wrapper_simple_jndi 
    # @option opts [String] :com_day_cq_cq_authhandler 
    # @option opts [String] :com_day_cq_cq_compat_configupdate 
    # @option opts [String] :com_day_cq_cq_licensebranding 
    # @option opts [String] :com_day_cq_cq_notifcation_impl 
    # @option opts [String] :com_day_cq_cq_replication_audit 
    # @option opts [String] :com_day_cq_cq_search_ext 
    # @option opts [String] :com_day_cq_dam_cq_dam_annotation_print 
    # @option opts [String] :com_day_cq_dam_cq_dam_asset_usage 
    # @option opts [String] :com_day_cq_dam_cq_dam_s7dam 
    # @option opts [String] :com_day_cq_dam_cq_dam_similaritysearch 
    # @option opts [String] :com_day_cq_dam_dam_webdav_support 
    # @option opts [String] :com_day_cq_pre_upgrade_tasks 
    # @option opts [String] :com_day_cq_replication_extensions 
    # @option opts [String] :com_day_cq_wcm_cq_msm_core 
    # @option opts [String] :com_day_cq_wcm_cq_wcm_translation 
    # @option opts [String] :day_commons_jrawio 
    # @option opts [String] :org_apache_aries_jmx_whiteboard 
    # @option opts [String] :org_apache_felix_http_sslfilter 
    # @option opts [String] :org_apache_felix_org_apache_felix_threaddump 
    # @option opts [String] :org_apache_felix_webconsole_plugins_ds 
    # @option opts [String] :org_apache_felix_webconsole_plugins_event 
    # @option opts [String] :org_apache_felix_webconsole_plugins_memoryusage 
    # @option opts [String] :org_apache_felix_webconsole_plugins_packageadmin 
    # @option opts [String] :org_apache_jackrabbit_oak_auth_ldap 
    # @option opts [String] :org_apache_jackrabbit_oak_segment_tar 
    # @option opts [String] :org_apache_jackrabbit_oak_solr_osgi 
    # @option opts [String] :org_apache_sling_bundleresource_impl 
    # @option opts [String] :org_apache_sling_commons_fsclassloader 
    # @option opts [String] :org_apache_sling_commons_log_webconsole 
    # @option opts [String] :org_apache_sling_datasource 
    # @option opts [String] :org_apache_sling_discovery_base 
    # @option opts [String] :org_apache_sling_discovery_oak 
    # @option opts [String] :org_apache_sling_discovery_support 
    # @option opts [String] :org_apache_sling_distribution_api 
    # @option opts [String] :org_apache_sling_distribution_core 
    # @option opts [String] :org_apache_sling_extensions_webconsolesecurityprovider 
    # @option opts [String] :org_apache_sling_hc_webconsole 
    # @option opts [String] :org_apache_sling_installer_console 
    # @option opts [String] :org_apache_sling_installer_provider_file 
    # @option opts [String] :org_apache_sling_installer_provider_jcr 
    # @option opts [String] :org_apache_sling_jcr_davex 
    # @option opts [String] :org_apache_sling_jcr_resourcesecurity 
    # @option opts [String] :org_apache_sling_jmx_provider 
    # @option opts [String] :org_apache_sling_launchpad_installer 
    # @option opts [String] :org_apache_sling_models_impl 
    # @option opts [String] :org_apache_sling_repoinit_parser 
    # @option opts [String] :org_apache_sling_resource_inventory 
    # @option opts [String] :org_apache_sling_resourceresolver 
    # @option opts [String] :org_apache_sling_scripting_javascript 
    # @option opts [String] :org_apache_sling_scripting_jst 
    # @option opts [String] :org_apache_sling_scripting_sightly_js_provider 
    # @option opts [String] :org_apache_sling_scripting_sightly_models_provider 
    # @option opts [String] :org_apache_sling_security 
    # @option opts [String] :org_apache_sling_servlets_compat 
    # @option opts [String] :org_apache_sling_servlets_get 
    # @option opts [String] :org_apache_sling_startupfilter_disabler 
    # @option opts [String] :org_apache_sling_tracer 
    # @option opts [String] :we_retail_client_app_core 
    # @return [Array<(ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo, Integer, Hash)>] ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo data, response status code and response headers
    def com_adobe_granite_apicontroller_filter_resolver_hook_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_apicontroller_filter_resolver_hook_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.cq.cdn.cdn-rewriter'] = opts[:'com_adobe_cq_cdn_cdn_rewriter'] if !opts[:'com_adobe_cq_cdn_cdn_rewriter'].nil?
      query_params[:'com.adobe.cq.cloud-config.components'] = opts[:'com_adobe_cq_cloud_config_components'] if !opts[:'com_adobe_cq_cloud_config_components'].nil?
      query_params[:'com.adobe.cq.cloud-config.core'] = opts[:'com_adobe_cq_cloud_config_core'] if !opts[:'com_adobe_cq_cloud_config_core'].nil?
      query_params[:'com.adobe.cq.cloud-config.ui'] = opts[:'com_adobe_cq_cloud_config_ui'] if !opts[:'com_adobe_cq_cloud_config_ui'].nil?
      query_params[:'com.adobe.cq.com.adobe.cq.editor'] = opts[:'com_adobe_cq_com_adobe_cq_editor'] if !opts[:'com_adobe_cq_com_adobe_cq_editor'].nil?
      query_params[:'com.adobe.cq.com.adobe.cq.projects.core'] = opts[:'com_adobe_cq_com_adobe_cq_projects_core'] if !opts[:'com_adobe_cq_com_adobe_cq_projects_core'].nil?
      query_params[:'com.adobe.cq.com.adobe.cq.projects.wcm.core'] = opts[:'com_adobe_cq_com_adobe_cq_projects_wcm_core'] if !opts[:'com_adobe_cq_com_adobe_cq_projects_wcm_core'].nil?
      query_params[:'com.adobe.cq.com.adobe.cq.ui.commons'] = opts[:'com_adobe_cq_com_adobe_cq_ui_commons'] if !opts[:'com_adobe_cq_com_adobe_cq_ui_commons'].nil?
      query_params[:'com.adobe.cq.com.adobe.cq.wcm.style'] = opts[:'com_adobe_cq_com_adobe_cq_wcm_style'] if !opts[:'com_adobe_cq_com_adobe_cq_wcm_style'].nil?
      query_params[:'com.adobe.cq.cq-activitymap-integration'] = opts[:'com_adobe_cq_cq_activitymap_integration'] if !opts[:'com_adobe_cq_cq_activitymap_integration'].nil?
      query_params[:'com.adobe.cq.cq-contexthub-commons'] = opts[:'com_adobe_cq_cq_contexthub_commons'] if !opts[:'com_adobe_cq_cq_contexthub_commons'].nil?
      query_params[:'com.adobe.cq.cq-dtm'] = opts[:'com_adobe_cq_cq_dtm'] if !opts[:'com_adobe_cq_cq_dtm'].nil?
      query_params[:'com.adobe.cq.cq-healthcheck'] = opts[:'com_adobe_cq_cq_healthcheck'] if !opts[:'com_adobe_cq_cq_healthcheck'].nil?
      query_params[:'com.adobe.cq.cq-multisite-targeting'] = opts[:'com_adobe_cq_cq_multisite_targeting'] if !opts[:'com_adobe_cq_cq_multisite_targeting'].nil?
      query_params[:'com.adobe.cq.cq-pre-upgrade-cleanup'] = opts[:'com_adobe_cq_cq_pre_upgrade_cleanup'] if !opts[:'com_adobe_cq_cq_pre_upgrade_cleanup'].nil?
      query_params[:'com.adobe.cq.cq-product-info-provider'] = opts[:'com_adobe_cq_cq_product_info_provider'] if !opts[:'com_adobe_cq_cq_product_info_provider'].nil?
      query_params[:'com.adobe.cq.cq-rest-sites'] = opts[:'com_adobe_cq_cq_rest_sites'] if !opts[:'com_adobe_cq_cq_rest_sites'].nil?
      query_params[:'com.adobe.cq.cq-security-hc'] = opts[:'com_adobe_cq_cq_security_hc'] if !opts[:'com_adobe_cq_cq_security_hc'].nil?
      query_params[:'com.adobe.cq.dam.cq-dam-svg-handler'] = opts[:'com_adobe_cq_dam_cq_dam_svg_handler'] if !opts[:'com_adobe_cq_dam_cq_dam_svg_handler'].nil?
      query_params[:'com.adobe.cq.dam.cq-scene7-imaging'] = opts[:'com_adobe_cq_dam_cq_scene7_imaging'] if !opts[:'com_adobe_cq_dam_cq_scene7_imaging'].nil?
      query_params[:'com.adobe.cq.dtm-reactor.core'] = opts[:'com_adobe_cq_dtm_reactor_core'] if !opts[:'com_adobe_cq_dtm_reactor_core'].nil?
      query_params[:'com.adobe.cq.dtm-reactor.ui'] = opts[:'com_adobe_cq_dtm_reactor_ui'] if !opts[:'com_adobe_cq_dtm_reactor_ui'].nil?
      query_params[:'com.adobe.cq.exp-jspel-resolver'] = opts[:'com_adobe_cq_exp_jspel_resolver'] if !opts[:'com_adobe_cq_exp_jspel_resolver'].nil?
      query_params[:'com.adobe.cq.inbox.cq-inbox'] = opts[:'com_adobe_cq_inbox_cq_inbox'] if !opts[:'com_adobe_cq_inbox_cq_inbox'].nil?
      query_params[:'com.adobe.cq.json-schema-parser'] = opts[:'com_adobe_cq_json_schema_parser'] if !opts[:'com_adobe_cq_json_schema_parser'].nil?
      query_params[:'com.adobe.cq.media.cq-media-publishing-dps-fp-core'] = opts[:'com_adobe_cq_media_cq_media_publishing_dps_fp_core'] if !opts[:'com_adobe_cq_media_cq_media_publishing_dps_fp_core'].nil?
      query_params[:'com.adobe.cq.mobile.cq-mobile-caas'] = opts[:'com_adobe_cq_mobile_cq_mobile_caas'] if !opts[:'com_adobe_cq_mobile_cq_mobile_caas'].nil?
      query_params[:'com.adobe.cq.mobile.cq-mobile-index-builder'] = opts[:'com_adobe_cq_mobile_cq_mobile_index_builder'] if !opts[:'com_adobe_cq_mobile_cq_mobile_index_builder'].nil?
      query_params[:'com.adobe.cq.mobile.cq-mobile-phonegap-build'] = opts[:'com_adobe_cq_mobile_cq_mobile_phonegap_build'] if !opts[:'com_adobe_cq_mobile_cq_mobile_phonegap_build'].nil?
      query_params[:'com.adobe.cq.myspell'] = opts[:'com_adobe_cq_myspell'] if !opts[:'com_adobe_cq_myspell'].nil?
      query_params[:'com.adobe.cq.sample.we.retail.core'] = opts[:'com_adobe_cq_sample_we_retail_core'] if !opts[:'com_adobe_cq_sample_we_retail_core'].nil?
      query_params[:'com.adobe.cq.screens.com.adobe.cq.screens.dcc'] = opts[:'com_adobe_cq_screens_com_adobe_cq_screens_dcc'] if !opts[:'com_adobe_cq_screens_com_adobe_cq_screens_dcc'].nil?
      query_params[:'com.adobe.cq.screens.com.adobe.cq.screens.mq.core'] = opts[:'com_adobe_cq_screens_com_adobe_cq_screens_mq_core'] if !opts[:'com_adobe_cq_screens_com_adobe_cq_screens_mq_core'].nil?
      query_params[:'com.adobe.cq.social.cq-social-as-provider'] = opts[:'com_adobe_cq_social_cq_social_as_provider'] if !opts[:'com_adobe_cq_social_cq_social_as_provider'].nil?
      query_params[:'com.adobe.cq.social.cq-social-badging-basic-impl'] = opts[:'com_adobe_cq_social_cq_social_badging_basic_impl'] if !opts[:'com_adobe_cq_social_cq_social_badging_basic_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-badging-impl'] = opts[:'com_adobe_cq_social_cq_social_badging_impl'] if !opts[:'com_adobe_cq_social_cq_social_badging_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-calendar-impl'] = opts[:'com_adobe_cq_social_cq_social_calendar_impl'] if !opts[:'com_adobe_cq_social_cq_social_calendar_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-content-fragments-impl'] = opts[:'com_adobe_cq_social_cq_social_content_fragments_impl'] if !opts[:'com_adobe_cq_social_cq_social_content_fragments_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-enablement-impl'] = opts[:'com_adobe_cq_social_cq_social_enablement_impl'] if !opts[:'com_adobe_cq_social_cq_social_enablement_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-graph-impl'] = opts[:'com_adobe_cq_social_cq_social_graph_impl'] if !opts[:'com_adobe_cq_social_cq_social_graph_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-ideation-impl'] = opts[:'com_adobe_cq_social_cq_social_ideation_impl'] if !opts[:'com_adobe_cq_social_cq_social_ideation_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-jcr-provider'] = opts[:'com_adobe_cq_social_cq_social_jcr_provider'] if !opts[:'com_adobe_cq_social_cq_social_jcr_provider'].nil?
      query_params[:'com.adobe.cq.social.cq-social-members-impl'] = opts[:'com_adobe_cq_social_cq_social_members_impl'] if !opts[:'com_adobe_cq_social_cq_social_members_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-ms-provider'] = opts[:'com_adobe_cq_social_cq_social_ms_provider'] if !opts[:'com_adobe_cq_social_cq_social_ms_provider'].nil?
      query_params[:'com.adobe.cq.social.cq-social-notifications-channels-web'] = opts[:'com_adobe_cq_social_cq_social_notifications_channels_web'] if !opts[:'com_adobe_cq_social_cq_social_notifications_channels_web'].nil?
      query_params[:'com.adobe.cq.social.cq-social-notifications-impl'] = opts[:'com_adobe_cq_social_cq_social_notifications_impl'] if !opts[:'com_adobe_cq_social_cq_social_notifications_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-rdb-provider'] = opts[:'com_adobe_cq_social_cq_social_rdb_provider'] if !opts[:'com_adobe_cq_social_cq_social_rdb_provider'].nil?
      query_params[:'com.adobe.cq.social.cq-social-scf-impl'] = opts[:'com_adobe_cq_social_cq_social_scf_impl'] if !opts[:'com_adobe_cq_social_cq_social_scf_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-scoring-basic-impl'] = opts[:'com_adobe_cq_social_cq_social_scoring_basic_impl'] if !opts[:'com_adobe_cq_social_cq_social_scoring_basic_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-scoring-impl'] = opts[:'com_adobe_cq_social_cq_social_scoring_impl'] if !opts[:'com_adobe_cq_social_cq_social_scoring_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-serviceusers-impl'] = opts[:'com_adobe_cq_social_cq_social_serviceusers_impl'] if !opts[:'com_adobe_cq_social_cq_social_serviceusers_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-srp-impl'] = opts[:'com_adobe_cq_social_cq_social_srp_impl'] if !opts[:'com_adobe_cq_social_cq_social_srp_impl'].nil?
      query_params[:'com.adobe.cq.social.cq-social-ugcbase-impl'] = opts[:'com_adobe_cq_social_cq_social_ugcbase_impl'] if !opts[:'com_adobe_cq_social_cq_social_ugcbase_impl'].nil?
      query_params[:'com.adobe.dam.cq-dam-cfm-impl'] = opts[:'com_adobe_dam_cq_dam_cfm_impl'] if !opts[:'com_adobe_dam_cq_dam_cfm_impl'].nil?
      query_params[:'com.adobe.forms.foundation-forms-foundation-base'] = opts[:'com_adobe_forms_foundation_forms_foundation_base'] if !opts[:'com_adobe_forms_foundation_forms_foundation_base'].nil?
      query_params[:'com.adobe.granite.apicontroller'] = opts[:'com_adobe_granite_apicontroller'] if !opts[:'com_adobe_granite_apicontroller'].nil?
      query_params[:'com.adobe.granite.asset.core'] = opts[:'com_adobe_granite_asset_core'] if !opts[:'com_adobe_granite_asset_core'].nil?
      query_params[:'com.adobe.granite.auth.sso'] = opts[:'com_adobe_granite_auth_sso'] if !opts[:'com_adobe_granite_auth_sso'].nil?
      query_params[:'com.adobe.granite.bundles.hc.impl'] = opts[:'com_adobe_granite_bundles_hc_impl'] if !opts[:'com_adobe_granite_bundles_hc_impl'].nil?
      query_params[:'com.adobe.granite.compat-router'] = opts[:'com_adobe_granite_compat_router'] if !opts[:'com_adobe_granite_compat_router'].nil?
      query_params[:'com.adobe.granite.conf'] = opts[:'com_adobe_granite_conf'] if !opts[:'com_adobe_granite_conf'].nil?
      query_params[:'com.adobe.granite.conf.ui.core'] = opts[:'com_adobe_granite_conf_ui_core'] if !opts[:'com_adobe_granite_conf_ui_core'].nil?
      query_params[:'com.adobe.granite.cors'] = opts[:'com_adobe_granite_cors'] if !opts[:'com_adobe_granite_cors'].nil?
      query_params[:'com.adobe.granite.crx-explorer'] = opts[:'com_adobe_granite_crx_explorer'] if !opts[:'com_adobe_granite_crx_explorer'].nil?
      query_params[:'com.adobe.granite.crxde-lite'] = opts[:'com_adobe_granite_crxde_lite'] if !opts[:'com_adobe_granite_crxde_lite'].nil?
      query_params[:'com.adobe.granite.crypto.config'] = opts[:'com_adobe_granite_crypto_config'] if !opts[:'com_adobe_granite_crypto_config'].nil?
      query_params[:'com.adobe.granite.crypto.extension'] = opts[:'com_adobe_granite_crypto_extension'] if !opts[:'com_adobe_granite_crypto_extension'].nil?
      query_params[:'com.adobe.granite.crypto.file'] = opts[:'com_adobe_granite_crypto_file'] if !opts[:'com_adobe_granite_crypto_file'].nil?
      query_params[:'com.adobe.granite.crypto.jcr'] = opts[:'com_adobe_granite_crypto_jcr'] if !opts[:'com_adobe_granite_crypto_jcr'].nil?
      query_params[:'com.adobe.granite.csrf'] = opts[:'com_adobe_granite_csrf'] if !opts[:'com_adobe_granite_csrf'].nil?
      query_params[:'com.adobe.granite.distribution.core'] = opts[:'com_adobe_granite_distribution_core'] if !opts[:'com_adobe_granite_distribution_core'].nil?
      query_params[:'com.adobe.granite.dropwizard.metrics'] = opts[:'com_adobe_granite_dropwizard_metrics'] if !opts[:'com_adobe_granite_dropwizard_metrics'].nil?
      query_params[:'com.adobe.granite.frags.impl'] = opts[:'com_adobe_granite_frags_impl'] if !opts[:'com_adobe_granite_frags_impl'].nil?
      query_params[:'com.adobe.granite.gibson'] = opts[:'com_adobe_granite_gibson'] if !opts[:'com_adobe_granite_gibson'].nil?
      query_params[:'com.adobe.granite.infocollector'] = opts[:'com_adobe_granite_infocollector'] if !opts[:'com_adobe_granite_infocollector'].nil?
      query_params[:'com.adobe.granite.installer.factory.packages'] = opts[:'com_adobe_granite_installer_factory_packages'] if !opts[:'com_adobe_granite_installer_factory_packages'].nil?
      query_params[:'com.adobe.granite.jetty.ssl'] = opts[:'com_adobe_granite_jetty_ssl'] if !opts[:'com_adobe_granite_jetty_ssl'].nil?
      query_params[:'com.adobe.granite.jobs.async'] = opts[:'com_adobe_granite_jobs_async'] if !opts[:'com_adobe_granite_jobs_async'].nil?
      query_params[:'com.adobe.granite.maintenance.oak'] = opts[:'com_adobe_granite_maintenance_oak'] if !opts[:'com_adobe_granite_maintenance_oak'].nil?
      query_params[:'com.adobe.granite.monitoring.core'] = opts[:'com_adobe_granite_monitoring_core'] if !opts[:'com_adobe_granite_monitoring_core'].nil?
      query_params[:'com.adobe.granite.queries'] = opts[:'com_adobe_granite_queries'] if !opts[:'com_adobe_granite_queries'].nil?
      query_params[:'com.adobe.granite.replication.hc.impl'] = opts[:'com_adobe_granite_replication_hc_impl'] if !opts[:'com_adobe_granite_replication_hc_impl'].nil?
      query_params[:'com.adobe.granite.repository.checker'] = opts[:'com_adobe_granite_repository_checker'] if !opts[:'com_adobe_granite_repository_checker'].nil?
      query_params[:'com.adobe.granite.repository.hc.impl'] = opts[:'com_adobe_granite_repository_hc_impl'] if !opts[:'com_adobe_granite_repository_hc_impl'].nil?
      query_params[:'com.adobe.granite.rest.assets'] = opts[:'com_adobe_granite_rest_assets'] if !opts[:'com_adobe_granite_rest_assets'].nil?
      query_params[:'com.adobe.granite.security.ui'] = opts[:'com_adobe_granite_security_ui'] if !opts[:'com_adobe_granite_security_ui'].nil?
      query_params[:'com.adobe.granite.startup'] = opts[:'com_adobe_granite_startup'] if !opts[:'com_adobe_granite_startup'].nil?
      query_params[:'com.adobe.granite.tagsoup'] = opts[:'com_adobe_granite_tagsoup'] if !opts[:'com_adobe_granite_tagsoup'].nil?
      query_params[:'com.adobe.granite.taskmanagement.core'] = opts[:'com_adobe_granite_taskmanagement_core'] if !opts[:'com_adobe_granite_taskmanagement_core'].nil?
      query_params[:'com.adobe.granite.taskmanagement.workflow'] = opts[:'com_adobe_granite_taskmanagement_workflow'] if !opts[:'com_adobe_granite_taskmanagement_workflow'].nil?
      query_params[:'com.adobe.granite.ui.clientlibs.compiler.less'] = opts[:'com_adobe_granite_ui_clientlibs_compiler_less'] if !opts[:'com_adobe_granite_ui_clientlibs_compiler_less'].nil?
      query_params[:'com.adobe.granite.ui.clientlibs.processor.gcc'] = opts[:'com_adobe_granite_ui_clientlibs_processor_gcc'] if !opts[:'com_adobe_granite_ui_clientlibs_processor_gcc'].nil?
      query_params[:'com.adobe.granite.webconsole.plugins'] = opts[:'com_adobe_granite_webconsole_plugins'] if !opts[:'com_adobe_granite_webconsole_plugins'].nil?
      query_params[:'com.adobe.granite.workflow.console'] = opts[:'com_adobe_granite_workflow_console'] if !opts[:'com_adobe_granite_workflow_console'].nil?
      query_params[:'com.adobe.xmp.worker.files.native.fragment.linux'] = opts[:'com_adobe_xmp_worker_files_native_fragment_linux'] if !opts[:'com_adobe_xmp_worker_files_native_fragment_linux'].nil?
      query_params[:'com.adobe.xmp.worker.files.native.fragment.macosx'] = opts[:'com_adobe_xmp_worker_files_native_fragment_macosx'] if !opts[:'com_adobe_xmp_worker_files_native_fragment_macosx'].nil?
      query_params[:'com.adobe.xmp.worker.files.native.fragment.win'] = opts[:'com_adobe_xmp_worker_files_native_fragment_win'] if !opts[:'com_adobe_xmp_worker_files_native_fragment_win'].nil?
      query_params[:'com.day.commons.osgi.wrapper.simple-jndi'] = opts[:'com_day_commons_osgi_wrapper_simple_jndi'] if !opts[:'com_day_commons_osgi_wrapper_simple_jndi'].nil?
      query_params[:'com.day.cq.cq-authhandler'] = opts[:'com_day_cq_cq_authhandler'] if !opts[:'com_day_cq_cq_authhandler'].nil?
      query_params[:'com.day.cq.cq-compat-configupdate'] = opts[:'com_day_cq_cq_compat_configupdate'] if !opts[:'com_day_cq_cq_compat_configupdate'].nil?
      query_params[:'com.day.cq.cq-licensebranding'] = opts[:'com_day_cq_cq_licensebranding'] if !opts[:'com_day_cq_cq_licensebranding'].nil?
      query_params[:'com.day.cq.cq-notifcation-impl'] = opts[:'com_day_cq_cq_notifcation_impl'] if !opts[:'com_day_cq_cq_notifcation_impl'].nil?
      query_params[:'com.day.cq.cq-replication-audit'] = opts[:'com_day_cq_cq_replication_audit'] if !opts[:'com_day_cq_cq_replication_audit'].nil?
      query_params[:'com.day.cq.cq-search-ext'] = opts[:'com_day_cq_cq_search_ext'] if !opts[:'com_day_cq_cq_search_ext'].nil?
      query_params[:'com.day.cq.dam.cq-dam-annotation-print'] = opts[:'com_day_cq_dam_cq_dam_annotation_print'] if !opts[:'com_day_cq_dam_cq_dam_annotation_print'].nil?
      query_params[:'com.day.cq.dam.cq-dam-asset-usage'] = opts[:'com_day_cq_dam_cq_dam_asset_usage'] if !opts[:'com_day_cq_dam_cq_dam_asset_usage'].nil?
      query_params[:'com.day.cq.dam.cq-dam-s7dam'] = opts[:'com_day_cq_dam_cq_dam_s7dam'] if !opts[:'com_day_cq_dam_cq_dam_s7dam'].nil?
      query_params[:'com.day.cq.dam.cq-dam-similaritysearch'] = opts[:'com_day_cq_dam_cq_dam_similaritysearch'] if !opts[:'com_day_cq_dam_cq_dam_similaritysearch'].nil?
      query_params[:'com.day.cq.dam.dam-webdav-support'] = opts[:'com_day_cq_dam_dam_webdav_support'] if !opts[:'com_day_cq_dam_dam_webdav_support'].nil?
      query_params[:'com.day.cq.pre-upgrade-tasks'] = opts[:'com_day_cq_pre_upgrade_tasks'] if !opts[:'com_day_cq_pre_upgrade_tasks'].nil?
      query_params[:'com.day.cq.replication.extensions'] = opts[:'com_day_cq_replication_extensions'] if !opts[:'com_day_cq_replication_extensions'].nil?
      query_params[:'com.day.cq.wcm.cq-msm-core'] = opts[:'com_day_cq_wcm_cq_msm_core'] if !opts[:'com_day_cq_wcm_cq_msm_core'].nil?
      query_params[:'com.day.cq.wcm.cq-wcm-translation'] = opts[:'com_day_cq_wcm_cq_wcm_translation'] if !opts[:'com_day_cq_wcm_cq_wcm_translation'].nil?
      query_params[:'day-commons-jrawio'] = opts[:'day_commons_jrawio'] if !opts[:'day_commons_jrawio'].nil?
      query_params[:'org.apache.aries.jmx.whiteboard'] = opts[:'org_apache_aries_jmx_whiteboard'] if !opts[:'org_apache_aries_jmx_whiteboard'].nil?
      query_params[:'org.apache.felix.http.sslfilter'] = opts[:'org_apache_felix_http_sslfilter'] if !opts[:'org_apache_felix_http_sslfilter'].nil?
      query_params[:'org.apache.felix.org.apache.felix.threaddump'] = opts[:'org_apache_felix_org_apache_felix_threaddump'] if !opts[:'org_apache_felix_org_apache_felix_threaddump'].nil?
      query_params[:'org.apache.felix.webconsole.plugins.ds'] = opts[:'org_apache_felix_webconsole_plugins_ds'] if !opts[:'org_apache_felix_webconsole_plugins_ds'].nil?
      query_params[:'org.apache.felix.webconsole.plugins.event'] = opts[:'org_apache_felix_webconsole_plugins_event'] if !opts[:'org_apache_felix_webconsole_plugins_event'].nil?
      query_params[:'org.apache.felix.webconsole.plugins.memoryusage'] = opts[:'org_apache_felix_webconsole_plugins_memoryusage'] if !opts[:'org_apache_felix_webconsole_plugins_memoryusage'].nil?
      query_params[:'org.apache.felix.webconsole.plugins.packageadmin'] = opts[:'org_apache_felix_webconsole_plugins_packageadmin'] if !opts[:'org_apache_felix_webconsole_plugins_packageadmin'].nil?
      query_params[:'org.apache.jackrabbit.oak-auth-ldap'] = opts[:'org_apache_jackrabbit_oak_auth_ldap'] if !opts[:'org_apache_jackrabbit_oak_auth_ldap'].nil?
      query_params[:'org.apache.jackrabbit.oak-segment-tar'] = opts[:'org_apache_jackrabbit_oak_segment_tar'] if !opts[:'org_apache_jackrabbit_oak_segment_tar'].nil?
      query_params[:'org.apache.jackrabbit.oak-solr-osgi'] = opts[:'org_apache_jackrabbit_oak_solr_osgi'] if !opts[:'org_apache_jackrabbit_oak_solr_osgi'].nil?
      query_params[:'org.apache.sling.bundleresource.impl'] = opts[:'org_apache_sling_bundleresource_impl'] if !opts[:'org_apache_sling_bundleresource_impl'].nil?
      query_params[:'org.apache.sling.commons.fsclassloader'] = opts[:'org_apache_sling_commons_fsclassloader'] if !opts[:'org_apache_sling_commons_fsclassloader'].nil?
      query_params[:'org.apache.sling.commons.log.webconsole'] = opts[:'org_apache_sling_commons_log_webconsole'] if !opts[:'org_apache_sling_commons_log_webconsole'].nil?
      query_params[:'org.apache.sling.datasource'] = opts[:'org_apache_sling_datasource'] if !opts[:'org_apache_sling_datasource'].nil?
      query_params[:'org.apache.sling.discovery.base'] = opts[:'org_apache_sling_discovery_base'] if !opts[:'org_apache_sling_discovery_base'].nil?
      query_params[:'org.apache.sling.discovery.oak'] = opts[:'org_apache_sling_discovery_oak'] if !opts[:'org_apache_sling_discovery_oak'].nil?
      query_params[:'org.apache.sling.discovery.support'] = opts[:'org_apache_sling_discovery_support'] if !opts[:'org_apache_sling_discovery_support'].nil?
      query_params[:'org.apache.sling.distribution.api'] = opts[:'org_apache_sling_distribution_api'] if !opts[:'org_apache_sling_distribution_api'].nil?
      query_params[:'org.apache.sling.distribution.core'] = opts[:'org_apache_sling_distribution_core'] if !opts[:'org_apache_sling_distribution_core'].nil?
      query_params[:'org.apache.sling.extensions.webconsolesecurityprovider'] = opts[:'org_apache_sling_extensions_webconsolesecurityprovider'] if !opts[:'org_apache_sling_extensions_webconsolesecurityprovider'].nil?
      query_params[:'org.apache.sling.hc.webconsole'] = opts[:'org_apache_sling_hc_webconsole'] if !opts[:'org_apache_sling_hc_webconsole'].nil?
      query_params[:'org.apache.sling.installer.console'] = opts[:'org_apache_sling_installer_console'] if !opts[:'org_apache_sling_installer_console'].nil?
      query_params[:'org.apache.sling.installer.provider.file'] = opts[:'org_apache_sling_installer_provider_file'] if !opts[:'org_apache_sling_installer_provider_file'].nil?
      query_params[:'org.apache.sling.installer.provider.jcr'] = opts[:'org_apache_sling_installer_provider_jcr'] if !opts[:'org_apache_sling_installer_provider_jcr'].nil?
      query_params[:'org.apache.sling.jcr.davex'] = opts[:'org_apache_sling_jcr_davex'] if !opts[:'org_apache_sling_jcr_davex'].nil?
      query_params[:'org.apache.sling.jcr.resourcesecurity'] = opts[:'org_apache_sling_jcr_resourcesecurity'] if !opts[:'org_apache_sling_jcr_resourcesecurity'].nil?
      query_params[:'org.apache.sling.jmx.provider'] = opts[:'org_apache_sling_jmx_provider'] if !opts[:'org_apache_sling_jmx_provider'].nil?
      query_params[:'org.apache.sling.launchpad.installer'] = opts[:'org_apache_sling_launchpad_installer'] if !opts[:'org_apache_sling_launchpad_installer'].nil?
      query_params[:'org.apache.sling.models.impl'] = opts[:'org_apache_sling_models_impl'] if !opts[:'org_apache_sling_models_impl'].nil?
      query_params[:'org.apache.sling.repoinit.parser'] = opts[:'org_apache_sling_repoinit_parser'] if !opts[:'org_apache_sling_repoinit_parser'].nil?
      query_params[:'org.apache.sling.resource.inventory'] = opts[:'org_apache_sling_resource_inventory'] if !opts[:'org_apache_sling_resource_inventory'].nil?
      query_params[:'org.apache.sling.resourceresolver'] = opts[:'org_apache_sling_resourceresolver'] if !opts[:'org_apache_sling_resourceresolver'].nil?
      query_params[:'org.apache.sling.scripting.javascript'] = opts[:'org_apache_sling_scripting_javascript'] if !opts[:'org_apache_sling_scripting_javascript'].nil?
      query_params[:'org.apache.sling.scripting.jst'] = opts[:'org_apache_sling_scripting_jst'] if !opts[:'org_apache_sling_scripting_jst'].nil?
      query_params[:'org.apache.sling.scripting.sightly.js.provider'] = opts[:'org_apache_sling_scripting_sightly_js_provider'] if !opts[:'org_apache_sling_scripting_sightly_js_provider'].nil?
      query_params[:'org.apache.sling.scripting.sightly.models.provider'] = opts[:'org_apache_sling_scripting_sightly_models_provider'] if !opts[:'org_apache_sling_scripting_sightly_models_provider'].nil?
      query_params[:'org.apache.sling.security'] = opts[:'org_apache_sling_security'] if !opts[:'org_apache_sling_security'].nil?
      query_params[:'org.apache.sling.servlets.compat'] = opts[:'org_apache_sling_servlets_compat'] if !opts[:'org_apache_sling_servlets_compat'].nil?
      query_params[:'org.apache.sling.servlets.get'] = opts[:'org_apache_sling_servlets_get'] if !opts[:'org_apache_sling_servlets_get'].nil?
      query_params[:'org.apache.sling.startupfilter.disabler'] = opts[:'org_apache_sling_startupfilter_disabler'] if !opts[:'org_apache_sling_startupfilter_disabler'].nil?
      query_params[:'org.apache.sling.tracer'] = opts[:'org_apache_sling_tracer'] if !opts[:'org_apache_sling_tracer'].nil?
      query_params[:'we.retail.client.app.core'] = opts[:'we_retail_client_app_core'] if !opts[:'we_retail_client_app_core'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_apicontroller_filter_resolver_hook_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_apicontroller_filter_resolver_hook_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Integer] :service_ranking 
    # @return [ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo]
    def com_adobe_granite_auth_cert_impl_client_cert_auth_handler(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_cert_impl_client_cert_auth_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo, Integer, Hash)>] ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo data, response status code and response headers
    def com_adobe_granite_auth_cert_impl_client_cert_auth_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_cert_impl_client_cert_auth_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_cert_impl_client_cert_auth_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_cert_impl_client_cert_auth_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :configid 
    # @option opts [String] :scope 
    # @return [ComAdobeGraniteAuthImsInfo]
    def com_adobe_granite_auth_ims(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_ims_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :configid 
    # @option opts [String] :scope 
    # @return [Array<(ComAdobeGraniteAuthImsInfo, Integer, Hash)>] ComAdobeGraniteAuthImsInfo data, response status code and response headers
    def com_adobe_granite_auth_ims_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_ims ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.ims'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'configid'] = opts[:'configid'] if !opts[:'configid'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthImsInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_ims",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_ims\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @return [ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo]
    def com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @return [Array<(ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo, Integer, Hash)>] ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo data, response status code and response headers
    def com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.provider.id'] = opts[:'oauth_provider_id'] if !opts[:'oauth_provider_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_ims_impl_external_user_id_mapping_provider_extension\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auth_ims_client_secret 
    # @option opts [String] :customizer_type 
    # @return [ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo]
    def com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auth_ims_client_secret 
    # @option opts [String] :customizer_type 
    # @return [Array<(ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo, Integer, Hash)>] ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo data, response status code and response headers
    def com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'auth.ims.client.secret'] = opts[:'auth_ims_client_secret'] if !opts[:'auth_ims_client_secret'].nil?
      query_params[:'customizer.type'] = opts[:'customizer_type'] if !opts[:'customizer_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_ims_impl_ims_access_token_request_customizer_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_configmanager_ims_configid 
    # @option opts [String] :ims_owning_entity 
    # @option opts [String] :aem_instance_id 
    # @option opts [String] :ims_service_code 
    # @return [ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo]
    def com_adobe_granite_auth_ims_impl_ims_config_provider_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_ims_impl_ims_config_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_configmanager_ims_configid 
    # @option opts [String] :ims_owning_entity 
    # @option opts [String] :aem_instance_id 
    # @option opts [String] :ims_service_code 
    # @return [Array<(ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo, Integer, Hash)>] ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo data, response status code and response headers
    def com_adobe_granite_auth_ims_impl_ims_config_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_ims_impl_ims_config_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.configmanager.ims.configid'] = opts[:'oauth_configmanager_ims_configid'] if !opts[:'oauth_configmanager_ims_configid'].nil?
      query_params[:'ims.owningEntity'] = opts[:'ims_owning_entity'] if !opts[:'ims_owning_entity'].nil?
      query_params[:'aem.instanceId'] = opts[:'aem_instance_id'] if !opts[:'aem_instance_id'].nil?
      query_params[:'ims.serviceCode'] = opts[:'ims_service_code'] if !opts[:'ims_service_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_ims_impl_ims_config_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_ims_impl_ims_config_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @return [ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo]
    def com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @return [Array<(ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo, Integer, Hash)>] ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo data, response status code and response headers
    def com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.provider.id'] = opts[:'oauth_provider_id'] if !opts[:'oauth_provider_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_ims_impl_ims_instance_credentials_validator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_provider_ims_authorization_url 
    # @option opts [String] :oauth_provider_ims_token_url 
    # @option opts [String] :oauth_provider_ims_profile_url 
    # @option opts [Array<String>] :oauth_provider_ims_extended_details_urls 
    # @option opts [String] :oauth_provider_ims_validate_token_url 
    # @option opts [String] :oauth_provider_ims_session_property 
    # @option opts [String] :oauth_provider_ims_service_token_client_id 
    # @option opts [String] :oauth_provider_ims_service_token_client_secret 
    # @option opts [String] :oauth_provider_ims_service_token 
    # @option opts [String] :ims_org_ref 
    # @option opts [Array<String>] :ims_group_mapping 
    # @option opts [Boolean] :oauth_provider_ims_only_license_group 
    # @return [ComAdobeGraniteAuthImsImplIMSProviderImplInfo]
    def com_adobe_granite_auth_ims_impl_ims_provider_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_ims_impl_ims_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_provider_ims_authorization_url 
    # @option opts [String] :oauth_provider_ims_token_url 
    # @option opts [String] :oauth_provider_ims_profile_url 
    # @option opts [Array<String>] :oauth_provider_ims_extended_details_urls 
    # @option opts [String] :oauth_provider_ims_validate_token_url 
    # @option opts [String] :oauth_provider_ims_session_property 
    # @option opts [String] :oauth_provider_ims_service_token_client_id 
    # @option opts [String] :oauth_provider_ims_service_token_client_secret 
    # @option opts [String] :oauth_provider_ims_service_token 
    # @option opts [String] :ims_org_ref 
    # @option opts [Array<String>] :ims_group_mapping 
    # @option opts [Boolean] :oauth_provider_ims_only_license_group 
    # @return [Array<(ComAdobeGraniteAuthImsImplIMSProviderImplInfo, Integer, Hash)>] ComAdobeGraniteAuthImsImplIMSProviderImplInfo data, response status code and response headers
    def com_adobe_granite_auth_ims_impl_ims_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_ims_impl_ims_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.provider.id'] = opts[:'oauth_provider_id'] if !opts[:'oauth_provider_id'].nil?
      query_params[:'oauth.provider.ims.authorization.url'] = opts[:'oauth_provider_ims_authorization_url'] if !opts[:'oauth_provider_ims_authorization_url'].nil?
      query_params[:'oauth.provider.ims.token.url'] = opts[:'oauth_provider_ims_token_url'] if !opts[:'oauth_provider_ims_token_url'].nil?
      query_params[:'oauth.provider.ims.profile.url'] = opts[:'oauth_provider_ims_profile_url'] if !opts[:'oauth_provider_ims_profile_url'].nil?
      query_params[:'oauth.provider.ims.extended.details.urls'] = @api_client.build_collection_param(opts[:'oauth_provider_ims_extended_details_urls'], :multi) if !opts[:'oauth_provider_ims_extended_details_urls'].nil?
      query_params[:'oauth.provider.ims.validate.token.url'] = opts[:'oauth_provider_ims_validate_token_url'] if !opts[:'oauth_provider_ims_validate_token_url'].nil?
      query_params[:'oauth.provider.ims.session.property'] = opts[:'oauth_provider_ims_session_property'] if !opts[:'oauth_provider_ims_session_property'].nil?
      query_params[:'oauth.provider.ims.service.token.client.id'] = opts[:'oauth_provider_ims_service_token_client_id'] if !opts[:'oauth_provider_ims_service_token_client_id'].nil?
      query_params[:'oauth.provider.ims.service.token.client.secret'] = opts[:'oauth_provider_ims_service_token_client_secret'] if !opts[:'oauth_provider_ims_service_token_client_secret'].nil?
      query_params[:'oauth.provider.ims.service.token'] = opts[:'oauth_provider_ims_service_token'] if !opts[:'oauth_provider_ims_service_token'].nil?
      query_params[:'ims.org.ref'] = opts[:'ims_org_ref'] if !opts[:'ims_org_ref'].nil?
      query_params[:'ims.group.mapping'] = @api_client.build_collection_param(opts[:'ims_group_mapping'], :multi) if !opts[:'ims_group_mapping'].nil?
      query_params[:'oauth.provider.ims.only.license.group'] = opts[:'oauth_provider_ims_only_license_group'] if !opts[:'oauth_provider_ims_only_license_group'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthImsImplIMSProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_ims_impl_ims_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_ims_impl_ims_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :auth_token_provider_title 
    # @option opts [Array<String>] :auth_token_provider_default_claims 
    # @option opts [String] :auth_token_provider_endpoint 
    # @option opts [String] :auth_access_token_request 
    # @option opts [String] :auth_token_provider_keypair_alias 
    # @option opts [Integer] :auth_token_provider_conn_timeout 
    # @option opts [Integer] :auth_token_provider_so_timeout 
    # @option opts [String] :auth_token_provider_client_id 
    # @option opts [String] :auth_token_provider_scope 
    # @option opts [Boolean] :auth_token_provider_reuse_access_token 
    # @option opts [Boolean] :auth_token_provider_relaxed_ssl 
    # @option opts [String] :token_request_customizer_type 
    # @option opts [String] :auth_token_validator_type 
    # @return [ComAdobeGraniteAuthOauthAccesstokenProviderInfo]
    def com_adobe_granite_auth_oauth_accesstoken_provider(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_accesstoken_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :auth_token_provider_title 
    # @option opts [Array<String>] :auth_token_provider_default_claims 
    # @option opts [String] :auth_token_provider_endpoint 
    # @option opts [String] :auth_access_token_request 
    # @option opts [String] :auth_token_provider_keypair_alias 
    # @option opts [Integer] :auth_token_provider_conn_timeout 
    # @option opts [Integer] :auth_token_provider_so_timeout 
    # @option opts [String] :auth_token_provider_client_id 
    # @option opts [String] :auth_token_provider_scope 
    # @option opts [Boolean] :auth_token_provider_reuse_access_token 
    # @option opts [Boolean] :auth_token_provider_relaxed_ssl 
    # @option opts [String] :token_request_customizer_type 
    # @option opts [String] :auth_token_validator_type 
    # @return [Array<(ComAdobeGraniteAuthOauthAccesstokenProviderInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthAccesstokenProviderInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_accesstoken_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_accesstoken_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'auth.token.provider.title'] = opts[:'auth_token_provider_title'] if !opts[:'auth_token_provider_title'].nil?
      query_params[:'auth.token.provider.default.claims'] = @api_client.build_collection_param(opts[:'auth_token_provider_default_claims'], :multi) if !opts[:'auth_token_provider_default_claims'].nil?
      query_params[:'auth.token.provider.endpoint'] = opts[:'auth_token_provider_endpoint'] if !opts[:'auth_token_provider_endpoint'].nil?
      query_params[:'auth.access.token.request'] = opts[:'auth_access_token_request'] if !opts[:'auth_access_token_request'].nil?
      query_params[:'auth.token.provider.keypair.alias'] = opts[:'auth_token_provider_keypair_alias'] if !opts[:'auth_token_provider_keypair_alias'].nil?
      query_params[:'auth.token.provider.conn.timeout'] = opts[:'auth_token_provider_conn_timeout'] if !opts[:'auth_token_provider_conn_timeout'].nil?
      query_params[:'auth.token.provider.so.timeout'] = opts[:'auth_token_provider_so_timeout'] if !opts[:'auth_token_provider_so_timeout'].nil?
      query_params[:'auth.token.provider.client.id'] = opts[:'auth_token_provider_client_id'] if !opts[:'auth_token_provider_client_id'].nil?
      query_params[:'auth.token.provider.scope'] = opts[:'auth_token_provider_scope'] if !opts[:'auth_token_provider_scope'].nil?
      query_params[:'auth.token.provider.reuse.access.token'] = opts[:'auth_token_provider_reuse_access_token'] if !opts[:'auth_token_provider_reuse_access_token'].nil?
      query_params[:'auth.token.provider.relaxed.ssl'] = opts[:'auth_token_provider_relaxed_ssl'] if !opts[:'auth_token_provider_relaxed_ssl'].nil?
      query_params[:'token.request.customizer.type'] = opts[:'token_request_customizer_type'] if !opts[:'token_request_customizer_type'].nil?
      query_params[:'auth.token.validator.type'] = opts[:'auth_token_validator_type'] if !opts[:'auth_token_validator_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthAccesstokenProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_accesstoken_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_accesstoken_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Array<String>] :oauth_client_ids_allowed 
    # @option opts [Boolean] :auth_bearer_sync_ims 
    # @option opts [String] :auth_token_request_parameter 
    # @option opts [String] :oauth_bearer_configid 
    # @option opts [Boolean] :oauth_jwt_support 
    # @return [ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo]
    def com_adobe_granite_auth_oauth_impl_bearer_authentication_handler(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_impl_bearer_authentication_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Array<String>] :oauth_client_ids_allowed 
    # @option opts [Boolean] :auth_bearer_sync_ims 
    # @option opts [String] :auth_token_request_parameter 
    # @option opts [String] :oauth_bearer_configid 
    # @option opts [Boolean] :oauth_jwt_support 
    # @return [Array<(ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_impl_bearer_authentication_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_impl_bearer_authentication_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'oauth.clientIds.allowed'] = @api_client.build_collection_param(opts[:'oauth_client_ids_allowed'], :multi) if !opts[:'oauth_client_ids_allowed'].nil?
      query_params[:'auth.bearer.sync.ims'] = opts[:'auth_bearer_sync_ims'] if !opts[:'auth_bearer_sync_ims'].nil?
      query_params[:'auth.tokenRequestParameter'] = opts[:'auth_token_request_parameter'] if !opts[:'auth_token_request_parameter'].nil?
      query_params[:'oauth.bearer.configid'] = opts[:'oauth_bearer_configid'] if !opts[:'oauth_bearer_configid'].nil?
      query_params[:'oauth.jwt.support'] = opts[:'oauth_jwt_support'] if !opts[:'oauth_jwt_support'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_impl_bearer_authentication_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_impl_bearer_authentication_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auth_token_validator_type 
    # @return [ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo]
    def com_adobe_granite_auth_oauth_impl_default_token_validator_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_impl_default_token_validator_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :auth_token_validator_type 
    # @return [Array<(ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_impl_default_token_validator_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_impl_default_token_validator_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'auth.token.validator.type'] = opts[:'auth_token_validator_type'] if !opts[:'auth_token_validator_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_impl_default_token_validator_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_impl_default_token_validator_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @return [ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo]
    def com_adobe_granite_auth_oauth_impl_facebook_provider_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_impl_facebook_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @return [Array<(ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_impl_facebook_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_impl_facebook_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.provider.id'] = opts[:'oauth_provider_id'] if !opts[:'oauth_provider_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_impl_facebook_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_impl_facebook_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_provider_github_authorization_url 
    # @option opts [String] :oauth_provider_github_token_url 
    # @option opts [String] :oauth_provider_github_profile_url 
    # @return [ComAdobeGraniteAuthOauthImplGithubProviderImplInfo]
    def com_adobe_granite_auth_oauth_impl_github_provider_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_impl_github_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_provider_github_authorization_url 
    # @option opts [String] :oauth_provider_github_token_url 
    # @option opts [String] :oauth_provider_github_profile_url 
    # @return [Array<(ComAdobeGraniteAuthOauthImplGithubProviderImplInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthImplGithubProviderImplInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_impl_github_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_impl_github_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.provider.id'] = opts[:'oauth_provider_id'] if !opts[:'oauth_provider_id'].nil?
      query_params[:'oauth.provider.github.authorization.url'] = opts[:'oauth_provider_github_authorization_url'] if !opts[:'oauth_provider_github_authorization_url'].nil?
      query_params[:'oauth.provider.github.token.url'] = opts[:'oauth_provider_github_token_url'] if !opts[:'oauth_provider_github_token_url'].nil?
      query_params[:'oauth.provider.github.profile.url'] = opts[:'oauth_provider_github_profile_url'] if !opts[:'oauth_provider_github_profile_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthImplGithubProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_impl_github_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_impl_github_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_provider_granite_authorization_url 
    # @option opts [String] :oauth_provider_granite_token_url 
    # @option opts [String] :oauth_provider_granite_profile_url 
    # @option opts [String] :oauth_provider_granite_extended_details_urls 
    # @return [ComAdobeGraniteAuthOauthImplGraniteProviderInfo]
    def com_adobe_granite_auth_oauth_impl_granite_provider(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_impl_granite_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @option opts [String] :oauth_provider_granite_authorization_url 
    # @option opts [String] :oauth_provider_granite_token_url 
    # @option opts [String] :oauth_provider_granite_profile_url 
    # @option opts [String] :oauth_provider_granite_extended_details_urls 
    # @return [Array<(ComAdobeGraniteAuthOauthImplGraniteProviderInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthImplGraniteProviderInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_impl_granite_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_impl_granite_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.provider.id'] = opts[:'oauth_provider_id'] if !opts[:'oauth_provider_id'].nil?
      query_params[:'oauth.provider.granite.authorization.url'] = opts[:'oauth_provider_granite_authorization_url'] if !opts[:'oauth_provider_granite_authorization_url'].nil?
      query_params[:'oauth.provider.granite.token.url'] = opts[:'oauth_provider_granite_token_url'] if !opts[:'oauth_provider_granite_token_url'].nil?
      query_params[:'oauth.provider.granite.profile.url'] = opts[:'oauth_provider_granite_profile_url'] if !opts[:'oauth_provider_granite_profile_url'].nil?
      query_params[:'oauth.provider.granite.extended.details.urls'] = opts[:'oauth_provider_granite_extended_details_urls'] if !opts[:'oauth_provider_granite_extended_details_urls'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthImplGraniteProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_impl_granite_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_impl_granite_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_cookie_login_timeout 
    # @option opts [String] :oauth_cookie_max_age 
    # @return [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo]
    def com_adobe_granite_auth_oauth_impl_helper_provider_config_manager(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_cookie_login_timeout 
    # @option opts [String] :oauth_cookie_max_age 
    # @return [Array<(ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_impl_helper_provider_config_manager ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.cookie.login.timeout'] = opts[:'oauth_cookie_login_timeout'] if !opts[:'oauth_cookie_login_timeout'].nil?
      query_params[:'oauth.cookie.max.age'] = opts[:'oauth_cookie_max_age'] if !opts[:'oauth_cookie_max_age'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_impl_helper_provider_config_manager",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_impl_helper_provider_config_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_cookie_login_timeout 
    # @option opts [String] :oauth_cookie_max_age 
    # @return [ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo]
    def com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_cookie_login_timeout 
    # @option opts [String] :oauth_cookie_max_age 
    # @return [Array<(ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.cookie.login.timeout'] = opts[:'oauth_cookie_login_timeout'] if !opts[:'oauth_cookie_login_timeout'].nil?
      query_params[:'oauth.cookie.max.age'] = opts[:'oauth_cookie_max_age'] if !opts[:'oauth_cookie_max_age'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_impl_helper_provider_config_manager_internal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @return [ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo]
    def com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @return [Array<(ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_impl_o_auth_authentication_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @return [ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo]
    def com_adobe_granite_auth_oauth_impl_twitter_provider_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_impl_twitter_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_provider_id 
    # @return [Array<(ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_impl_twitter_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_impl_twitter_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.provider.id'] = opts[:'oauth_provider_id'] if !opts[:'oauth_provider_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_impl_twitter_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_impl_twitter_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_config_id 
    # @option opts [String] :oauth_client_id 
    # @option opts [String] :oauth_client_secret 
    # @option opts [Array<String>] :oauth_scope 
    # @option opts [String] :oauth_config_provider_id 
    # @option opts [Boolean] :oauth_create_users 
    # @option opts [String] :oauth_userid_property 
    # @option opts [Boolean] :force_strict_username_matching 
    # @option opts [Boolean] :oauth_encode_userids 
    # @option opts [Boolean] :oauth_hash_userids 
    # @option opts [String] :oauth_call_back_url 
    # @option opts [Boolean] :oauth_access_token_persist 
    # @option opts [Boolean] :oauth_access_token_persist_cookie 
    # @option opts [Boolean] :oauth_csrf_state_protection 
    # @option opts [Boolean] :oauth_redirect_request_params 
    # @option opts [Boolean] :oauth_config_siblings_allow 
    # @return [ComAdobeGraniteAuthOauthProviderInfo]
    def com_adobe_granite_auth_oauth_provider(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_oauth_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_config_id 
    # @option opts [String] :oauth_client_id 
    # @option opts [String] :oauth_client_secret 
    # @option opts [Array<String>] :oauth_scope 
    # @option opts [String] :oauth_config_provider_id 
    # @option opts [Boolean] :oauth_create_users 
    # @option opts [String] :oauth_userid_property 
    # @option opts [Boolean] :force_strict_username_matching 
    # @option opts [Boolean] :oauth_encode_userids 
    # @option opts [Boolean] :oauth_hash_userids 
    # @option opts [String] :oauth_call_back_url 
    # @option opts [Boolean] :oauth_access_token_persist 
    # @option opts [Boolean] :oauth_access_token_persist_cookie 
    # @option opts [Boolean] :oauth_csrf_state_protection 
    # @option opts [Boolean] :oauth_redirect_request_params 
    # @option opts [Boolean] :oauth_config_siblings_allow 
    # @return [Array<(ComAdobeGraniteAuthOauthProviderInfo, Integer, Hash)>] ComAdobeGraniteAuthOauthProviderInfo data, response status code and response headers
    def com_adobe_granite_auth_oauth_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_oauth_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.oauth.provider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.config.id'] = opts[:'oauth_config_id'] if !opts[:'oauth_config_id'].nil?
      query_params[:'oauth.client.id'] = opts[:'oauth_client_id'] if !opts[:'oauth_client_id'].nil?
      query_params[:'oauth.client.secret'] = opts[:'oauth_client_secret'] if !opts[:'oauth_client_secret'].nil?
      query_params[:'oauth.scope'] = @api_client.build_collection_param(opts[:'oauth_scope'], :multi) if !opts[:'oauth_scope'].nil?
      query_params[:'oauth.config.provider.id'] = opts[:'oauth_config_provider_id'] if !opts[:'oauth_config_provider_id'].nil?
      query_params[:'oauth.create.users'] = opts[:'oauth_create_users'] if !opts[:'oauth_create_users'].nil?
      query_params[:'oauth.userid.property'] = opts[:'oauth_userid_property'] if !opts[:'oauth_userid_property'].nil?
      query_params[:'force.strict.username.matching'] = opts[:'force_strict_username_matching'] if !opts[:'force_strict_username_matching'].nil?
      query_params[:'oauth.encode.userids'] = opts[:'oauth_encode_userids'] if !opts[:'oauth_encode_userids'].nil?
      query_params[:'oauth.hash.userids'] = opts[:'oauth_hash_userids'] if !opts[:'oauth_hash_userids'].nil?
      query_params[:'oauth.callBackUrl'] = opts[:'oauth_call_back_url'] if !opts[:'oauth_call_back_url'].nil?
      query_params[:'oauth.access.token.persist'] = opts[:'oauth_access_token_persist'] if !opts[:'oauth_access_token_persist'].nil?
      query_params[:'oauth.access.token.persist.cookie'] = opts[:'oauth_access_token_persist_cookie'] if !opts[:'oauth_access_token_persist_cookie'].nil?
      query_params[:'oauth.csrf.state.protection'] = opts[:'oauth_csrf_state_protection'] if !opts[:'oauth_csrf_state_protection'].nil?
      query_params[:'oauth.redirect.request.params'] = opts[:'oauth_redirect_request_params'] if !opts[:'oauth_redirect_request_params'].nil?
      query_params[:'oauth.config.siblings.allow'] = opts[:'oauth_config_siblings_allow'] if !opts[:'oauth_config_siblings_allow'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthOauthProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_oauth_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_oauth_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :supported_paths 
    # @return [ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo]
    def com_adobe_granite_auth_requirement_impl_default_requirement_handler(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_requirement_impl_default_requirement_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :supported_paths 
    # @return [Array<(ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo, Integer, Hash)>] ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo data, response status code and response headers
    def com_adobe_granite_auth_requirement_impl_default_requirement_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_requirement_impl_default_requirement_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'supportedPaths'] = @api_client.build_collection_param(opts[:'supported_paths'], :multi) if !opts[:'supported_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_requirement_impl_default_requirement_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_requirement_impl_default_requirement_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :path 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :idp_url 
    # @option opts [String] :idp_cert_alias 
    # @option opts [Boolean] :idp_http_redirect 
    # @option opts [String] :service_provider_entity_id 
    # @option opts [String] :assertion_consumer_service_url 
    # @option opts [String] :sp_private_key_alias 
    # @option opts [String] :key_store_password 
    # @option opts [String] :default_redirect_url 
    # @option opts [String] :user_id_attribute 
    # @option opts [Boolean] :use_encryption 
    # @option opts [Boolean] :create_user 
    # @option opts [String] :user_intermediate_path 
    # @option opts [Boolean] :add_group_memberships 
    # @option opts [String] :group_membership_attribute 
    # @option opts [Array<String>] :default_groups 
    # @option opts [String] :name_id_format 
    # @option opts [Array<String>] :synchronize_attributes 
    # @option opts [Boolean] :handle_logout 
    # @option opts [String] :logout_url 
    # @option opts [Integer] :clock_tolerance 
    # @option opts [String] :digest_method 
    # @option opts [String] :signature_method 
    # @option opts [String] :identity_sync_type 
    # @option opts [String] :idp_identifier 
    # @return [ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo]
    def com_adobe_granite_auth_saml_saml_authentication_handler(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_saml_saml_authentication_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :path 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :idp_url 
    # @option opts [String] :idp_cert_alias 
    # @option opts [Boolean] :idp_http_redirect 
    # @option opts [String] :service_provider_entity_id 
    # @option opts [String] :assertion_consumer_service_url 
    # @option opts [String] :sp_private_key_alias 
    # @option opts [String] :key_store_password 
    # @option opts [String] :default_redirect_url 
    # @option opts [String] :user_id_attribute 
    # @option opts [Boolean] :use_encryption 
    # @option opts [Boolean] :create_user 
    # @option opts [String] :user_intermediate_path 
    # @option opts [Boolean] :add_group_memberships 
    # @option opts [String] :group_membership_attribute 
    # @option opts [Array<String>] :default_groups 
    # @option opts [String] :name_id_format 
    # @option opts [Array<String>] :synchronize_attributes 
    # @option opts [Boolean] :handle_logout 
    # @option opts [String] :logout_url 
    # @option opts [Integer] :clock_tolerance 
    # @option opts [String] :digest_method 
    # @option opts [String] :signature_method 
    # @option opts [String] :identity_sync_type 
    # @option opts [String] :idp_identifier 
    # @return [Array<(ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo, Integer, Hash)>] ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo data, response status code and response headers
    def com_adobe_granite_auth_saml_saml_authentication_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_saml_saml_authentication_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = @api_client.build_collection_param(opts[:'path'], :multi) if !opts[:'path'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'idpUrl'] = opts[:'idp_url'] if !opts[:'idp_url'].nil?
      query_params[:'idpCertAlias'] = opts[:'idp_cert_alias'] if !opts[:'idp_cert_alias'].nil?
      query_params[:'idpHttpRedirect'] = opts[:'idp_http_redirect'] if !opts[:'idp_http_redirect'].nil?
      query_params[:'serviceProviderEntityId'] = opts[:'service_provider_entity_id'] if !opts[:'service_provider_entity_id'].nil?
      query_params[:'assertionConsumerServiceURL'] = opts[:'assertion_consumer_service_url'] if !opts[:'assertion_consumer_service_url'].nil?
      query_params[:'spPrivateKeyAlias'] = opts[:'sp_private_key_alias'] if !opts[:'sp_private_key_alias'].nil?
      query_params[:'keyStorePassword'] = opts[:'key_store_password'] if !opts[:'key_store_password'].nil?
      query_params[:'defaultRedirectUrl'] = opts[:'default_redirect_url'] if !opts[:'default_redirect_url'].nil?
      query_params[:'userIDAttribute'] = opts[:'user_id_attribute'] if !opts[:'user_id_attribute'].nil?
      query_params[:'useEncryption'] = opts[:'use_encryption'] if !opts[:'use_encryption'].nil?
      query_params[:'createUser'] = opts[:'create_user'] if !opts[:'create_user'].nil?
      query_params[:'userIntermediatePath'] = opts[:'user_intermediate_path'] if !opts[:'user_intermediate_path'].nil?
      query_params[:'addGroupMemberships'] = opts[:'add_group_memberships'] if !opts[:'add_group_memberships'].nil?
      query_params[:'groupMembershipAttribute'] = opts[:'group_membership_attribute'] if !opts[:'group_membership_attribute'].nil?
      query_params[:'defaultGroups'] = @api_client.build_collection_param(opts[:'default_groups'], :multi) if !opts[:'default_groups'].nil?
      query_params[:'nameIdFormat'] = opts[:'name_id_format'] if !opts[:'name_id_format'].nil?
      query_params[:'synchronizeAttributes'] = @api_client.build_collection_param(opts[:'synchronize_attributes'], :multi) if !opts[:'synchronize_attributes'].nil?
      query_params[:'handleLogout'] = opts[:'handle_logout'] if !opts[:'handle_logout'].nil?
      query_params[:'logoutUrl'] = opts[:'logout_url'] if !opts[:'logout_url'].nil?
      query_params[:'clockTolerance'] = opts[:'clock_tolerance'] if !opts[:'clock_tolerance'].nil?
      query_params[:'digestMethod'] = opts[:'digest_method'] if !opts[:'digest_method'].nil?
      query_params[:'signatureMethod'] = opts[:'signature_method'] if !opts[:'signature_method'].nil?
      query_params[:'identitySyncType'] = opts[:'identity_sync_type'] if !opts[:'identity_sync_type'].nil?
      query_params[:'idpIdentifier'] = opts[:'idp_identifier'] if !opts[:'idp_identifier'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_saml_saml_authentication_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_saml_saml_authentication_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :jaas_control_flag 
    # @option opts [String] :jaas_realm_name 
    # @option opts [Integer] :jaas_ranking 
    # @option opts [Array<String>] :headers 
    # @option opts [Array<String>] :cookies 
    # @option opts [Array<String>] :parameters 
    # @option opts [Array<String>] :usermap 
    # @option opts [String] :format 
    # @option opts [String] :trusted_credentials_attribute 
    # @return [ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo]
    def com_adobe_granite_auth_sso_impl_sso_authentication_handler(opts = {})
      data, _status_code, _headers = com_adobe_granite_auth_sso_impl_sso_authentication_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :jaas_control_flag 
    # @option opts [String] :jaas_realm_name 
    # @option opts [Integer] :jaas_ranking 
    # @option opts [Array<String>] :headers 
    # @option opts [Array<String>] :cookies 
    # @option opts [Array<String>] :parameters 
    # @option opts [Array<String>] :usermap 
    # @option opts [String] :format 
    # @option opts [String] :trusted_credentials_attribute 
    # @return [Array<(ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo, Integer, Hash)>] ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo data, response status code and response headers
    def com_adobe_granite_auth_sso_impl_sso_authentication_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_auth_sso_impl_sso_authentication_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'jaas.controlFlag'] = opts[:'jaas_control_flag'] if !opts[:'jaas_control_flag'].nil?
      query_params[:'jaas.realmName'] = opts[:'jaas_realm_name'] if !opts[:'jaas_realm_name'].nil?
      query_params[:'jaas.ranking'] = opts[:'jaas_ranking'] if !opts[:'jaas_ranking'].nil?
      query_params[:'headers'] = @api_client.build_collection_param(opts[:'headers'], :multi) if !opts[:'headers'].nil?
      query_params[:'cookies'] = @api_client.build_collection_param(opts[:'cookies'], :multi) if !opts[:'cookies'].nil?
      query_params[:'parameters'] = @api_client.build_collection_param(opts[:'parameters'], :multi) if !opts[:'parameters'].nil?
      query_params[:'usermap'] = @api_client.build_collection_param(opts[:'usermap'], :multi) if !opts[:'usermap'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'trustedCredentialsAttribute'] = opts[:'trusted_credentials_attribute'] if !opts[:'trusted_credentials_attribute'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_auth_sso_impl_sso_authentication_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_auth_sso_impl_sso_authentication_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Integer] :minimum_code_cache_size 
    # @return [ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_code_cache_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_code_cache_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Integer] :minimum_code_cache_size 
    # @return [Array<(ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_code_cache_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_code_cache_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'minimum.code.cache.size'] = opts[:'minimum_code_cache_size'] if !opts[:'minimum_code_cache_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_code_cache_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_code_cache_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_crxde_support_bundle_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_dav_ex_bundle_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Array<String>] :ignored_bundles 
    # @return [ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Array<String>] :ignored_bundles 
    # @return [Array<(ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'ignored.bundles'] = @api_client.build_collection_param(opts[:'ignored_bundles'], :multi) if !opts[:'ignored_bundles'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_inactive_bundles_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Integer] :max_queued_jobs 
    # @return [ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_jobs_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_jobs_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Integer] :max_queued_jobs 
    # @return [Array<(ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_jobs_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_jobs_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'max.queued.jobs'] = opts[:'max_queued_jobs'] if !opts[:'max_queued_jobs'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_jobs_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_jobs_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_sling_get_servlet_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_sling_java_script_handler_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_sling_jsp_script_handler_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_sling_referrer_filter_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo]
    def com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_bundles_hc_impl_web_dav_bundle_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :replicate_comment_resource_types 
    # @return [ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo]
    def com_adobe_granite_comments_internal_comment_replication_content_filter_fac(opts = {})
      data, _status_code, _headers = com_adobe_granite_comments_internal_comment_replication_content_filter_fac_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :replicate_comment_resource_types 
    # @return [Array<(ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo, Integer, Hash)>] ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo data, response status code and response headers
    def com_adobe_granite_comments_internal_comment_replication_content_filter_fac_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_comments_internal_comment_replication_content_filter_fac ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'replicate.comment.resourceTypes'] = @api_client.build_collection_param(opts[:'replicate_comment_resource_types'], :multi) if !opts[:'replicate_comment_resource_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_comments_internal_comment_replication_content_filter_fac",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_comments_internal_comment_replication_content_filter_fac\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :compatgroups 
    # @option opts [Boolean] :enabled 
    # @return [ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo]
    def com_adobe_granite_compatrouter_impl_compat_switching_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_compatrouter_impl_compat_switching_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :compatgroups 
    # @option opts [Boolean] :enabled 
    # @return [Array<(ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo, Integer, Hash)>] ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo data, response status code and response headers
    def com_adobe_granite_compatrouter_impl_compat_switching_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_compatrouter_impl_compat_switching_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'compatgroups'] = @api_client.build_collection_param(opts[:'compatgroups'], :multi) if !opts[:'compatgroups'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_compatrouter_impl_compat_switching_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_compatrouter_impl_compat_switching_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :id 
    # @option opts [String] :compat_path 
    # @option opts [String] :new_path 
    # @return [ComAdobeGraniteCompatrouterImplRoutingConfigInfo]
    def com_adobe_granite_compatrouter_impl_routing_config(opts = {})
      data, _status_code, _headers = com_adobe_granite_compatrouter_impl_routing_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :id 
    # @option opts [String] :compat_path 
    # @option opts [String] :new_path 
    # @return [Array<(ComAdobeGraniteCompatrouterImplRoutingConfigInfo, Integer, Hash)>] ComAdobeGraniteCompatrouterImplRoutingConfigInfo data, response status code and response headers
    def com_adobe_granite_compatrouter_impl_routing_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_compatrouter_impl_routing_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'compatPath'] = opts[:'compat_path'] if !opts[:'compat_path'].nil?
      query_params[:'newPath'] = opts[:'new_path'] if !opts[:'new_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteCompatrouterImplRoutingConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_compatrouter_impl_routing_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_compatrouter_impl_routing_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :group 
    # @option opts [Array<String>] :ids 
    # @return [ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo]
    def com_adobe_granite_compatrouter_impl_switch_mapping_config(opts = {})
      data, _status_code, _headers = com_adobe_granite_compatrouter_impl_switch_mapping_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :group 
    # @option opts [Array<String>] :ids 
    # @return [Array<(ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo, Integer, Hash)>] ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo data, response status code and response headers
    def com_adobe_granite_compatrouter_impl_switch_mapping_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_compatrouter_impl_switch_mapping_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_compatrouter_impl_switch_mapping_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_compatrouter_impl_switch_mapping_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :fallback_paths 
    # @return [ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo]
    def com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving(opts = {})
      data, _status_code, _headers = com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :fallback_paths 
    # @return [Array<(ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo, Integer, Hash)>] ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo data, response status code and response headers
    def com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'fallbackPaths'] = @api_client.build_collection_param(opts[:'fallback_paths'], :multi) if !opts[:'fallback_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_conf_impl_runtime_aware_configuration_resource_resolving\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :com_adobe_granite_contexthub_silent_mode 
    # @option opts [Boolean] :com_adobe_granite_contexthub_show_ui 
    # @return [ComAdobeGraniteContexthubImplContextHubImplInfo]
    def com_adobe_granite_contexthub_impl_context_hub_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_contexthub_impl_context_hub_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :com_adobe_granite_contexthub_silent_mode 
    # @option opts [Boolean] :com_adobe_granite_contexthub_show_ui 
    # @return [Array<(ComAdobeGraniteContexthubImplContextHubImplInfo, Integer, Hash)>] ComAdobeGraniteContexthubImplContextHubImplInfo data, response status code and response headers
    def com_adobe_granite_contexthub_impl_context_hub_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_contexthub_impl_context_hub_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.granite.contexthub.silent_mode'] = opts[:'com_adobe_granite_contexthub_silent_mode'] if !opts[:'com_adobe_granite_contexthub_silent_mode'].nil?
      query_params[:'com.adobe.granite.contexthub.show_ui'] = opts[:'com_adobe_granite_contexthub_show_ui'] if !opts[:'com_adobe_granite_contexthub_show_ui'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteContexthubImplContextHubImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_contexthub_impl_context_hub_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_contexthub_impl_context_hub_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :alloworigin 
    # @option opts [Array<String>] :alloworiginregexp 
    # @option opts [Array<String>] :allowedpaths 
    # @option opts [Array<String>] :exposedheaders 
    # @option opts [Integer] :maxage 
    # @option opts [Array<String>] :supportedheaders 
    # @option opts [Array<String>] :supportedmethods 
    # @option opts [Boolean] :supportscredentials 
    # @return [ComAdobeGraniteCorsImplCORSPolicyImplInfo]
    def com_adobe_granite_cors_impl_cors_policy_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_cors_impl_cors_policy_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :alloworigin 
    # @option opts [Array<String>] :alloworiginregexp 
    # @option opts [Array<String>] :allowedpaths 
    # @option opts [Array<String>] :exposedheaders 
    # @option opts [Integer] :maxage 
    # @option opts [Array<String>] :supportedheaders 
    # @option opts [Array<String>] :supportedmethods 
    # @option opts [Boolean] :supportscredentials 
    # @return [Array<(ComAdobeGraniteCorsImplCORSPolicyImplInfo, Integer, Hash)>] ComAdobeGraniteCorsImplCORSPolicyImplInfo data, response status code and response headers
    def com_adobe_granite_cors_impl_cors_policy_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_cors_impl_cors_policy_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'alloworigin'] = @api_client.build_collection_param(opts[:'alloworigin'], :multi) if !opts[:'alloworigin'].nil?
      query_params[:'alloworiginregexp'] = @api_client.build_collection_param(opts[:'alloworiginregexp'], :multi) if !opts[:'alloworiginregexp'].nil?
      query_params[:'allowedpaths'] = @api_client.build_collection_param(opts[:'allowedpaths'], :multi) if !opts[:'allowedpaths'].nil?
      query_params[:'exposedheaders'] = @api_client.build_collection_param(opts[:'exposedheaders'], :multi) if !opts[:'exposedheaders'].nil?
      query_params[:'maxage'] = opts[:'maxage'] if !opts[:'maxage'].nil?
      query_params[:'supportedheaders'] = @api_client.build_collection_param(opts[:'supportedheaders'], :multi) if !opts[:'supportedheaders'].nil?
      query_params[:'supportedmethods'] = @api_client.build_collection_param(opts[:'supportedmethods'], :multi) if !opts[:'supportedmethods'].nil?
      query_params[:'supportscredentials'] = opts[:'supportscredentials'] if !opts[:'supportscredentials'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteCorsImplCORSPolicyImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_cors_impl_cors_policy_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_cors_impl_cors_policy_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :filter_methods 
    # @option opts [Boolean] :filter_enable_safe_user_agents 
    # @option opts [Array<String>] :filter_safe_user_agents 
    # @option opts [Array<String>] :filter_excluded_paths 
    # @return [ComAdobeGraniteCsrfImplCSRFFilterInfo]
    def com_adobe_granite_csrf_impl_csrf_filter(opts = {})
      data, _status_code, _headers = com_adobe_granite_csrf_impl_csrf_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :filter_methods 
    # @option opts [Boolean] :filter_enable_safe_user_agents 
    # @option opts [Array<String>] :filter_safe_user_agents 
    # @option opts [Array<String>] :filter_excluded_paths 
    # @return [Array<(ComAdobeGraniteCsrfImplCSRFFilterInfo, Integer, Hash)>] ComAdobeGraniteCsrfImplCSRFFilterInfo data, response status code and response headers
    def com_adobe_granite_csrf_impl_csrf_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_csrf_impl_csrf_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'filter.methods'] = @api_client.build_collection_param(opts[:'filter_methods'], :multi) if !opts[:'filter_methods'].nil?
      query_params[:'filter.enable.safe.user.agents'] = opts[:'filter_enable_safe_user_agents'] if !opts[:'filter_enable_safe_user_agents'].nil?
      query_params[:'filter.safe.user.agents'] = @api_client.build_collection_param(opts[:'filter_safe_user_agents'], :multi) if !opts[:'filter_safe_user_agents'].nil?
      query_params[:'filter.excluded.paths'] = @api_client.build_collection_param(opts[:'filter_excluded_paths'], :multi) if !opts[:'filter_excluded_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteCsrfImplCSRFFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_csrf_impl_csrf_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_csrf_impl_csrf_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :csrf_token_expires_in 
    # @option opts [String] :sling_auth_requirements 
    # @return [ComAdobeGraniteCsrfImplCSRFServletInfo]
    def com_adobe_granite_csrf_impl_csrf_servlet(opts = {})
      data, _status_code, _headers = com_adobe_granite_csrf_impl_csrf_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :csrf_token_expires_in 
    # @option opts [String] :sling_auth_requirements 
    # @return [Array<(ComAdobeGraniteCsrfImplCSRFServletInfo, Integer, Hash)>] ComAdobeGraniteCsrfImplCSRFServletInfo data, response status code and response headers
    def com_adobe_granite_csrf_impl_csrf_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_csrf_impl_csrf_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'csrf.token.expires.in'] = opts[:'csrf_token_expires_in'] if !opts[:'csrf_token_expires_in'].nil?
      query_params[:'sling.auth.requirements'] = opts[:'sling_auth_requirements'] if !opts[:'sling_auth_requirements'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteCsrfImplCSRFServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_csrf_impl_csrf_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_csrf_impl_csrf_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :username 
    # @option opts [String] :encrypted_password 
    # @return [ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo]
    def com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se(opts = {})
      data, _status_code, _headers = com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :username 
    # @option opts [String] :encrypted_password 
    # @return [Array<(ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo, Integer, Hash)>] ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo data, response status code and response headers
    def com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'encryptedPassword'] = opts[:'encrypted_password'] if !opts[:'encrypted_password'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_distribution_core_impl_crypto_distribution_transport_se\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :agent_name 
    # @option opts [String] :diff_path 
    # @option opts [String] :observed_path 
    # @option opts [String] :service_name 
    # @option opts [String] :property_names 
    # @option opts [Integer] :distribution_delay 
    # @option opts [String] :service_user_target 
    # @return [ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo]
    def com_adobe_granite_distribution_core_impl_diff_diff_changes_observer(opts = {})
      data, _status_code, _headers = com_adobe_granite_distribution_core_impl_diff_diff_changes_observer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :agent_name 
    # @option opts [String] :diff_path 
    # @option opts [String] :observed_path 
    # @option opts [String] :service_name 
    # @option opts [String] :property_names 
    # @option opts [Integer] :distribution_delay 
    # @option opts [String] :service_user_target 
    # @return [Array<(ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo, Integer, Hash)>] ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo data, response status code and response headers
    def com_adobe_granite_distribution_core_impl_diff_diff_changes_observer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_distribution_core_impl_diff_diff_changes_observer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'agentName'] = opts[:'agent_name'] if !opts[:'agent_name'].nil?
      query_params[:'diffPath'] = opts[:'diff_path'] if !opts[:'diff_path'].nil?
      query_params[:'observedPath'] = opts[:'observed_path'] if !opts[:'observed_path'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'propertyNames'] = opts[:'property_names'] if !opts[:'property_names'].nil?
      query_params[:'distributionDelay'] = opts[:'distribution_delay'] if !opts[:'distribution_delay'].nil?
      query_params[:'serviceUser.target'] = opts[:'service_user_target'] if !opts[:'service_user_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_distribution_core_impl_diff_diff_changes_observer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_distribution_core_impl_diff_diff_changes_observer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :diff_path 
    # @option opts [String] :service_name 
    # @option opts [String] :service_user_target 
    # @return [ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo]
    def com_adobe_granite_distribution_core_impl_diff_diff_event_listener(opts = {})
      data, _status_code, _headers = com_adobe_granite_distribution_core_impl_diff_diff_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :diff_path 
    # @option opts [String] :service_name 
    # @option opts [String] :service_user_target 
    # @return [Array<(ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo, Integer, Hash)>] ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo data, response status code and response headers
    def com_adobe_granite_distribution_core_impl_diff_diff_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_distribution_core_impl_diff_diff_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'diffPath'] = opts[:'diff_path'] if !opts[:'diff_path'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'serviceUser.target'] = opts[:'service_user_target'] if !opts[:'service_user_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_distribution_core_impl_diff_diff_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_distribution_core_impl_diff_diff_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :importer_name 
    # @return [ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo]
    def com_adobe_granite_distribution_core_impl_distribution_to_replication_even(opts = {})
      data, _status_code, _headers = com_adobe_granite_distribution_core_impl_distribution_to_replication_even_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :importer_name 
    # @return [Array<(ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo, Integer, Hash)>] ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo data, response status code and response headers
    def com_adobe_granite_distribution_core_impl_distribution_to_replication_even_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_distribution_core_impl_distribution_to_replication_even ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'importer.name'] = @api_client.build_collection_param(opts[:'importer_name'], :multi) if !opts[:'importer_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_distribution_core_impl_distribution_to_replication_even",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_distribution_core_impl_distribution_to_replication_even\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_name 
    # @option opts [Boolean] :forward_requests 
    # @return [ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo]
    def com_adobe_granite_distribution_core_impl_replication_adapters_replicat(opts = {})
      data, _status_code, _headers = com_adobe_granite_distribution_core_impl_replication_adapters_replicat_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_name 
    # @option opts [Boolean] :forward_requests 
    # @return [Array<(ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo, Integer, Hash)>] ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo data, response status code and response headers
    def com_adobe_granite_distribution_core_impl_replication_adapters_replicat_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_distribution_core_impl_replication_adapters_replicat ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'providerName'] = opts[:'provider_name'] if !opts[:'provider_name'].nil?
      query_params[:'forward.requests'] = opts[:'forward_requests'] if !opts[:'forward_requests'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_distribution_core_impl_replication_adapters_replicat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_distribution_core_impl_replication_adapters_replicat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :forward_requests 
    # @return [ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo]
    def com_adobe_granite_distribution_core_impl_replication_distribution_trans(opts = {})
      data, _status_code, _headers = com_adobe_granite_distribution_core_impl_replication_distribution_trans_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :forward_requests 
    # @return [Array<(ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo, Integer, Hash)>] ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo data, response status code and response headers
    def com_adobe_granite_distribution_core_impl_replication_distribution_trans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_distribution_core_impl_replication_distribution_trans ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'forward.requests'] = opts[:'forward_requests'] if !opts[:'forward_requests'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_distribution_core_impl_replication_distribution_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_distribution_core_impl_replication_distribution_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :service_name 
    # @option opts [String] :user_id 
    # @option opts [String] :access_token_provider_target 
    # @return [ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo]
    def com_adobe_granite_distribution_core_impl_transport_access_token_distribu(opts = {})
      data, _status_code, _headers = com_adobe_granite_distribution_core_impl_transport_access_token_distribu_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :service_name 
    # @option opts [String] :user_id 
    # @option opts [String] :access_token_provider_target 
    # @return [Array<(ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo, Integer, Hash)>] ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo data, response status code and response headers
    def com_adobe_granite_distribution_core_impl_transport_access_token_distribu_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_distribution_core_impl_transport_access_token_distribu ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'accessTokenProvider.target'] = opts[:'access_token_provider_target'] if !opts[:'access_token_provider_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_distribution_core_impl_transport_access_token_distribu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_distribution_core_impl_transport_access_token_distribu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :feature_name 
    # @option opts [String] :feature_description 
    # @option opts [String] :http_header_name 
    # @option opts [String] :http_header_valuepattern 
    # @return [ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo]
    def com_adobe_granite_frags_impl_check_http_header_flag(opts = {})
      data, _status_code, _headers = com_adobe_granite_frags_impl_check_http_header_flag_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :feature_name 
    # @option opts [String] :feature_description 
    # @option opts [String] :http_header_name 
    # @option opts [String] :http_header_valuepattern 
    # @return [Array<(ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo, Integer, Hash)>] ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo data, response status code and response headers
    def com_adobe_granite_frags_impl_check_http_header_flag_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_frags_impl_check_http_header_flag ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'feature.name'] = opts[:'feature_name'] if !opts[:'feature_name'].nil?
      query_params[:'feature.description'] = opts[:'feature_description'] if !opts[:'feature_description'].nil?
      query_params[:'http.header.name'] = opts[:'http_header_name'] if !opts[:'http_header_name'].nil?
      query_params[:'http.header.valuepattern'] = opts[:'http_header_valuepattern'] if !opts[:'http_header_valuepattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_frags_impl_check_http_header_flag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_frags_impl_check_http_header_flag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :feature_name 
    # @option opts [String] :feature_description 
    # @option opts [String] :active_percentage 
    # @option opts [String] :cookie_name 
    # @option opts [Integer] :cookie_max_age 
    # @return [ComAdobeGraniteFragsImplRandomFeatureInfo]
    def com_adobe_granite_frags_impl_random_feature(opts = {})
      data, _status_code, _headers = com_adobe_granite_frags_impl_random_feature_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :feature_name 
    # @option opts [String] :feature_description 
    # @option opts [String] :active_percentage 
    # @option opts [String] :cookie_name 
    # @option opts [Integer] :cookie_max_age 
    # @return [Array<(ComAdobeGraniteFragsImplRandomFeatureInfo, Integer, Hash)>] ComAdobeGraniteFragsImplRandomFeatureInfo data, response status code and response headers
    def com_adobe_granite_frags_impl_random_feature_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_frags_impl_random_feature ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'feature.name'] = opts[:'feature_name'] if !opts[:'feature_name'].nil?
      query_params[:'feature.description'] = opts[:'feature_description'] if !opts[:'feature_description'].nil?
      query_params[:'active.percentage'] = opts[:'active_percentage'] if !opts[:'active_percentage'].nil?
      query_params[:'cookie.name'] = opts[:'cookie_name'] if !opts[:'cookie_name'].nil?
      query_params[:'cookie.maxAge'] = opts[:'cookie_max_age'] if !opts[:'cookie_max_age'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteFragsImplRandomFeatureInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_frags_impl_random_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_frags_impl_random_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :com_adobe_granite_httpcache_file_document_root 
    # @option opts [String] :com_adobe_granite_httpcache_file_include_host 
    # @return [ComAdobeGraniteHttpcacheFileFileCacheStoreInfo]
    def com_adobe_granite_httpcache_file_file_cache_store(opts = {})
      data, _status_code, _headers = com_adobe_granite_httpcache_file_file_cache_store_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :com_adobe_granite_httpcache_file_document_root 
    # @option opts [String] :com_adobe_granite_httpcache_file_include_host 
    # @return [Array<(ComAdobeGraniteHttpcacheFileFileCacheStoreInfo, Integer, Hash)>] ComAdobeGraniteHttpcacheFileFileCacheStoreInfo data, response status code and response headers
    def com_adobe_granite_httpcache_file_file_cache_store_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_httpcache_file_file_cache_store ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.granite.httpcache.file.documentRoot'] = opts[:'com_adobe_granite_httpcache_file_document_root'] if !opts[:'com_adobe_granite_httpcache_file_document_root'].nil?
      query_params[:'com.adobe.granite.httpcache.file.includeHost'] = opts[:'com_adobe_granite_httpcache_file_include_host'] if !opts[:'com_adobe_granite_httpcache_file_include_host'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteHttpcacheFileFileCacheStoreInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_httpcache_file_file_cache_store",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_httpcache_file_file_cache_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_adobe_granite_httpcache_url_paths 
    # @return [ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo]
    def com_adobe_granite_httpcache_impl_outer_cache_filter(opts = {})
      data, _status_code, _headers = com_adobe_granite_httpcache_impl_outer_cache_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_adobe_granite_httpcache_url_paths 
    # @return [Array<(ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo, Integer, Hash)>] ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo data, response status code and response headers
    def com_adobe_granite_httpcache_impl_outer_cache_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_httpcache_impl_outer_cache_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.granite.httpcache.url.paths'] = @api_client.build_collection_param(opts[:'com_adobe_granite_httpcache_url_paths'], :multi) if !opts[:'com_adobe_granite_httpcache_url_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_httpcache_impl_outer_cache_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_httpcache_impl_outer_cache_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :pseudo_patterns 
    # @return [ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo]
    def com_adobe_granite_i18n_impl_bundle_pseudo_translations(opts = {})
      data, _status_code, _headers = com_adobe_granite_i18n_impl_bundle_pseudo_translations_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :pseudo_patterns 
    # @return [Array<(ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo, Integer, Hash)>] ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo data, response status code and response headers
    def com_adobe_granite_i18n_impl_bundle_pseudo_translations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_i18n_impl_bundle_pseudo_translations ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'pseudo.patterns'] = @api_client.build_collection_param(opts[:'pseudo_patterns'], :multi) if !opts[:'pseudo_patterns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_i18n_impl_bundle_pseudo_translations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_i18n_impl_bundle_pseudo_translations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :security_preferences_name 
    # @return [ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo]
    def com_adobe_granite_i18n_impl_preferences_locale_resolver_service(opts = {})
      data, _status_code, _headers = com_adobe_granite_i18n_impl_preferences_locale_resolver_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :security_preferences_name 
    # @return [Array<(ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo, Integer, Hash)>] ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo data, response status code and response headers
    def com_adobe_granite_i18n_impl_preferences_locale_resolver_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_i18n_impl_preferences_locale_resolver_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'security.preferences.name'] = opts[:'security_preferences_name'] if !opts[:'security_preferences_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_i18n_impl_preferences_locale_resolver_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_i18n_impl_preferences_locale_resolver_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :granite_infocollector_include_thread_dumps 
    # @option opts [Boolean] :granite_infocollector_include_heap_dump 
    # @return [ComAdobeGraniteInfocollectorInfoCollectorInfo]
    def com_adobe_granite_infocollector_info_collector(opts = {})
      data, _status_code, _headers = com_adobe_granite_infocollector_info_collector_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :granite_infocollector_include_thread_dumps 
    # @option opts [Boolean] :granite_infocollector_include_heap_dump 
    # @return [Array<(ComAdobeGraniteInfocollectorInfoCollectorInfo, Integer, Hash)>] ComAdobeGraniteInfocollectorInfoCollectorInfo data, response status code and response headers
    def com_adobe_granite_infocollector_info_collector_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_infocollector_info_collector ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'granite.infocollector.includeThreadDumps'] = opts[:'granite_infocollector_include_thread_dumps'] if !opts[:'granite_infocollector_include_thread_dumps'].nil?
      query_params[:'granite.infocollector.includeHeapDump'] = opts[:'granite_infocollector_include_heap_dump'] if !opts[:'granite_infocollector_include_heap_dump'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteInfocollectorInfoCollectorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_infocollector_info_collector",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_infocollector_info_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :com_adobe_granite_jetty_ssl_port 
    # @option opts [String] :com_adobe_granite_jetty_ssl_keystore_user 
    # @option opts [String] :com_adobe_granite_jetty_ssl_keystore_password 
    # @option opts [Array<String>] :com_adobe_granite_jetty_ssl_ciphersuites_excluded 
    # @option opts [Array<String>] :com_adobe_granite_jetty_ssl_ciphersuites_included 
    # @option opts [String] :com_adobe_granite_jetty_ssl_client_certificate 
    # @return [ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo]
    def com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory(opts = {})
      data, _status_code, _headers = com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :com_adobe_granite_jetty_ssl_port 
    # @option opts [String] :com_adobe_granite_jetty_ssl_keystore_user 
    # @option opts [String] :com_adobe_granite_jetty_ssl_keystore_password 
    # @option opts [Array<String>] :com_adobe_granite_jetty_ssl_ciphersuites_excluded 
    # @option opts [Array<String>] :com_adobe_granite_jetty_ssl_ciphersuites_included 
    # @option opts [String] :com_adobe_granite_jetty_ssl_client_certificate 
    # @return [Array<(ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo, Integer, Hash)>] ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo data, response status code and response headers
    def com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.adobe.granite.jetty.ssl.port'] = opts[:'com_adobe_granite_jetty_ssl_port'] if !opts[:'com_adobe_granite_jetty_ssl_port'].nil?
      query_params[:'com.adobe.granite.jetty.ssl.keystore.user'] = opts[:'com_adobe_granite_jetty_ssl_keystore_user'] if !opts[:'com_adobe_granite_jetty_ssl_keystore_user'].nil?
      query_params[:'com.adobe.granite.jetty.ssl.keystore.password'] = opts[:'com_adobe_granite_jetty_ssl_keystore_password'] if !opts[:'com_adobe_granite_jetty_ssl_keystore_password'].nil?
      query_params[:'com.adobe.granite.jetty.ssl.ciphersuites.excluded'] = @api_client.build_collection_param(opts[:'com_adobe_granite_jetty_ssl_ciphersuites_excluded'], :multi) if !opts[:'com_adobe_granite_jetty_ssl_ciphersuites_excluded'].nil?
      query_params[:'com.adobe.granite.jetty.ssl.ciphersuites.included'] = @api_client.build_collection_param(opts[:'com_adobe_granite_jetty_ssl_ciphersuites_included'], :multi) if !opts[:'com_adobe_granite_jetty_ssl_ciphersuites_included'].nil?
      query_params[:'com.adobe.granite.jetty.ssl.client.certificate'] = opts[:'com_adobe_granite_jetty_ssl_client_certificate'] if !opts[:'com_adobe_granite_jetty_ssl_client_certificate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_jetty_ssl_internal_granite_ssl_connector_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :check_internval 
    # @option opts [Array<String>] :exclude_ids 
    # @option opts [Boolean] :encrypt_ping 
    # @return [ComAdobeGraniteLicenseImplLicenseCheckFilterInfo]
    def com_adobe_granite_license_impl_license_check_filter(opts = {})
      data, _status_code, _headers = com_adobe_granite_license_impl_license_check_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :check_internval 
    # @option opts [Array<String>] :exclude_ids 
    # @option opts [Boolean] :encrypt_ping 
    # @return [Array<(ComAdobeGraniteLicenseImplLicenseCheckFilterInfo, Integer, Hash)>] ComAdobeGraniteLicenseImplLicenseCheckFilterInfo data, response status code and response headers
    def com_adobe_granite_license_impl_license_check_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_license_impl_license_check_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'checkInternval'] = opts[:'check_internval'] if !opts[:'check_internval'].nil?
      query_params[:'excludeIds'] = @api_client.build_collection_param(opts[:'exclude_ids'], :multi) if !opts[:'exclude_ids'].nil?
      query_params[:'encryptPing'] = opts[:'encrypt_ping'] if !opts[:'encrypt_ping'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteLicenseImplLicenseCheckFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_license_impl_license_check_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_license_impl_license_check_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :messages_queue_size 
    # @option opts [Array<String>] :logger_config 
    # @option opts [Integer] :messages_size 
    # @return [ComAdobeGraniteLoggingImplLogAnalyserImplInfo]
    def com_adobe_granite_logging_impl_log_analyser_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_logging_impl_log_analyser_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :messages_queue_size 
    # @option opts [Array<String>] :logger_config 
    # @option opts [Integer] :messages_size 
    # @return [Array<(ComAdobeGraniteLoggingImplLogAnalyserImplInfo, Integer, Hash)>] ComAdobeGraniteLoggingImplLogAnalyserImplInfo data, response status code and response headers
    def com_adobe_granite_logging_impl_log_analyser_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_logging_impl_log_analyser_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'messages.queue.size'] = opts[:'messages_queue_size'] if !opts[:'messages_queue_size'].nil?
      query_params[:'logger.config'] = @api_client.build_collection_param(opts[:'logger_config'], :multi) if !opts[:'logger_config'].nil?
      query_params[:'messages.size'] = opts[:'messages_size'] if !opts[:'messages_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteLoggingImplLogAnalyserImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_logging_impl_log_analyser_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_logging_impl_log_analyser_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo]
    def com_adobe_granite_logging_impl_log_error_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_logging_impl_log_error_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_logging_impl_log_error_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_logging_impl_log_error_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_logging_impl_log_error_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_logging_impl_log_error_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :granite_maintenance_mandatory 
    # @option opts [String] :job_topics 
    # @return [ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo]
    def com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task(opts = {})
      data, _status_code, _headers = com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :granite_maintenance_mandatory 
    # @option opts [String] :job_topics 
    # @return [Array<(ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo, Integer, Hash)>] ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo data, response status code and response headers
    def com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'granite.maintenance.mandatory'] = opts[:'granite_maintenance_mandatory'] if !opts[:'granite_maintenance_mandatory'].nil?
      query_params[:'job.topics'] = opts[:'job_topics'] if !opts[:'job_topics'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_maintenance_crx_impl_data_store_garbage_collection_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :job_topics 
    # @return [ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo]
    def com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task(opts = {})
      data, _status_code, _headers = com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :job_topics 
    # @return [Array<(ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo, Integer, Hash)>] ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo data, response status code and response headers
    def com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'job.topics'] = opts[:'job_topics'] if !opts[:'job_topics'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_maintenance_crx_impl_lucene_binaries_cleanup_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :full_gc_days 
    # @return [ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo]
    def com_adobe_granite_maintenance_crx_impl_revision_cleanup_task(opts = {})
      data, _status_code, _headers = com_adobe_granite_maintenance_crx_impl_revision_cleanup_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :full_gc_days 
    # @return [Array<(ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo, Integer, Hash)>] ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo data, response status code and response headers
    def com_adobe_granite_maintenance_crx_impl_revision_cleanup_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_maintenance_crx_impl_revision_cleanup_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'full.gc.days'] = @api_client.build_collection_param(opts[:'full_gc_days'], :multi) if !opts[:'full_gc_days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_maintenance_crx_impl_revision_cleanup_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_maintenance_crx_impl_revision_cleanup_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :script_filename 
    # @option opts [String] :script_display 
    # @option opts [String] :script_path 
    # @option opts [Array<String>] :script_platform 
    # @option opts [Integer] :interval 
    # @option opts [String] :jmxdomain 
    # @return [ComAdobeGraniteMonitoringImplScriptConfigImplInfo]
    def com_adobe_granite_monitoring_impl_script_config_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_monitoring_impl_script_config_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :script_filename 
    # @option opts [String] :script_display 
    # @option opts [String] :script_path 
    # @option opts [Array<String>] :script_platform 
    # @option opts [Integer] :interval 
    # @option opts [String] :jmxdomain 
    # @return [Array<(ComAdobeGraniteMonitoringImplScriptConfigImplInfo, Integer, Hash)>] ComAdobeGraniteMonitoringImplScriptConfigImplInfo data, response status code and response headers
    def com_adobe_granite_monitoring_impl_script_config_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_monitoring_impl_script_config_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'script.filename'] = opts[:'script_filename'] if !opts[:'script_filename'].nil?
      query_params[:'script.display'] = opts[:'script_display'] if !opts[:'script_display'].nil?
      query_params[:'script.path'] = opts[:'script_path'] if !opts[:'script_path'].nil?
      query_params[:'script.platform'] = @api_client.build_collection_param(opts[:'script_platform'], :multi) if !opts[:'script_platform'].nil?
      query_params[:'interval'] = opts[:'interval'] if !opts[:'interval'].nil?
      query_params[:'jmxdomain'] = opts[:'jmxdomain'] if !opts[:'jmxdomain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteMonitoringImplScriptConfigImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_monitoring_impl_script_config_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_monitoring_impl_script_config_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [String] :jaas_control_flag 
    # @option opts [String] :jaas_realm_name 
    # @option opts [Integer] :jaas_ranking 
    # @option opts [Boolean] :oauth_offline_validation 
    # @return [ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo]
    def com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han(opts = {})
      data, _status_code, _headers = com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [String] :jaas_control_flag 
    # @option opts [String] :jaas_realm_name 
    # @option opts [Integer] :jaas_ranking 
    # @option opts [Boolean] :oauth_offline_validation 
    # @return [Array<(ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo, Integer, Hash)>] ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo data, response status code and response headers
    def com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'jaas.controlFlag'] = opts[:'jaas_control_flag'] if !opts[:'jaas_control_flag'].nil?
      query_params[:'jaas.realmName'] = opts[:'jaas_realm_name'] if !opts[:'jaas_realm_name'].nil?
      query_params[:'jaas.ranking'] = opts[:'jaas_ranking'] if !opts[:'jaas_ranking'].nil?
      query_params[:'oauth.offline.validation'] = opts[:'oauth_offline_validation'] if !opts[:'oauth_offline_validation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_oauth_server_auth_impl_o_auth2_server_authentication_han\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @return [ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo]
    def com_adobe_granite_oauth_server_impl_access_token_cleanup_task(opts = {})
      data, _status_code, _headers = com_adobe_granite_oauth_server_impl_access_token_cleanup_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @return [Array<(ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo, Integer, Hash)>] ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo data, response status code and response headers
    def com_adobe_granite_oauth_server_impl_access_token_cleanup_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_oauth_server_impl_access_token_cleanup_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_oauth_server_impl_access_token_cleanup_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_oauth_server_impl_access_token_cleanup_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :oauth_client_revocation_active 
    # @return [ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo]
    def com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet(opts = {})
      data, _status_code, _headers = com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :oauth_client_revocation_active 
    # @return [Array<(ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo, Integer, Hash)>] ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo data, response status code and response headers
    def com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.client.revocation.active'] = opts[:'oauth_client_revocation_active'] if !opts[:'oauth_client_revocation_active'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_oauth_server_impl_o_auth2_client_revocation_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_paths 
    # @option opts [Boolean] :oauth_revocation_active 
    # @return [ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo]
    def com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet(opts = {})
      data, _status_code, _headers = com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_paths 
    # @option opts [Boolean] :oauth_revocation_active 
    # @return [Array<(ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo, Integer, Hash)>] ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo data, response status code and response headers
    def com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.paths'] = opts[:'sling_servlet_paths'] if !opts[:'sling_servlet_paths'].nil?
      query_params[:'oauth.revocation.active'] = opts[:'oauth_revocation_active'] if !opts[:'oauth_revocation_active'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_oauth_server_impl_o_auth2_revocation_endpoint_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_issuer 
    # @option opts [String] :oauth_access_token_expires_in 
    # @option opts [String] :osgi_http_whiteboard_servlet_pattern 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @return [ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo]
    def com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet(opts = {})
      data, _status_code, _headers = com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :oauth_issuer 
    # @option opts [String] :oauth_access_token_expires_in 
    # @option opts [String] :osgi_http_whiteboard_servlet_pattern 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @return [Array<(ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo, Integer, Hash)>] ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo data, response status code and response headers
    def com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.issuer'] = opts[:'oauth_issuer'] if !opts[:'oauth_issuer'].nil?
      query_params[:'oauth.access.token.expires.in'] = opts[:'oauth_access_token_expires_in'] if !opts[:'oauth_access_token_expires_in'].nil?
      query_params[:'osgi.http.whiteboard.servlet.pattern'] = opts[:'osgi_http_whiteboard_servlet_pattern'] if !opts[:'osgi_http_whiteboard_servlet_pattern'].nil?
      query_params[:'osgi.http.whiteboard.context.select'] = opts[:'osgi_http_whiteboard_context_select'] if !opts[:'osgi_http_whiteboard_context_select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_oauth_server_impl_o_auth2_token_endpoint_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :oauth_token_revocation_active 
    # @return [ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo]
    def com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet(opts = {})
      data, _status_code, _headers = com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :oauth_token_revocation_active 
    # @return [Array<(ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo, Integer, Hash)>] ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo data, response status code and response headers
    def com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'oauth.token.revocation.active'] = opts[:'oauth_token_revocation_active'] if !opts[:'oauth_token_revocation_active'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_oauth_server_impl_o_auth2_token_revocation_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :offloading_transporter 
    # @option opts [Boolean] :offloading_cleanup_payload 
    # @return [ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo]
    def com_adobe_granite_offloading_impl_offloading_configurator(opts = {})
      data, _status_code, _headers = com_adobe_granite_offloading_impl_offloading_configurator_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :offloading_transporter 
    # @option opts [Boolean] :offloading_cleanup_payload 
    # @return [Array<(ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo, Integer, Hash)>] ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo data, response status code and response headers
    def com_adobe_granite_offloading_impl_offloading_configurator_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_offloading_impl_offloading_configurator ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'offloading.transporter'] = opts[:'offloading_transporter'] if !opts[:'offloading_transporter'].nil?
      query_params[:'offloading.cleanup.payload'] = opts[:'offloading_cleanup_payload'] if !opts[:'offloading_cleanup_payload'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_offloading_impl_offloading_configurator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_offloading_impl_offloading_configurator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :offloading_jobcloner_enabled 
    # @return [ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo]
    def com_adobe_granite_offloading_impl_offloading_job_cloner(opts = {})
      data, _status_code, _headers = com_adobe_granite_offloading_impl_offloading_job_cloner_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :offloading_jobcloner_enabled 
    # @return [Array<(ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo, Integer, Hash)>] ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo data, response status code and response headers
    def com_adobe_granite_offloading_impl_offloading_job_cloner_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_offloading_impl_offloading_job_cloner ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'offloading.jobcloner.enabled'] = opts[:'offloading_jobcloner_enabled'] if !opts[:'offloading_jobcloner_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_offloading_impl_offloading_job_cloner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_offloading_impl_offloading_job_cloner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :offloading_offloader_enabled 
    # @return [ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo]
    def com_adobe_granite_offloading_impl_offloading_job_offloader(opts = {})
      data, _status_code, _headers = com_adobe_granite_offloading_impl_offloading_job_offloader_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :offloading_offloader_enabled 
    # @return [Array<(ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo, Integer, Hash)>] ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo data, response status code and response headers
    def com_adobe_granite_offloading_impl_offloading_job_offloader_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_offloading_impl_offloading_job_offloader ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'offloading.offloader.enabled'] = opts[:'offloading_offloader_enabled'] if !opts[:'offloading_offloader_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_offloading_impl_offloading_job_offloader",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_offloading_impl_offloading_job_offloader\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :offloading_agentmanager_enabled 
    # @return [ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo]
    def com_adobe_granite_offloading_impl_transporter_offloading_agent_manager(opts = {})
      data, _status_code, _headers = com_adobe_granite_offloading_impl_transporter_offloading_agent_manager_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :offloading_agentmanager_enabled 
    # @return [Array<(ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo, Integer, Hash)>] ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo data, response status code and response headers
    def com_adobe_granite_offloading_impl_transporter_offloading_agent_manager_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_offloading_impl_transporter_offloading_agent_manager ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'offloading.agentmanager.enabled'] = opts[:'offloading_agentmanager_enabled'] if !opts[:'offloading_agentmanager_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_offloading_impl_transporter_offloading_agent_manager",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_offloading_impl_transporter_offloading_agent_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :default_transport_agent_to_worker_prefix 
    # @option opts [String] :default_transport_agent_to_master_prefix 
    # @option opts [String] :default_transport_input_package 
    # @option opts [String] :default_transport_output_package 
    # @option opts [Boolean] :default_transport_replication_synchronous 
    # @option opts [Boolean] :default_transport_contentpackage 
    # @option opts [Boolean] :offloading_transporter_default_enabled 
    # @return [ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo]
    def com_adobe_granite_offloading_impl_transporter_offloading_default_transpo(opts = {})
      data, _status_code, _headers = com_adobe_granite_offloading_impl_transporter_offloading_default_transpo_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :default_transport_agent_to_worker_prefix 
    # @option opts [String] :default_transport_agent_to_master_prefix 
    # @option opts [String] :default_transport_input_package 
    # @option opts [String] :default_transport_output_package 
    # @option opts [Boolean] :default_transport_replication_synchronous 
    # @option opts [Boolean] :default_transport_contentpackage 
    # @option opts [Boolean] :offloading_transporter_default_enabled 
    # @return [Array<(ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo, Integer, Hash)>] ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo data, response status code and response headers
    def com_adobe_granite_offloading_impl_transporter_offloading_default_transpo_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_offloading_impl_transporter_offloading_default_transpo ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'default.transport.agent-to-worker.prefix'] = opts[:'default_transport_agent_to_worker_prefix'] if !opts[:'default_transport_agent_to_worker_prefix'].nil?
      query_params[:'default.transport.agent-to-master.prefix'] = opts[:'default_transport_agent_to_master_prefix'] if !opts[:'default_transport_agent_to_master_prefix'].nil?
      query_params[:'default.transport.input.package'] = opts[:'default_transport_input_package'] if !opts[:'default_transport_input_package'].nil?
      query_params[:'default.transport.output.package'] = opts[:'default_transport_output_package'] if !opts[:'default_transport_output_package'].nil?
      query_params[:'default.transport.replication.synchronous'] = opts[:'default_transport_replication_synchronous'] if !opts[:'default_transport_replication_synchronous'].nil?
      query_params[:'default.transport.contentpackage'] = opts[:'default_transport_contentpackage'] if !opts[:'default_transport_contentpackage'].nil?
      query_params[:'offloading.transporter.default.enabled'] = opts[:'offloading_transporter_default_enabled'] if !opts[:'offloading_transporter_default_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_offloading_impl_transporter_offloading_default_transpo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_offloading_impl_transporter_offloading_default_transpo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :omnisearch_suggestion_requiretext_min 
    # @option opts [Boolean] :omnisearch_suggestion_spellcheck_require 
    # @return [ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo]
    def com_adobe_granite_omnisearch_impl_core_omni_search_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_omnisearch_impl_core_omni_search_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :omnisearch_suggestion_requiretext_min 
    # @option opts [Boolean] :omnisearch_suggestion_spellcheck_require 
    # @return [Array<(ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo, Integer, Hash)>] ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo data, response status code and response headers
    def com_adobe_granite_omnisearch_impl_core_omni_search_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_omnisearch_impl_core_omni_search_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'omnisearch.suggestion.requiretext.min'] = opts[:'omnisearch_suggestion_requiretext_min'] if !opts[:'omnisearch_suggestion_requiretext_min'].nil?
      query_params[:'omnisearch.suggestion.spellcheck.require'] = opts[:'omnisearch_suggestion_spellcheck_require'] if !opts[:'omnisearch_suggestion_spellcheck_require'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_omnisearch_impl_core_omni_search_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_omnisearch_impl_core_omni_search_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :optout_cookies 
    # @option opts [Array<String>] :optout_headers 
    # @option opts [Array<String>] :optout_whitelist_cookies 
    # @return [ComAdobeGraniteOptoutImplOptOutServiceImplInfo]
    def com_adobe_granite_optout_impl_opt_out_service_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_optout_impl_opt_out_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :optout_cookies 
    # @option opts [Array<String>] :optout_headers 
    # @option opts [Array<String>] :optout_whitelist_cookies 
    # @return [Array<(ComAdobeGraniteOptoutImplOptOutServiceImplInfo, Integer, Hash)>] ComAdobeGraniteOptoutImplOptOutServiceImplInfo data, response status code and response headers
    def com_adobe_granite_optout_impl_opt_out_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_optout_impl_opt_out_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'optout.cookies'] = @api_client.build_collection_param(opts[:'optout_cookies'], :multi) if !opts[:'optout_cookies'].nil?
      query_params[:'optout.headers'] = @api_client.build_collection_param(opts[:'optout_headers'], :multi) if !opts[:'optout_headers'].nil?
      query_params[:'optout.whitelist.cookies'] = @api_client.build_collection_param(opts[:'optout_whitelist_cookies'], :multi) if !opts[:'optout_whitelist_cookies'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteOptoutImplOptOutServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_optout_impl_opt_out_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_optout_impl_opt_out_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :indexing_critical_threshold 
    # @option opts [Integer] :indexing_warn_threshold 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo]
    def com_adobe_granite_queries_impl_hc_async_index_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_queries_impl_hc_async_index_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :indexing_critical_threshold 
    # @option opts [Integer] :indexing_warn_threshold 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_queries_impl_hc_async_index_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_queries_impl_hc_async_index_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'indexing.critical.threshold'] = opts[:'indexing_critical_threshold'] if !opts[:'indexing_critical_threshold'].nil?
      query_params[:'indexing.warn.threshold'] = opts[:'indexing_warn_threshold'] if !opts[:'indexing_warn_threshold'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_queries_impl_hc_async_index_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_queries_impl_hc_async_index_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :large_index_critical_threshold 
    # @option opts [Integer] :large_index_warn_threshold 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo]
    def com_adobe_granite_queries_impl_hc_large_index_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_queries_impl_hc_large_index_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :large_index_critical_threshold 
    # @option opts [Integer] :large_index_warn_threshold 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_queries_impl_hc_large_index_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_queries_impl_hc_large_index_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'large.index.critical.threshold'] = opts[:'large_index_critical_threshold'] if !opts[:'large_index_critical_threshold'].nil?
      query_params[:'large.index.warn.threshold'] = opts[:'large_index_warn_threshold'] if !opts[:'large_index_warn_threshold'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_queries_impl_hc_large_index_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_queries_impl_hc_large_index_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo]
    def com_adobe_granite_queries_impl_hc_queries_status_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_queries_impl_hc_queries_status_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_queries_impl_hc_queries_status_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_queries_impl_hc_queries_status_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_queries_impl_hc_queries_status_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_queries_impl_hc_queries_status_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :get_period 
    # @return [ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo]
    def com_adobe_granite_queries_impl_hc_query_health_check_metrics(opts = {})
      data, _status_code, _headers = com_adobe_granite_queries_impl_hc_query_health_check_metrics_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :get_period 
    # @return [Array<(ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo, Integer, Hash)>] ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo data, response status code and response headers
    def com_adobe_granite_queries_impl_hc_query_health_check_metrics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_queries_impl_hc_query_health_check_metrics ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'getPeriod'] = opts[:'get_period'] if !opts[:'get_period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_queries_impl_hc_query_health_check_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_queries_impl_hc_query_health_check_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo]
    def com_adobe_granite_queries_impl_hc_query_limits_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_queries_impl_hc_query_limits_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_queries_impl_hc_query_limits_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_queries_impl_hc_query_limits_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_queries_impl_hc_query_limits_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_queries_impl_hc_query_limits_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :number_of_retries_allowed 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo]
    def com_adobe_granite_replication_hc_impl_replication_queue_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_replication_hc_impl_replication_queue_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :number_of_retries_allowed 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_replication_hc_impl_replication_queue_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_replication_hc_impl_replication_queue_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'number.of.retries.allowed'] = opts[:'number_of_retries_allowed'] if !opts[:'number_of_retries_allowed'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_replication_hc_impl_replication_queue_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_replication_hc_impl_replication_queue_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo]
    def com_adobe_granite_replication_hc_impl_replication_transport_users_health_c(opts = {})
      data, _status_code, _headers = com_adobe_granite_replication_hc_impl_replication_transport_users_health_c_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo, Integer, Hash)>] ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo data, response status code and response headers
    def com_adobe_granite_replication_hc_impl_replication_transport_users_health_c_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_replication_hc_impl_replication_transport_users_health_c ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_replication_hc_impl_replication_transport_users_health_c",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_replication_hc_impl_replication_transport_users_health_c\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo]
    def com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_repository_hc_impl_authorizable_node_name_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Array<String>] :exclude_search_path 
    # @return [ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo]
    def com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c(opts = {})
      data, _status_code, _headers = com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Array<String>] :exclude_search_path 
    # @return [Array<(ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo, Integer, Hash)>] ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo data, response status code and response headers
    def com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'exclude.search.path'] = @api_client.build_collection_param(opts[:'exclude_search_path'], :multi) if !opts[:'exclude_search_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_repository_hc_impl_content_sling_sling_content_health_c\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo]
    def com_adobe_granite_repository_hc_impl_continuous_rgc_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_repository_hc_impl_continuous_rgc_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_repository_hc_impl_continuous_rgc_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_repository_hc_impl_continuous_rgc_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_repository_hc_impl_continuous_rgc_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_repository_hc_impl_continuous_rgc_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo]
    def com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che(opts = {})
      data, _status_code, _headers = com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo, Integer, Hash)>] ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo data, response status code and response headers
    def com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_repository_hc_impl_default_access_user_profile_health_che\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Array<String>] :account_logins 
    # @option opts [Array<String>] :console_logins 
    # @return [ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo]
    def com_adobe_granite_repository_hc_impl_default_logins_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_repository_hc_impl_default_logins_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Array<String>] :account_logins 
    # @option opts [Array<String>] :console_logins 
    # @return [Array<(ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_repository_hc_impl_default_logins_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_repository_hc_impl_default_logins_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'account.logins'] = @api_client.build_collection_param(opts[:'account_logins'], :multi) if !opts[:'account_logins'].nil?
      query_params[:'console.logins'] = @api_client.build_collection_param(opts[:'console_logins'], :multi) if !opts[:'console_logins'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_repository_hc_impl_default_logins_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_repository_hc_impl_default_logins_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Integer] :disk_space_warn_threshold 
    # @option opts [Integer] :disk_space_error_threshold 
    # @return [ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo]
    def com_adobe_granite_repository_hc_impl_disk_space_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_repository_hc_impl_disk_space_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [Integer] :disk_space_warn_threshold 
    # @option opts [Integer] :disk_space_error_threshold 
    # @return [Array<(ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_repository_hc_impl_disk_space_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_repository_hc_impl_disk_space_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'disk.space.warn.threshold'] = opts[:'disk_space_warn_threshold'] if !opts[:'disk_space_warn_threshold'].nil?
      query_params[:'disk.space.error.threshold'] = opts[:'disk_space_error_threshold'] if !opts[:'disk_space_error_threshold'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_repository_hc_impl_disk_space_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_repository_hc_impl_disk_space_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo]
    def com_adobe_granite_repository_hc_impl_observation_queue_length_health_check(opts = {})
      data, _status_code, _headers = com_adobe_granite_repository_hc_impl_observation_queue_length_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo, Integer, Hash)>] ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo data, response status code and response headers
    def com_adobe_granite_repository_hc_impl_observation_queue_length_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_repository_hc_impl_observation_queue_length_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_repository_hc_impl_observation_queue_length_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_repository_hc_impl_observation_queue_length_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Integer] :interval_seconds 
    # @option opts [Integer] :commits_per_interval_threshold 
    # @option opts [Integer] :max_location_length 
    # @option opts [Integer] :max_details_shown 
    # @option opts [Integer] :min_details_percentage 
    # @option opts [Array<String>] :thread_matchers 
    # @option opts [Integer] :max_greedy_depth 
    # @option opts [String] :greedy_stack_matchers 
    # @option opts [Array<String>] :stack_filters 
    # @option opts [Array<String>] :stack_matchers 
    # @option opts [Array<String>] :stack_categorizers 
    # @option opts [Array<String>] :stack_shorteners 
    # @return [ComAdobeGraniteRepositoryImplCommitStatsConfigInfo]
    def com_adobe_granite_repository_impl_commit_stats_config(opts = {})
      data, _status_code, _headers = com_adobe_granite_repository_impl_commit_stats_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Integer] :interval_seconds 
    # @option opts [Integer] :commits_per_interval_threshold 
    # @option opts [Integer] :max_location_length 
    # @option opts [Integer] :max_details_shown 
    # @option opts [Integer] :min_details_percentage 
    # @option opts [Array<String>] :thread_matchers 
    # @option opts [Integer] :max_greedy_depth 
    # @option opts [String] :greedy_stack_matchers 
    # @option opts [Array<String>] :stack_filters 
    # @option opts [Array<String>] :stack_matchers 
    # @option opts [Array<String>] :stack_categorizers 
    # @option opts [Array<String>] :stack_shorteners 
    # @return [Array<(ComAdobeGraniteRepositoryImplCommitStatsConfigInfo, Integer, Hash)>] ComAdobeGraniteRepositoryImplCommitStatsConfigInfo data, response status code and response headers
    def com_adobe_granite_repository_impl_commit_stats_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_repository_impl_commit_stats_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'intervalSeconds'] = opts[:'interval_seconds'] if !opts[:'interval_seconds'].nil?
      query_params[:'commitsPerIntervalThreshold'] = opts[:'commits_per_interval_threshold'] if !opts[:'commits_per_interval_threshold'].nil?
      query_params[:'maxLocationLength'] = opts[:'max_location_length'] if !opts[:'max_location_length'].nil?
      query_params[:'maxDetailsShown'] = opts[:'max_details_shown'] if !opts[:'max_details_shown'].nil?
      query_params[:'minDetailsPercentage'] = opts[:'min_details_percentage'] if !opts[:'min_details_percentage'].nil?
      query_params[:'threadMatchers'] = @api_client.build_collection_param(opts[:'thread_matchers'], :multi) if !opts[:'thread_matchers'].nil?
      query_params[:'maxGreedyDepth'] = opts[:'max_greedy_depth'] if !opts[:'max_greedy_depth'].nil?
      query_params[:'greedyStackMatchers'] = opts[:'greedy_stack_matchers'] if !opts[:'greedy_stack_matchers'].nil?
      query_params[:'stackFilters'] = @api_client.build_collection_param(opts[:'stack_filters'], :multi) if !opts[:'stack_filters'].nil?
      query_params[:'stackMatchers'] = @api_client.build_collection_param(opts[:'stack_matchers'], :multi) if !opts[:'stack_matchers'].nil?
      query_params[:'stackCategorizers'] = @api_client.build_collection_param(opts[:'stack_categorizers'], :multi) if !opts[:'stack_categorizers'].nil?
      query_params[:'stackShorteners'] = @api_client.build_collection_param(opts[:'stack_shorteners'], :multi) if !opts[:'stack_shorteners'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRepositoryImplCommitStatsConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_repository_impl_commit_stats_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_repository_impl_commit_stats_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Boolean] :serviceusers_simple_subject_population 
    # @option opts [Array<String>] :serviceusers_list 
    # @return [ComAdobeGraniteRepositoryServiceUserConfigurationInfo]
    def com_adobe_granite_repository_service_user_configuration(opts = {})
      data, _status_code, _headers = com_adobe_granite_repository_service_user_configuration_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Boolean] :serviceusers_simple_subject_population 
    # @option opts [Array<String>] :serviceusers_list 
    # @return [Array<(ComAdobeGraniteRepositoryServiceUserConfigurationInfo, Integer, Hash)>] ComAdobeGraniteRepositoryServiceUserConfigurationInfo data, response status code and response headers
    def com_adobe_granite_repository_service_user_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_repository_service_user_configuration ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'serviceusers.simpleSubjectPopulation'] = opts[:'serviceusers_simple_subject_population'] if !opts[:'serviceusers_simple_subject_population'].nil?
      query_params[:'serviceusers.list'] = @api_client.build_collection_param(opts[:'serviceusers_list'], :multi) if !opts[:'serviceusers_list'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRepositoryServiceUserConfigurationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_repository_service_user_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_repository_service_user_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo]
    def com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im(opts = {})
      data, _status_code, _headers = com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo, Integer, Hash)>] ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo data, response status code and response headers
    def com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_requests_logging_impl_hc_requests_status_health_check_im\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [Array<String>] :types 
    # @return [ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo]
    def com_adobe_granite_resourcestatus_impl_composite_status_type(opts = {})
      data, _status_code, _headers = com_adobe_granite_resourcestatus_impl_composite_status_type_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [Array<String>] :types 
    # @return [Array<(ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo, Integer, Hash)>] ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo data, response status code and response headers
    def com_adobe_granite_resourcestatus_impl_composite_status_type_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_resourcestatus_impl_composite_status_type ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'types'] = @api_client.build_collection_param(opts[:'types'], :multi) if !opts[:'types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_resourcestatus_impl_composite_status_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_resourcestatus_impl_composite_status_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_root 
    # @return [ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo]
    def com_adobe_granite_resourcestatus_impl_status_resource_provider_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_resourcestatus_impl_status_resource_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_root 
    # @return [Array<(ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo, Integer, Hash)>] ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo data, response status code and response headers
    def com_adobe_granite_resourcestatus_impl_status_resource_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_resourcestatus_impl_status_resource_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'provider.root'] = opts[:'provider_root'] if !opts[:'provider_root'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_resourcestatus_impl_status_resource_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_resourcestatus_impl_status_resource_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :mime_allow_empty 
    # @option opts [Array<String>] :mime_allowed 
    # @return [ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo]
    def com_adobe_granite_rest_assets_impl_asset_content_disposition_filter(opts = {})
      data, _status_code, _headers = com_adobe_granite_rest_assets_impl_asset_content_disposition_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :mime_allow_empty 
    # @option opts [Array<String>] :mime_allowed 
    # @return [Array<(ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo, Integer, Hash)>] ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo data, response status code and response headers
    def com_adobe_granite_rest_assets_impl_asset_content_disposition_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_rest_assets_impl_asset_content_disposition_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'mime.allowEmpty'] = opts[:'mime_allow_empty'] if !opts[:'mime_allow_empty'].nil?
      query_params[:'mime.allowed'] = @api_client.build_collection_param(opts[:'mime_allowed'], :multi) if !opts[:'mime_allowed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_rest_assets_impl_asset_content_disposition_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_rest_assets_impl_asset_content_disposition_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_roots 
    # @return [ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo]
    def com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_roots 
    # @return [Array<(ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo, Integer, Hash)>] ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo data, response status code and response headers
    def com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'provider.roots'] = opts[:'provider_roots'] if !opts[:'provider_roots'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_rest_impl_api_endpoint_resource_provider_factory_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :default_limit 
    # @option opts [Boolean] :use_absolute_uri 
    # @return [ComAdobeGraniteRestImplServletDefaultGETServletInfo]
    def com_adobe_granite_rest_impl_servlet_default_get_servlet(opts = {})
      data, _status_code, _headers = com_adobe_granite_rest_impl_servlet_default_get_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :default_limit 
    # @option opts [Boolean] :use_absolute_uri 
    # @return [Array<(ComAdobeGraniteRestImplServletDefaultGETServletInfo, Integer, Hash)>] ComAdobeGraniteRestImplServletDefaultGETServletInfo data, response status code and response headers
    def com_adobe_granite_rest_impl_servlet_default_get_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_rest_impl_servlet_default_get_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'default.limit'] = opts[:'default_limit'] if !opts[:'default_limit'].nil?
      query_params[:'use.absolute.uri'] = opts[:'use_absolute_uri'] if !opts[:'use_absolute_uri'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteRestImplServletDefaultGETServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_rest_impl_servlet_default_get_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_rest_impl_servlet_default_get_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo]
    def com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s(opts = {})
      data, _status_code, _headers = com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :hc_tags 
    # @return [Array<(ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo, Integer, Hash)>] ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo data, response status code and response headers
    def com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_security_user_ui_internal_servlets_ssl_configuration_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :adapter_condition 
    # @option opts [Array<String>] :granite_userproperties_nodetypes 
    # @option opts [Array<String>] :granite_userproperties_resourcetypes 
    # @return [ComAdobeGraniteSecurityUserUserPropertiesServiceInfo]
    def com_adobe_granite_security_user_user_properties_service(opts = {})
      data, _status_code, _headers = com_adobe_granite_security_user_user_properties_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :adapter_condition 
    # @option opts [Array<String>] :granite_userproperties_nodetypes 
    # @option opts [Array<String>] :granite_userproperties_resourcetypes 
    # @return [Array<(ComAdobeGraniteSecurityUserUserPropertiesServiceInfo, Integer, Hash)>] ComAdobeGraniteSecurityUserUserPropertiesServiceInfo data, response status code and response headers
    def com_adobe_granite_security_user_user_properties_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_security_user_user_properties_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'adapter.condition'] = opts[:'adapter_condition'] if !opts[:'adapter_condition'].nil?
      query_params[:'granite.userproperties.nodetypes'] = @api_client.build_collection_param(opts[:'granite_userproperties_nodetypes'], :multi) if !opts[:'granite_userproperties_nodetypes'].nil?
      query_params[:'granite.userproperties.resourcetypes'] = @api_client.build_collection_param(opts[:'granite_userproperties_resourcetypes'], :multi) if !opts[:'granite_userproperties_resourcetypes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteSecurityUserUserPropertiesServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_security_user_user_properties_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_security_user_user_properties_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :group2member_relationship_outgoing 
    # @option opts [Array<String>] :group2member_excluded_outgoing 
    # @option opts [String] :group2member_relationship_incoming 
    # @option opts [Array<String>] :group2member_excluded_incoming 
    # @return [ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo]
    def com_adobe_granite_socialgraph_impl_social_graph_factory_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_socialgraph_impl_social_graph_factory_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :group2member_relationship_outgoing 
    # @option opts [Array<String>] :group2member_excluded_outgoing 
    # @option opts [String] :group2member_relationship_incoming 
    # @option opts [Array<String>] :group2member_excluded_incoming 
    # @return [Array<(ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo, Integer, Hash)>] ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo data, response status code and response headers
    def com_adobe_granite_socialgraph_impl_social_graph_factory_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_socialgraph_impl_social_graph_factory_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'group2member.relationship.outgoing'] = opts[:'group2member_relationship_outgoing'] if !opts[:'group2member_relationship_outgoing'].nil?
      query_params[:'group2member.excluded.outgoing'] = @api_client.build_collection_param(opts[:'group2member_excluded_outgoing'], :multi) if !opts[:'group2member_excluded_outgoing'].nil?
      query_params[:'group2member.relationship.incoming'] = opts[:'group2member_relationship_incoming'] if !opts[:'group2member_relationship_incoming'].nil?
      query_params[:'group2member.excluded.incoming'] = @api_client.build_collection_param(opts[:'group2member_excluded_incoming'], :multi) if !opts[:'group2member_excluded_incoming'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_socialgraph_impl_social_graph_factory_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_socialgraph_impl_social_graph_factory_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [String] :jmx_objectname 
    # @return [ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo]
    def com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [String] :jmx_objectname 
    # @return [Array<(ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo, Integer, Hash)>] ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo data, response status code and response headers
    def com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?
      query_params[:'jmx.objectname'] = opts[:'jmx_objectname'] if !opts[:'jmx_objectname'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_system_monitoring_impl_system_stats_m_bean_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :adapter_condition 
    # @return [ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo]
    def com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory(opts = {})
      data, _status_code, _headers = com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :adapter_condition 
    # @return [Array<(ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo, Integer, Hash)>] ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo data, response status code and response headers
    def com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'adapter.condition'] = opts[:'adapter_condition'] if !opts[:'adapter_condition'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_taskmanagement_impl_jcr_task_adapter_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :archiving_enabled 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :archive_since_days_completed 
    # @return [ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo]
    def com_adobe_granite_taskmanagement_impl_jcr_task_archive_service(opts = {})
      data, _status_code, _headers = com_adobe_granite_taskmanagement_impl_jcr_task_archive_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :archiving_enabled 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :archive_since_days_completed 
    # @return [Array<(ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo, Integer, Hash)>] ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo data, response status code and response headers
    def com_adobe_granite_taskmanagement_impl_jcr_task_archive_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_taskmanagement_impl_jcr_task_archive_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'archiving.enabled'] = opts[:'archiving_enabled'] if !opts[:'archiving_enabled'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?
      query_params[:'archive.since.days.completed'] = opts[:'archive_since_days_completed'] if !opts[:'archive_since_days_completed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_taskmanagement_impl_jcr_task_archive_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_taskmanagement_impl_jcr_task_archive_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :purge_completed 
    # @option opts [Integer] :completed_age 
    # @option opts [Boolean] :purge_active 
    # @option opts [Integer] :active_age 
    # @option opts [Integer] :save_threshold 
    # @return [ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo]
    def com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task(opts = {})
      data, _status_code, _headers = com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :purge_completed 
    # @option opts [Integer] :completed_age 
    # @option opts [Boolean] :purge_active 
    # @option opts [Integer] :active_age 
    # @option opts [Integer] :save_threshold 
    # @return [Array<(ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo, Integer, Hash)>] ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo data, response status code and response headers
    def com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'purgeCompleted'] = opts[:'purge_completed'] if !opts[:'purge_completed'].nil?
      query_params[:'completedAge'] = opts[:'completed_age'] if !opts[:'completed_age'].nil?
      query_params[:'purgeActive'] = opts[:'purge_active'] if !opts[:'purge_active'].nil?
      query_params[:'activeAge'] = opts[:'active_age'] if !opts[:'active_age'].nil?
      query_params[:'saveThreshold'] = opts[:'save_threshold'] if !opts[:'save_threshold'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_taskmanagement_impl_purge_task_purge_maintenance_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :adapter_condition 
    # @option opts [Array<String>] :taskmanager_admingroups 
    # @return [ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo]
    def com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor(opts = {})
      data, _status_code, _headers = com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :adapter_condition 
    # @option opts [Array<String>] :taskmanager_admingroups 
    # @return [Array<(ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo, Integer, Hash)>] ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo data, response status code and response headers
    def com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'adapter.condition'] = opts[:'adapter_condition'] if !opts[:'adapter_condition'].nil?
      query_params[:'taskmanager.admingroups'] = @api_client.build_collection_param(opts[:'taskmanager_admingroups'], :multi) if !opts[:'taskmanager_admingroups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_taskmanagement_impl_service_task_manager_adapter_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @option opts [String] :scheduler_run_on 
    # @option opts [Boolean] :granite_threaddump_enabled 
    # @option opts [Integer] :granite_threaddump_dumps_per_file 
    # @option opts [Boolean] :granite_threaddump_enable_gzip_compression 
    # @option opts [Boolean] :granite_threaddump_enable_directories_compression 
    # @option opts [Boolean] :granite_threaddump_enable_j_stack 
    # @option opts [Integer] :granite_threaddump_max_backup_days 
    # @option opts [String] :granite_threaddump_backup_clean_trigger 
    # @return [ComAdobeGraniteThreaddumpThreadDumpCollectorInfo]
    def com_adobe_granite_threaddump_thread_dump_collector(opts = {})
      data, _status_code, _headers = com_adobe_granite_threaddump_thread_dump_collector_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @option opts [String] :scheduler_run_on 
    # @option opts [Boolean] :granite_threaddump_enabled 
    # @option opts [Integer] :granite_threaddump_dumps_per_file 
    # @option opts [Boolean] :granite_threaddump_enable_gzip_compression 
    # @option opts [Boolean] :granite_threaddump_enable_directories_compression 
    # @option opts [Boolean] :granite_threaddump_enable_j_stack 
    # @option opts [Integer] :granite_threaddump_max_backup_days 
    # @option opts [String] :granite_threaddump_backup_clean_trigger 
    # @return [Array<(ComAdobeGraniteThreaddumpThreadDumpCollectorInfo, Integer, Hash)>] ComAdobeGraniteThreaddumpThreadDumpCollectorInfo data, response status code and response headers
    def com_adobe_granite_threaddump_thread_dump_collector_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_threaddump_thread_dump_collector ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.period'] = opts[:'scheduler_period'] if !opts[:'scheduler_period'].nil?
      query_params[:'scheduler.runOn'] = opts[:'scheduler_run_on'] if !opts[:'scheduler_run_on'].nil?
      query_params[:'granite.threaddump.enabled'] = opts[:'granite_threaddump_enabled'] if !opts[:'granite_threaddump_enabled'].nil?
      query_params[:'granite.threaddump.dumpsPerFile'] = opts[:'granite_threaddump_dumps_per_file'] if !opts[:'granite_threaddump_dumps_per_file'].nil?
      query_params[:'granite.threaddump.enableGzipCompression'] = opts[:'granite_threaddump_enable_gzip_compression'] if !opts[:'granite_threaddump_enable_gzip_compression'].nil?
      query_params[:'granite.threaddump.enableDirectoriesCompression'] = opts[:'granite_threaddump_enable_directories_compression'] if !opts[:'granite_threaddump_enable_directories_compression'].nil?
      query_params[:'granite.threaddump.enableJStack'] = opts[:'granite_threaddump_enable_j_stack'] if !opts[:'granite_threaddump_enable_j_stack'].nil?
      query_params[:'granite.threaddump.maxBackupDays'] = opts[:'granite_threaddump_max_backup_days'] if !opts[:'granite_threaddump_max_backup_days'].nil?
      query_params[:'granite.threaddump.backupCleanTrigger'] = opts[:'granite_threaddump_backup_clean_trigger'] if !opts[:'granite_threaddump_backup_clean_trigger'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteThreaddumpThreadDumpCollectorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_threaddump_thread_dump_collector",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_threaddump_thread_dump_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :translation_factory 
    # @option opts [String] :default_connector_label 
    # @option opts [String] :default_connector_attribution 
    # @option opts [String] :default_connector_workspace_id 
    # @option opts [String] :default_connector_subscription_key 
    # @option opts [String] :language_map_location 
    # @option opts [String] :category_map_location 
    # @option opts [Integer] :retry_attempts 
    # @option opts [Integer] :timeout_count 
    # @return [ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo]
    def com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl(opts = {})
      data, _status_code, _headers = com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :translation_factory 
    # @option opts [String] :default_connector_label 
    # @option opts [String] :default_connector_attribution 
    # @option opts [String] :default_connector_workspace_id 
    # @option opts [String] :default_connector_subscription_key 
    # @option opts [String] :language_map_location 
    # @option opts [String] :category_map_location 
    # @option opts [Integer] :retry_attempts 
    # @option opts [Integer] :timeout_count 
    # @return [Array<(ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo, Integer, Hash)>] ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo data, response status code and response headers
    def com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'translationFactory'] = opts[:'translation_factory'] if !opts[:'translation_factory'].nil?
      query_params[:'defaultConnectorLabel'] = opts[:'default_connector_label'] if !opts[:'default_connector_label'].nil?
      query_params[:'defaultConnectorAttribution'] = opts[:'default_connector_attribution'] if !opts[:'default_connector_attribution'].nil?
      query_params[:'defaultConnectorWorkspaceId'] = opts[:'default_connector_workspace_id'] if !opts[:'default_connector_workspace_id'].nil?
      query_params[:'defaultConnectorSubscriptionKey'] = opts[:'default_connector_subscription_key'] if !opts[:'default_connector_subscription_key'].nil?
      query_params[:'languageMapLocation'] = opts[:'language_map_location'] if !opts[:'language_map_location'].nil?
      query_params[:'categoryMapLocation'] = opts[:'category_map_location'] if !opts[:'category_map_location'].nil?
      query_params[:'retryAttempts'] = opts[:'retry_attempts'] if !opts[:'retry_attempts'].nil?
      query_params[:'timeoutCount'] = opts[:'timeout_count'] if !opts[:'timeout_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_translation_connector_msft_core_impl_microsoft_transl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :default_connector_name 
    # @option opts [String] :default_category 
    # @return [ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo]
    def com_adobe_granite_translation_core_impl_translation_manager_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_translation_core_impl_translation_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :default_connector_name 
    # @option opts [String] :default_category 
    # @return [Array<(ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo, Integer, Hash)>] ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo data, response status code and response headers
    def com_adobe_granite_translation_core_impl_translation_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_translation_core_impl_translation_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'defaultConnectorName'] = opts[:'default_connector_name'] if !opts[:'default_connector_name'].nil?
      query_params[:'defaultCategory'] = opts[:'default_category'] if !opts[:'default_category'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_translation_core_impl_translation_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_translation_core_impl_translation_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :htmllibmanager_timing 
    # @option opts [String] :htmllibmanager_debug_init_js 
    # @option opts [Boolean] :htmllibmanager_minify 
    # @option opts [Boolean] :htmllibmanager_debug 
    # @option opts [Boolean] :htmllibmanager_gzip 
    # @option opts [Integer] :htmllibmanager_max_data_uri_size 
    # @option opts [Integer] :htmllibmanager_maxage 
    # @option opts [Boolean] :htmllibmanager_force_cq_url_info 
    # @option opts [String] :htmllibmanager_defaultthemename 
    # @option opts [String] :htmllibmanager_defaultuserthemename 
    # @option opts [String] :htmllibmanager_clientmanager 
    # @option opts [Array<String>] :htmllibmanager_path_list 
    # @option opts [Array<String>] :htmllibmanager_excluded_path_list 
    # @option opts [Array<String>] :htmllibmanager_processor_js 
    # @option opts [Array<String>] :htmllibmanager_processor_css 
    # @option opts [Array<String>] :htmllibmanager_longcache_patterns 
    # @option opts [String] :htmllibmanager_longcache_format 
    # @option opts [Boolean] :htmllibmanager_use_file_system_output_cache 
    # @option opts [String] :htmllibmanager_file_system_output_cache_location 
    # @option opts [Array<String>] :htmllibmanager_disable_replacement 
    # @return [ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo]
    def com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl(opts = {})
      data, _status_code, _headers = com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :htmllibmanager_timing 
    # @option opts [String] :htmllibmanager_debug_init_js 
    # @option opts [Boolean] :htmllibmanager_minify 
    # @option opts [Boolean] :htmllibmanager_debug 
    # @option opts [Boolean] :htmllibmanager_gzip 
    # @option opts [Integer] :htmllibmanager_max_data_uri_size 
    # @option opts [Integer] :htmllibmanager_maxage 
    # @option opts [Boolean] :htmllibmanager_force_cq_url_info 
    # @option opts [String] :htmllibmanager_defaultthemename 
    # @option opts [String] :htmllibmanager_defaultuserthemename 
    # @option opts [String] :htmllibmanager_clientmanager 
    # @option opts [Array<String>] :htmllibmanager_path_list 
    # @option opts [Array<String>] :htmllibmanager_excluded_path_list 
    # @option opts [Array<String>] :htmllibmanager_processor_js 
    # @option opts [Array<String>] :htmllibmanager_processor_css 
    # @option opts [Array<String>] :htmllibmanager_longcache_patterns 
    # @option opts [String] :htmllibmanager_longcache_format 
    # @option opts [Boolean] :htmllibmanager_use_file_system_output_cache 
    # @option opts [String] :htmllibmanager_file_system_output_cache_location 
    # @option opts [Array<String>] :htmllibmanager_disable_replacement 
    # @return [Array<(ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo, Integer, Hash)>] ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo data, response status code and response headers
    def com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'htmllibmanager.timing'] = opts[:'htmllibmanager_timing'] if !opts[:'htmllibmanager_timing'].nil?
      query_params[:'htmllibmanager.debug.init.js'] = opts[:'htmllibmanager_debug_init_js'] if !opts[:'htmllibmanager_debug_init_js'].nil?
      query_params[:'htmllibmanager.minify'] = opts[:'htmllibmanager_minify'] if !opts[:'htmllibmanager_minify'].nil?
      query_params[:'htmllibmanager.debug'] = opts[:'htmllibmanager_debug'] if !opts[:'htmllibmanager_debug'].nil?
      query_params[:'htmllibmanager.gzip'] = opts[:'htmllibmanager_gzip'] if !opts[:'htmllibmanager_gzip'].nil?
      query_params[:'htmllibmanager.maxDataUriSize'] = opts[:'htmllibmanager_max_data_uri_size'] if !opts[:'htmllibmanager_max_data_uri_size'].nil?
      query_params[:'htmllibmanager.maxage'] = opts[:'htmllibmanager_maxage'] if !opts[:'htmllibmanager_maxage'].nil?
      query_params[:'htmllibmanager.forceCQUrlInfo'] = opts[:'htmllibmanager_force_cq_url_info'] if !opts[:'htmllibmanager_force_cq_url_info'].nil?
      query_params[:'htmllibmanager.defaultthemename'] = opts[:'htmllibmanager_defaultthemename'] if !opts[:'htmllibmanager_defaultthemename'].nil?
      query_params[:'htmllibmanager.defaultuserthemename'] = opts[:'htmllibmanager_defaultuserthemename'] if !opts[:'htmllibmanager_defaultuserthemename'].nil?
      query_params[:'htmllibmanager.clientmanager'] = opts[:'htmllibmanager_clientmanager'] if !opts[:'htmllibmanager_clientmanager'].nil?
      query_params[:'htmllibmanager.path.list'] = @api_client.build_collection_param(opts[:'htmllibmanager_path_list'], :multi) if !opts[:'htmllibmanager_path_list'].nil?
      query_params[:'htmllibmanager.excluded.path.list'] = @api_client.build_collection_param(opts[:'htmllibmanager_excluded_path_list'], :multi) if !opts[:'htmllibmanager_excluded_path_list'].nil?
      query_params[:'htmllibmanager.processor.js'] = @api_client.build_collection_param(opts[:'htmllibmanager_processor_js'], :multi) if !opts[:'htmllibmanager_processor_js'].nil?
      query_params[:'htmllibmanager.processor.css'] = @api_client.build_collection_param(opts[:'htmllibmanager_processor_css'], :multi) if !opts[:'htmllibmanager_processor_css'].nil?
      query_params[:'htmllibmanager.longcache.patterns'] = @api_client.build_collection_param(opts[:'htmllibmanager_longcache_patterns'], :multi) if !opts[:'htmllibmanager_longcache_patterns'].nil?
      query_params[:'htmllibmanager.longcache.format'] = opts[:'htmllibmanager_longcache_format'] if !opts[:'htmllibmanager_longcache_format'].nil?
      query_params[:'htmllibmanager.useFileSystemOutputCache'] = opts[:'htmllibmanager_use_file_system_output_cache'] if !opts[:'htmllibmanager_use_file_system_output_cache'].nil?
      query_params[:'htmllibmanager.fileSystemOutputCacheLocation'] = opts[:'htmllibmanager_file_system_output_cache_location'] if !opts[:'htmllibmanager_file_system_output_cache_location'].nil?
      query_params[:'htmllibmanager.disable.replacement'] = @api_client.build_collection_param(opts[:'htmllibmanager_disable_replacement'], :multi) if !opts[:'htmllibmanager_disable_replacement'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_ui_clientlibs_impl_html_library_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo]
    def com_adobe_granite_workflow_console_frags_workflow_withdraw_feature(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_console_frags_workflow_withdraw_feature_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [Array<(ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo, Integer, Hash)>] ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo data, response status code and response headers
    def com_adobe_granite_workflow_console_frags_workflow_withdraw_feature_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_console_frags_workflow_withdraw_feature ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_console_frags_workflow_withdraw_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_console_frags_workflow_withdraw_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :granite_workflow_workflow_publish_event_service_enabled 
    # @return [ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo]
    def com_adobe_granite_workflow_console_publish_workflow_publish_event_service(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_console_publish_workflow_publish_event_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :granite_workflow_workflow_publish_event_service_enabled 
    # @return [Array<(ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo, Integer, Hash)>] ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo data, response status code and response headers
    def com_adobe_granite_workflow_console_publish_workflow_publish_event_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_console_publish_workflow_publish_event_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'granite.workflow.WorkflowPublishEventService.enabled'] = opts[:'granite_workflow_workflow_publish_event_service_enabled'] if !opts[:'granite_workflow_workflow_publish_event_service_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_console_publish_workflow_publish_event_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_console_publish_workflow_publish_event_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :bucket_size 
    # @return [ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo]
    def com_adobe_granite_workflow_core_jcr_workflow_bucket_manager(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_core_jcr_workflow_bucket_manager_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :bucket_size 
    # @return [Array<(ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo, Integer, Hash)>] ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo data, response status code and response headers
    def com_adobe_granite_workflow_core_jcr_workflow_bucket_manager_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_core_jcr_workflow_bucket_manager ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'bucketSize'] = opts[:'bucket_size'] if !opts[:'bucket_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_core_jcr_workflow_bucket_manager",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_core_jcr_workflow_bucket_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :default_timeout 
    # @option opts [Integer] :max_timeout 
    # @option opts [Integer] :default_period 
    # @return [ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo]
    def com_adobe_granite_workflow_core_job_external_process_job_handler(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_core_job_external_process_job_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :default_timeout 
    # @option opts [Integer] :max_timeout 
    # @option opts [Integer] :default_period 
    # @return [Array<(ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo, Integer, Hash)>] ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo data, response status code and response headers
    def com_adobe_granite_workflow_core_job_external_process_job_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_core_job_external_process_job_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'default.timeout'] = opts[:'default_timeout'] if !opts[:'default_timeout'].nil?
      query_params[:'max.timeout'] = opts[:'max_timeout'] if !opts[:'max_timeout'].nil?
      query_params[:'default.period'] = opts[:'default_period'] if !opts[:'default_period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_core_job_external_process_job_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_core_job_external_process_job_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :job_topics 
    # @option opts [Boolean] :allow_self_process_termination 
    # @return [ComAdobeGraniteWorkflowCoreJobJobHandlerInfo]
    def com_adobe_granite_workflow_core_job_job_handler(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_core_job_job_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :job_topics 
    # @option opts [Boolean] :allow_self_process_termination 
    # @return [Array<(ComAdobeGraniteWorkflowCoreJobJobHandlerInfo, Integer, Hash)>] ComAdobeGraniteWorkflowCoreJobJobHandlerInfo data, response status code and response headers
    def com_adobe_granite_workflow_core_job_job_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_core_job_job_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'job.topics'] = @api_client.build_collection_param(opts[:'job_topics'], :multi) if !opts[:'job_topics'].nil?
      query_params[:'allow.self.process.termination'] = opts[:'allow_self_process_termination'] if !opts[:'allow_self_process_termination'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowCoreJobJobHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_core_job_job_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_core_job_job_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :job_topics 
    # @return [ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo]
    def com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :job_topics 
    # @return [Array<(ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo, Integer, Hash)>] ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo data, response status code and response headers
    def com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'job.topics'] = opts[:'job_topics'] if !opts[:'job_topics'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_core_offloading_workflow_offloading_job_consum\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :get_system_workflow_models 
    # @option opts [String] :get_package_root_path 
    # @return [ComAdobeGraniteWorkflowCorePayloadMapCacheInfo]
    def com_adobe_granite_workflow_core_payload_map_cache(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_core_payload_map_cache_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :get_system_workflow_models 
    # @option opts [String] :get_package_root_path 
    # @return [Array<(ComAdobeGraniteWorkflowCorePayloadMapCacheInfo, Integer, Hash)>] ComAdobeGraniteWorkflowCorePayloadMapCacheInfo data, response status code and response headers
    def com_adobe_granite_workflow_core_payload_map_cache_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_core_payload_map_cache ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'getSystemWorkflowModels'] = @api_client.build_collection_param(opts[:'get_system_workflow_models'], :multi) if !opts[:'get_system_workflow_models'].nil?
      query_params[:'getPackageRootPath'] = opts[:'get_package_root_path'] if !opts[:'get_package_root_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowCorePayloadMapCacheInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_core_payload_map_cache",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_core_payload_map_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :payload_move_white_list 
    # @option opts [Boolean] :payload_move_handle_from_workflow_process 
    # @return [ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo]
    def com_adobe_granite_workflow_core_payloadmap_payload_move_listener(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_core_payloadmap_payload_move_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :payload_move_white_list 
    # @option opts [Boolean] :payload_move_handle_from_workflow_process 
    # @return [Array<(ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo, Integer, Hash)>] ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo data, response status code and response headers
    def com_adobe_granite_workflow_core_payloadmap_payload_move_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_core_payloadmap_payload_move_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'payload.move.white.list'] = @api_client.build_collection_param(opts[:'payload_move_white_list'], :multi) if !opts[:'payload_move_white_list'].nil?
      query_params[:'payload.move.handle.from.workflow.process'] = opts[:'payload_move_handle_from_workflow_process'] if !opts[:'payload_move_handle_from_workflow_process'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_core_payloadmap_payload_move_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_core_payloadmap_payload_move_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_workflow_config_workflow_packages_root_path 
    # @option opts [Boolean] :cq_workflow_config_workflow_process_legacy_mode 
    # @option opts [Boolean] :cq_workflow_config_allow_locking 
    # @return [ComAdobeGraniteWorkflowCoreWorkflowConfigInfo]
    def com_adobe_granite_workflow_core_workflow_config(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_core_workflow_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_workflow_config_workflow_packages_root_path 
    # @option opts [Boolean] :cq_workflow_config_workflow_process_legacy_mode 
    # @option opts [Boolean] :cq_workflow_config_allow_locking 
    # @return [Array<(ComAdobeGraniteWorkflowCoreWorkflowConfigInfo, Integer, Hash)>] ComAdobeGraniteWorkflowCoreWorkflowConfigInfo data, response status code and response headers
    def com_adobe_granite_workflow_core_workflow_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_core_workflow_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.workflow.config.workflow.packages.root.path'] = @api_client.build_collection_param(opts[:'cq_workflow_config_workflow_packages_root_path'], :multi) if !opts[:'cq_workflow_config_workflow_packages_root_path'].nil?
      query_params[:'cq.workflow.config.workflow.process.legacy.mode'] = opts[:'cq_workflow_config_workflow_process_legacy_mode'] if !opts[:'cq_workflow_config_workflow_process_legacy_mode'].nil?
      query_params[:'cq.workflow.config.allow.locking'] = opts[:'cq_workflow_config_allow_locking'] if !opts[:'cq_workflow_config_allow_locking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowCoreWorkflowConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_core_workflow_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_core_workflow_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :granite_workflowinbox_sort_property_name 
    # @option opts [String] :granite_workflowinbox_sort_order 
    # @option opts [Integer] :cq_workflow_job_retry 
    # @option opts [Array<String>] :cq_workflow_superuser 
    # @option opts [Integer] :granite_workflow_inbox_query_size 
    # @option opts [Boolean] :granite_workflow_admin_user_group_filter 
    # @option opts [Boolean] :granite_workflow_enforce_workitem_assignee_permissions 
    # @option opts [Boolean] :granite_workflow_enforce_workflow_initiator_permissions 
    # @option opts [Boolean] :granite_workflow_inject_tenant_id_in_job_topics 
    # @option opts [Integer] :granite_workflow_max_purge_save_threshold 
    # @option opts [Integer] :granite_workflow_max_purge_query_count 
    # @return [ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo]
    def com_adobe_granite_workflow_core_workflow_session_factory(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_core_workflow_session_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :granite_workflowinbox_sort_property_name 
    # @option opts [String] :granite_workflowinbox_sort_order 
    # @option opts [Integer] :cq_workflow_job_retry 
    # @option opts [Array<String>] :cq_workflow_superuser 
    # @option opts [Integer] :granite_workflow_inbox_query_size 
    # @option opts [Boolean] :granite_workflow_admin_user_group_filter 
    # @option opts [Boolean] :granite_workflow_enforce_workitem_assignee_permissions 
    # @option opts [Boolean] :granite_workflow_enforce_workflow_initiator_permissions 
    # @option opts [Boolean] :granite_workflow_inject_tenant_id_in_job_topics 
    # @option opts [Integer] :granite_workflow_max_purge_save_threshold 
    # @option opts [Integer] :granite_workflow_max_purge_query_count 
    # @return [Array<(ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo, Integer, Hash)>] ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo data, response status code and response headers
    def com_adobe_granite_workflow_core_workflow_session_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_core_workflow_session_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'granite.workflowinbox.sort.propertyName'] = opts[:'granite_workflowinbox_sort_property_name'] if !opts[:'granite_workflowinbox_sort_property_name'].nil?
      query_params[:'granite.workflowinbox.sort.order'] = opts[:'granite_workflowinbox_sort_order'] if !opts[:'granite_workflowinbox_sort_order'].nil?
      query_params[:'cq.workflow.job.retry'] = opts[:'cq_workflow_job_retry'] if !opts[:'cq_workflow_job_retry'].nil?
      query_params[:'cq.workflow.superuser'] = @api_client.build_collection_param(opts[:'cq_workflow_superuser'], :multi) if !opts[:'cq_workflow_superuser'].nil?
      query_params[:'granite.workflow.inboxQuerySize'] = opts[:'granite_workflow_inbox_query_size'] if !opts[:'granite_workflow_inbox_query_size'].nil?
      query_params[:'granite.workflow.adminUserGroupFilter'] = opts[:'granite_workflow_admin_user_group_filter'] if !opts[:'granite_workflow_admin_user_group_filter'].nil?
      query_params[:'granite.workflow.enforceWorkitemAssigneePermissions'] = opts[:'granite_workflow_enforce_workitem_assignee_permissions'] if !opts[:'granite_workflow_enforce_workitem_assignee_permissions'].nil?
      query_params[:'granite.workflow.enforceWorkflowInitiatorPermissions'] = opts[:'granite_workflow_enforce_workflow_initiator_permissions'] if !opts[:'granite_workflow_enforce_workflow_initiator_permissions'].nil?
      query_params[:'granite.workflow.injectTenantIdInJobTopics'] = opts[:'granite_workflow_inject_tenant_id_in_job_topics'] if !opts[:'granite_workflow_inject_tenant_id_in_job_topics'].nil?
      query_params[:'granite.workflow.maxPurgeSaveThreshold'] = opts[:'granite_workflow_max_purge_save_threshold'] if !opts[:'granite_workflow_max_purge_save_threshold'].nil?
      query_params[:'granite.workflow.maxPurgeQueryCount'] = opts[:'granite_workflow_max_purge_query_count'] if !opts[:'granite_workflow_max_purge_query_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_core_workflow_session_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_core_workflow_session_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduledpurge_name 
    # @option opts [String] :scheduledpurge_workflow_status 
    # @option opts [Array<String>] :scheduledpurge_model_ids 
    # @option opts [Integer] :scheduledpurge_daysold 
    # @return [ComAdobeGraniteWorkflowPurgeSchedulerInfo]
    def com_adobe_granite_workflow_purge_scheduler(opts = {})
      data, _status_code, _headers = com_adobe_granite_workflow_purge_scheduler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduledpurge_name 
    # @option opts [String] :scheduledpurge_workflow_status 
    # @option opts [Array<String>] :scheduledpurge_model_ids 
    # @option opts [Integer] :scheduledpurge_daysold 
    # @return [Array<(ComAdobeGraniteWorkflowPurgeSchedulerInfo, Integer, Hash)>] ComAdobeGraniteWorkflowPurgeSchedulerInfo data, response status code and response headers
    def com_adobe_granite_workflow_purge_scheduler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_granite_workflow_purge_scheduler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduledpurge.name'] = opts[:'scheduledpurge_name'] if !opts[:'scheduledpurge_name'].nil?
      query_params[:'scheduledpurge.workflowStatus'] = opts[:'scheduledpurge_workflow_status'] if !opts[:'scheduledpurge_workflow_status'].nil?
      query_params[:'scheduledpurge.modelIds'] = @api_client.build_collection_param(opts[:'scheduledpurge_model_ids'], :multi) if !opts[:'scheduledpurge_model_ids'].nil?
      query_params[:'scheduledpurge.daysold'] = opts[:'scheduledpurge_daysold'] if !opts[:'scheduledpurge_daysold'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeGraniteWorkflowPurgeSchedulerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_granite_workflow_purge_scheduler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_granite_workflow_purge_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_connections 
    # @option opts [Integer] :max_requests 
    # @option opts [Integer] :request_timeout 
    # @option opts [Integer] :request_retries 
    # @option opts [Integer] :launch_timeout 
    # @return [ComAdobeOctopusNcommBootstrapInfo]
    def com_adobe_octopus_ncomm_bootstrap(opts = {})
      data, _status_code, _headers = com_adobe_octopus_ncomm_bootstrap_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_connections 
    # @option opts [Integer] :max_requests 
    # @option opts [Integer] :request_timeout 
    # @option opts [Integer] :request_retries 
    # @option opts [Integer] :launch_timeout 
    # @return [Array<(ComAdobeOctopusNcommBootstrapInfo, Integer, Hash)>] ComAdobeOctopusNcommBootstrapInfo data, response status code and response headers
    def com_adobe_octopus_ncomm_bootstrap_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_octopus_ncomm_bootstrap ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'maxConnections'] = opts[:'max_connections'] if !opts[:'max_connections'].nil?
      query_params[:'maxRequests'] = opts[:'max_requests'] if !opts[:'max_requests'].nil?
      query_params[:'requestTimeout'] = opts[:'request_timeout'] if !opts[:'request_timeout'].nil?
      query_params[:'requestRetries'] = opts[:'request_retries'] if !opts[:'request_retries'].nil?
      query_params[:'launchTimeout'] = opts[:'launch_timeout'] if !opts[:'launch_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeOctopusNcommBootstrapInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_octopus_ncomm_bootstrap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_octopus_ncomm_bootstrap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :communities_integration_livefyre_sling_event_filter 
    # @return [ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo]
    def com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s(opts = {})
      data, _status_code, _headers = com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :communities_integration_livefyre_sling_event_filter 
    # @return [Array<(ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo, Integer, Hash)>] ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo data, response status code and response headers
    def com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'communities.integration.livefyre.sling.event.filter'] = opts[:'communities_integration_livefyre_sling_event_filter'] if !opts[:'communities_integration_livefyre_sling_event_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_social_integrations_livefyre_user_pingforpull_impl_ping_pull_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :max_connections 
    # @option opts [String] :max_requests 
    # @option opts [String] :request_timeout 
    # @option opts [String] :log_dir 
    # @return [ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo]
    def com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm(opts = {})
      data, _status_code, _headers = com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :max_connections 
    # @option opts [String] :max_requests 
    # @option opts [String] :request_timeout 
    # @option opts [String] :log_dir 
    # @return [Array<(ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo, Integer, Hash)>] ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo data, response status code and response headers
    def com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'maxConnections'] = opts[:'max_connections'] if !opts[:'max_connections'].nil?
      query_params[:'maxRequests'] = opts[:'max_requests'] if !opts[:'max_requests'].nil?
      query_params[:'requestTimeout'] = opts[:'request_timeout'] if !opts[:'request_timeout'].nil?
      query_params[:'logDir'] = opts[:'log_dir'] if !opts[:'log_dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_adobe_xmp_worker_files_ncomm_xmp_files_n_comm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jdbc_driver_class 
    # @option opts [String] :jdbc_connection_uri 
    # @option opts [String] :jdbc_username 
    # @option opts [String] :jdbc_password 
    # @option opts [String] :jdbc_validation_query 
    # @option opts [Boolean] :default_readonly 
    # @option opts [Boolean] :default_autocommit 
    # @option opts [Integer] :pool_size 
    # @option opts [Integer] :pool_max_wait_msec 
    # @option opts [String] :datasource_name 
    # @option opts [Array<String>] :datasource_svc_properties 
    # @return [ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo]
    def com_day_commons_datasource_jdbcpool_jdbc_pool_service(opts = {})
      data, _status_code, _headers = com_day_commons_datasource_jdbcpool_jdbc_pool_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jdbc_driver_class 
    # @option opts [String] :jdbc_connection_uri 
    # @option opts [String] :jdbc_username 
    # @option opts [String] :jdbc_password 
    # @option opts [String] :jdbc_validation_query 
    # @option opts [Boolean] :default_readonly 
    # @option opts [Boolean] :default_autocommit 
    # @option opts [Integer] :pool_size 
    # @option opts [Integer] :pool_max_wait_msec 
    # @option opts [String] :datasource_name 
    # @option opts [Array<String>] :datasource_svc_properties 
    # @return [Array<(ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo, Integer, Hash)>] ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo data, response status code and response headers
    def com_day_commons_datasource_jdbcpool_jdbc_pool_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_commons_datasource_jdbcpool_jdbc_pool_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'jdbc.driver.class'] = opts[:'jdbc_driver_class'] if !opts[:'jdbc_driver_class'].nil?
      query_params[:'jdbc.connection.uri'] = opts[:'jdbc_connection_uri'] if !opts[:'jdbc_connection_uri'].nil?
      query_params[:'jdbc.username'] = opts[:'jdbc_username'] if !opts[:'jdbc_username'].nil?
      query_params[:'jdbc.password'] = opts[:'jdbc_password'] if !opts[:'jdbc_password'].nil?
      query_params[:'jdbc.validation.query'] = opts[:'jdbc_validation_query'] if !opts[:'jdbc_validation_query'].nil?
      query_params[:'default.readonly'] = opts[:'default_readonly'] if !opts[:'default_readonly'].nil?
      query_params[:'default.autocommit'] = opts[:'default_autocommit'] if !opts[:'default_autocommit'].nil?
      query_params[:'pool.size'] = opts[:'pool_size'] if !opts[:'pool_size'].nil?
      query_params[:'pool.max.wait.msec'] = opts[:'pool_max_wait_msec'] if !opts[:'pool_max_wait_msec'].nil?
      query_params[:'datasource.name'] = opts[:'datasource_name'] if !opts[:'datasource_name'].nil?
      query_params[:'datasource.svc.properties'] = @api_client.build_collection_param(opts[:'datasource_svc_properties'], :multi) if !opts[:'datasource_svc_properties'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_commons_datasource_jdbcpool_jdbc_pool_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_commons_datasource_jdbcpool_jdbc_pool_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :proxy_enabled 
    # @option opts [String] :proxy_host 
    # @option opts [String] :proxy_user 
    # @option opts [String] :proxy_password 
    # @option opts [String] :proxy_ntlm_host 
    # @option opts [String] :proxy_ntlm_domain 
    # @option opts [Array<String>] :proxy_exceptions 
    # @return [ComDayCommonsHttpclientInfo]
    def com_day_commons_httpclient(opts = {})
      data, _status_code, _headers = com_day_commons_httpclient_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :proxy_enabled 
    # @option opts [String] :proxy_host 
    # @option opts [String] :proxy_user 
    # @option opts [String] :proxy_password 
    # @option opts [String] :proxy_ntlm_host 
    # @option opts [String] :proxy_ntlm_domain 
    # @option opts [Array<String>] :proxy_exceptions 
    # @return [Array<(ComDayCommonsHttpclientInfo, Integer, Hash)>] ComDayCommonsHttpclientInfo data, response status code and response headers
    def com_day_commons_httpclient_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_commons_httpclient ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.commons.httpclient'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'proxy.enabled'] = opts[:'proxy_enabled'] if !opts[:'proxy_enabled'].nil?
      query_params[:'proxy.host'] = opts[:'proxy_host'] if !opts[:'proxy_host'].nil?
      query_params[:'proxy.user'] = opts[:'proxy_user'] if !opts[:'proxy_user'].nil?
      query_params[:'proxy.password'] = opts[:'proxy_password'] if !opts[:'proxy_password'].nil?
      query_params[:'proxy.ntlm.host'] = opts[:'proxy_ntlm_host'] if !opts[:'proxy_ntlm_host'].nil?
      query_params[:'proxy.ntlm.domain'] = opts[:'proxy_ntlm_domain'] if !opts[:'proxy_ntlm_domain'].nil?
      query_params[:'proxy.exceptions'] = @api_client.build_collection_param(opts[:'proxy_exceptions'], :multi) if !opts[:'proxy_exceptions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCommonsHttpclientInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_commons_httpclient",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_commons_httpclient\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_store_listener_additional_store_paths 
    # @return [ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo]
    def com_day_cq_analytics_impl_store_properties_change_listener(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_impl_store_properties_change_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_store_listener_additional_store_paths 
    # @return [Array<(ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo, Integer, Hash)>] ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo data, response status code and response headers
    def com_day_cq_analytics_impl_store_properties_change_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_impl_store_properties_change_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.store.listener.additionalStorePaths'] = @api_client.build_collection_param(opts[:'cq_store_listener_additional_store_paths'], :multi) if !opts[:'cq_store_listener_additional_store_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_impl_store_properties_change_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_impl_store_properties_change_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :allowed_paths 
    # @option opts [Integer] :cq_analytics_saint_exporter_pagesize 
    # @return [ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo]
    def com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :allowed_paths 
    # @option opts [Integer] :cq_analytics_saint_exporter_pagesize 
    # @return [Array<(ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo, Integer, Hash)>] ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo data, response status code and response headers
    def com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'allowed.paths'] = @api_client.build_collection_param(opts[:'allowed_paths'], :multi) if !opts[:'allowed_paths'].nil?
      query_params[:'cq.analytics.saint.exporter.pagesize'] = opts[:'cq_analytics_saint_exporter_pagesize'] if !opts[:'cq_analytics_saint_exporter_pagesize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_sitecatalyst_impl_exporter_classifications_exporte\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :report_fetch_attempts 
    # @option opts [Integer] :report_fetch_delay 
    # @return [ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo]
    def com_day_cq_analytics_sitecatalyst_impl_importer_report_importer(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_sitecatalyst_impl_importer_report_importer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :report_fetch_attempts 
    # @option opts [Integer] :report_fetch_delay 
    # @return [Array<(ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo, Integer, Hash)>] ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo data, response status code and response headers
    def com_day_cq_analytics_sitecatalyst_impl_importer_report_importer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_sitecatalyst_impl_importer_report_importer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'report.fetch.attempts'] = opts[:'report_fetch_attempts'] if !opts[:'report_fetch_attempts'].nil?
      query_params[:'report.fetch.delay'] = opts[:'report_fetch_delay'] if !opts[:'report_fetch_delay'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_sitecatalyst_impl_importer_report_importer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_sitecatalyst_impl_importer_report_importer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_analytics_adapterfactory_contextstores 
    # @return [ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo]
    def com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_analytics_adapterfactory_contextstores 
    # @return [Array<(ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo, Integer, Hash)>] ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo data, response status code and response headers
    def com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.analytics.adapterfactory.contextstores'] = @api_client.build_collection_param(opts[:'cq_analytics_adapterfactory_contextstores'], :multi) if !opts[:'cq_analytics_adapterfactory_contextstores'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_adapter_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_analytics_sitecatalyst_service_datacenter_url 
    # @option opts [Array<String>] :devhostnamepatterns 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo]
    def com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_analytics_sitecatalyst_service_datacenter_url 
    # @option opts [Array<String>] :devhostnamepatterns 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [Array<(ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo, Integer, Hash)>] ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo data, response status code and response headers
    def com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.analytics.sitecatalyst.service.datacenter.url'] = @api_client.build_collection_param(opts[:'cq_analytics_sitecatalyst_service_datacenter_url'], :multi) if !opts[:'cq_analytics_sitecatalyst_service_datacenter_url'].nil?
      query_params[:'devhostnamepatterns'] = @api_client.build_collection_param(opts[:'devhostnamepatterns'], :multi) if !opts[:'devhostnamepatterns'].nil?
      query_params[:'connection.timeout'] = opts[:'connection_timeout'] if !opts[:'connection_timeout'].nil?
      query_params[:'socket.timeout'] = opts[:'socket_timeout'] if !opts[:'socket_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_sitecatalyst_impl_sitecatalyst_http_client_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_analytics_testandtarget_accountoptionsupdater_enabled 
    # @return [ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo]
    def com_day_cq_analytics_testandtarget_impl_account_options_updater(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_testandtarget_impl_account_options_updater_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_analytics_testandtarget_accountoptionsupdater_enabled 
    # @return [Array<(ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo, Integer, Hash)>] ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo data, response status code and response headers
    def com_day_cq_analytics_testandtarget_impl_account_options_updater_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_account_options_updater ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.analytics.testandtarget.accountoptionsupdater.enabled'] = opts[:'cq_analytics_testandtarget_accountoptionsupdater_enabled'] if !opts[:'cq_analytics_testandtarget_accountoptionsupdater_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_account_options_updater",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_testandtarget_impl_account_options_updater\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_analytics_testandtarget_deleteauthoractivitylistener_enabled 
    # @return [ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo]
    def com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_analytics_testandtarget_deleteauthoractivitylistener_enabled 
    # @return [Array<(ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo, Integer, Hash)>] ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo data, response status code and response headers
    def com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.analytics.testandtarget.deleteauthoractivitylistener.enabled'] = opts[:'cq_analytics_testandtarget_deleteauthoractivitylistener_enabled'] if !opts[:'cq_analytics_testandtarget_deleteauthoractivitylistener_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_testandtarget_impl_delete_author_activity_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled 
    # @return [ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo]
    def com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled 
    # @return [Array<(ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo, Integer, Hash)>] ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo data, response status code and response headers
    def com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled'] = opts[:'cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled'] if !opts[:'cq_analytics_testandtarget_pushauthorcampaignpagelistener_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_testandtarget_impl_push_author_campaign_page_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_analytics_testandtarget_segmentimporter_enabled 
    # @return [ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo]
    def com_day_cq_analytics_testandtarget_impl_segment_importer(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_testandtarget_impl_segment_importer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_analytics_testandtarget_segmentimporter_enabled 
    # @return [Array<(ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo, Integer, Hash)>] ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo data, response status code and response headers
    def com_day_cq_analytics_testandtarget_impl_segment_importer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_segment_importer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.analytics.testandtarget.segmentimporter.enabled'] = opts[:'cq_analytics_testandtarget_segmentimporter_enabled'] if !opts[:'cq_analytics_testandtarget_segmentimporter_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_segment_importer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_testandtarget_impl_segment_importer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :endpoint_uri 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo]
    def com_day_cq_analytics_testandtarget_impl_service_web_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_testandtarget_impl_service_web_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :endpoint_uri 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [Array<(ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo, Integer, Hash)>] ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo data, response status code and response headers
    def com_day_cq_analytics_testandtarget_impl_service_web_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_service_web_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'endpointUri'] = opts[:'endpoint_uri'] if !opts[:'endpoint_uri'].nil?
      query_params[:'connectionTimeout'] = opts[:'connection_timeout'] if !opts[:'connection_timeout'].nil?
      query_params[:'socketTimeout'] = opts[:'socket_timeout'] if !opts[:'socket_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_service_web_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_testandtarget_impl_service_web_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :testandtarget_endpoint_url 
    # @return [ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo]
    def com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :testandtarget_endpoint_url 
    # @return [Array<(ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo, Integer, Hash)>] ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo data, response status code and response headers
    def com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'testandtarget.endpoint.url'] = opts[:'testandtarget_endpoint_url'] if !opts[:'testandtarget_endpoint_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_testandtarget_impl_servlets_admin_server_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_analytics_testandtarget_api_url 
    # @option opts [Integer] :cq_analytics_testandtarget_timeout 
    # @option opts [Integer] :cq_analytics_testandtarget_sockettimeout 
    # @option opts [String] :cq_analytics_testandtarget_recommendations_url_replace 
    # @option opts [String] :cq_analytics_testandtarget_recommendations_url_replacewith 
    # @return [ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo]
    def com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl(opts = {})
      data, _status_code, _headers = com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_analytics_testandtarget_api_url 
    # @option opts [Integer] :cq_analytics_testandtarget_timeout 
    # @option opts [Integer] :cq_analytics_testandtarget_sockettimeout 
    # @option opts [String] :cq_analytics_testandtarget_recommendations_url_replace 
    # @option opts [String] :cq_analytics_testandtarget_recommendations_url_replacewith 
    # @return [Array<(ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo, Integer, Hash)>] ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo data, response status code and response headers
    def com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.analytics.testandtarget.api.url'] = opts[:'cq_analytics_testandtarget_api_url'] if !opts[:'cq_analytics_testandtarget_api_url'].nil?
      query_params[:'cq.analytics.testandtarget.timeout'] = opts[:'cq_analytics_testandtarget_timeout'] if !opts[:'cq_analytics_testandtarget_timeout'].nil?
      query_params[:'cq.analytics.testandtarget.sockettimeout'] = opts[:'cq_analytics_testandtarget_sockettimeout'] if !opts[:'cq_analytics_testandtarget_sockettimeout'].nil?
      query_params[:'cq.analytics.testandtarget.recommendations.url.replace'] = opts[:'cq_analytics_testandtarget_recommendations_url_replace'] if !opts[:'cq_analytics_testandtarget_recommendations_url_replace'].nil?
      query_params[:'cq.analytics.testandtarget.recommendations.url.replacewith'] = opts[:'cq_analytics_testandtarget_recommendations_url_replacewith'] if !opts[:'cq_analytics_testandtarget_recommendations_url_replacewith'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_analytics_testandtarget_impl_testandtarget_http_client_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cug_exempted_principals 
    # @option opts [Boolean] :cug_enabled 
    # @option opts [String] :cug_principals_regex 
    # @option opts [String] :cug_principals_replacement 
    # @return [ComDayCqAuthImplCugCugSupportImplInfo]
    def com_day_cq_auth_impl_cug_cug_support_impl(opts = {})
      data, _status_code, _headers = com_day_cq_auth_impl_cug_cug_support_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cug_exempted_principals 
    # @option opts [Boolean] :cug_enabled 
    # @option opts [String] :cug_principals_regex 
    # @option opts [String] :cug_principals_replacement 
    # @return [Array<(ComDayCqAuthImplCugCugSupportImplInfo, Integer, Hash)>] ComDayCqAuthImplCugCugSupportImplInfo data, response status code and response headers
    def com_day_cq_auth_impl_cug_cug_support_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_auth_impl_cug_cug_support_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cug.exempted.principals'] = @api_client.build_collection_param(opts[:'cug_exempted_principals'], :multi) if !opts[:'cug_exempted_principals'].nil?
      query_params[:'cug.enabled'] = opts[:'cug_enabled'] if !opts[:'cug_enabled'].nil?
      query_params[:'cug.principals.regex'] = opts[:'cug_principals_regex'] if !opts[:'cug_principals_regex'].nil?
      query_params[:'cug.principals.replacement'] = opts[:'cug_principals_replacement'] if !opts[:'cug_principals_replacement'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAuthImplCugCugSupportImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_auth_impl_cug_cug_support_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_auth_impl_cug_cug_support_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Integer] :service_ranking 
    # @option opts [Array<String>] :auth_loginselector_mappings 
    # @option opts [Array<String>] :auth_loginselector_changepw_mappings 
    # @option opts [String] :auth_loginselector_defaultloginpage 
    # @option opts [String] :auth_loginselector_defaultchangepwpage 
    # @option opts [Array<String>] :auth_loginselector_handle 
    # @option opts [Boolean] :auth_loginselector_handle_all_extensions 
    # @return [ComDayCqAuthImplLoginSelectorHandlerInfo]
    def com_day_cq_auth_impl_login_selector_handler(opts = {})
      data, _status_code, _headers = com_day_cq_auth_impl_login_selector_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Integer] :service_ranking 
    # @option opts [Array<String>] :auth_loginselector_mappings 
    # @option opts [Array<String>] :auth_loginselector_changepw_mappings 
    # @option opts [String] :auth_loginselector_defaultloginpage 
    # @option opts [String] :auth_loginselector_defaultchangepwpage 
    # @option opts [Array<String>] :auth_loginselector_handle 
    # @option opts [Boolean] :auth_loginselector_handle_all_extensions 
    # @return [Array<(ComDayCqAuthImplLoginSelectorHandlerInfo, Integer, Hash)>] ComDayCqAuthImplLoginSelectorHandlerInfo data, response status code and response headers
    def com_day_cq_auth_impl_login_selector_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_auth_impl_login_selector_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'auth.loginselector.mappings'] = @api_client.build_collection_param(opts[:'auth_loginselector_mappings'], :multi) if !opts[:'auth_loginselector_mappings'].nil?
      query_params[:'auth.loginselector.changepw.mappings'] = @api_client.build_collection_param(opts[:'auth_loginselector_changepw_mappings'], :multi) if !opts[:'auth_loginselector_changepw_mappings'].nil?
      query_params[:'auth.loginselector.defaultloginpage'] = opts[:'auth_loginselector_defaultloginpage'] if !opts[:'auth_loginselector_defaultloginpage'].nil?
      query_params[:'auth.loginselector.defaultchangepwpage'] = opts[:'auth_loginselector_defaultchangepwpage'] if !opts[:'auth_loginselector_defaultchangepwpage'].nil?
      query_params[:'auth.loginselector.handle'] = @api_client.build_collection_param(opts[:'auth_loginselector_handle'], :multi) if !opts[:'auth_loginselector_handle'].nil?
      query_params[:'auth.loginselector.handle.all.extensions'] = opts[:'auth_loginselector_handle_all_extensions'] if !opts[:'auth_loginselector_handle_all_extensions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqAuthImplLoginSelectorHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_auth_impl_login_selector_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_auth_impl_login_selector_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :externalizer_domains 
    # @option opts [String] :externalizer_host 
    # @option opts [String] :externalizer_contextpath 
    # @option opts [Boolean] :externalizer_encodedpath 
    # @return [ComDayCqCommonsImplExternalizerImplInfo]
    def com_day_cq_commons_impl_externalizer_impl(opts = {})
      data, _status_code, _headers = com_day_cq_commons_impl_externalizer_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :externalizer_domains 
    # @option opts [String] :externalizer_host 
    # @option opts [String] :externalizer_contextpath 
    # @option opts [Boolean] :externalizer_encodedpath 
    # @return [Array<(ComDayCqCommonsImplExternalizerImplInfo, Integer, Hash)>] ComDayCqCommonsImplExternalizerImplInfo data, response status code and response headers
    def com_day_cq_commons_impl_externalizer_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_commons_impl_externalizer_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'externalizer.domains'] = @api_client.build_collection_param(opts[:'externalizer_domains'], :multi) if !opts[:'externalizer_domains'].nil?
      query_params[:'externalizer.host'] = opts[:'externalizer_host'] if !opts[:'externalizer_host'].nil?
      query_params[:'externalizer.contextpath'] = opts[:'externalizer_contextpath'] if !opts[:'externalizer_contextpath'].nil?
      query_params[:'externalizer.encodedpath'] = opts[:'externalizer_encodedpath'] if !opts[:'externalizer_encodedpath'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqCommonsImplExternalizerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_commons_impl_externalizer_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_commons_impl_externalizer_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :rootmapping_target 
    # @return [ComDayCqCommonsServletsRootMappingServletInfo]
    def com_day_cq_commons_servlets_root_mapping_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_commons_servlets_root_mapping_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :rootmapping_target 
    # @return [Array<(ComDayCqCommonsServletsRootMappingServletInfo, Integer, Hash)>] ComDayCqCommonsServletsRootMappingServletInfo data, response status code and response headers
    def com_day_cq_commons_servlets_root_mapping_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_commons_servlets_root_mapping_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'rootmapping.target'] = opts[:'rootmapping_target'] if !opts[:'rootmapping_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqCommonsServletsRootMappingServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_commons_servlets_root_mapping_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_commons_servlets_root_mapping_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :codeupgradetasks 
    # @option opts [Array<String>] :codeupgradetaskfilters 
    # @return [ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo]
    def com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke(opts = {})
      data, _status_code, _headers = com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :codeupgradetasks 
    # @option opts [Array<String>] :codeupgradetaskfilters 
    # @return [Array<(ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo, Integer, Hash)>] ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo data, response status code and response headers
    def com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'codeupgradetasks'] = @api_client.build_collection_param(opts[:'codeupgradetasks'], :multi) if !opts[:'codeupgradetasks'].nil?
      query_params[:'codeupgradetaskfilters'] = @api_client.build_collection_param(opts[:'codeupgradetaskfilters'], :multi) if !opts[:'codeupgradetaskfilters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_compat_codeupgrade_impl_code_upgrade_execution_condition_checke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :upgrade_task_ignore_list 
    # @return [ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo]
    def com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list(opts = {})
      data, _status_code, _headers = com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :upgrade_task_ignore_list 
    # @return [Array<(ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo, Integer, Hash)>] ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo data, response status code and response headers
    def com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'upgradeTaskIgnoreList'] = @api_client.build_collection_param(opts[:'upgrade_task_ignore_list'], :multi) if !opts[:'upgrade_task_ignore_list'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_compat_codeupgrade_impl_upgrade_task_ignore_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :effective_bundle_list_path 
    # @return [ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo]
    def com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist(opts = {})
      data, _status_code, _headers = com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :effective_bundle_list_path 
    # @return [Array<(ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo, Integer, Hash)>] ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo data, response status code and response headers
    def com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'effectiveBundleListPath'] = opts[:'effective_bundle_list_path'] if !opts[:'effective_bundle_list_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_compat_codeupgrade_impl_version_range_task_ignorelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :contentsync_fallback_authorizable 
    # @option opts [String] :contentsync_fallback_updateuser 
    # @return [ComDayCqContentsyncImplContentSyncManagerImplInfo]
    def com_day_cq_contentsync_impl_content_sync_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_contentsync_impl_content_sync_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :contentsync_fallback_authorizable 
    # @option opts [String] :contentsync_fallback_updateuser 
    # @return [Array<(ComDayCqContentsyncImplContentSyncManagerImplInfo, Integer, Hash)>] ComDayCqContentsyncImplContentSyncManagerImplInfo data, response status code and response headers
    def com_day_cq_contentsync_impl_content_sync_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_contentsync_impl_content_sync_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'contentsync.fallback.authorizable'] = opts[:'contentsync_fallback_authorizable'] if !opts[:'contentsync_fallback_authorizable'].nil?
      query_params[:'contentsync.fallback.updateuser'] = opts[:'contentsync_fallback_updateuser'] if !opts[:'contentsync_fallback_updateuser'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqContentsyncImplContentSyncManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_contentsync_impl_content_sync_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_contentsync_impl_content_sync_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :large_file_threshold 
    # @option opts [Integer] :large_comment_threshold 
    # @option opts [Boolean] :cq_dam_enable_ext_meta_extraction 
    # @return [ComDayCqDamCommonsHandlerStandardImageHandlerInfo]
    def com_day_cq_dam_commons_handler_standard_image_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_commons_handler_standard_image_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :large_file_threshold 
    # @option opts [Integer] :large_comment_threshold 
    # @option opts [Boolean] :cq_dam_enable_ext_meta_extraction 
    # @return [Array<(ComDayCqDamCommonsHandlerStandardImageHandlerInfo, Integer, Hash)>] ComDayCqDamCommonsHandlerStandardImageHandlerInfo data, response status code and response headers
    def com_day_cq_dam_commons_handler_standard_image_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_commons_handler_standard_image_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'large_file_threshold'] = opts[:'large_file_threshold'] if !opts[:'large_file_threshold'].nil?
      query_params[:'large_comment_threshold'] = opts[:'large_comment_threshold'] if !opts[:'large_comment_threshold'].nil?
      query_params[:'cq.dam.enable.ext.meta.extraction'] = opts[:'cq_dam_enable_ext_meta_extraction'] if !opts[:'cq_dam_enable_ext_meta_extraction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCommonsHandlerStandardImageHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_commons_handler_standard_image_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_commons_handler_standard_image_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :xmp_filter_apply_whitelist 
    # @option opts [Array<String>] :xmp_filter_whitelist 
    # @option opts [Boolean] :xmp_filter_apply_blacklist 
    # @option opts [Array<String>] :xmp_filter_blacklist 
    # @return [ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo]
    def com_day_cq_dam_commons_metadata_xmp_filter_black_white(opts = {})
      data, _status_code, _headers = com_day_cq_dam_commons_metadata_xmp_filter_black_white_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :xmp_filter_apply_whitelist 
    # @option opts [Array<String>] :xmp_filter_whitelist 
    # @option opts [Boolean] :xmp_filter_apply_blacklist 
    # @option opts [Array<String>] :xmp_filter_blacklist 
    # @return [Array<(ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo, Integer, Hash)>] ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo data, response status code and response headers
    def com_day_cq_dam_commons_metadata_xmp_filter_black_white_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_commons_metadata_xmp_filter_black_white ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'xmp.filter.apply_whitelist'] = opts[:'xmp_filter_apply_whitelist'] if !opts[:'xmp_filter_apply_whitelist'].nil?
      query_params[:'xmp.filter.whitelist'] = @api_client.build_collection_param(opts[:'xmp_filter_whitelist'], :multi) if !opts[:'xmp_filter_whitelist'].nil?
      query_params[:'xmp.filter.apply_blacklist'] = opts[:'xmp_filter_apply_blacklist'] if !opts[:'xmp_filter_apply_blacklist'].nil?
      query_params[:'xmp.filter.blacklist'] = @api_client.build_collection_param(opts[:'xmp_filter_blacklist'], :multi) if !opts[:'xmp_filter_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_commons_metadata_xmp_filter_black_white",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_commons_metadata_xmp_filter_black_white\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :large_file_min 
    # @option opts [Boolean] :cache_apply 
    # @option opts [Array<String>] :mime_types 
    # @return [ComDayCqDamCommonsUtilImplAssetCacheImplInfo]
    def com_day_cq_dam_commons_util_impl_asset_cache_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_commons_util_impl_asset_cache_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :large_file_min 
    # @option opts [Boolean] :cache_apply 
    # @option opts [Array<String>] :mime_types 
    # @return [Array<(ComDayCqDamCommonsUtilImplAssetCacheImplInfo, Integer, Hash)>] ComDayCqDamCommonsUtilImplAssetCacheImplInfo data, response status code and response headers
    def com_day_cq_dam_commons_util_impl_asset_cache_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_commons_util_impl_asset_cache_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'large.file.min'] = opts[:'large_file_min'] if !opts[:'large_file_min'].nil?
      query_params[:'cache.apply'] = opts[:'cache_apply'] if !opts[:'cache_apply'].nil?
      query_params[:'mime.types'] = @api_client.build_collection_param(opts[:'mime_types'], :multi) if !opts[:'mime_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCommonsUtilImplAssetCacheImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_commons_util_impl_asset_cache_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_commons_util_impl_asset_cache_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_document_width 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_document_height 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_document_padding_horizontal 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_document_padding_vertical 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_font_size 
    # @option opts [String] :cq_dam_config_annotation_pdf_font_color 
    # @option opts [String] :cq_dam_config_annotation_pdf_font_family 
    # @option opts [String] :cq_dam_config_annotation_pdf_font_light 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_margin_text_image 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_min_image_height 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_review_status_width 
    # @option opts [String] :cq_dam_config_annotation_pdf_review_status_color_approved 
    # @option opts [String] :cq_dam_config_annotation_pdf_review_status_color_rejected 
    # @option opts [String] :cq_dam_config_annotation_pdf_review_status_color_changes_requested 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_annotation_marker_width 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_asset_minheight 
    # @return [ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo]
    def com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_document_width 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_document_height 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_document_padding_horizontal 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_document_padding_vertical 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_font_size 
    # @option opts [String] :cq_dam_config_annotation_pdf_font_color 
    # @option opts [String] :cq_dam_config_annotation_pdf_font_family 
    # @option opts [String] :cq_dam_config_annotation_pdf_font_light 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_margin_text_image 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_min_image_height 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_review_status_width 
    # @option opts [String] :cq_dam_config_annotation_pdf_review_status_color_approved 
    # @option opts [String] :cq_dam_config_annotation_pdf_review_status_color_rejected 
    # @option opts [String] :cq_dam_config_annotation_pdf_review_status_color_changes_requested 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_annotation_marker_width 
    # @option opts [Integer] :cq_dam_config_annotation_pdf_asset_minheight 
    # @return [Array<(ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo, Integer, Hash)>] ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.config.annotation.pdf.document.width'] = opts[:'cq_dam_config_annotation_pdf_document_width'] if !opts[:'cq_dam_config_annotation_pdf_document_width'].nil?
      query_params[:'cq.dam.config.annotation.pdf.document.height'] = opts[:'cq_dam_config_annotation_pdf_document_height'] if !opts[:'cq_dam_config_annotation_pdf_document_height'].nil?
      query_params[:'cq.dam.config.annotation.pdf.document.padding.horizontal'] = opts[:'cq_dam_config_annotation_pdf_document_padding_horizontal'] if !opts[:'cq_dam_config_annotation_pdf_document_padding_horizontal'].nil?
      query_params[:'cq.dam.config.annotation.pdf.document.padding.vertical'] = opts[:'cq_dam_config_annotation_pdf_document_padding_vertical'] if !opts[:'cq_dam_config_annotation_pdf_document_padding_vertical'].nil?
      query_params[:'cq.dam.config.annotation.pdf.font.size'] = opts[:'cq_dam_config_annotation_pdf_font_size'] if !opts[:'cq_dam_config_annotation_pdf_font_size'].nil?
      query_params[:'cq.dam.config.annotation.pdf.font.color'] = opts[:'cq_dam_config_annotation_pdf_font_color'] if !opts[:'cq_dam_config_annotation_pdf_font_color'].nil?
      query_params[:'cq.dam.config.annotation.pdf.font.family'] = opts[:'cq_dam_config_annotation_pdf_font_family'] if !opts[:'cq_dam_config_annotation_pdf_font_family'].nil?
      query_params[:'cq.dam.config.annotation.pdf.font.light'] = opts[:'cq_dam_config_annotation_pdf_font_light'] if !opts[:'cq_dam_config_annotation_pdf_font_light'].nil?
      query_params[:'cq.dam.config.annotation.pdf.marginTextImage'] = opts[:'cq_dam_config_annotation_pdf_margin_text_image'] if !opts[:'cq_dam_config_annotation_pdf_margin_text_image'].nil?
      query_params[:'cq.dam.config.annotation.pdf.minImageHeight'] = opts[:'cq_dam_config_annotation_pdf_min_image_height'] if !opts[:'cq_dam_config_annotation_pdf_min_image_height'].nil?
      query_params[:'cq.dam.config.annotation.pdf.reviewStatus.width'] = opts[:'cq_dam_config_annotation_pdf_review_status_width'] if !opts[:'cq_dam_config_annotation_pdf_review_status_width'].nil?
      query_params[:'cq.dam.config.annotation.pdf.reviewStatus.color.approved'] = opts[:'cq_dam_config_annotation_pdf_review_status_color_approved'] if !opts[:'cq_dam_config_annotation_pdf_review_status_color_approved'].nil?
      query_params[:'cq.dam.config.annotation.pdf.reviewStatus.color.rejected'] = opts[:'cq_dam_config_annotation_pdf_review_status_color_rejected'] if !opts[:'cq_dam_config_annotation_pdf_review_status_color_rejected'].nil?
      query_params[:'cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested'] = opts[:'cq_dam_config_annotation_pdf_review_status_color_changes_requested'] if !opts[:'cq_dam_config_annotation_pdf_review_status_color_changes_requested'].nil?
      query_params[:'cq.dam.config.annotation.pdf.annotationMarker.width'] = opts[:'cq_dam_config_annotation_pdf_annotation_marker_width'] if !opts[:'cq_dam_config_annotation_pdf_annotation_marker_width'].nil?
      query_params[:'cq.dam.config.annotation.pdf.asset.minheight'] = opts[:'cq_dam_config_annotation_pdf_asset_minheight'] if !opts[:'cq_dam_config_annotation_pdf_asset_minheight'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_annotation_pdf_annotation_pdf_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [ComDayCqDamCoreImplAssetMoveListenerInfo]
    def com_day_cq_dam_core_impl_asset_move_listener(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_asset_move_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [Array<(ComDayCqDamCoreImplAssetMoveListenerInfo, Integer, Hash)>] ComDayCqDamCoreImplAssetMoveListenerInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_asset_move_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_asset_move_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplAssetMoveListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_asset_move_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_asset_move_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_enabled 
    # @return [ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo]
    def com_day_cq_dam_core_impl_assethome_asset_home_page_configuration(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_assethome_asset_home_page_configuration_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_enabled 
    # @return [Array<(ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo, Integer, Hash)>] ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_assethome_asset_home_page_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_assethome_asset_home_page_configuration ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'isEnabled'] = opts[:'is_enabled'] if !opts[:'is_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_assethome_asset_home_page_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_assethome_asset_home_page_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_adhoc_asset_share_prezip_maxcontentsize 
    # @return [ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo]
    def com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_adhoc_asset_share_prezip_maxcontentsize 
    # @return [Array<(ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo, Integer, Hash)>] ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.adhoc.asset.share.prezip.maxcontentsize'] = opts[:'cq_dam_adhoc_asset_share_prezip_maxcontentsize'] if !opts[:'cq_dam_adhoc_asset_share_prezip_maxcontentsize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_assetlinkshare_adhoc_asset_share_proxy_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_image_cache_max_memory 
    # @option opts [Integer] :cq_dam_image_cache_max_age 
    # @option opts [String] :cq_dam_image_cache_max_dimension 
    # @return [ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo]
    def com_day_cq_dam_core_impl_cache_cq_buffered_image_cache(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_cache_cq_buffered_image_cache_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_image_cache_max_memory 
    # @option opts [Integer] :cq_dam_image_cache_max_age 
    # @option opts [String] :cq_dam_image_cache_max_dimension 
    # @return [Array<(ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo, Integer, Hash)>] ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_cache_cq_buffered_image_cache_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_cache_cq_buffered_image_cache ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.image.cache.max.memory'] = opts[:'cq_dam_image_cache_max_memory'] if !opts[:'cq_dam_image_cache_max_memory'].nil?
      query_params[:'cq.dam.image.cache.max.age'] = opts[:'cq_dam_image_cache_max_age'] if !opts[:'cq_dam_image_cache_max_age'].nil?
      query_params[:'cq.dam.image.cache.max.dimension'] = opts[:'cq_dam_image_cache_max_dimension'] if !opts[:'cq_dam_image_cache_max_dimension'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_cache_cq_buffered_image_cache",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_cache_cq_buffered_image_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :changeeventlistener_observed_paths 
    # @return [ComDayCqDamCoreImplDamChangeEventListenerInfo]
    def com_day_cq_dam_core_impl_dam_change_event_listener(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_dam_change_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :changeeventlistener_observed_paths 
    # @return [Array<(ComDayCqDamCoreImplDamChangeEventListenerInfo, Integer, Hash)>] ComDayCqDamCoreImplDamChangeEventListenerInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_dam_change_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_dam_change_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'changeeventlistener.observed.paths'] = @api_client.build_collection_param(opts[:'changeeventlistener_observed_paths'], :multi) if !opts[:'changeeventlistener_observed_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplDamChangeEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_dam_change_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_dam_change_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :max_saved_activities 
    # @option opts [Integer] :save_interval 
    # @option opts [Boolean] :enable_activity_purge 
    # @option opts [String] :event_types 
    # @return [ComDayCqDamCoreImplDamEventPurgeServiceInfo]
    def com_day_cq_dam_core_impl_dam_event_purge_service(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_dam_event_purge_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :max_saved_activities 
    # @option opts [Integer] :save_interval 
    # @option opts [Boolean] :enable_activity_purge 
    # @option opts [String] :event_types 
    # @return [Array<(ComDayCqDamCoreImplDamEventPurgeServiceInfo, Integer, Hash)>] ComDayCqDamCoreImplDamEventPurgeServiceInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_dam_event_purge_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_dam_event_purge_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?
      query_params[:'maxSavedActivities'] = opts[:'max_saved_activities'] if !opts[:'max_saved_activities'].nil?
      query_params[:'saveInterval'] = opts[:'save_interval'] if !opts[:'save_interval'].nil?
      query_params[:'enableActivityPurge'] = opts[:'enable_activity_purge'] if !opts[:'enable_activity_purge'].nil?
      query_params[:'eventTypes'] = opts[:'event_types'] if !opts[:'event_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplDamEventPurgeServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_dam_event_purge_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_dam_event_purge_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Integer] :event_queue_length 
    # @option opts [Boolean] :eventrecorder_enabled 
    # @option opts [Array<String>] :eventrecorder_blacklist 
    # @option opts [String] :eventrecorder_eventtypes 
    # @return [ComDayCqDamCoreImplDamEventRecorderImplInfo]
    def com_day_cq_dam_core_impl_dam_event_recorder_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_dam_event_recorder_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Integer] :event_queue_length 
    # @option opts [Boolean] :eventrecorder_enabled 
    # @option opts [Array<String>] :eventrecorder_blacklist 
    # @option opts [String] :eventrecorder_eventtypes 
    # @return [Array<(ComDayCqDamCoreImplDamEventRecorderImplInfo, Integer, Hash)>] ComDayCqDamCoreImplDamEventRecorderImplInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_dam_event_recorder_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_dam_event_recorder_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?
      query_params[:'event.queue.length'] = opts[:'event_queue_length'] if !opts[:'event_queue_length'].nil?
      query_params[:'eventrecorder.enabled'] = opts[:'eventrecorder_enabled'] if !opts[:'eventrecorder_enabled'].nil?
      query_params[:'eventrecorder.blacklist'] = @api_client.build_collection_param(opts[:'eventrecorder_blacklist'], :multi) if !opts[:'eventrecorder_blacklist'].nil?
      query_params[:'eventrecorder.eventtypes'] = opts[:'eventrecorder_eventtypes'] if !opts[:'eventrecorder_eventtypes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplDamEventRecorderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_dam_event_recorder_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_dam_event_recorder_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Boolean] :enabled 
    # @return [ComDayCqDamCoreImplEventDamEventAuditListenerInfo]
    def com_day_cq_dam_core_impl_event_dam_event_audit_listener(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_event_dam_event_audit_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Boolean] :enabled 
    # @return [Array<(ComDayCqDamCoreImplEventDamEventAuditListenerInfo, Integer, Hash)>] ComDayCqDamCoreImplEventDamEventAuditListenerInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_event_dam_event_audit_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_event_dam_event_audit_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplEventDamEventAuditListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_event_dam_event_audit_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_event_dam_event_audit_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_expiry_notification_scheduler_istimebased 
    # @option opts [String] :cq_dam_expiry_notification_scheduler_timebased_rule 
    # @option opts [Integer] :cq_dam_expiry_notification_scheduler_period_rule 
    # @option opts [Boolean] :send_email 
    # @option opts [Integer] :asset_expired_limit 
    # @option opts [Integer] :prior_notification_seconds 
    # @option opts [String] :cq_dam_expiry_notification_url_protocol 
    # @return [ComDayCqDamCoreImplExpiryNotificationJobImplInfo]
    def com_day_cq_dam_core_impl_expiry_notification_job_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_expiry_notification_job_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_expiry_notification_scheduler_istimebased 
    # @option opts [String] :cq_dam_expiry_notification_scheduler_timebased_rule 
    # @option opts [Integer] :cq_dam_expiry_notification_scheduler_period_rule 
    # @option opts [Boolean] :send_email 
    # @option opts [Integer] :asset_expired_limit 
    # @option opts [Integer] :prior_notification_seconds 
    # @option opts [String] :cq_dam_expiry_notification_url_protocol 
    # @return [Array<(ComDayCqDamCoreImplExpiryNotificationJobImplInfo, Integer, Hash)>] ComDayCqDamCoreImplExpiryNotificationJobImplInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_expiry_notification_job_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_expiry_notification_job_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.expiry.notification.scheduler.istimebased'] = opts[:'cq_dam_expiry_notification_scheduler_istimebased'] if !opts[:'cq_dam_expiry_notification_scheduler_istimebased'].nil?
      query_params[:'cq.dam.expiry.notification.scheduler.timebased.rule'] = opts[:'cq_dam_expiry_notification_scheduler_timebased_rule'] if !opts[:'cq_dam_expiry_notification_scheduler_timebased_rule'].nil?
      query_params[:'cq.dam.expiry.notification.scheduler.period.rule'] = opts[:'cq_dam_expiry_notification_scheduler_period_rule'] if !opts[:'cq_dam_expiry_notification_scheduler_period_rule'].nil?
      query_params[:'send_email'] = opts[:'send_email'] if !opts[:'send_email'].nil?
      query_params[:'asset_expired_limit'] = opts[:'asset_expired_limit'] if !opts[:'asset_expired_limit'].nil?
      query_params[:'prior_notification_seconds'] = opts[:'prior_notification_seconds'] if !opts[:'prior_notification_seconds'].nil?
      query_params[:'cq.dam.expiry.notification.url.protocol'] = opts[:'cq_dam_expiry_notification_url_protocol'] if !opts[:'cq_dam_expiry_notification_url_protocol'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplExpiryNotificationJobImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_expiry_notification_job_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_expiry_notification_job_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_enabled 
    # @return [ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo]
    def com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :is_enabled 
    # @return [Array<(ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo, Integer, Hash)>] ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'isEnabled'] = opts[:'is_enabled'] if !opts[:'is_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_foldermetadataschema_folder_metadata_schema_feat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :skip_bufferedcache 
    # @return [ComDayCqDamCoreImplGfxCommonsGfxRendererInfo]
    def com_day_cq_dam_core_impl_gfx_commons_gfx_renderer(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_gfx_commons_gfx_renderer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :skip_bufferedcache 
    # @return [Array<(ComDayCqDamCoreImplGfxCommonsGfxRendererInfo, Integer, Hash)>] ComDayCqDamCoreImplGfxCommonsGfxRendererInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_gfx_commons_gfx_renderer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_gfx_commons_gfx_renderer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'skip.bufferedcache'] = opts[:'skip_bufferedcache'] if !opts[:'skip_bufferedcache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplGfxCommonsGfxRendererInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_gfx_commons_gfx_renderer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_gfx_commons_gfx_renderer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :mimetype 
    # @return [ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo]
    def com_day_cq_dam_core_impl_handler_eps_format_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_handler_eps_format_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :mimetype 
    # @return [Array<(ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo, Integer, Hash)>] ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_handler_eps_format_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_handler_eps_format_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'mimetype'] = opts[:'mimetype'] if !opts[:'mimetype'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_handler_eps_format_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_handler_eps_format_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :mimetype 
    # @return [ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo]
    def com_day_cq_dam_core_impl_handler_indesign_format_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_handler_indesign_format_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :mimetype 
    # @return [Array<(ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo, Integer, Hash)>] ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_handler_indesign_format_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_handler_indesign_format_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'mimetype'] = @api_client.build_collection_param(opts[:'mimetype'], :multi) if !opts[:'mimetype'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_handler_indesign_format_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_handler_indesign_format_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_enable_ext_meta_extraction 
    # @option opts [Integer] :large_file_threshold 
    # @option opts [Integer] :large_comment_threshold 
    # @return [ComDayCqDamCoreImplHandlerJpegHandlerInfo]
    def com_day_cq_dam_core_impl_handler_jpeg_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_handler_jpeg_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_enable_ext_meta_extraction 
    # @option opts [Integer] :large_file_threshold 
    # @option opts [Integer] :large_comment_threshold 
    # @return [Array<(ComDayCqDamCoreImplHandlerJpegHandlerInfo, Integer, Hash)>] ComDayCqDamCoreImplHandlerJpegHandlerInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_handler_jpeg_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_handler_jpeg_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.enable.ext.meta.extraction'] = opts[:'cq_dam_enable_ext_meta_extraction'] if !opts[:'cq_dam_enable_ext_meta_extraction'].nil?
      query_params[:'large_file_threshold'] = opts[:'large_file_threshold'] if !opts[:'large_file_threshold'].nil?
      query_params[:'large_comment_threshold'] = opts[:'large_comment_threshold'] if !opts[:'large_comment_threshold'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplHandlerJpegHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_handler_jpeg_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_handler_jpeg_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :xmphandler_cq_formats 
    # @return [ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo]
    def com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :xmphandler_cq_formats 
    # @return [Array<(ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo, Integer, Hash)>] ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'xmphandler.cq.formats'] = @api_client.build_collection_param(opts[:'xmphandler_cq_formats'], :multi) if !opts[:'xmphandler_cq_formats'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_handler_xmp_n_comm_xmp_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jmx_objectname 
    # @option opts [Boolean] :property_measure_enabled 
    # @option opts [String] :property_name 
    # @option opts [Integer] :property_max_wait_ms 
    # @option opts [Float] :property_max_rate 
    # @option opts [Boolean] :fulltext_measure_enabled 
    # @option opts [String] :fulltext_name 
    # @option opts [Integer] :fulltext_max_wait_ms 
    # @option opts [Float] :fulltext_max_rate 
    # @return [ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo]
    def com_day_cq_dam_core_impl_jmx_asset_index_update_monitor(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_jmx_asset_index_update_monitor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jmx_objectname 
    # @option opts [Boolean] :property_measure_enabled 
    # @option opts [String] :property_name 
    # @option opts [Integer] :property_max_wait_ms 
    # @option opts [Float] :property_max_rate 
    # @option opts [Boolean] :fulltext_measure_enabled 
    # @option opts [String] :fulltext_name 
    # @option opts [Integer] :fulltext_max_wait_ms 
    # @option opts [Float] :fulltext_max_rate 
    # @return [Array<(ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo, Integer, Hash)>] ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_jmx_asset_index_update_monitor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_jmx_asset_index_update_monitor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'jmx.objectname'] = opts[:'jmx_objectname'] if !opts[:'jmx_objectname'].nil?
      query_params[:'property.measure.enabled'] = opts[:'property_measure_enabled'] if !opts[:'property_measure_enabled'].nil?
      query_params[:'property.name'] = opts[:'property_name'] if !opts[:'property_name'].nil?
      query_params[:'property.max.wait.ms'] = opts[:'property_max_wait_ms'] if !opts[:'property_max_wait_ms'].nil?
      query_params[:'property.max.rate'] = opts[:'property_max_rate'] if !opts[:'property_max_rate'].nil?
      query_params[:'fulltext.measure.enabled'] = opts[:'fulltext_measure_enabled'] if !opts[:'fulltext_measure_enabled'].nil?
      query_params[:'fulltext.name'] = opts[:'fulltext_name'] if !opts[:'fulltext_name'].nil?
      query_params[:'fulltext.max.wait.ms'] = opts[:'fulltext_max_wait_ms'] if !opts[:'fulltext_max_wait_ms'].nil?
      query_params[:'fulltext.max.rate'] = opts[:'fulltext_max_rate'] if !opts[:'fulltext_max_rate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_jmx_asset_index_update_monitor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_jmx_asset_index_update_monitor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jmx_objectname 
    # @return [ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo]
    def com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jmx_objectname 
    # @return [Array<(ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo, Integer, Hash)>] ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'jmx.objectname'] = opts[:'jmx_objectname'] if !opts[:'jmx_objectname'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_jmx_asset_migration_m_bean_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jmx_objectname 
    # @option opts [Boolean] :active 
    # @return [ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo]
    def com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jmx_objectname 
    # @option opts [Boolean] :active 
    # @return [Array<(ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo, Integer, Hash)>] ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'jmx.objectname'] = opts[:'jmx_objectname'] if !opts[:'jmx_objectname'].nil?
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_jmx_asset_update_monitor_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :operation 
    # @option opts [Boolean] :email_enabled 
    # @return [ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo]
    def com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :operation 
    # @option opts [Boolean] :email_enabled 
    # @return [Array<(ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo, Integer, Hash)>] ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?
      query_params[:'emailEnabled'] = opts[:'email_enabled'] if !opts[:'email_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_jobs_metadataexport_async_metadata_export_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :operation 
    # @option opts [String] :operation_icon 
    # @option opts [String] :topic_name 
    # @option opts [Boolean] :email_enabled 
    # @return [ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo]
    def com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :operation 
    # @option opts [String] :operation_icon 
    # @option opts [String] :topic_name 
    # @option opts [Boolean] :email_enabled 
    # @return [Array<(ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo, Integer, Hash)>] ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'operation'] = opts[:'operation'] if !opts[:'operation'].nil?
      query_params[:'operationIcon'] = opts[:'operation_icon'] if !opts[:'operation_icon'].nil?
      query_params[:'topicName'] = opts[:'topic_name'] if !opts[:'topic_name'].nil?
      query_params[:'emailEnabled'] = opts[:'email_enabled'] if !opts[:'email_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_jobs_metadataimport_async_metadata_import_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_paths 
    # @option opts [Array<String>] :sling_servlet_methods 
    # @option opts [Boolean] :cq_dam_enable_anonymous 
    # @return [ComDayCqDamCoreImplLightboxLightboxServletInfo]
    def com_day_cq_dam_core_impl_lightbox_lightbox_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_lightbox_lightbox_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_paths 
    # @option opts [Array<String>] :sling_servlet_methods 
    # @option opts [Boolean] :cq_dam_enable_anonymous 
    # @return [Array<(ComDayCqDamCoreImplLightboxLightboxServletInfo, Integer, Hash)>] ComDayCqDamCoreImplLightboxLightboxServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_lightbox_lightbox_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_lightbox_lightbox_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.paths'] = opts[:'sling_servlet_paths'] if !opts[:'sling_servlet_paths'].nil?
      query_params[:'sling.servlet.methods'] = @api_client.build_collection_param(opts[:'sling_servlet_methods'], :multi) if !opts[:'sling_servlet_methods'].nil?
      query_params[:'cq.dam.enable.anonymous'] = opts[:'cq_dam_enable_anonymous'] if !opts[:'cq_dam_enable_anonymous'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplLightboxLightboxServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_lightbox_lightbox_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_lightbox_lightbox_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :granitedata 
    # @return [ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo]
    def com_day_cq_dam_core_impl_metadata_editor_select_component_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_metadata_editor_select_component_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :granitedata 
    # @return [Array<(ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo, Integer, Hash)>] ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_metadata_editor_select_component_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_metadata_editor_select_component_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'granite:data'] = @api_client.build_collection_param(opts[:'granitedata'], :multi) if !opts[:'granitedata'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_metadata_editor_select_component_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_metadata_editor_select_component_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_allow_all_mime 
    # @option opts [Array<String>] :cq_dam_allowed_asset_mimes 
    # @return [ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo]
    def com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_allow_all_mime 
    # @option opts [Array<String>] :cq_dam_allowed_asset_mimes 
    # @return [Array<(ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo, Integer, Hash)>] ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.allow.all.mime'] = opts[:'cq_dam_allow_all_mime'] if !opts[:'cq_dam_allow_all_mime'].nil?
      query_params[:'cq.dam.allowed.asset.mimes'] = @api_client.build_collection_param(opts[:'cq_dam_allowed_asset_mimes'], :multi) if !opts[:'cq_dam_allowed_asset_mimes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_mime_type_asset_upload_restriction_helper\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_detect_asset_mime_from_content 
    # @return [ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo]
    def com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_detect_asset_mime_from_content 
    # @return [Array<(ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo, Integer, Hash)>] ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.detect.asset.mime.from.content'] = opts[:'cq_dam_detect_asset_mime_from_content'] if !opts[:'cq_dam_detect_asset_mime_from_content'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_mime_type_dam_mime_type_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_missingmetadata_notification_scheduler_istimebased 
    # @option opts [String] :cq_dam_missingmetadata_notification_scheduler_timebased_rule 
    # @option opts [Integer] :cq_dam_missingmetadata_notification_scheduler_period_rule 
    # @option opts [String] :cq_dam_missingmetadata_notification_recipient 
    # @return [ComDayCqDamCoreImplMissingMetadataNotificationJobInfo]
    def com_day_cq_dam_core_impl_missing_metadata_notification_job(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_missing_metadata_notification_job_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_missingmetadata_notification_scheduler_istimebased 
    # @option opts [String] :cq_dam_missingmetadata_notification_scheduler_timebased_rule 
    # @option opts [Integer] :cq_dam_missingmetadata_notification_scheduler_period_rule 
    # @option opts [String] :cq_dam_missingmetadata_notification_recipient 
    # @return [Array<(ComDayCqDamCoreImplMissingMetadataNotificationJobInfo, Integer, Hash)>] ComDayCqDamCoreImplMissingMetadataNotificationJobInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_missing_metadata_notification_job_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_missing_metadata_notification_job ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.missingmetadata.notification.scheduler.istimebased'] = opts[:'cq_dam_missingmetadata_notification_scheduler_istimebased'] if !opts[:'cq_dam_missingmetadata_notification_scheduler_istimebased'].nil?
      query_params[:'cq.dam.missingmetadata.notification.scheduler.timebased.rule'] = opts[:'cq_dam_missingmetadata_notification_scheduler_timebased_rule'] if !opts[:'cq_dam_missingmetadata_notification_scheduler_timebased_rule'].nil?
      query_params[:'cq.dam.missingmetadata.notification.scheduler.period.rule'] = opts[:'cq_dam_missingmetadata_notification_scheduler_period_rule'] if !opts[:'cq_dam_missingmetadata_notification_scheduler_period_rule'].nil?
      query_params[:'cq.dam.missingmetadata.notification.recipient'] = opts[:'cq_dam_missingmetadata_notification_recipient'] if !opts[:'cq_dam_missingmetadata_notification_recipient'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplMissingMetadataNotificationJobInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_missing_metadata_notification_job",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_missing_metadata_notification_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :notify_on_complete 
    # @return [ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo]
    def com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :notify_on_complete 
    # @return [Array<(ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo, Integer, Hash)>] ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'process.label'] = opts[:'process_label'] if !opts[:'process_label'].nil?
      query_params[:'Notify on Complete'] = opts[:'notify_on_complete'] if !opts[:'notify_on_complete'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_process_send_transient_workflow_completed_email_pr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :mime_types 
    # @option opts [Integer] :max_extract 
    # @return [ComDayCqDamCoreImplProcessTextExtractionProcessInfo]
    def com_day_cq_dam_core_impl_process_text_extraction_process(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_process_text_extraction_process_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :mime_types 
    # @option opts [Integer] :max_extract 
    # @return [Array<(ComDayCqDamCoreImplProcessTextExtractionProcessInfo, Integer, Hash)>] ComDayCqDamCoreImplProcessTextExtractionProcessInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_process_text_extraction_process_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_process_text_extraction_process ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'mimeTypes'] = @api_client.build_collection_param(opts[:'mime_types'], :multi) if !opts[:'mime_types'].nil?
      query_params[:'maxExtract'] = opts[:'max_extract'] if !opts[:'max_extract'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplProcessTextExtractionProcessInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_process_text_extraction_process",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_process_text_extraction_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :xmp_propagate 
    # @option opts [Array<String>] :xmp_excludes 
    # @return [ComDayCqDamCoreImplRenditionMakerImplInfo]
    def com_day_cq_dam_core_impl_rendition_maker_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_rendition_maker_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :xmp_propagate 
    # @option opts [Array<String>] :xmp_excludes 
    # @return [Array<(ComDayCqDamCoreImplRenditionMakerImplInfo, Integer, Hash)>] ComDayCqDamCoreImplRenditionMakerImplInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_rendition_maker_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_rendition_maker_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'xmp.propagate'] = opts[:'xmp_propagate'] if !opts[:'xmp_propagate'].nil?
      query_params[:'xmp.excludes'] = @api_client.build_collection_param(opts[:'xmp_excludes'], :multi) if !opts[:'xmp_excludes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplRenditionMakerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_rendition_maker_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_rendition_maker_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :query_batch_size 
    # @return [ComDayCqDamCoreImplReportsReportExportServiceInfo]
    def com_day_cq_dam_core_impl_reports_report_export_service(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_reports_report_export_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :query_batch_size 
    # @return [Array<(ComDayCqDamCoreImplReportsReportExportServiceInfo, Integer, Hash)>] ComDayCqDamCoreImplReportsReportExportServiceInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_reports_report_export_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_reports_report_export_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'queryBatchSize'] = opts[:'query_batch_size'] if !opts[:'query_batch_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplReportsReportExportServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_reports_report_export_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_reports_report_export_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :max_saved_reports 
    # @option opts [Integer] :time_duration 
    # @option opts [Boolean] :enable_report_purge 
    # @return [ComDayCqDamCoreImplReportsReportPurgeServiceInfo]
    def com_day_cq_dam_core_impl_reports_report_purge_service(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_reports_report_purge_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :max_saved_reports 
    # @option opts [Integer] :time_duration 
    # @option opts [Boolean] :enable_report_purge 
    # @return [Array<(ComDayCqDamCoreImplReportsReportPurgeServiceInfo, Integer, Hash)>] ComDayCqDamCoreImplReportsReportPurgeServiceInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_reports_report_purge_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_reports_report_purge_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?
      query_params[:'maxSavedReports'] = opts[:'max_saved_reports'] if !opts[:'max_saved_reports'].nil?
      query_params[:'timeDuration'] = opts[:'time_duration'] if !opts[:'time_duration'].nil?
      query_params[:'enableReportPurge'] = opts[:'enable_report_purge'] if !opts[:'enable_report_purge'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplReportsReportPurgeServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_reports_report_purge_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_reports_report_purge_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [ComDayCqDamCoreImplServletAssetDownloadServletInfo]
    def com_day_cq_dam_core_impl_servlet_asset_download_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_asset_download_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [Array<(ComDayCqDamCoreImplServletAssetDownloadServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletAssetDownloadServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_asset_download_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_asset_download_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletAssetDownloadServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_asset_download_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_asset_download_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_batch_status_maxassets 
    # @return [ComDayCqDamCoreImplServletAssetStatusServletInfo]
    def com_day_cq_dam_core_impl_servlet_asset_status_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_asset_status_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_batch_status_maxassets 
    # @return [Array<(ComDayCqDamCoreImplServletAssetStatusServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletAssetStatusServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_asset_status_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_asset_status_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.batch.status.maxassets'] = opts[:'cq_dam_batch_status_maxassets'] if !opts[:'cq_dam_batch_status_maxassets'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletAssetStatusServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_asset_status_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_asset_status_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_batch_indesign_maxassets 
    # @return [ComDayCqDamCoreImplServletAssetXMPSearchServletInfo]
    def com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_batch_indesign_maxassets 
    # @return [Array<(ComDayCqDamCoreImplServletAssetXMPSearchServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletAssetXMPSearchServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.batch.indesign.maxassets'] = opts[:'cq_dam_batch_indesign_maxassets'] if !opts[:'cq_dam_batch_indesign_maxassets'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletAssetXMPSearchServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_asset_xmp_search_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_dam_batch_metadata_asset_default 
    # @option opts [Array<String>] :cq_dam_batch_metadata_collection_default 
    # @option opts [Integer] :cq_dam_batch_metadata_maxresources 
    # @return [ComDayCqDamCoreImplServletBatchMetadataServletInfo]
    def com_day_cq_dam_core_impl_servlet_batch_metadata_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_batch_metadata_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_dam_batch_metadata_asset_default 
    # @option opts [Array<String>] :cq_dam_batch_metadata_collection_default 
    # @option opts [Integer] :cq_dam_batch_metadata_maxresources 
    # @return [Array<(ComDayCqDamCoreImplServletBatchMetadataServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletBatchMetadataServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_batch_metadata_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_batch_metadata_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.batch.metadata.asset.default'] = @api_client.build_collection_param(opts[:'cq_dam_batch_metadata_asset_default'], :multi) if !opts[:'cq_dam_batch_metadata_asset_default'].nil?
      query_params[:'cq.dam.batch.metadata.collection.default'] = @api_client.build_collection_param(opts[:'cq_dam_batch_metadata_collection_default'], :multi) if !opts[:'cq_dam_batch_metadata_collection_default'].nil?
      query_params[:'cq.dam.batch.metadata.maxresources'] = opts[:'cq_dam_batch_metadata_maxresources'] if !opts[:'cq_dam_batch_metadata_maxresources'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletBatchMetadataServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_batch_metadata_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_batch_metadata_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_resource_types 
    # @option opts [Array<String>] :sling_servlet_methods 
    # @option opts [Boolean] :cq_dam_drm_enable 
    # @return [ComDayCqDamCoreImplServletBinaryProviderServletInfo]
    def com_day_cq_dam_core_impl_servlet_binary_provider_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_binary_provider_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_resource_types 
    # @option opts [Array<String>] :sling_servlet_methods 
    # @option opts [Boolean] :cq_dam_drm_enable 
    # @return [Array<(ComDayCqDamCoreImplServletBinaryProviderServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletBinaryProviderServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_binary_provider_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_binary_provider_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.resourceTypes'] = @api_client.build_collection_param(opts[:'sling_servlet_resource_types'], :multi) if !opts[:'sling_servlet_resource_types'].nil?
      query_params[:'sling.servlet.methods'] = @api_client.build_collection_param(opts[:'sling_servlet_methods'], :multi) if !opts[:'sling_servlet_methods'].nil?
      query_params[:'cq.dam.drm.enable'] = opts[:'cq_dam_drm_enable'] if !opts[:'cq_dam_drm_enable'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletBinaryProviderServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_binary_provider_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_binary_provider_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_dam_batch_collection_properties 
    # @option opts [Integer] :cq_dam_batch_collection_maxcollections 
    # @return [ComDayCqDamCoreImplServletCollectionServletInfo]
    def com_day_cq_dam_core_impl_servlet_collection_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_collection_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_dam_batch_collection_properties 
    # @option opts [Integer] :cq_dam_batch_collection_maxcollections 
    # @return [Array<(ComDayCqDamCoreImplServletCollectionServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletCollectionServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_collection_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_collection_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.batch.collection.properties'] = @api_client.build_collection_param(opts[:'cq_dam_batch_collection_properties'], :multi) if !opts[:'cq_dam_batch_collection_properties'].nil?
      query_params[:'cq.dam.batch.collection.maxcollections'] = opts[:'cq_dam_batch_collection_maxcollections'] if !opts[:'cq_dam_batch_collection_maxcollections'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletCollectionServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_collection_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_collection_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_dam_batch_collections_properties 
    # @option opts [Integer] :cq_dam_batch_collections_limit 
    # @return [ComDayCqDamCoreImplServletCollectionsServletInfo]
    def com_day_cq_dam_core_impl_servlet_collections_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_collections_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_dam_batch_collections_properties 
    # @option opts [Integer] :cq_dam_batch_collections_limit 
    # @return [Array<(ComDayCqDamCoreImplServletCollectionsServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletCollectionsServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_collections_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_collections_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.batch.collections.properties'] = @api_client.build_collection_param(opts[:'cq_dam_batch_collections_properties'], :multi) if !opts[:'cq_dam_batch_collections_properties'].nil?
      query_params[:'cq.dam.batch.collections.limit'] = opts[:'cq_dam_batch_collections_limit'] if !opts[:'cq_dam_batch_collections_limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletCollectionsServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_collections_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_collections_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :more_info 
    # @option opts [String] :_mnt_overlay_dam_gui_content_assets_moreinfo_html_path 
    # @return [ComDayCqDamCoreImplServletCompanionServletInfo]
    def com_day_cq_dam_core_impl_servlet_companion_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_companion_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :more_info 
    # @option opts [String] :_mnt_overlay_dam_gui_content_assets_moreinfo_html_path 
    # @return [Array<(ComDayCqDamCoreImplServletCompanionServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletCompanionServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_companion_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_companion_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'More Info'] = opts[:'more_info'] if !opts[:'more_info'].nil?
      query_params[:'/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}'] = opts[:'_mnt_overlay_dam_gui_content_assets_moreinfo_html_path'] if !opts[:'_mnt_overlay_dam_gui_content_assets_moreinfo_html_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletCompanionServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_companion_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_companion_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :detect_duplicate 
    # @return [ComDayCqDamCoreImplServletCreateAssetServletInfo]
    def com_day_cq_dam_core_impl_servlet_create_asset_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_create_asset_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :detect_duplicate 
    # @return [Array<(ComDayCqDamCoreImplServletCreateAssetServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletCreateAssetServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_create_asset_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_create_asset_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'detect_duplicate'] = opts[:'detect_duplicate'] if !opts[:'detect_duplicate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletCreateAssetServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_create_asset_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_create_asset_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_mime_type_blacklist 
    # @option opts [Boolean] :cq_dam_empty_mime 
    # @return [ComDayCqDamCoreImplServletDamContentDispositionFilterInfo]
    def com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_mime_type_blacklist 
    # @option opts [Boolean] :cq_dam_empty_mime 
    # @return [Array<(ComDayCqDamCoreImplServletDamContentDispositionFilterInfo, Integer, Hash)>] ComDayCqDamCoreImplServletDamContentDispositionFilterInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.mime.type.blacklist'] = @api_client.build_collection_param(opts[:'cq_mime_type_blacklist'], :multi) if !opts[:'cq_mime_type_blacklist'].nil?
      query_params[:'cq.dam.empty.mime'] = opts[:'cq_dam_empty_mime'] if !opts[:'cq_dam_empty_mime'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletDamContentDispositionFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_dam_content_disposition_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_core_guidlookupfilter_enabled 
    # @return [ComDayCqDamCoreImplServletGuidLookupFilterInfo]
    def com_day_cq_dam_core_impl_servlet_guid_lookup_filter(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_guid_lookup_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_core_guidlookupfilter_enabled 
    # @return [Array<(ComDayCqDamCoreImplServletGuidLookupFilterInfo, Integer, Hash)>] ComDayCqDamCoreImplServletGuidLookupFilterInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_guid_lookup_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_guid_lookup_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.core.guidlookupfilter.enabled'] = opts[:'cq_dam_core_guidlookupfilter_enabled'] if !opts[:'cq_dam_core_guidlookupfilter_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletGuidLookupFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_guid_lookup_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_guid_lookup_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_dam_sync_workflow_id 
    # @option opts [Array<String>] :cq_dam_sync_folder_types 
    # @return [ComDayCqDamCoreImplServletHealthCheckServletInfo]
    def com_day_cq_dam_core_impl_servlet_health_check_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_health_check_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_dam_sync_workflow_id 
    # @option opts [Array<String>] :cq_dam_sync_folder_types 
    # @return [Array<(ComDayCqDamCoreImplServletHealthCheckServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletHealthCheckServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_health_check_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_health_check_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.sync.workflow.id'] = opts[:'cq_dam_sync_workflow_id'] if !opts[:'cq_dam_sync_workflow_id'].nil?
      query_params[:'cq.dam.sync.folder.types'] = @api_client.build_collection_param(opts[:'cq_dam_sync_folder_types'], :multi) if !opts[:'cq_dam_sync_folder_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletHealthCheckServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_health_check_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_health_check_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_resource_types 
    # @option opts [String] :sling_servlet_methods 
    # @option opts [String] :sling_servlet_extensions 
    # @option opts [String] :sling_servlet_selectors 
    # @return [ComDayCqDamCoreImplServletMetadataGetServletInfo]
    def com_day_cq_dam_core_impl_servlet_metadata_get_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_metadata_get_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_resource_types 
    # @option opts [String] :sling_servlet_methods 
    # @option opts [String] :sling_servlet_extensions 
    # @option opts [String] :sling_servlet_selectors 
    # @return [Array<(ComDayCqDamCoreImplServletMetadataGetServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletMetadataGetServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_metadata_get_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_metadata_get_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.resourceTypes'] = opts[:'sling_servlet_resource_types'] if !opts[:'sling_servlet_resource_types'].nil?
      query_params[:'sling.servlet.methods'] = opts[:'sling_servlet_methods'] if !opts[:'sling_servlet_methods'].nil?
      query_params[:'sling.servlet.extensions'] = opts[:'sling_servlet_extensions'] if !opts[:'sling_servlet_extensions'].nil?
      query_params[:'sling.servlet.selectors'] = opts[:'sling_servlet_selectors'] if !opts[:'sling_servlet_selectors'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletMetadataGetServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_metadata_get_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_metadata_get_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_drm_enable 
    # @return [ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo]
    def com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_drm_enable 
    # @return [Array<(ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.drm.enable'] = opts[:'cq_dam_drm_enable'] if !opts[:'cq_dam_drm_enable'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_multiple_license_accept_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_resource_types 
    # @option opts [String] :sling_servlet_methods 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [String] :download_config 
    # @option opts [String] :view_selector 
    # @option opts [Boolean] :send_email 
    # @return [ComDayCqDamCoreImplServletResourceCollectionServletInfo]
    def com_day_cq_dam_core_impl_servlet_resource_collection_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_servlet_resource_collection_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_resource_types 
    # @option opts [String] :sling_servlet_methods 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [String] :download_config 
    # @option opts [String] :view_selector 
    # @option opts [Boolean] :send_email 
    # @return [Array<(ComDayCqDamCoreImplServletResourceCollectionServletInfo, Integer, Hash)>] ComDayCqDamCoreImplServletResourceCollectionServletInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_servlet_resource_collection_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_servlet_resource_collection_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.resourceTypes'] = @api_client.build_collection_param(opts[:'sling_servlet_resource_types'], :multi) if !opts[:'sling_servlet_resource_types'].nil?
      query_params[:'sling.servlet.methods'] = opts[:'sling_servlet_methods'] if !opts[:'sling_servlet_methods'].nil?
      query_params[:'sling.servlet.selectors'] = opts[:'sling_servlet_selectors'] if !opts[:'sling_servlet_selectors'].nil?
      query_params[:'download.config'] = opts[:'download_config'] if !opts[:'download_config'].nil?
      query_params[:'view.selector'] = opts[:'view_selector'] if !opts[:'view_selector'].nil?
      query_params[:'send_email'] = opts[:'send_email'] if !opts[:'send_email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplServletResourceCollectionServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_servlet_resource_collection_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_servlet_resource_collection_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :create_preview_enabled 
    # @option opts [Boolean] :update_preview_enabled 
    # @option opts [Integer] :queue_size 
    # @option opts [String] :folder_preview_rendition_regex 
    # @return [ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo]
    def com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :create_preview_enabled 
    # @option opts [Boolean] :update_preview_enabled 
    # @option opts [Integer] :queue_size 
    # @option opts [String] :folder_preview_rendition_regex 
    # @return [Array<(ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo, Integer, Hash)>] ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'createPreviewEnabled'] = opts[:'create_preview_enabled'] if !opts[:'create_preview_enabled'].nil?
      query_params[:'updatePreviewEnabled'] = opts[:'update_preview_enabled'] if !opts[:'update_preview_enabled'].nil?
      query_params[:'queueSize'] = opts[:'queue_size'] if !opts[:'queue_size'].nil?
      query_params[:'folderPreviewRenditionRegex'] = opts[:'folder_preview_rendition_regex'] if !opts[:'folder_preview_rendition_regex'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_ui_preview_folder_preview_updater_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_config_unzip_maxuncompressedsize 
    # @option opts [String] :cq_dam_config_unzip_encoding 
    # @return [ComDayCqDamCoreImplUnzipUnzipConfigInfo]
    def com_day_cq_dam_core_impl_unzip_unzip_config(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_impl_unzip_unzip_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_config_unzip_maxuncompressedsize 
    # @option opts [String] :cq_dam_config_unzip_encoding 
    # @return [Array<(ComDayCqDamCoreImplUnzipUnzipConfigInfo, Integer, Hash)>] ComDayCqDamCoreImplUnzipUnzipConfigInfo data, response status code and response headers
    def com_day_cq_dam_core_impl_unzip_unzip_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_impl_unzip_unzip_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.config.unzip.maxuncompressedsize'] = opts[:'cq_dam_config_unzip_maxuncompressedsize'] if !opts[:'cq_dam_config_unzip_maxuncompressedsize'].nil?
      query_params[:'cq.dam.config.unzip.encoding'] = opts[:'cq_dam_config_unzip_encoding'] if !opts[:'cq_dam_config_unzip_encoding'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreImplUnzipUnzipConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_impl_unzip_unzip_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_impl_unzip_unzip_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :cq_dam_enable_sha1 
    # @return [ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo]
    def com_day_cq_dam_core_process_exif_tool_extract_metadata_process(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_process_exif_tool_extract_metadata_process_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :cq_dam_enable_sha1 
    # @return [Array<(ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo, Integer, Hash)>] ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo data, response status code and response headers
    def com_day_cq_dam_core_process_exif_tool_extract_metadata_process_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_process_exif_tool_extract_metadata_process ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'process.label'] = opts[:'process_label'] if !opts[:'process_label'].nil?
      query_params[:'cq.dam.enable.sha1'] = opts[:'cq_dam_enable_sha1'] if !opts[:'cq_dam_enable_sha1'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_process_exif_tool_extract_metadata_process",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_process_exif_tool_extract_metadata_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :cq_dam_enable_sha1 
    # @return [ComDayCqDamCoreProcessExtractMetadataProcessInfo]
    def com_day_cq_dam_core_process_extract_metadata_process(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_process_extract_metadata_process_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :cq_dam_enable_sha1 
    # @return [Array<(ComDayCqDamCoreProcessExtractMetadataProcessInfo, Integer, Hash)>] ComDayCqDamCoreProcessExtractMetadataProcessInfo data, response status code and response headers
    def com_day_cq_dam_core_process_extract_metadata_process_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_process_extract_metadata_process ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'process.label'] = opts[:'process_label'] if !opts[:'process_label'].nil?
      query_params[:'cq.dam.enable.sha1'] = opts[:'cq_dam_enable_sha1'] if !opts[:'cq_dam_enable_sha1'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreProcessExtractMetadataProcessInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_process_extract_metadata_process",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_process_extract_metadata_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :cq_dam_enable_sha1 
    # @option opts [Array<String>] :cq_dam_metadata_xssprotected_properties 
    # @return [ComDayCqDamCoreProcessMetadataProcessorProcessInfo]
    def com_day_cq_dam_core_process_metadata_processor_process(opts = {})
      data, _status_code, _headers = com_day_cq_dam_core_process_metadata_processor_process_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :cq_dam_enable_sha1 
    # @option opts [Array<String>] :cq_dam_metadata_xssprotected_properties 
    # @return [Array<(ComDayCqDamCoreProcessMetadataProcessorProcessInfo, Integer, Hash)>] ComDayCqDamCoreProcessMetadataProcessorProcessInfo data, response status code and response headers
    def com_day_cq_dam_core_process_metadata_processor_process_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_core_process_metadata_processor_process ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'process.label'] = opts[:'process_label'] if !opts[:'process_label'].nil?
      query_params[:'cq.dam.enable.sha1'] = opts[:'cq_dam_enable_sha1'] if !opts[:'cq_dam_enable_sha1'].nil?
      query_params[:'cq.dam.metadata.xssprotected.properties'] = @api_client.build_collection_param(opts[:'cq_dam_metadata_xssprotected_properties'], :multi) if !opts[:'cq_dam_metadata_xssprotected_properties'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamCoreProcessMetadataProcessorProcessInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_core_process_metadata_processor_process",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_core_process_metadata_processor_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :executable_searchpath 
    # @return [ComDayCqDamHandlerFfmpegLocatorImplInfo]
    def com_day_cq_dam_handler_ffmpeg_locator_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_handler_ffmpeg_locator_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :executable_searchpath 
    # @return [Array<(ComDayCqDamHandlerFfmpegLocatorImplInfo, Integer, Hash)>] ComDayCqDamHandlerFfmpegLocatorImplInfo data, response status code and response headers
    def com_day_cq_dam_handler_ffmpeg_locator_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_handler_ffmpeg_locator_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'executable.searchpath'] = @api_client.build_collection_param(opts[:'executable_searchpath'], :multi) if !opts[:'executable_searchpath'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamHandlerFfmpegLocatorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_handler_ffmpeg_locator_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_handler_ffmpeg_locator_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Array<String>] :fontmgr_system_font_dir 
    # @option opts [String] :fontmgr_adobe_font_dir 
    # @option opts [String] :fontmgr_customer_font_dir 
    # @return [ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo]
    def com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Array<String>] :fontmgr_system_font_dir 
    # @option opts [String] :fontmgr_adobe_font_dir 
    # @option opts [String] :fontmgr_customer_font_dir 
    # @return [Array<(ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo, Integer, Hash)>] ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo data, response status code and response headers
    def com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?
      query_params[:'fontmgr.system.font.dir'] = @api_client.build_collection_param(opts[:'fontmgr_system_font_dir'], :multi) if !opts[:'fontmgr_system_font_dir'].nil?
      query_params[:'fontmgr.adobe.font.dir'] = opts[:'fontmgr_adobe_font_dir'] if !opts[:'fontmgr_adobe_font_dir'].nil?
      query_params[:'fontmgr.customer.font.dir'] = opts[:'fontmgr_customer_font_dir'] if !opts[:'fontmgr_customer_font_dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_handler_gibson_fontmanager_impl_font_manager_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :raster_annotation 
    # @return [ComDayCqDamHandlerStandardPdfPdfHandlerInfo]
    def com_day_cq_dam_handler_standard_pdf_pdf_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_handler_standard_pdf_pdf_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :raster_annotation 
    # @return [Array<(ComDayCqDamHandlerStandardPdfPdfHandlerInfo, Integer, Hash)>] ComDayCqDamHandlerStandardPdfPdfHandlerInfo data, response status code and response headers
    def com_day_cq_dam_handler_standard_pdf_pdf_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_handler_standard_pdf_pdf_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'raster.annotation'] = opts[:'raster_annotation'] if !opts[:'raster_annotation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamHandlerStandardPdfPdfHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_handler_standard_pdf_pdf_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_handler_standard_pdf_pdf_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :raster_annotation 
    # @return [ComDayCqDamHandlerStandardPsPostScriptHandlerInfo]
    def com_day_cq_dam_handler_standard_ps_post_script_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_handler_standard_ps_post_script_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :raster_annotation 
    # @return [Array<(ComDayCqDamHandlerStandardPsPostScriptHandlerInfo, Integer, Hash)>] ComDayCqDamHandlerStandardPsPostScriptHandlerInfo data, response status code and response headers
    def com_day_cq_dam_handler_standard_ps_post_script_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_handler_standard_ps_post_script_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'raster.annotation'] = opts[:'raster_annotation'] if !opts[:'raster_annotation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamHandlerStandardPsPostScriptHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_handler_standard_ps_post_script_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_handler_standard_ps_post_script_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :large_file_threshold 
    # @return [ComDayCqDamHandlerStandardPsdPsdHandlerInfo]
    def com_day_cq_dam_handler_standard_psd_psd_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_handler_standard_psd_psd_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :large_file_threshold 
    # @return [Array<(ComDayCqDamHandlerStandardPsdPsdHandlerInfo, Integer, Hash)>] ComDayCqDamHandlerStandardPsdPsdHandlerInfo data, response status code and response headers
    def com_day_cq_dam_handler_standard_psd_psd_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_handler_standard_psd_psd_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'large_file_threshold'] = opts[:'large_file_threshold'] if !opts[:'large_file_threshold'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamHandlerStandardPsdPsdHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_handler_standard_psd_psd_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_handler_standard_psd_psd_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_multisession 
    # @option opts [Boolean] :ids_cc_enable 
    # @option opts [Boolean] :enable_retry 
    # @option opts [Boolean] :enable_retry_scripterror 
    # @option opts [String] :externalizer_domain_cqhost 
    # @option opts [String] :externalizer_domain_http 
    # @return [ComDayCqDamIdsImplIDSJobProcessorInfo]
    def com_day_cq_dam_ids_impl_ids_job_processor(opts = {})
      data, _status_code, _headers = com_day_cq_dam_ids_impl_ids_job_processor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_multisession 
    # @option opts [Boolean] :ids_cc_enable 
    # @option opts [Boolean] :enable_retry 
    # @option opts [Boolean] :enable_retry_scripterror 
    # @option opts [String] :externalizer_domain_cqhost 
    # @option opts [String] :externalizer_domain_http 
    # @return [Array<(ComDayCqDamIdsImplIDSJobProcessorInfo, Integer, Hash)>] ComDayCqDamIdsImplIDSJobProcessorInfo data, response status code and response headers
    def com_day_cq_dam_ids_impl_ids_job_processor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_ids_impl_ids_job_processor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enable.multisession'] = opts[:'enable_multisession'] if !opts[:'enable_multisession'].nil?
      query_params[:'ids.cc.enable'] = opts[:'ids_cc_enable'] if !opts[:'ids_cc_enable'].nil?
      query_params[:'enable.retry'] = opts[:'enable_retry'] if !opts[:'enable_retry'].nil?
      query_params[:'enable.retry.scripterror'] = opts[:'enable_retry_scripterror'] if !opts[:'enable_retry_scripterror'].nil?
      query_params[:'externalizer.domain.cqhost'] = opts[:'externalizer_domain_cqhost'] if !opts[:'externalizer_domain_cqhost'].nil?
      query_params[:'externalizer.domain.http'] = opts[:'externalizer_domain_http'] if !opts[:'externalizer_domain_http'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamIdsImplIDSJobProcessorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_ids_impl_ids_job_processor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_ids_impl_ids_job_processor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_errors_to_blacklist 
    # @option opts [Integer] :retry_interval_to_whitelist 
    # @option opts [Integer] :connect_timeout 
    # @option opts [Integer] :socket_timeout 
    # @option opts [String] :process_label 
    # @option opts [Integer] :connection_use_max 
    # @return [ComDayCqDamIdsImplIDSPoolManagerImplInfo]
    def com_day_cq_dam_ids_impl_ids_pool_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_ids_impl_ids_pool_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_errors_to_blacklist 
    # @option opts [Integer] :retry_interval_to_whitelist 
    # @option opts [Integer] :connect_timeout 
    # @option opts [Integer] :socket_timeout 
    # @option opts [String] :process_label 
    # @option opts [Integer] :connection_use_max 
    # @return [Array<(ComDayCqDamIdsImplIDSPoolManagerImplInfo, Integer, Hash)>] ComDayCqDamIdsImplIDSPoolManagerImplInfo data, response status code and response headers
    def com_day_cq_dam_ids_impl_ids_pool_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_ids_impl_ids_pool_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'max.errors.to.blacklist'] = opts[:'max_errors_to_blacklist'] if !opts[:'max_errors_to_blacklist'].nil?
      query_params[:'retry.interval.to.whitelist'] = opts[:'retry_interval_to_whitelist'] if !opts[:'retry_interval_to_whitelist'].nil?
      query_params[:'connect.timeout'] = opts[:'connect_timeout'] if !opts[:'connect_timeout'].nil?
      query_params[:'socket.timeout'] = opts[:'socket_timeout'] if !opts[:'socket_timeout'].nil?
      query_params[:'process.label'] = opts[:'process_label'] if !opts[:'process_label'].nil?
      query_params[:'connection.use.max'] = opts[:'connection_use_max'] if !opts[:'connection_use_max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamIdsImplIDSPoolManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_ids_impl_ids_pool_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_ids_impl_ids_pool_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :extract_pages 
    # @return [ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo]
    def com_day_cq_dam_indd_impl_handler_indesign_xmp_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_indd_impl_handler_indesign_xmp_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [Boolean] :extract_pages 
    # @return [Array<(ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo, Integer, Hash)>] ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo data, response status code and response headers
    def com_day_cq_dam_indd_impl_handler_indesign_xmp_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_indd_impl_handler_indesign_xmp_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'process.label'] = opts[:'process_label'] if !opts[:'process_label'].nil?
      query_params[:'extract.pages'] = opts[:'extract_pages'] if !opts[:'extract_pages'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_indd_impl_handler_indesign_xmp_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_indd_impl_handler_indesign_xmp_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :snippetcreation_maxcollections 
    # @return [ComDayCqDamInddImplServletSnippetCreationServletInfo]
    def com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :snippetcreation_maxcollections 
    # @return [Array<(ComDayCqDamInddImplServletSnippetCreationServletInfo, Integer, Hash)>] ComDayCqDamInddImplServletSnippetCreationServletInfo data, response status code and response headers
    def com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'snippetcreation.maxcollections'] = opts[:'snippetcreation_maxcollections'] if !opts[:'snippetcreation_maxcollections'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamInddImplServletSnippetCreationServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_indd_impl_servlet_snippet_creation_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [String] :cq_dam_indd_pages_regex 
    # @option opts [Boolean] :ids_job_decoupled 
    # @option opts [String] :ids_job_workflow_model 
    # @return [ComDayCqDamInddProcessINDDMediaExtractProcessInfo]
    def com_day_cq_dam_indd_process_indd_media_extract_process(opts = {})
      data, _status_code, _headers = com_day_cq_dam_indd_process_indd_media_extract_process_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @option opts [String] :cq_dam_indd_pages_regex 
    # @option opts [Boolean] :ids_job_decoupled 
    # @option opts [String] :ids_job_workflow_model 
    # @return [Array<(ComDayCqDamInddProcessINDDMediaExtractProcessInfo, Integer, Hash)>] ComDayCqDamInddProcessINDDMediaExtractProcessInfo data, response status code and response headers
    def com_day_cq_dam_indd_process_indd_media_extract_process_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_indd_process_indd_media_extract_process ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'process.label'] = opts[:'process_label'] if !opts[:'process_label'].nil?
      query_params[:'cq.dam.indd.pages.regex'] = opts[:'cq_dam_indd_pages_regex'] if !opts[:'cq_dam_indd_pages_regex'].nil?
      query_params[:'ids.job.decoupled'] = opts[:'ids_job_decoupled'] if !opts[:'ids_job_decoupled'].nil?
      query_params[:'ids.job.workflow.model'] = opts[:'ids_job_workflow_model'] if !opts[:'ids_job_workflow_model'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamInddProcessINDDMediaExtractProcessInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_indd_process_indd_media_extract_process",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_indd_process_indd_media_extract_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :batch_commit_size 
    # @return [ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo]
    def com_day_cq_dam_performance_internal_asset_performance_data_handler_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_performance_internal_asset_performance_data_handler_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :batch_commit_size 
    # @return [Array<(ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo, Integer, Hash)>] ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo data, response status code and response headers
    def com_day_cq_dam_performance_internal_asset_performance_data_handler_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_performance_internal_asset_performance_data_handler_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'batch.commit.size'] = opts[:'batch_commit_size'] if !opts[:'batch_commit_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_performance_internal_asset_performance_data_handler_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_performance_internal_asset_performance_data_handler_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @return [ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo]
    def com_day_cq_dam_performance_internal_asset_performance_report_sync_job(opts = {})
      data, _status_code, _headers = com_day_cq_dam_performance_internal_asset_performance_report_sync_job_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @return [Array<(ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo, Integer, Hash)>] ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo data, response status code and response headers
    def com_day_cq_dam_performance_internal_asset_performance_report_sync_job_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_performance_internal_asset_performance_report_sync_job ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_performance_internal_asset_performance_report_sync_job",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_performance_internal_asset_performance_report_sync_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :delete_zip_file 
    # @return [ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo]
    def com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro(opts = {})
      data, _status_code, _headers = com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :delete_zip_file 
    # @return [Array<(ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo, Integer, Hash)>] ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo data, response status code and response headers
    def com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'delete.zip.file'] = opts[:'delete_zip_file'] if !opts[:'delete_zip_file'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_pim_impl_sourcing_upload_process_product_assets_upload_pro\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled 
    # @return [ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo]
    def com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even(opts = {})
      data, _status_code, _headers = com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled 
    # @return [Array<(ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo, Integer, Hash)>] ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo data, response status code and response headers
    def com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled'] = opts[:'cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled'] if !opts[:'cq_dam_s7dam_dynamicmediaconfigeventlistener_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_s7dam_common_analytics_impl_s7dam_dynamic_media_config_even\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Boolean] :scheduler_concurrent 
    # @return [ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo]
    def com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner(opts = {})
      data, _status_code, _headers = com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Boolean] :scheduler_concurrent 
    # @return [Array<(ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo, Integer, Hash)>] ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo data, response status code and response headers
    def com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?
      query_params[:'scheduler.concurrent'] = opts[:'scheduler_concurrent'] if !opts[:'scheduler_concurrent'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_s7dam_common_analytics_impl_site_catalyst_report_runner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_post_operation 
    # @option opts [String] :sling_servlet_methods 
    # @return [ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo]
    def com_day_cq_dam_s7dam_common_post_servlets_set_create_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_s7dam_common_post_servlets_set_create_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_post_operation 
    # @option opts [String] :sling_servlet_methods 
    # @return [Array<(ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo, Integer, Hash)>] ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo data, response status code and response headers
    def com_day_cq_dam_s7dam_common_post_servlets_set_create_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_s7dam_common_post_servlets_set_create_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.post.operation'] = opts[:'sling_post_operation'] if !opts[:'sling_post_operation'].nil?
      query_params[:'sling.servlet.methods'] = opts[:'sling_servlet_methods'] if !opts[:'sling_servlet_methods'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_s7dam_common_post_servlets_set_create_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_s7dam_common_post_servlets_set_create_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_post_operation 
    # @option opts [String] :sling_servlet_methods 
    # @return [ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo]
    def com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler(opts = {})
      data, _status_code, _headers = com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_post_operation 
    # @option opts [String] :sling_servlet_methods 
    # @return [Array<(ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo, Integer, Hash)>] ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo data, response status code and response headers
    def com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.post.operation'] = opts[:'sling_post_operation'] if !opts[:'sling_post_operation'].nil?
      query_params[:'sling.servlet.methods'] = opts[:'sling_servlet_methods'] if !opts[:'sling_servlet_methods'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_s7dam_common_post_servlets_set_modify_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @return [ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo]
    def com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process(opts = {})
      data, _status_code, _headers = com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :process_label 
    # @return [Array<(ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo, Integer, Hash)>] ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo data, response status code and response headers
    def com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'process.label'] = opts[:'process_label'] if !opts[:'process_label'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_s7dam_common_process_video_thumbnail_download_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_s7dam_damchangeeventlistener_enabled 
    # @return [ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo]
    def com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener(opts = {})
      data, _status_code, _headers = com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_s7dam_damchangeeventlistener_enabled 
    # @return [Array<(ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo, Integer, Hash)>] ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo data, response status code and response headers
    def com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.s7dam.damchangeeventlistener.enabled'] = opts[:'cq_dam_s7dam_damchangeeventlistener_enabled'] if !opts[:'cq_dam_s7dam_damchangeeventlistener_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_s7dam_common_s7dam_dam_change_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_paths 
    # @option opts [String] :sling_servlet_methods 
    # @return [ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo]
    def com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_paths 
    # @option opts [String] :sling_servlet_methods 
    # @return [Array<(ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo, Integer, Hash)>] ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo data, response status code and response headers
    def com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.paths'] = opts[:'sling_servlet_paths'] if !opts[:'sling_servlet_paths'].nil?
      query_params[:'sling.servlet.methods'] = opts[:'sling_servlet_methods'] if !opts[:'sling_servlet_methods'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_s7dam_common_servlets_s7dam_product_info_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name 
    # @return [ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo]
    def com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name 
    # @option opts [Integer] :cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name 
    # @return [Array<(ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo, Integer, Hash)>] ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo data, response status code and response headers
    def com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name'] = opts[:'cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name'] if !opts[:'cq_dam_s7dam_videoproxyclientservice_multipartupload_minsize_name'].nil?
      query_params[:'cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name'] = opts[:'cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name'] if !opts[:'cq_dam_s7dam_videoproxyclientservice_multipartupload_partsize_name'].nil?
      query_params[:'cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name'] = opts[:'cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name'] if !opts[:'cq_dam_s7dam_videoproxyclientservice_multipartupload_numthread_name'].nil?
      query_params[:'cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name'] = opts[:'cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name'] if !opts[:'cq_dam_s7dam_videoproxyclientservice_http_readtimeout_name'].nil?
      query_params[:'cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name'] = opts[:'cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name'] if !opts[:'cq_dam_s7dam_videoproxyclientservice_http_connectiontimeout_name'].nil?
      query_params[:'cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name'] = opts[:'cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name'] if !opts[:'cq_dam_s7dam_videoproxyclientservice_http_maxretrycount_name'].nil?
      query_params[:'cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name'] = opts[:'cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name'] if !opts[:'cq_dam_s7dam_videoproxyclientservice_uploadprogress_interval_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_s7dam_common_video_impl_video_proxy_client_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_scene7_apiclient_recordsperpage_nofilter_name 
    # @option opts [Integer] :cq_dam_scene7_apiclient_recordsperpage_withfilter_name 
    # @return [ComDayCqDamScene7ImplScene7APIClientImplInfo]
    def com_day_cq_dam_scene7_impl_scene7_api_client_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_scene7_impl_scene7_api_client_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_scene7_apiclient_recordsperpage_nofilter_name 
    # @option opts [Integer] :cq_dam_scene7_apiclient_recordsperpage_withfilter_name 
    # @return [Array<(ComDayCqDamScene7ImplScene7APIClientImplInfo, Integer, Hash)>] ComDayCqDamScene7ImplScene7APIClientImplInfo data, response status code and response headers
    def com_day_cq_dam_scene7_impl_scene7_api_client_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_api_client_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.scene7.apiclient.recordsperpage.nofilter.name'] = opts[:'cq_dam_scene7_apiclient_recordsperpage_nofilter_name'] if !opts[:'cq_dam_scene7_apiclient_recordsperpage_nofilter_name'].nil?
      query_params[:'cq.dam.scene7.apiclient.recordsperpage.withfilter.name'] = opts[:'cq_dam_scene7_apiclient_recordsperpage_withfilter_name'] if !opts[:'cq_dam_scene7_apiclient_recordsperpage_withfilter_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamScene7ImplScene7APIClientImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_api_client_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_scene7_impl_scene7_api_client_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_dam_scene7_assetmimetypeservice_mapping 
    # @return [ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo]
    def com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_dam_scene7_assetmimetypeservice_mapping 
    # @return [Array<(ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo, Integer, Hash)>] ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo data, response status code and response headers
    def com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.scene7.assetmimetypeservice.mapping'] = @api_client.build_collection_param(opts[:'cq_dam_scene7_assetmimetypeservice_mapping'], :multi) if !opts[:'cq_dam_scene7_assetmimetypeservice_mapping'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_scene7_impl_scene7_asset_mime_type_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_scene7_configurationeventlistener_enabled 
    # @return [ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo]
    def com_day_cq_dam_scene7_impl_scene7_configuration_event_listener(opts = {})
      data, _status_code, _headers = com_day_cq_dam_scene7_impl_scene7_configuration_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_scene7_configurationeventlistener_enabled 
    # @return [Array<(ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo, Integer, Hash)>] ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo data, response status code and response headers
    def com_day_cq_dam_scene7_impl_scene7_configuration_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_configuration_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.scene7.configurationeventlistener.enabled'] = opts[:'cq_dam_scene7_configurationeventlistener_enabled'] if !opts[:'cq_dam_scene7_configurationeventlistener_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_configuration_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_scene7_impl_scene7_configuration_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_scene7_damchangeeventlistener_enabled 
    # @option opts [Array<String>] :cq_dam_scene7_damchangeeventlistener_observed_paths 
    # @return [ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo]
    def com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener(opts = {})
      data, _status_code, _headers = com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_dam_scene7_damchangeeventlistener_enabled 
    # @option opts [Array<String>] :cq_dam_scene7_damchangeeventlistener_observed_paths 
    # @return [Array<(ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo, Integer, Hash)>] ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo data, response status code and response headers
    def com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.scene7.damchangeeventlistener.enabled'] = opts[:'cq_dam_scene7_damchangeeventlistener_enabled'] if !opts[:'cq_dam_scene7_damchangeeventlistener_enabled'].nil?
      query_params[:'cq.dam.scene7.damchangeeventlistener.observed.paths'] = @api_client.build_collection_param(opts[:'cq_dam_scene7_damchangeeventlistener_observed_paths'], :multi) if !opts[:'cq_dam_scene7_damchangeeventlistener_observed_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_scene7_impl_scene7_dam_change_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scene7_flash_templates_rti 
    # @option opts [String] :scene7_flash_templates_rsi 
    # @option opts [String] :scene7_flash_templates_rb 
    # @option opts [String] :scene7_flash_templates_rurl 
    # @option opts [String] :scene7_flash_template_url_format_parameter 
    # @return [ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo]
    def com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scene7_flash_templates_rti 
    # @option opts [String] :scene7_flash_templates_rsi 
    # @option opts [String] :scene7_flash_templates_rb 
    # @option opts [String] :scene7_flash_templates_rurl 
    # @option opts [String] :scene7_flash_template_url_format_parameter 
    # @return [Array<(ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo, Integer, Hash)>] ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo data, response status code and response headers
    def com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scene7FlashTemplates.rti'] = opts[:'scene7_flash_templates_rti'] if !opts[:'scene7_flash_templates_rti'].nil?
      query_params[:'scene7FlashTemplates.rsi'] = opts[:'scene7_flash_templates_rsi'] if !opts[:'scene7_flash_templates_rsi'].nil?
      query_params[:'scene7FlashTemplates.rb'] = opts[:'scene7_flash_templates_rb'] if !opts[:'scene7_flash_templates_rb'].nil?
      query_params[:'scene7FlashTemplates.rurl'] = opts[:'scene7_flash_templates_rurl'] if !opts[:'scene7_flash_templates_rurl'].nil?
      query_params[:'scene7FlashTemplate.urlFormatParameter'] = opts[:'scene7_flash_template_url_format_parameter'] if !opts[:'scene7_flash_template_url_format_parameter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_scene7_impl_scene7_flash_templates_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_scene7_uploadservice_activejobtimeout_label 
    # @option opts [Integer] :cq_dam_scene7_uploadservice_connectionmaxperroute_label 
    # @return [ComDayCqDamScene7ImplScene7UploadServiceImplInfo]
    def com_day_cq_dam_scene7_impl_scene7_upload_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_dam_scene7_impl_scene7_upload_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :cq_dam_scene7_uploadservice_activejobtimeout_label 
    # @option opts [Integer] :cq_dam_scene7_uploadservice_connectionmaxperroute_label 
    # @return [Array<(ComDayCqDamScene7ImplScene7UploadServiceImplInfo, Integer, Hash)>] ComDayCqDamScene7ImplScene7UploadServiceImplInfo data, response status code and response headers
    def com_day_cq_dam_scene7_impl_scene7_upload_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_upload_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.dam.scene7.uploadservice.activejobtimeout.label'] = opts[:'cq_dam_scene7_uploadservice_activejobtimeout_label'] if !opts[:'cq_dam_scene7_uploadservice_activejobtimeout_label'].nil?
      query_params[:'cq.dam.scene7.uploadservice.connectionmaxperroute.label'] = opts[:'cq_dam_scene7_uploadservice_connectionmaxperroute_label'] if !opts[:'cq_dam_scene7_uploadservice_connectionmaxperroute_label'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamScene7ImplScene7UploadServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_scene7_impl_scene7_upload_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_scene7_impl_scene7_upload_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :get_cache_expiration_unit 
    # @option opts [Integer] :get_cache_expiration_value 
    # @return [ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo]
    def com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser(opts = {})
      data, _status_code, _headers = com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :get_cache_expiration_unit 
    # @option opts [Integer] :get_cache_expiration_value 
    # @return [Array<(ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo, Integer, Hash)>] ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo data, response status code and response headers
    def com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'getCacheExpirationUnit'] = opts[:'get_cache_expiration_unit'] if !opts[:'get_cache_expiration_unit'].nil?
      query_params[:'getCacheExpirationValue'] = opts[:'get_cache_expiration_value'] if !opts[:'get_cache_expiration_value'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_stock_integration_impl_cache_stock_cache_configuration_ser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :locale 
    # @option opts [String] :ims_config 
    # @return [ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo]
    def com_day_cq_dam_stock_integration_impl_configuration_stock_configuration(opts = {})
      data, _status_code, _headers = com_day_cq_dam_stock_integration_impl_configuration_stock_configuration_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :locale 
    # @option opts [String] :ims_config 
    # @return [Array<(ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo, Integer, Hash)>] ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo data, response status code and response headers
    def com_day_cq_dam_stock_integration_impl_configuration_stock_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_stock_integration_impl_configuration_stock_configuration ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'locale'] = opts[:'locale'] if !opts[:'locale'].nil?
      query_params[:'imsConfig'] = opts[:'ims_config'] if !opts[:'ims_config'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_stock_integration_impl_configuration_stock_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_stock_integration_impl_configuration_stock_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [ComDayCqDamVideoImplServletVideoTestServletInfo]
    def com_day_cq_dam_video_impl_servlet_video_test_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_dam_video_impl_servlet_video_test_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [Array<(ComDayCqDamVideoImplServletVideoTestServletInfo, Integer, Hash)>] ComDayCqDamVideoImplServletVideoTestServletInfo data, response status code and response headers
    def com_day_cq_dam_video_impl_servlet_video_test_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_dam_video_impl_servlet_video_test_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqDamVideoImplServletVideoTestServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_dam_video_impl_servlet_video_test_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_dam_video_impl_servlet_video_test_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_width 
    # @option opts [Integer] :max_height 
    # @return [ComDayCqExtwidgetServletsImageSpriteServletInfo]
    def com_day_cq_extwidget_servlets_image_sprite_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_extwidget_servlets_image_sprite_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_width 
    # @option opts [Integer] :max_height 
    # @return [Array<(ComDayCqExtwidgetServletsImageSpriteServletInfo, Integer, Hash)>] ComDayCqExtwidgetServletsImageSpriteServletInfo data, response status code and response headers
    def com_day_cq_extwidget_servlets_image_sprite_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_extwidget_servlets_image_sprite_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'maxWidth'] = opts[:'max_width'] if !opts[:'max_width'].nil?
      query_params[:'maxHeight'] = opts[:'max_height'] if !opts[:'max_height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqExtwidgetServletsImageSpriteServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_extwidget_servlets_image_sprite_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_extwidget_servlets_image_sprite_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :fontpath 
    # @option opts [Integer] :oversampling_factor 
    # @return [ComDayCqImageInternalFontFontHelperInfo]
    def com_day_cq_image_internal_font_font_helper(opts = {})
      data, _status_code, _headers = com_day_cq_image_internal_font_font_helper_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :fontpath 
    # @option opts [Integer] :oversampling_factor 
    # @return [Array<(ComDayCqImageInternalFontFontHelperInfo, Integer, Hash)>] ComDayCqImageInternalFontFontHelperInfo data, response status code and response headers
    def com_day_cq_image_internal_font_font_helper_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_image_internal_font_font_helper ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.image.internal.font.FontHelper'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'fontpath'] = @api_client.build_collection_param(opts[:'fontpath'], :multi) if !opts[:'fontpath'].nil?
      query_params[:'oversamplingFactor'] = opts[:'oversampling_factor'] if !opts[:'oversampling_factor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqImageInternalFontFontHelperInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_image_internal_font_font_helper",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_image_internal_font_font_helper\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cluster_level_enable 
    # @option opts [Integer] :cluster_master_level 
    # @option opts [Integer] :cluster_slave_level 
    # @return [ComDayCqJcrclustersupportClusterStartLevelControllerInfo]
    def com_day_cq_jcrclustersupport_cluster_start_level_controller(opts = {})
      data, _status_code, _headers = com_day_cq_jcrclustersupport_cluster_start_level_controller_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cluster_level_enable 
    # @option opts [Integer] :cluster_master_level 
    # @option opts [Integer] :cluster_slave_level 
    # @return [Array<(ComDayCqJcrclustersupportClusterStartLevelControllerInfo, Integer, Hash)>] ComDayCqJcrclustersupportClusterStartLevelControllerInfo data, response status code and response headers
    def com_day_cq_jcrclustersupport_cluster_start_level_controller_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_jcrclustersupport_cluster_start_level_controller ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cluster.level.enable'] = opts[:'cluster_level_enable'] if !opts[:'cluster_level_enable'].nil?
      query_params[:'cluster.master.level'] = opts[:'cluster_master_level'] if !opts[:'cluster_master_level'].nil?
      query_params[:'cluster.slave.level'] = opts[:'cluster_slave_level'] if !opts[:'cluster_slave_level'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqJcrclustersupportClusterStartLevelControllerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_jcrclustersupport_cluster_start_level_controller",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_jcrclustersupport_cluster_start_level_controller\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :smtp_host 
    # @option opts [Integer] :smtp_port 
    # @option opts [String] :smtp_user 
    # @option opts [String] :smtp_password 
    # @option opts [String] :from_address 
    # @option opts [Boolean] :smtp_ssl 
    # @option opts [Boolean] :smtp_starttls 
    # @option opts [Boolean] :debug_email 
    # @return [ComDayCqMailerDefaultMailServiceInfo]
    def com_day_cq_mailer_default_mail_service(opts = {})
      data, _status_code, _headers = com_day_cq_mailer_default_mail_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :smtp_host 
    # @option opts [Integer] :smtp_port 
    # @option opts [String] :smtp_user 
    # @option opts [String] :smtp_password 
    # @option opts [String] :from_address 
    # @option opts [Boolean] :smtp_ssl 
    # @option opts [Boolean] :smtp_starttls 
    # @option opts [Boolean] :debug_email 
    # @return [Array<(ComDayCqMailerDefaultMailServiceInfo, Integer, Hash)>] ComDayCqMailerDefaultMailServiceInfo data, response status code and response headers
    def com_day_cq_mailer_default_mail_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mailer_default_mail_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mailer.DefaultMailService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'smtp.host'] = opts[:'smtp_host'] if !opts[:'smtp_host'].nil?
      query_params[:'smtp.port'] = opts[:'smtp_port'] if !opts[:'smtp_port'].nil?
      query_params[:'smtp.user'] = opts[:'smtp_user'] if !opts[:'smtp_user'].nil?
      query_params[:'smtp.password'] = opts[:'smtp_password'] if !opts[:'smtp_password'].nil?
      query_params[:'from.address'] = opts[:'from_address'] if !opts[:'from_address'].nil?
      query_params[:'smtp.ssl'] = opts[:'smtp_ssl'] if !opts[:'smtp_ssl'].nil?
      query_params[:'smtp.starttls'] = opts[:'smtp_starttls'] if !opts[:'smtp_starttls'].nil?
      query_params[:'debug.email'] = opts[:'debug_email'] if !opts[:'debug_email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMailerDefaultMailServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mailer_default_mail_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mailer_default_mail_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :max_recipient_count 
    # @return [ComDayCqMailerImplCqMailingServiceInfo]
    def com_day_cq_mailer_impl_cq_mailing_service(opts = {})
      data, _status_code, _headers = com_day_cq_mailer_impl_cq_mailing_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :max_recipient_count 
    # @return [Array<(ComDayCqMailerImplCqMailingServiceInfo, Integer, Hash)>] ComDayCqMailerImplCqMailingServiceInfo data, response status code and response headers
    def com_day_cq_mailer_impl_cq_mailing_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mailer_impl_cq_mailing_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'max.recipient.count'] = opts[:'max_recipient_count'] if !opts[:'max_recipient_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMailerImplCqMailingServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mailer_impl_cq_mailing_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mailer_impl_cq_mailing_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :mailer_email_charset 
    # @return [ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo]
    def com_day_cq_mailer_impl_email_cq_email_template_factory(opts = {})
      data, _status_code, _headers = com_day_cq_mailer_impl_email_cq_email_template_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :mailer_email_charset 
    # @return [Array<(ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo, Integer, Hash)>] ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo data, response status code and response headers
    def com_day_cq_mailer_impl_email_cq_email_template_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mailer_impl_email_cq_email_template_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'mailer.email.charset'] = opts[:'mailer_email_charset'] if !opts[:'mailer_email_charset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mailer_impl_email_cq_email_template_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mailer_impl_email_cq_email_template_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :mailer_email_embed 
    # @option opts [String] :mailer_email_charset 
    # @option opts [String] :mailer_email_retriever_user_id 
    # @option opts [String] :mailer_email_retriever_user_pwd 
    # @return [ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo]
    def com_day_cq_mailer_impl_email_cq_retriever_template_factory(opts = {})
      data, _status_code, _headers = com_day_cq_mailer_impl_email_cq_retriever_template_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :mailer_email_embed 
    # @option opts [String] :mailer_email_charset 
    # @option opts [String] :mailer_email_retriever_user_id 
    # @option opts [String] :mailer_email_retriever_user_pwd 
    # @return [Array<(ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo, Integer, Hash)>] ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo data, response status code and response headers
    def com_day_cq_mailer_impl_email_cq_retriever_template_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mailer_impl_email_cq_retriever_template_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'mailer.email.embed'] = opts[:'mailer_email_embed'] if !opts[:'mailer_email_embed'].nil?
      query_params[:'mailer.email.charset'] = opts[:'mailer_email_charset'] if !opts[:'mailer_email_charset'].nil?
      query_params[:'mailer.email.retrieverUserID'] = opts[:'mailer_email_retriever_user_id'] if !opts[:'mailer_email_retriever_user_id'].nil?
      query_params[:'mailer.email.retrieverUserPWD'] = opts[:'mailer_email_retriever_user_pwd'] if !opts[:'mailer_email_retriever_user_pwd'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mailer_impl_email_cq_retriever_template_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mailer_impl_email_cq_retriever_template_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :aem_mcm_campaign_form_constraints 
    # @option opts [String] :aem_mcm_campaign_public_url 
    # @option opts [Boolean] :aem_mcm_campaign_relaxed_ssl 
    # @return [ComDayCqMcmCampaignImplIntegrationConfigImplInfo]
    def com_day_cq_mcm_campaign_impl_integration_config_impl(opts = {})
      data, _status_code, _headers = com_day_cq_mcm_campaign_impl_integration_config_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :aem_mcm_campaign_form_constraints 
    # @option opts [String] :aem_mcm_campaign_public_url 
    # @option opts [Boolean] :aem_mcm_campaign_relaxed_ssl 
    # @return [Array<(ComDayCqMcmCampaignImplIntegrationConfigImplInfo, Integer, Hash)>] ComDayCqMcmCampaignImplIntegrationConfigImplInfo data, response status code and response headers
    def com_day_cq_mcm_campaign_impl_integration_config_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mcm_campaign_impl_integration_config_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'aem.mcm.campaign.formConstraints'] = @api_client.build_collection_param(opts[:'aem_mcm_campaign_form_constraints'], :multi) if !opts[:'aem_mcm_campaign_form_constraints'].nil?
      query_params[:'aem.mcm.campaign.publicUrl'] = opts[:'aem_mcm_campaign_public_url'] if !opts[:'aem_mcm_campaign_public_url'].nil?
      query_params[:'aem.mcm.campaign.relaxedSSL'] = opts[:'aem_mcm_campaign_relaxed_ssl'] if !opts[:'aem_mcm_campaign_relaxed_ssl'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMcmCampaignImplIntegrationConfigImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mcm_campaign_impl_integration_config_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mcm_campaign_impl_integration_config_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo]
    def com_day_cq_mcm_campaign_importer_personalized_text_handler_factory(opts = {})
      data, _status_code, _headers = com_day_cq_mcm_campaign_importer_personalized_text_handler_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo, Integer, Hash)>] ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo data, response status code and response headers
    def com_day_cq_mcm_campaign_importer_personalized_text_handler_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mcm_campaign_importer_personalized_text_handler_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mcm_campaign_importer_personalized_text_handler_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mcm_campaign_importer_personalized_text_handler_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :from_address 
    # @option opts [String] :sender_host 
    # @option opts [String] :max_bounce_count 
    # @return [ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo]
    def com_day_cq_mcm_core_newsletter_newsletter_email_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_mcm_core_newsletter_newsletter_email_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :from_address 
    # @option opts [String] :sender_host 
    # @option opts [String] :max_bounce_count 
    # @return [Array<(ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo, Integer, Hash)>] ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo data, response status code and response headers
    def com_day_cq_mcm_core_newsletter_newsletter_email_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mcm_core_newsletter_newsletter_email_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'from.address'] = opts[:'from_address'] if !opts[:'from_address'].nil?
      query_params[:'sender.host'] = opts[:'sender_host'] if !opts[:'sender_host'].nil?
      query_params[:'max.bounce.count'] = opts[:'max_bounce_count'] if !opts[:'max_bounce_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mcm_core_newsletter_newsletter_email_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mcm_core_newsletter_newsletter_email_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :experience_indirection 
    # @option opts [Array<String>] :touchpoint_indirection 
    # @return [ComDayCqMcmImplMCMConfigurationInfo]
    def com_day_cq_mcm_impl_mcm_configuration(opts = {})
      data, _status_code, _headers = com_day_cq_mcm_impl_mcm_configuration_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :experience_indirection 
    # @option opts [Array<String>] :touchpoint_indirection 
    # @return [Array<(ComDayCqMcmImplMCMConfigurationInfo, Integer, Hash)>] ComDayCqMcmImplMCMConfigurationInfo data, response status code and response headers
    def com_day_cq_mcm_impl_mcm_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mcm_impl_mcm_configuration ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'experience.indirection'] = @api_client.build_collection_param(opts[:'experience_indirection'], :multi) if !opts[:'experience_indirection'].nil?
      query_params[:'touchpoint.indirection'] = @api_client.build_collection_param(opts[:'touchpoint_indirection'], :multi) if !opts[:'touchpoint_indirection'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMcmImplMCMConfigurationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mcm_impl_mcm_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mcm_impl_mcm_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo]
    def com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen(opts = {})
      data, _status_code, _headers = com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [Array<(ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo, Integer, Hash)>] ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo data, response status code and response headers
    def com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?
      query_params[:'component.resourceType'] = opts[:'component_resource_type'] if !opts[:'component_resource_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mcm_landingpage_parser_taghandlers_cta_click_through_componen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo]
    def com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug(opts = {})
      data, _status_code, _headers = com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [Array<(ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo, Integer, Hash)>] ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo data, response status code and response headers
    def com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?
      query_params[:'component.resourceType'] = opts[:'component_resource_type'] if !opts[:'component_resource_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mcm_landingpage_parser_taghandlers_cta_graphical_click_throug\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo]
    def com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component(opts = {})
      data, _status_code, _headers = com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo, Integer, Hash)>] ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo data, response status code and response headers
    def com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mcm_landingpage_parser_taghandlers_cta_lead_form_cta_component\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo]
    def com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha(opts = {})
      data, _status_code, _headers = com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo, Integer, Hash)>] ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo data, response status code and response headers
    def com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mcm_landingpage_parser_taghandlers_mbox_m_box_experience_tag_ha\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo]
    def com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h(opts = {})
      data, _status_code, _headers = com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [Array<(ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo, Integer, Hash)>] ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo data, response status code and response headers
    def com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?
      query_params[:'component.resourceType'] = opts[:'component_resource_type'] if !opts[:'component_resource_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_mcm_landingpage_parser_taghandlers_mbox_target_component_tag_h\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @return [ComDayCqNotificationImplNotificationServiceImplInfo]
    def com_day_cq_notification_impl_notification_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_notification_impl_notification_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @return [Array<(ComDayCqNotificationImplNotificationServiceImplInfo, Integer, Hash)>] ComDayCqNotificationImplNotificationServiceImplInfo data, response status code and response headers
    def com_day_cq_notification_impl_notification_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_notification_impl_notification_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqNotificationImplNotificationServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_notification_impl_notification_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_notification_impl_notification_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :forcelocation 
    # @return [ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo]
    def com_day_cq_personalization_impl_servlets_targeting_configuration_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_personalization_impl_servlets_targeting_configuration_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :forcelocation 
    # @return [Array<(ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo, Integer, Hash)>] ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo data, response status code and response headers
    def com_day_cq_personalization_impl_servlets_targeting_configuration_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_personalization_impl_servlets_targeting_configuration_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'forcelocation'] = opts[:'forcelocation'] if !opts[:'forcelocation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_personalization_impl_servlets_targeting_configuration_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_personalization_impl_servlets_targeting_configuration_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :id 
    # @option opts [Boolean] :enabled 
    # @option opts [Boolean] :reference 
    # @option opts [Integer] :interval 
    # @option opts [String] :expression 
    # @option opts [String] :source 
    # @option opts [String] :target 
    # @option opts [String] :login 
    # @option opts [String] :password 
    # @return [ComDayCqPollingImporterImplManagedPollConfigImplInfo]
    def com_day_cq_polling_importer_impl_managed_poll_config_impl(opts = {})
      data, _status_code, _headers = com_day_cq_polling_importer_impl_managed_poll_config_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :id 
    # @option opts [Boolean] :enabled 
    # @option opts [Boolean] :reference 
    # @option opts [Integer] :interval 
    # @option opts [String] :expression 
    # @option opts [String] :source 
    # @option opts [String] :target 
    # @option opts [String] :login 
    # @option opts [String] :password 
    # @return [Array<(ComDayCqPollingImporterImplManagedPollConfigImplInfo, Integer, Hash)>] ComDayCqPollingImporterImplManagedPollConfigImplInfo data, response status code and response headers
    def com_day_cq_polling_importer_impl_managed_poll_config_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_polling_importer_impl_managed_poll_config_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'reference'] = opts[:'reference'] if !opts[:'reference'].nil?
      query_params[:'interval'] = opts[:'interval'] if !opts[:'interval'].nil?
      query_params[:'expression'] = opts[:'expression'] if !opts[:'expression'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?
      query_params[:'target'] = opts[:'target'] if !opts[:'target'].nil?
      query_params[:'login'] = opts[:'login'] if !opts[:'login'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqPollingImporterImplManagedPollConfigImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_polling_importer_impl_managed_poll_config_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_polling_importer_impl_managed_poll_config_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :importer_user 
    # @return [ComDayCqPollingImporterImplManagedPollingImporterImplInfo]
    def com_day_cq_polling_importer_impl_managed_polling_importer_impl(opts = {})
      data, _status_code, _headers = com_day_cq_polling_importer_impl_managed_polling_importer_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :importer_user 
    # @return [Array<(ComDayCqPollingImporterImplManagedPollingImporterImplInfo, Integer, Hash)>] ComDayCqPollingImporterImplManagedPollingImporterImplInfo data, response status code and response headers
    def com_day_cq_polling_importer_impl_managed_polling_importer_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_polling_importer_impl_managed_polling_importer_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'importer.user'] = opts[:'importer_user'] if !opts[:'importer_user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqPollingImporterImplManagedPollingImporterImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_polling_importer_impl_managed_polling_importer_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_polling_importer_impl_managed_polling_importer_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :importer_min_interval 
    # @option opts [String] :importer_user 
    # @option opts [Array<String>] :exclude_paths 
    # @option opts [Array<String>] :include_paths 
    # @return [ComDayCqPollingImporterImplPollingImporterImplInfo]
    def com_day_cq_polling_importer_impl_polling_importer_impl(opts = {})
      data, _status_code, _headers = com_day_cq_polling_importer_impl_polling_importer_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :importer_min_interval 
    # @option opts [String] :importer_user 
    # @option opts [Array<String>] :exclude_paths 
    # @option opts [Array<String>] :include_paths 
    # @return [Array<(ComDayCqPollingImporterImplPollingImporterImplInfo, Integer, Hash)>] ComDayCqPollingImporterImplPollingImporterImplInfo data, response status code and response headers
    def com_day_cq_polling_importer_impl_polling_importer_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_polling_importer_impl_polling_importer_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'importer.min.interval'] = opts[:'importer_min_interval'] if !opts[:'importer_min_interval'].nil?
      query_params[:'importer.user'] = opts[:'importer_user'] if !opts[:'importer_user'].nil?
      query_params[:'exclude.paths'] = @api_client.build_collection_param(opts[:'exclude_paths'], :multi) if !opts[:'exclude_paths'].nil?
      query_params[:'include.paths'] = @api_client.build_collection_param(opts[:'include_paths'], :multi) if !opts[:'include_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqPollingImporterImplPollingImporterImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_polling_importer_impl_polling_importer_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_polling_importer_impl_polling_importer_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @return [ComDayCqReplicationAuditReplicationEventListenerInfo]
    def com_day_cq_replication_audit_replication_event_listener(opts = {})
      data, _status_code, _headers = com_day_cq_replication_audit_replication_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(ComDayCqReplicationAuditReplicationEventListenerInfo, Integer, Hash)>] ComDayCqReplicationAuditReplicationEventListenerInfo data, response status code and response headers
    def com_day_cq_replication_audit_replication_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_audit_replication_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationAuditReplicationEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_audit_replication_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_audit_replication_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :host 
    # @option opts [Integer] :port 
    # @return [ComDayCqReplicationContentStaticContentBuilderInfo]
    def com_day_cq_replication_content_static_content_builder(opts = {})
      data, _status_code, _headers = com_day_cq_replication_content_static_content_builder_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :host 
    # @option opts [Integer] :port 
    # @return [Array<(ComDayCqReplicationContentStaticContentBuilderInfo, Integer, Hash)>] ComDayCqReplicationContentStaticContentBuilderInfo data, response status code and response headers
    def com_day_cq_replication_content_static_content_builder_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_content_static_content_builder ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'host'] = opts[:'host'] if !opts[:'host'].nil?
      query_params[:'port'] = opts[:'port'] if !opts[:'port'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationContentStaticContentBuilderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_content_static_content_builder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_content_static_content_builder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :job_topics 
    # @option opts [String] :service_user_target 
    # @option opts [String] :agent_provider_target 
    # @return [ComDayCqReplicationImplAgentManagerImplInfo]
    def com_day_cq_replication_impl_agent_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_replication_impl_agent_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :job_topics 
    # @option opts [String] :service_user_target 
    # @option opts [String] :agent_provider_target 
    # @return [Array<(ComDayCqReplicationImplAgentManagerImplInfo, Integer, Hash)>] ComDayCqReplicationImplAgentManagerImplInfo data, response status code and response headers
    def com_day_cq_replication_impl_agent_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_impl_agent_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'job.topics'] = opts[:'job_topics'] if !opts[:'job_topics'].nil?
      query_params[:'serviceUser.target'] = opts[:'service_user_target'] if !opts[:'service_user_target'].nil?
      query_params[:'agentProvider.target'] = opts[:'agent_provider_target'] if !opts[:'agent_provider_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationImplAgentManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_impl_agent_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_impl_agent_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :binary_threshold 
    # @return [ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo]
    def com_day_cq_replication_impl_content_durbo_binary_less_content_builder(opts = {})
      data, _status_code, _headers = com_day_cq_replication_impl_content_durbo_binary_less_content_builder_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :binary_threshold 
    # @return [Array<(ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo, Integer, Hash)>] ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo data, response status code and response headers
    def com_day_cq_replication_impl_content_durbo_binary_less_content_builder_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_impl_content_durbo_binary_less_content_builder ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'binary.threshold'] = opts[:'binary_threshold'] if !opts[:'binary_threshold'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_impl_content_durbo_binary_less_content_builder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_impl_content_durbo_binary_less_content_builder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :preserve_hierarchy_nodes 
    # @option opts [Boolean] :ignore_versioning 
    # @option opts [Boolean] :import_acl 
    # @option opts [Integer] :save_threshold 
    # @option opts [Boolean] :preserve_user_paths 
    # @option opts [Boolean] :preserve_uuid 
    # @option opts [Array<String>] :preserve_uuid_nodetypes 
    # @option opts [Array<String>] :preserve_uuid_subtrees 
    # @option opts [Boolean] :auto_commit 
    # @return [ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo]
    def com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov(opts = {})
      data, _status_code, _headers = com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :preserve_hierarchy_nodes 
    # @option opts [Boolean] :ignore_versioning 
    # @option opts [Boolean] :import_acl 
    # @option opts [Integer] :save_threshold 
    # @option opts [Boolean] :preserve_user_paths 
    # @option opts [Boolean] :preserve_uuid 
    # @option opts [Array<String>] :preserve_uuid_nodetypes 
    # @option opts [Array<String>] :preserve_uuid_subtrees 
    # @option opts [Boolean] :auto_commit 
    # @return [Array<(ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo, Integer, Hash)>] ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo data, response status code and response headers
    def com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'preserve.hierarchy.nodes'] = opts[:'preserve_hierarchy_nodes'] if !opts[:'preserve_hierarchy_nodes'].nil?
      query_params[:'ignore.versioning'] = opts[:'ignore_versioning'] if !opts[:'ignore_versioning'].nil?
      query_params[:'import.acl'] = opts[:'import_acl'] if !opts[:'import_acl'].nil?
      query_params[:'save.threshold'] = opts[:'save_threshold'] if !opts[:'save_threshold'].nil?
      query_params[:'preserve.user.paths'] = opts[:'preserve_user_paths'] if !opts[:'preserve_user_paths'].nil?
      query_params[:'preserve.uuid'] = opts[:'preserve_uuid'] if !opts[:'preserve_uuid'].nil?
      query_params[:'preserve.uuid.nodetypes'] = @api_client.build_collection_param(opts[:'preserve_uuid_nodetypes'], :multi) if !opts[:'preserve_uuid_nodetypes'].nil?
      query_params[:'preserve.uuid.subtrees'] = @api_client.build_collection_param(opts[:'preserve_uuid_subtrees'], :multi) if !opts[:'preserve_uuid_subtrees'].nil?
      query_params[:'auto.commit'] = opts[:'auto_commit'] if !opts[:'auto_commit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_impl_content_durbo_durbo_import_configuration_prov\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :replication_content_use_file_storage 
    # @option opts [Integer] :replication_content_max_commit_attempts 
    # @return [ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo]
    def com_day_cq_replication_impl_replication_content_factory_provider_impl(opts = {})
      data, _status_code, _headers = com_day_cq_replication_impl_replication_content_factory_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :replication_content_use_file_storage 
    # @option opts [Integer] :replication_content_max_commit_attempts 
    # @return [Array<(ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo, Integer, Hash)>] ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo data, response status code and response headers
    def com_day_cq_replication_impl_replication_content_factory_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_impl_replication_content_factory_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'replication.content.useFileStorage'] = opts[:'replication_content_use_file_storage'] if !opts[:'replication_content_use_file_storage'].nil?
      query_params[:'replication.content.maxCommitAttempts'] = opts[:'replication_content_max_commit_attempts'] if !opts[:'replication_content_max_commit_attempts'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_impl_replication_content_factory_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_impl_replication_content_factory_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :receiver_tmpfile_threshold 
    # @option opts [Boolean] :receiver_packages_use_install 
    # @return [ComDayCqReplicationImplReplicationReceiverImplInfo]
    def com_day_cq_replication_impl_replication_receiver_impl(opts = {})
      data, _status_code, _headers = com_day_cq_replication_impl_replication_receiver_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :receiver_tmpfile_threshold 
    # @option opts [Boolean] :receiver_packages_use_install 
    # @return [Array<(ComDayCqReplicationImplReplicationReceiverImplInfo, Integer, Hash)>] ComDayCqReplicationImplReplicationReceiverImplInfo data, response status code and response headers
    def com_day_cq_replication_impl_replication_receiver_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_impl_replication_receiver_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'receiver.tmpfile.threshold'] = opts[:'receiver_tmpfile_threshold'] if !opts[:'receiver_tmpfile_threshold'].nil?
      query_params[:'receiver.packages.use.install'] = opts[:'receiver_packages_use_install'] if !opts[:'receiver_packages_use_install'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationImplReplicationReceiverImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_impl_replication_receiver_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_impl_replication_receiver_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :distribute_events 
    # @return [ComDayCqReplicationImplReplicatorImplInfo]
    def com_day_cq_replication_impl_replicator_impl(opts = {})
      data, _status_code, _headers = com_day_cq_replication_impl_replicator_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :distribute_events 
    # @return [Array<(ComDayCqReplicationImplReplicatorImplInfo, Integer, Hash)>] ComDayCqReplicationImplReplicatorImplInfo data, response status code and response headers
    def com_day_cq_replication_impl_replicator_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_impl_replicator_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'distribute_events'] = opts[:'distribute_events'] if !opts[:'distribute_events'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationImplReplicatorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_impl_replicator_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_impl_replicator_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @return [ComDayCqReplicationImplReverseReplicatorInfo]
    def com_day_cq_replication_impl_reverse_replicator(opts = {})
      data, _status_code, _headers = com_day_cq_replication_impl_reverse_replicator_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @return [Array<(ComDayCqReplicationImplReverseReplicatorInfo, Integer, Hash)>] ComDayCqReplicationImplReverseReplicatorInfo data, response status code and response headers
    def com_day_cq_replication_impl_reverse_replicator_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_impl_reverse_replicator ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.period'] = opts[:'scheduler_period'] if !opts[:'scheduler_period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationImplReverseReplicatorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_impl_reverse_replicator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_impl_reverse_replicator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :disabled_cipher_suites 
    # @option opts [Array<String>] :enabled_cipher_suites 
    # @return [ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo]
    def com_day_cq_replication_impl_transport_binary_less_transport_handler(opts = {})
      data, _status_code, _headers = com_day_cq_replication_impl_transport_binary_less_transport_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :disabled_cipher_suites 
    # @option opts [Array<String>] :enabled_cipher_suites 
    # @return [Array<(ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo, Integer, Hash)>] ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo data, response status code and response headers
    def com_day_cq_replication_impl_transport_binary_less_transport_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_impl_transport_binary_less_transport_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'disabled.cipher.suites'] = @api_client.build_collection_param(opts[:'disabled_cipher_suites'], :multi) if !opts[:'disabled_cipher_suites'].nil?
      query_params[:'enabled.cipher.suites'] = @api_client.build_collection_param(opts[:'enabled_cipher_suites'], :multi) if !opts[:'enabled_cipher_suites'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_impl_transport_binary_less_transport_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_impl_transport_binary_less_transport_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :disabled_cipher_suites 
    # @option opts [Array<String>] :enabled_cipher_suites 
    # @return [ComDayCqReplicationImplTransportHttpInfo]
    def com_day_cq_replication_impl_transport_http(opts = {})
      data, _status_code, _headers = com_day_cq_replication_impl_transport_http_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :disabled_cipher_suites 
    # @option opts [Array<String>] :enabled_cipher_suites 
    # @return [Array<(ComDayCqReplicationImplTransportHttpInfo, Integer, Hash)>] ComDayCqReplicationImplTransportHttpInfo data, response status code and response headers
    def com_day_cq_replication_impl_transport_http_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_replication_impl_transport_http ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.replication.impl.transport.Http'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'disabled.cipher.suites'] = @api_client.build_collection_param(opts[:'disabled_cipher_suites'], :multi) if !opts[:'disabled_cipher_suites'].nil?
      query_params[:'enabled.cipher.suites'] = @api_client.build_collection_param(opts[:'enabled_cipher_suites'], :multi) if !opts[:'enabled_cipher_suites'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReplicationImplTransportHttpInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_replication_impl_transport_http",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_replication_impl_transport_http\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :repcache_enable 
    # @option opts [Integer] :repcache_ttl 
    # @option opts [Integer] :repcache_max 
    # @return [ComDayCqReportingImplCacheCacheImplInfo]
    def com_day_cq_reporting_impl_cache_cache_impl(opts = {})
      data, _status_code, _headers = com_day_cq_reporting_impl_cache_cache_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :repcache_enable 
    # @option opts [Integer] :repcache_ttl 
    # @option opts [Integer] :repcache_max 
    # @return [Array<(ComDayCqReportingImplCacheCacheImplInfo, Integer, Hash)>] ComDayCqReportingImplCacheCacheImplInfo data, response status code and response headers
    def com_day_cq_reporting_impl_cache_cache_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_reporting_impl_cache_cache_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'repcache.enable'] = opts[:'repcache_enable'] if !opts[:'repcache_enable'].nil?
      query_params[:'repcache.ttl'] = opts[:'repcache_ttl'] if !opts[:'repcache_ttl'].nil?
      query_params[:'repcache.max'] = opts[:'repcache_max'] if !opts[:'repcache_max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReportingImplCacheCacheImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_reporting_impl_cache_cache_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_reporting_impl_cache_cache_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :repconf_timezone 
    # @option opts [String] :repconf_locale 
    # @option opts [String] :repconf_snapshots 
    # @option opts [String] :repconf_repdir 
    # @option opts [Integer] :repconf_hourofday 
    # @option opts [Integer] :repconf_minofhour 
    # @option opts [Integer] :repconf_maxrows 
    # @option opts [Boolean] :repconf_fakedata 
    # @option opts [String] :repconf_snapshotuser 
    # @option opts [Boolean] :repconf_enforcesnapshotuser 
    # @return [ComDayCqReportingImplConfigServiceImplInfo]
    def com_day_cq_reporting_impl_config_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_reporting_impl_config_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :repconf_timezone 
    # @option opts [String] :repconf_locale 
    # @option opts [String] :repconf_snapshots 
    # @option opts [String] :repconf_repdir 
    # @option opts [Integer] :repconf_hourofday 
    # @option opts [Integer] :repconf_minofhour 
    # @option opts [Integer] :repconf_maxrows 
    # @option opts [Boolean] :repconf_fakedata 
    # @option opts [String] :repconf_snapshotuser 
    # @option opts [Boolean] :repconf_enforcesnapshotuser 
    # @return [Array<(ComDayCqReportingImplConfigServiceImplInfo, Integer, Hash)>] ComDayCqReportingImplConfigServiceImplInfo data, response status code and response headers
    def com_day_cq_reporting_impl_config_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_reporting_impl_config_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'repconf.timezone'] = opts[:'repconf_timezone'] if !opts[:'repconf_timezone'].nil?
      query_params[:'repconf.locale'] = opts[:'repconf_locale'] if !opts[:'repconf_locale'].nil?
      query_params[:'repconf.snapshots'] = opts[:'repconf_snapshots'] if !opts[:'repconf_snapshots'].nil?
      query_params[:'repconf.repdir'] = opts[:'repconf_repdir'] if !opts[:'repconf_repdir'].nil?
      query_params[:'repconf.hourofday'] = opts[:'repconf_hourofday'] if !opts[:'repconf_hourofday'].nil?
      query_params[:'repconf.minofhour'] = opts[:'repconf_minofhour'] if !opts[:'repconf_minofhour'].nil?
      query_params[:'repconf.maxrows'] = opts[:'repconf_maxrows'] if !opts[:'repconf_maxrows'].nil?
      query_params[:'repconf.fakedata'] = opts[:'repconf_fakedata'] if !opts[:'repconf_fakedata'].nil?
      query_params[:'repconf.snapshotuser'] = opts[:'repconf_snapshotuser'] if !opts[:'repconf_snapshotuser'].nil?
      query_params[:'repconf.enforcesnapshotuser'] = opts[:'repconf_enforcesnapshotuser'] if !opts[:'repconf_enforcesnapshotuser'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReportingImplConfigServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_reporting_impl_config_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_reporting_impl_config_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :request_log_output 
    # @return [ComDayCqReportingImplRLogAnalyzerInfo]
    def com_day_cq_reporting_impl_r_log_analyzer(opts = {})
      data, _status_code, _headers = com_day_cq_reporting_impl_r_log_analyzer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :request_log_output 
    # @return [Array<(ComDayCqReportingImplRLogAnalyzerInfo, Integer, Hash)>] ComDayCqReportingImplRLogAnalyzerInfo data, response status code and response headers
    def com_day_cq_reporting_impl_r_log_analyzer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_reporting_impl_r_log_analyzer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'request.log.output'] = opts[:'request_log_output'] if !opts[:'request_log_output'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqReportingImplRLogAnalyzerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_reporting_impl_r_log_analyzer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_reporting_impl_r_log_analyzer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @option opts [Boolean] :scheduler_concurrent 
    # @option opts [Integer] :service_bad_link_tolerance_interval 
    # @option opts [Array<String>] :service_check_override_patterns 
    # @option opts [Boolean] :service_cache_broken_internal_links 
    # @option opts [Array<String>] :service_special_link_prefix 
    # @option opts [Array<String>] :service_special_link_patterns 
    # @return [ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo]
    def com_day_cq_rewriter_linkchecker_impl_link_checker_impl(opts = {})
      data, _status_code, _headers = com_day_cq_rewriter_linkchecker_impl_link_checker_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @option opts [Boolean] :scheduler_concurrent 
    # @option opts [Integer] :service_bad_link_tolerance_interval 
    # @option opts [Array<String>] :service_check_override_patterns 
    # @option opts [Boolean] :service_cache_broken_internal_links 
    # @option opts [Array<String>] :service_special_link_prefix 
    # @option opts [Array<String>] :service_special_link_patterns 
    # @return [Array<(ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo, Integer, Hash)>] ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo data, response status code and response headers
    def com_day_cq_rewriter_linkchecker_impl_link_checker_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_rewriter_linkchecker_impl_link_checker_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.period'] = opts[:'scheduler_period'] if !opts[:'scheduler_period'].nil?
      query_params[:'scheduler.concurrent'] = opts[:'scheduler_concurrent'] if !opts[:'scheduler_concurrent'].nil?
      query_params[:'service.bad_link_tolerance_interval'] = opts[:'service_bad_link_tolerance_interval'] if !opts[:'service_bad_link_tolerance_interval'].nil?
      query_params[:'service.check_override_patterns'] = @api_client.build_collection_param(opts[:'service_check_override_patterns'], :multi) if !opts[:'service_check_override_patterns'].nil?
      query_params[:'service.cache_broken_internal_links'] = opts[:'service_cache_broken_internal_links'] if !opts[:'service_cache_broken_internal_links'].nil?
      query_params[:'service.special_link_prefix'] = @api_client.build_collection_param(opts[:'service_special_link_prefix'], :multi) if !opts[:'service_special_link_prefix'].nil?
      query_params[:'service.special_link_patterns'] = @api_client.build_collection_param(opts[:'service_special_link_patterns'], :multi) if !opts[:'service_special_link_patterns'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_rewriter_linkchecker_impl_link_checker_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_rewriter_linkchecker_impl_link_checker_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @option opts [Boolean] :scheduler_concurrent 
    # @option opts [Integer] :good_link_test_interval 
    # @option opts [Integer] :bad_link_test_interval 
    # @option opts [Integer] :link_unused_interval 
    # @option opts [Integer] :connection_timeout 
    # @return [ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo]
    def com_day_cq_rewriter_linkchecker_impl_link_checker_task(opts = {})
      data, _status_code, _headers = com_day_cq_rewriter_linkchecker_impl_link_checker_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @option opts [Boolean] :scheduler_concurrent 
    # @option opts [Integer] :good_link_test_interval 
    # @option opts [Integer] :bad_link_test_interval 
    # @option opts [Integer] :link_unused_interval 
    # @option opts [Integer] :connection_timeout 
    # @return [Array<(ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo, Integer, Hash)>] ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo data, response status code and response headers
    def com_day_cq_rewriter_linkchecker_impl_link_checker_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_rewriter_linkchecker_impl_link_checker_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.period'] = opts[:'scheduler_period'] if !opts[:'scheduler_period'].nil?
      query_params[:'scheduler.concurrent'] = opts[:'scheduler_concurrent'] if !opts[:'scheduler_concurrent'].nil?
      query_params[:'good_link_test_interval'] = opts[:'good_link_test_interval'] if !opts[:'good_link_test_interval'].nil?
      query_params[:'bad_link_test_interval'] = opts[:'bad_link_test_interval'] if !opts[:'bad_link_test_interval'].nil?
      query_params[:'link_unused_interval'] = opts[:'link_unused_interval'] if !opts[:'link_unused_interval'].nil?
      query_params[:'connection.timeout'] = opts[:'connection_timeout'] if !opts[:'connection_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_rewriter_linkchecker_impl_link_checker_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_rewriter_linkchecker_impl_link_checker_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :linkcheckertransformer_disable_rewriting 
    # @option opts [Boolean] :linkcheckertransformer_disable_checking 
    # @option opts [Integer] :linkcheckertransformer_map_cache_size 
    # @option opts [Boolean] :linkcheckertransformer_strict_extension_check 
    # @option opts [Boolean] :linkcheckertransformer_strip_htmlt_extension 
    # @option opts [Array<String>] :linkcheckertransformer_rewrite_elements 
    # @option opts [Array<String>] :linkcheckertransformer_strip_extension_path_blacklist 
    # @return [ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo]
    def com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory(opts = {})
      data, _status_code, _headers = com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :linkcheckertransformer_disable_rewriting 
    # @option opts [Boolean] :linkcheckertransformer_disable_checking 
    # @option opts [Integer] :linkcheckertransformer_map_cache_size 
    # @option opts [Boolean] :linkcheckertransformer_strict_extension_check 
    # @option opts [Boolean] :linkcheckertransformer_strip_htmlt_extension 
    # @option opts [Array<String>] :linkcheckertransformer_rewrite_elements 
    # @option opts [Array<String>] :linkcheckertransformer_strip_extension_path_blacklist 
    # @return [Array<(ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo, Integer, Hash)>] ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo data, response status code and response headers
    def com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'linkcheckertransformer.disableRewriting'] = opts[:'linkcheckertransformer_disable_rewriting'] if !opts[:'linkcheckertransformer_disable_rewriting'].nil?
      query_params[:'linkcheckertransformer.disableChecking'] = opts[:'linkcheckertransformer_disable_checking'] if !opts[:'linkcheckertransformer_disable_checking'].nil?
      query_params[:'linkcheckertransformer.mapCacheSize'] = opts[:'linkcheckertransformer_map_cache_size'] if !opts[:'linkcheckertransformer_map_cache_size'].nil?
      query_params[:'linkcheckertransformer.strictExtensionCheck'] = opts[:'linkcheckertransformer_strict_extension_check'] if !opts[:'linkcheckertransformer_strict_extension_check'].nil?
      query_params[:'linkcheckertransformer.stripHtmltExtension'] = opts[:'linkcheckertransformer_strip_htmlt_extension'] if !opts[:'linkcheckertransformer_strip_htmlt_extension'].nil?
      query_params[:'linkcheckertransformer.rewriteElements'] = @api_client.build_collection_param(opts[:'linkcheckertransformer_rewrite_elements'], :multi) if !opts[:'linkcheckertransformer_rewrite_elements'].nil?
      query_params[:'linkcheckertransformer.stripExtensionPathBlacklist'] = @api_client.build_collection_param(opts[:'linkcheckertransformer_strip_extension_path_blacklist'], :multi) if !opts[:'linkcheckertransformer_strip_extension_path_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_rewriter_linkchecker_impl_link_checker_transformer_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_max_links_per_host 
    # @option opts [Boolean] :service_save_external_link_references 
    # @return [ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo]
    def com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl(opts = {})
      data, _status_code, _headers = com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_max_links_per_host 
    # @option opts [Boolean] :service_save_external_link_references 
    # @return [Array<(ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo, Integer, Hash)>] ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo data, response status code and response headers
    def com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.max_links_per_host'] = opts[:'service_max_links_per_host'] if !opts[:'service_max_links_per_host'].nil?
      query_params[:'service.save_external_link_references'] = opts[:'service_save_external_link_references'] if !opts[:'service_save_external_link_references'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_rewriter_linkchecker_impl_link_info_storage_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :htmlparser_process_tags 
    # @option opts [Boolean] :htmlparser_preserve_camel_case 
    # @return [ComDayCqRewriterProcessorImplHtmlParserFactoryInfo]
    def com_day_cq_rewriter_processor_impl_html_parser_factory(opts = {})
      data, _status_code, _headers = com_day_cq_rewriter_processor_impl_html_parser_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :htmlparser_process_tags 
    # @option opts [Boolean] :htmlparser_preserve_camel_case 
    # @return [Array<(ComDayCqRewriterProcessorImplHtmlParserFactoryInfo, Integer, Hash)>] ComDayCqRewriterProcessorImplHtmlParserFactoryInfo data, response status code and response headers
    def com_day_cq_rewriter_processor_impl_html_parser_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_rewriter_processor_impl_html_parser_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'htmlparser.processTags'] = @api_client.build_collection_param(opts[:'htmlparser_process_tags'], :multi) if !opts[:'htmlparser_process_tags'].nil?
      query_params[:'htmlparser.preserveCamelCase'] = opts[:'htmlparser_preserve_camel_case'] if !opts[:'htmlparser_preserve_camel_case'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqRewriterProcessorImplHtmlParserFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_rewriter_processor_impl_html_parser_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_rewriter_processor_impl_html_parser_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :excerpt_properties 
    # @option opts [Integer] :cache_max_entries 
    # @option opts [Integer] :cache_entry_lifetime 
    # @option opts [Boolean] :xpath_union 
    # @return [ComDayCqSearchImplBuilderQueryBuilderImplInfo]
    def com_day_cq_search_impl_builder_query_builder_impl(opts = {})
      data, _status_code, _headers = com_day_cq_search_impl_builder_query_builder_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :excerpt_properties 
    # @option opts [Integer] :cache_max_entries 
    # @option opts [Integer] :cache_entry_lifetime 
    # @option opts [Boolean] :xpath_union 
    # @return [Array<(ComDayCqSearchImplBuilderQueryBuilderImplInfo, Integer, Hash)>] ComDayCqSearchImplBuilderQueryBuilderImplInfo data, response status code and response headers
    def com_day_cq_search_impl_builder_query_builder_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_search_impl_builder_query_builder_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'excerpt.properties'] = @api_client.build_collection_param(opts[:'excerpt_properties'], :multi) if !opts[:'excerpt_properties'].nil?
      query_params[:'cache.max.entries'] = opts[:'cache_max_entries'] if !opts[:'cache_max_entries'].nil?
      query_params[:'cache.entry.lifetime'] = opts[:'cache_entry_lifetime'] if !opts[:'cache_entry_lifetime'].nil?
      query_params[:'xpath.union'] = opts[:'xpath_union'] if !opts[:'xpath_union'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqSearchImplBuilderQueryBuilderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_search_impl_builder_query_builder_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_search_impl_builder_query_builder_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path_builder_target 
    # @option opts [String] :suggest_basepath 
    # @return [ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo]
    def com_day_cq_search_suggest_impl_suggestion_index_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_search_suggest_impl_suggestion_index_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path_builder_target 
    # @option opts [String] :suggest_basepath 
    # @return [Array<(ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo, Integer, Hash)>] ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo data, response status code and response headers
    def com_day_cq_search_suggest_impl_suggestion_index_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_search_suggest_impl_suggestion_index_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'pathBuilder.target'] = opts[:'path_builder_target'] if !opts[:'path_builder_target'].nil?
      query_params[:'suggest.basepath'] = opts[:'suggest_basepath'] if !opts[:'suggest_basepath'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_search_suggest_impl_suggestion_index_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_search_suggest_impl_suggestion_index_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_searchpromote_confighandler_enabled 
    # @return [ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo]
    def com_day_cq_searchpromote_impl_publish_search_promote_config_handler(opts = {})
      data, _status_code, _headers = com_day_cq_searchpromote_impl_publish_search_promote_config_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_searchpromote_confighandler_enabled 
    # @return [Array<(ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo, Integer, Hash)>] ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo data, response status code and response headers
    def com_day_cq_searchpromote_impl_publish_search_promote_config_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_searchpromote_impl_publish_search_promote_config_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.searchpromote.confighandler.enabled'] = opts[:'cq_searchpromote_confighandler_enabled'] if !opts[:'cq_searchpromote_confighandler_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_searchpromote_impl_publish_search_promote_config_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_searchpromote_impl_publish_search_promote_config_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_searchpromote_configuration_server_uri 
    # @option opts [String] :cq_searchpromote_configuration_environment 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo]
    def com_day_cq_searchpromote_impl_search_promote_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_searchpromote_impl_search_promote_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :cq_searchpromote_configuration_server_uri 
    # @option opts [String] :cq_searchpromote_configuration_environment 
    # @option opts [Integer] :connection_timeout 
    # @option opts [Integer] :socket_timeout 
    # @return [Array<(ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo, Integer, Hash)>] ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo data, response status code and response headers
    def com_day_cq_searchpromote_impl_search_promote_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_searchpromote_impl_search_promote_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.searchpromote.configuration.server.uri'] = opts[:'cq_searchpromote_configuration_server_uri'] if !opts[:'cq_searchpromote_configuration_server_uri'].nil?
      query_params[:'cq.searchpromote.configuration.environment'] = opts[:'cq_searchpromote_configuration_environment'] if !opts[:'cq_searchpromote_configuration_environment'].nil?
      query_params[:'connection.timeout'] = opts[:'connection_timeout'] if !opts[:'connection_timeout'].nil?
      query_params[:'socket.timeout'] = opts[:'socket_timeout'] if !opts[:'socket_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_searchpromote_impl_search_promote_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_searchpromote_impl_search_promote_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_aclsetup_rules 
    # @return [ComDayCqSecurityACLSetupInfo]
    def com_day_cq_security_acl_setup(opts = {})
      data, _status_code, _headers = com_day_cq_security_acl_setup_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_aclsetup_rules 
    # @return [Array<(ComDayCqSecurityACLSetupInfo, Integer, Hash)>] ComDayCqSecurityACLSetupInfo data, response status code and response headers
    def com_day_cq_security_acl_setup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_security_acl_setup ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.security.ACLSetup'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.aclsetup.rules'] = @api_client.build_collection_param(opts[:'cq_aclsetup_rules'], :multi) if !opts[:'cq_aclsetup_rules'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqSecurityACLSetupInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_security_acl_setup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_security_acl_setup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @option opts [Boolean] :scheduler_concurrent 
    # @option opts [String] :path 
    # @option opts [String] :workspace 
    # @option opts [String] :keywords_path 
    # @option opts [Boolean] :async_entries 
    # @return [ComDayCqStatisticsImplStatisticsServiceImplInfo]
    def com_day_cq_statistics_impl_statistics_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_statistics_impl_statistics_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :scheduler_period 
    # @option opts [Boolean] :scheduler_concurrent 
    # @option opts [String] :path 
    # @option opts [String] :workspace 
    # @option opts [String] :keywords_path 
    # @option opts [Boolean] :async_entries 
    # @return [Array<(ComDayCqStatisticsImplStatisticsServiceImplInfo, Integer, Hash)>] ComDayCqStatisticsImplStatisticsServiceImplInfo data, response status code and response headers
    def com_day_cq_statistics_impl_statistics_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_statistics_impl_statistics_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.period'] = opts[:'scheduler_period'] if !opts[:'scheduler_period'].nil?
      query_params[:'scheduler.concurrent'] = opts[:'scheduler_concurrent'] if !opts[:'scheduler_concurrent'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'workspace'] = opts[:'workspace'] if !opts[:'workspace'].nil?
      query_params[:'keywordsPath'] = opts[:'keywords_path'] if !opts[:'keywords_path'].nil?
      query_params[:'asyncEntries'] = opts[:'async_entries'] if !opts[:'async_entries'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqStatisticsImplStatisticsServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_statistics_impl_statistics_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_statistics_impl_statistics_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :validation_enabled 
    # @return [ComDayCqTaggingImplJcrTagManagerFactoryImplInfo]
    def com_day_cq_tagging_impl_jcr_tag_manager_factory_impl(opts = {})
      data, _status_code, _headers = com_day_cq_tagging_impl_jcr_tag_manager_factory_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :validation_enabled 
    # @return [Array<(ComDayCqTaggingImplJcrTagManagerFactoryImplInfo, Integer, Hash)>] ComDayCqTaggingImplJcrTagManagerFactoryImplInfo data, response status code and response headers
    def com_day_cq_tagging_impl_jcr_tag_manager_factory_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_tagging_impl_jcr_tag_manager_factory_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'validation.enabled'] = opts[:'validation_enabled'] if !opts[:'validation_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqTaggingImplJcrTagManagerFactoryImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_tagging_impl_jcr_tag_manager_factory_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_tagging_impl_jcr_tag_manager_factory_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :ignore_path 
    # @return [ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo]
    def com_day_cq_tagging_impl_search_tag_predicate_evaluator(opts = {})
      data, _status_code, _headers = com_day_cq_tagging_impl_search_tag_predicate_evaluator_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :ignore_path 
    # @return [Array<(ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo, Integer, Hash)>] ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo data, response status code and response headers
    def com_day_cq_tagging_impl_search_tag_predicate_evaluator_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_tagging_impl_search_tag_predicate_evaluator ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'ignore_path'] = opts[:'ignore_path'] if !opts[:'ignore_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_tagging_impl_search_tag_predicate_evaluator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_tagging_impl_search_tag_predicate_evaluator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @return [ComDayCqTaggingImplTagGarbageCollectorInfo]
    def com_day_cq_tagging_impl_tag_garbage_collector(opts = {})
      data, _status_code, _headers = com_day_cq_tagging_impl_tag_garbage_collector_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @return [Array<(ComDayCqTaggingImplTagGarbageCollectorInfo, Integer, Hash)>] ComDayCqTaggingImplTagGarbageCollectorInfo data, response status code and response headers
    def com_day_cq_tagging_impl_tag_garbage_collector_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_tagging_impl_tag_garbage_collector ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqTaggingImplTagGarbageCollectorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_tagging_impl_tag_garbage_collector",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_tagging_impl_tag_garbage_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_pagesupdatehandler_imageresourcetypes 
    # @return [ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo]
    def com_day_cq_wcm_contentsync_impl_handler_pages_update_handler(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_contentsync_impl_handler_pages_update_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_pagesupdatehandler_imageresourcetypes 
    # @return [Array<(ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo, Integer, Hash)>] ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo data, response status code and response headers
    def com_day_cq_wcm_contentsync_impl_handler_pages_update_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_contentsync_impl_handler_pages_update_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.pagesupdatehandler.imageresourcetypes'] = @api_client.build_collection_param(opts[:'cq_pagesupdatehandler_imageresourcetypes'], :multi) if !opts[:'cq_pagesupdatehandler_imageresourcetypes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_contentsync_impl_handler_pages_update_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_contentsync_impl_handler_pages_update_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_contentsync_pathrewritertransformer_mapping_links 
    # @option opts [Array<String>] :cq_contentsync_pathrewritertransformer_mapping_clientlibs 
    # @option opts [Array<String>] :cq_contentsync_pathrewritertransformer_mapping_images 
    # @option opts [String] :cq_contentsync_pathrewritertransformer_attribute_pattern 
    # @option opts [String] :cq_contentsync_pathrewritertransformer_clientlibrary_pattern 
    # @option opts [String] :cq_contentsync_pathrewritertransformer_clientlibrary_replace 
    # @return [ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo]
    def com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_contentsync_pathrewritertransformer_mapping_links 
    # @option opts [Array<String>] :cq_contentsync_pathrewritertransformer_mapping_clientlibs 
    # @option opts [Array<String>] :cq_contentsync_pathrewritertransformer_mapping_images 
    # @option opts [String] :cq_contentsync_pathrewritertransformer_attribute_pattern 
    # @option opts [String] :cq_contentsync_pathrewritertransformer_clientlibrary_pattern 
    # @option opts [String] :cq_contentsync_pathrewritertransformer_clientlibrary_replace 
    # @return [Array<(ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo, Integer, Hash)>] ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo data, response status code and response headers
    def com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.contentsync.pathrewritertransformer.mapping.links'] = @api_client.build_collection_param(opts[:'cq_contentsync_pathrewritertransformer_mapping_links'], :multi) if !opts[:'cq_contentsync_pathrewritertransformer_mapping_links'].nil?
      query_params[:'cq.contentsync.pathrewritertransformer.mapping.clientlibs'] = @api_client.build_collection_param(opts[:'cq_contentsync_pathrewritertransformer_mapping_clientlibs'], :multi) if !opts[:'cq_contentsync_pathrewritertransformer_mapping_clientlibs'].nil?
      query_params[:'cq.contentsync.pathrewritertransformer.mapping.images'] = @api_client.build_collection_param(opts[:'cq_contentsync_pathrewritertransformer_mapping_images'], :multi) if !opts[:'cq_contentsync_pathrewritertransformer_mapping_images'].nil?
      query_params[:'cq.contentsync.pathrewritertransformer.attribute.pattern'] = opts[:'cq_contentsync_pathrewritertransformer_attribute_pattern'] if !opts[:'cq_contentsync_pathrewritertransformer_attribute_pattern'].nil?
      query_params[:'cq.contentsync.pathrewritertransformer.clientlibrary.pattern'] = opts[:'cq_contentsync_pathrewritertransformer_clientlibrary_pattern'] if !opts[:'cq_contentsync_pathrewritertransformer_clientlibrary_pattern'].nil?
      query_params[:'cq.contentsync.pathrewritertransformer.clientlibrary.replace'] = opts[:'cq_contentsync_pathrewritertransformer_clientlibrary_replace'] if !opts[:'cq_contentsync_pathrewritertransformer_clientlibrary_replace'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_contentsync_impl_rewriter_path_rewriter_transformer_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :authoring_ui_mode_service_default 
    # @return [ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo]
    def com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :authoring_ui_mode_service_default 
    # @return [Array<(ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo, Integer, Hash)>] ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'authoringUIModeService.default'] = opts[:'authoring_ui_mode_service_default'] if !opts[:'authoring_ui_mode_service_default'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_authoring_ui_mode_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :wcmcommandservlet_delete_whitelist 
    # @return [ComDayCqWcmCoreImplCommandsWCMCommandServletInfo]
    def com_day_cq_wcm_core_impl_commands_wcm_command_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_commands_wcm_command_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :wcmcommandservlet_delete_whitelist 
    # @return [Array<(ComDayCqWcmCoreImplCommandsWCMCommandServletInfo, Integer, Hash)>] ComDayCqWcmCoreImplCommandsWCMCommandServletInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_commands_wcm_command_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_commands_wcm_command_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'wcmcommandservlet.delete_whitelist'] = @api_client.build_collection_param(opts[:'wcmcommandservlet_delete_whitelist'], :multi) if !opts[:'wcmcommandservlet_delete_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplCommandsWCMCommandServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_commands_wcm_command_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_commands_wcm_command_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :dim_default_mode 
    # @option opts [Boolean] :dim_appcache_enabled 
    # @return [ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo]
    def com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :dim_default_mode 
    # @option opts [Boolean] :dim_appcache_enabled 
    # @return [Array<(ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo, Integer, Hash)>] ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'dim.default.mode'] = opts[:'dim_default_mode'] if !opts[:'dim_default_mode'].nil?
      query_params[:'dim.appcache.enabled'] = opts[:'dim_appcache_enabled'] if !opts[:'dim_appcache_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_devicedetection_device_identification_mode_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :configured 
    # @return [ComDayCqWcmCoreImplEventPageEventAuditListenerInfo]
    def com_day_cq_wcm_core_impl_event_page_event_audit_listener(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_event_page_event_audit_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :configured 
    # @return [Array<(ComDayCqWcmCoreImplEventPageEventAuditListenerInfo, Integer, Hash)>] ComDayCqWcmCoreImplEventPageEventAuditListenerInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_event_page_event_audit_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_event_page_event_audit_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'configured'] = opts[:'configured'] if !opts[:'configured'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplEventPageEventAuditListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_event_page_event_audit_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_event_page_event_audit_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :paths 
    # @return [ComDayCqWcmCoreImplEventPagePostProcessorInfo]
    def com_day_cq_wcm_core_impl_event_page_post_processor(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_event_page_post_processor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :paths 
    # @return [Array<(ComDayCqWcmCoreImplEventPagePostProcessorInfo, Integer, Hash)>] ComDayCqWcmCoreImplEventPagePostProcessorInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_event_page_post_processor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_event_page_post_processor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'paths'] = @api_client.build_collection_param(opts[:'paths'], :multi) if !opts[:'paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplEventPagePostProcessorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_event_page_post_processor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_event_page_post_processor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :paths 
    # @option opts [Array<String>] :excluded_paths 
    # @return [ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo]
    def com_day_cq_wcm_core_impl_event_repository_change_event_listener(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_event_repository_change_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :paths 
    # @option opts [Array<String>] :excluded_paths 
    # @return [Array<(ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo, Integer, Hash)>] ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_event_repository_change_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_event_repository_change_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'paths'] = @api_client.build_collection_param(opts[:'paths'], :multi) if !opts[:'paths'].nil?
      query_params[:'excludedPaths'] = @api_client.build_collection_param(opts[:'excluded_paths'], :multi) if !opts[:'excluded_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_event_repository_change_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_event_repository_change_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :paths 
    # @return [ComDayCqWcmCoreImplEventTemplatePostProcessorInfo]
    def com_day_cq_wcm_core_impl_event_template_post_processor(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_event_template_post_processor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :paths 
    # @return [Array<(ComDayCqWcmCoreImplEventTemplatePostProcessorInfo, Integer, Hash)>] ComDayCqWcmCoreImplEventTemplatePostProcessorInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_event_template_post_processor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_event_template_post_processor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'paths'] = opts[:'paths'] if !opts[:'paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplEventTemplatePostProcessorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_event_template_post_processor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_event_template_post_processor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :langmgr_list_path 
    # @option opts [Array<String>] :langmgr_country_default 
    # @return [ComDayCqWcmCoreImplLanguageManagerImplInfo]
    def com_day_cq_wcm_core_impl_language_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_language_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :langmgr_list_path 
    # @option opts [Array<String>] :langmgr_country_default 
    # @return [Array<(ComDayCqWcmCoreImplLanguageManagerImplInfo, Integer, Hash)>] ComDayCqWcmCoreImplLanguageManagerImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_language_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_language_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'langmgr.list.path'] = opts[:'langmgr_list_path'] if !opts[:'langmgr_list_path'].nil?
      query_params[:'langmgr.country.default'] = @api_client.build_collection_param(opts[:'langmgr_country_default'], :multi) if !opts[:'langmgr_country_default'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplLanguageManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_language_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_language_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :link_expired_prefix 
    # @option opts [Boolean] :link_expired_remove 
    # @option opts [String] :link_expired_suffix 
    # @option opts [String] :link_invalid_prefix 
    # @option opts [Boolean] :link_invalid_remove 
    # @option opts [String] :link_invalid_suffix 
    # @option opts [String] :link_predated_prefix 
    # @option opts [Boolean] :link_predated_remove 
    # @option opts [String] :link_predated_suffix 
    # @option opts [Array<String>] :link_wcmmodes 
    # @return [ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo]
    def com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :link_expired_prefix 
    # @option opts [Boolean] :link_expired_remove 
    # @option opts [String] :link_expired_suffix 
    # @option opts [String] :link_invalid_prefix 
    # @option opts [Boolean] :link_invalid_remove 
    # @option opts [String] :link_invalid_suffix 
    # @option opts [String] :link_predated_prefix 
    # @option opts [Boolean] :link_predated_remove 
    # @option opts [String] :link_predated_suffix 
    # @option opts [Array<String>] :link_wcmmodes 
    # @return [Array<(ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo, Integer, Hash)>] ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'link.expired.prefix'] = opts[:'link_expired_prefix'] if !opts[:'link_expired_prefix'].nil?
      query_params[:'link.expired.remove'] = opts[:'link_expired_remove'] if !opts[:'link_expired_remove'].nil?
      query_params[:'link.expired.suffix'] = opts[:'link_expired_suffix'] if !opts[:'link_expired_suffix'].nil?
      query_params[:'link.invalid.prefix'] = opts[:'link_invalid_prefix'] if !opts[:'link_invalid_prefix'].nil?
      query_params[:'link.invalid.remove'] = opts[:'link_invalid_remove'] if !opts[:'link_invalid_remove'].nil?
      query_params[:'link.invalid.suffix'] = opts[:'link_invalid_suffix'] if !opts[:'link_invalid_suffix'].nil?
      query_params[:'link.predated.prefix'] = opts[:'link_predated_prefix'] if !opts[:'link_predated_prefix'].nil?
      query_params[:'link.predated.remove'] = opts[:'link_predated_remove'] if !opts[:'link_predated_remove'].nil?
      query_params[:'link.predated.suffix'] = opts[:'link_predated_suffix'] if !opts[:'link_predated_suffix'].nil?
      query_params[:'link.wcmmodes'] = @api_client.build_collection_param(opts[:'link_wcmmodes'], :multi) if !opts[:'link_wcmmodes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_link_checker_configuration_factory_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :page_info_provider_property_regex_default 
    # @option opts [String] :page_info_provider_property_name 
    # @return [ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo]
    def com_day_cq_wcm_core_impl_page_page_info_aggregator_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_page_page_info_aggregator_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :page_info_provider_property_regex_default 
    # @option opts [String] :page_info_provider_property_name 
    # @return [Array<(ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo, Integer, Hash)>] ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_page_page_info_aggregator_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_page_page_info_aggregator_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'page.info.provider.property.regex.default'] = opts[:'page_info_provider_property_regex_default'] if !opts[:'page_info_provider_property_regex_default'].nil?
      query_params[:'page.info.provider.property.name'] = opts[:'page_info_provider_property_name'] if !opts[:'page_info_provider_property_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_page_page_info_aggregator_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_page_page_info_aggregator_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :illegal_char_mapping 
    # @option opts [Boolean] :page_sub_tree_activation_check 
    # @return [ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo]
    def com_day_cq_wcm_core_impl_page_page_manager_factory_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_page_page_manager_factory_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :illegal_char_mapping 
    # @option opts [Boolean] :page_sub_tree_activation_check 
    # @return [Array<(ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo, Integer, Hash)>] ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_page_page_manager_factory_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_page_page_manager_factory_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'illegalCharMapping'] = opts[:'illegal_char_mapping'] if !opts[:'illegal_char_mapping'].nil?
      query_params[:'pageSubTreeActivationCheck'] = opts[:'page_sub_tree_activation_check'] if !opts[:'page_sub_tree_activation_check'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_page_page_manager_factory_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_page_page_manager_factory_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :content_reference_config_resource_types 
    # @return [ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo]
    def com_day_cq_wcm_core_impl_references_content_content_reference_config(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_references_content_content_reference_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :content_reference_config_resource_types 
    # @return [Array<(ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo, Integer, Hash)>] ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_references_content_content_reference_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_references_content_content_reference_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'contentReferenceConfig.resourceTypes'] = @api_client.build_collection_param(opts[:'content_reference_config_resource_types'], :multi) if !opts[:'content_reference_config_resource_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_references_content_content_reference_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_references_content_content_reference_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :dam_showexpired 
    # @option opts [Boolean] :dam_showhidden 
    # @option opts [Boolean] :tag_title_search 
    # @option opts [String] :guess_total 
    # @option opts [String] :dam_expiry_property 
    # @return [ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo]
    def com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :dam_showexpired 
    # @option opts [Boolean] :dam_showhidden 
    # @option opts [Boolean] :tag_title_search 
    # @option opts [String] :guess_total 
    # @option opts [String] :dam_expiry_property 
    # @return [Array<(ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo, Integer, Hash)>] ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'dam.showexpired'] = opts[:'dam_showexpired'] if !opts[:'dam_showexpired'].nil?
      query_params[:'dam.showhidden'] = opts[:'dam_showhidden'] if !opts[:'dam_showhidden'].nil?
      query_params[:'tagTitleSearch'] = opts[:'tag_title_search'] if !opts[:'tag_title_search'].nil?
      query_params[:'guessTotal'] = opts[:'guess_total'] if !opts[:'guess_total'].nil?
      query_params[:'dam.expiryProperty'] = opts[:'dam_expiry_property'] if !opts[:'dam_expiry_property'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_servlets_contentfinder_asset_view_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :item_resource_types 
    # @return [ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo]
    def com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :item_resource_types 
    # @return [Array<(ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo, Integer, Hash)>] ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'item.resource.types'] = @api_client.build_collection_param(opts[:'item_resource_types'], :multi) if !opts[:'item_resource_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_servlets_contentfinder_connector_connector_vie\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :guess_total 
    # @option opts [Boolean] :tag_title_search 
    # @return [ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo]
    def com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :guess_total 
    # @option opts [Boolean] :tag_title_search 
    # @return [Array<(ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo, Integer, Hash)>] ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'guessTotal'] = opts[:'guess_total'] if !opts[:'guess_total'].nil?
      query_params[:'tagTitleSearch'] = opts[:'tag_title_search'] if !opts[:'tag_title_search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_servlets_contentfinder_page_view_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :scope 
    # @return [ComDayCqWcmCoreImplServletsFindReplaceServletInfo]
    def com_day_cq_wcm_core_impl_servlets_find_replace_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_servlets_find_replace_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :scope 
    # @return [Array<(ComDayCqWcmCoreImplServletsFindReplaceServletInfo, Integer, Hash)>] ComDayCqWcmCoreImplServletsFindReplaceServletInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_servlets_find_replace_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_find_replace_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scope'] = @api_client.build_collection_param(opts[:'scope'], :multi) if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplServletsFindReplaceServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_find_replace_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_servlets_find_replace_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :referencesearchservlet_max_references_per_page 
    # @option opts [Integer] :referencesearchservlet_max_pages 
    # @return [ComDayCqWcmCoreImplServletsReferenceSearchServletInfo]
    def com_day_cq_wcm_core_impl_servlets_reference_search_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_servlets_reference_search_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :referencesearchservlet_max_references_per_page 
    # @option opts [Integer] :referencesearchservlet_max_pages 
    # @return [Array<(ComDayCqWcmCoreImplServletsReferenceSearchServletInfo, Integer, Hash)>] ComDayCqWcmCoreImplServletsReferenceSearchServletInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_servlets_reference_search_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_reference_search_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'referencesearchservlet.maxReferencesPerPage'] = opts[:'referencesearchservlet_max_references_per_page'] if !opts[:'referencesearchservlet_max_references_per_page'].nil?
      query_params[:'referencesearchservlet.maxPages'] = opts[:'referencesearchservlet_max_pages'] if !opts[:'referencesearchservlet_max_pages'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplServletsReferenceSearchServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_reference_search_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_servlets_reference_search_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :workspace 
    # @option opts [Array<String>] :dimensions 
    # @return [ComDayCqWcmCoreImplServletsThumbnailServletInfo]
    def com_day_cq_wcm_core_impl_servlets_thumbnail_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_servlets_thumbnail_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :workspace 
    # @option opts [Array<String>] :dimensions 
    # @return [Array<(ComDayCqWcmCoreImplServletsThumbnailServletInfo, Integer, Hash)>] ComDayCqWcmCoreImplServletsThumbnailServletInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_servlets_thumbnail_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_thumbnail_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'workspace'] = opts[:'workspace'] if !opts[:'workspace'].nil?
      query_params[:'dimensions'] = @api_client.build_collection_param(opts[:'dimensions'], :multi) if !opts[:'dimensions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplServletsThumbnailServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_servlets_thumbnail_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_servlets_thumbnail_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :non_valid_chars 
    # @return [ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo]
    def com_day_cq_wcm_core_impl_utils_default_page_name_validator(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_utils_default_page_name_validator_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :non_valid_chars 
    # @return [Array<(ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo, Integer, Hash)>] ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_utils_default_page_name_validator_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_utils_default_page_name_validator ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'nonValidChars'] = opts[:'non_valid_chars'] if !opts[:'non_valid_chars'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_utils_default_page_name_validator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_utils_default_page_name_validator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :default_externalizer_domain 
    # @return [ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo]
    def com_day_cq_wcm_core_impl_variants_page_variants_provider_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_variants_page_variants_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :default_externalizer_domain 
    # @return [Array<(ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo, Integer, Hash)>] ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_variants_page_variants_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_variants_page_variants_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'default.externalizer.domain'] = opts[:'default_externalizer_domain'] if !opts[:'default_externalizer_domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_variants_page_variants_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_variants_page_variants_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :versionmanager_create_version_on_activation 
    # @option opts [Boolean] :versionmanager_purging_enabled 
    # @option opts [Array<String>] :versionmanager_purge_paths 
    # @option opts [Array<String>] :versionmanager_iv_paths 
    # @option opts [Integer] :versionmanager_max_age_days 
    # @option opts [Integer] :versionmanager_max_number_versions 
    # @option opts [Integer] :versionmanager_min_number_versions 
    # @return [ComDayCqWcmCoreImplVersionManagerImplInfo]
    def com_day_cq_wcm_core_impl_version_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_version_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :versionmanager_create_version_on_activation 
    # @option opts [Boolean] :versionmanager_purging_enabled 
    # @option opts [Array<String>] :versionmanager_purge_paths 
    # @option opts [Array<String>] :versionmanager_iv_paths 
    # @option opts [Integer] :versionmanager_max_age_days 
    # @option opts [Integer] :versionmanager_max_number_versions 
    # @option opts [Integer] :versionmanager_min_number_versions 
    # @return [Array<(ComDayCqWcmCoreImplVersionManagerImplInfo, Integer, Hash)>] ComDayCqWcmCoreImplVersionManagerImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_version_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_version_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'versionmanager.createVersionOnActivation'] = opts[:'versionmanager_create_version_on_activation'] if !opts[:'versionmanager_create_version_on_activation'].nil?
      query_params[:'versionmanager.purgingEnabled'] = opts[:'versionmanager_purging_enabled'] if !opts[:'versionmanager_purging_enabled'].nil?
      query_params[:'versionmanager.purgePaths'] = @api_client.build_collection_param(opts[:'versionmanager_purge_paths'], :multi) if !opts[:'versionmanager_purge_paths'].nil?
      query_params[:'versionmanager.ivPaths'] = @api_client.build_collection_param(opts[:'versionmanager_iv_paths'], :multi) if !opts[:'versionmanager_iv_paths'].nil?
      query_params[:'versionmanager.maxAgeDays'] = opts[:'versionmanager_max_age_days'] if !opts[:'versionmanager_max_age_days'].nil?
      query_params[:'versionmanager.maxNumberVersions'] = opts[:'versionmanager_max_number_versions'] if !opts[:'versionmanager_max_number_versions'].nil?
      query_params[:'versionmanager.minNumberVersions'] = opts[:'versionmanager_min_number_versions'] if !opts[:'versionmanager_min_number_versions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplVersionManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_version_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_version_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :versionpurge_paths 
    # @option opts [Boolean] :versionpurge_recursive 
    # @option opts [Integer] :versionpurge_max_versions 
    # @option opts [Integer] :versionpurge_min_versions 
    # @option opts [Integer] :versionpurge_max_age_days 
    # @return [ComDayCqWcmCoreImplVersionPurgeTaskInfo]
    def com_day_cq_wcm_core_impl_version_purge_task(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_version_purge_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :versionpurge_paths 
    # @option opts [Boolean] :versionpurge_recursive 
    # @option opts [Integer] :versionpurge_max_versions 
    # @option opts [Integer] :versionpurge_min_versions 
    # @option opts [Integer] :versionpurge_max_age_days 
    # @return [Array<(ComDayCqWcmCoreImplVersionPurgeTaskInfo, Integer, Hash)>] ComDayCqWcmCoreImplVersionPurgeTaskInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_version_purge_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_version_purge_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'versionpurge.paths'] = @api_client.build_collection_param(opts[:'versionpurge_paths'], :multi) if !opts[:'versionpurge_paths'].nil?
      query_params[:'versionpurge.recursive'] = opts[:'versionpurge_recursive'] if !opts[:'versionpurge_recursive'].nil?
      query_params[:'versionpurge.maxVersions'] = opts[:'versionpurge_max_versions'] if !opts[:'versionpurge_max_versions'].nil?
      query_params[:'versionpurge.minVersions'] = opts[:'versionpurge_min_versions'] if !opts[:'versionpurge_min_versions'].nil?
      query_params[:'versionpurge.maxAgeDays'] = opts[:'versionpurge_max_age_days'] if !opts[:'versionpurge_max_age_days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplVersionPurgeTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_version_purge_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_version_purge_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :filter_order 
    # @option opts [String] :filter_scope 
    # @return [ComDayCqWcmCoreImplWarpTimeWarpFilterInfo]
    def com_day_cq_wcm_core_impl_warp_time_warp_filter(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_warp_time_warp_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :filter_order 
    # @option opts [String] :filter_scope 
    # @return [Array<(ComDayCqWcmCoreImplWarpTimeWarpFilterInfo, Integer, Hash)>] ComDayCqWcmCoreImplWarpTimeWarpFilterInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_warp_time_warp_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_warp_time_warp_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'filter.order'] = opts[:'filter_order'] if !opts[:'filter_order'].nil?
      query_params[:'filter.scope'] = opts[:'filter_scope'] if !opts[:'filter_scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplWarpTimeWarpFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_warp_time_warp_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_warp_time_warp_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :wcmdbgfilter_enabled 
    # @option opts [Boolean] :wcmdbgfilter_jsp_debug 
    # @return [ComDayCqWcmCoreImplWCMDebugFilterInfo]
    def com_day_cq_wcm_core_impl_wcm_debug_filter(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_wcm_debug_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :wcmdbgfilter_enabled 
    # @option opts [Boolean] :wcmdbgfilter_jsp_debug 
    # @return [Array<(ComDayCqWcmCoreImplWCMDebugFilterInfo, Integer, Hash)>] ComDayCqWcmCoreImplWCMDebugFilterInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_wcm_debug_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_wcm_debug_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'wcmdbgfilter.enabled'] = opts[:'wcmdbgfilter_enabled'] if !opts[:'wcmdbgfilter_enabled'].nil?
      query_params[:'wcmdbgfilter.jspDebug'] = opts[:'wcmdbgfilter_jsp_debug'] if !opts[:'wcmdbgfilter_jsp_debug'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplWCMDebugFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_wcm_debug_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_wcm_debug_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :wcmdevmodefilter_enabled 
    # @return [ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo]
    def com_day_cq_wcm_core_impl_wcm_developer_mode_filter(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_impl_wcm_developer_mode_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :wcmdevmodefilter_enabled 
    # @return [Array<(ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo, Integer, Hash)>] ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo data, response status code and response headers
    def com_day_cq_wcm_core_impl_wcm_developer_mode_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_impl_wcm_developer_mode_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'wcmdevmodefilter.enabled'] = opts[:'wcmdevmodefilter_enabled'] if !opts[:'wcmdevmodefilter_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_impl_wcm_developer_mode_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_impl_wcm_developer_mode_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :mvtstatistics_trackingurl 
    # @return [ComDayCqWcmCoreMvtMVTStatisticsImplInfo]
    def com_day_cq_wcm_core_mvt_mvt_statistics_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_mvt_mvt_statistics_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :mvtstatistics_trackingurl 
    # @return [Array<(ComDayCqWcmCoreMvtMVTStatisticsImplInfo, Integer, Hash)>] ComDayCqWcmCoreMvtMVTStatisticsImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_mvt_mvt_statistics_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_mvt_mvt_statistics_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'mvtstatistics.trackingurl'] = opts[:'mvtstatistics_trackingurl'] if !opts[:'mvtstatistics_trackingurl'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreMvtMVTStatisticsImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_mvt_mvt_statistics_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_mvt_mvt_statistics_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pageviewstatistics_trackingurl 
    # @option opts [String] :pageviewstatistics_trackingscript_enabled 
    # @return [ComDayCqWcmCoreStatsPageViewStatisticsImplInfo]
    def com_day_cq_wcm_core_stats_page_view_statistics_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_stats_page_view_statistics_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pageviewstatistics_trackingurl 
    # @option opts [String] :pageviewstatistics_trackingscript_enabled 
    # @return [Array<(ComDayCqWcmCoreStatsPageViewStatisticsImplInfo, Integer, Hash)>] ComDayCqWcmCoreStatsPageViewStatisticsImplInfo data, response status code and response headers
    def com_day_cq_wcm_core_stats_page_view_statistics_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_stats_page_view_statistics_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'pageviewstatistics.trackingurl'] = opts[:'pageviewstatistics_trackingurl'] if !opts[:'pageviewstatistics_trackingurl'].nil?
      query_params[:'pageviewstatistics.trackingscript.enabled'] = opts[:'pageviewstatistics_trackingscript_enabled'] if !opts[:'pageviewstatistics_trackingscript_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreStatsPageViewStatisticsImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_stats_page_view_statistics_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_stats_page_view_statistics_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :wcmfilter_mode 
    # @return [ComDayCqWcmCoreWCMRequestFilterInfo]
    def com_day_cq_wcm_core_wcm_request_filter(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_core_wcm_request_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :wcmfilter_mode 
    # @return [Array<(ComDayCqWcmCoreWCMRequestFilterInfo, Integer, Hash)>] ComDayCqWcmCoreWCMRequestFilterInfo data, response status code and response headers
    def com_day_cq_wcm_core_wcm_request_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_core_wcm_request_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'wcmfilter.mode'] = opts[:'wcmfilter_mode'] if !opts[:'wcmfilter_mode'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmCoreWCMRequestFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_core_wcm_request_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_core_wcm_request_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :extract_filter 
    # @return [ComDayCqWcmDesignimporterDesignPackageImporterInfo]
    def com_day_cq_wcm_designimporter_design_package_importer(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_design_package_importer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :extract_filter 
    # @return [Array<(ComDayCqWcmDesignimporterDesignPackageImporterInfo, Integer, Hash)>] ComDayCqWcmDesignimporterDesignPackageImporterInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_design_package_importer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_design_package_importer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'extract.filter'] = @api_client.build_collection_param(opts[:'extract_filter'], :multi) if !opts[:'extract_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterDesignPackageImporterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_design_package_importer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_design_package_importer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :filepattern 
    # @option opts [Boolean] :build_page_nodes 
    # @option opts [Boolean] :build_client_libs 
    # @option opts [Boolean] :build_canvas_component 
    # @return [ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo]
    def com_day_cq_wcm_designimporter_impl_canvas_builder_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_impl_canvas_builder_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :filepattern 
    # @option opts [Boolean] :build_page_nodes 
    # @option opts [Boolean] :build_client_libs 
    # @option opts [Boolean] :build_canvas_component 
    # @return [Array<(ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo, Integer, Hash)>] ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_impl_canvas_builder_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_impl_canvas_builder_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'filepattern'] = opts[:'filepattern'] if !opts[:'filepattern'].nil?
      query_params[:'build.page.nodes'] = opts[:'build_page_nodes'] if !opts[:'build_page_nodes'].nil?
      query_params[:'build.client.libs'] = opts[:'build_client_libs'] if !opts[:'build_client_libs'].nil?
      query_params[:'build.canvas.component'] = opts[:'build_canvas_component'] if !opts[:'build_canvas_component'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_impl_canvas_builder_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_impl_canvas_builder_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :min_thread_pool_size 
    # @option opts [Integer] :max_thread_pool_size 
    # @return [ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo]
    def com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :min_thread_pool_size 
    # @option opts [Integer] :max_thread_pool_size 
    # @return [Array<(ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo, Integer, Hash)>] ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'minThreadPoolSize'] = opts[:'min_thread_pool_size'] if !opts[:'min_thread_pool_size'].nil?
      query_params[:'maxThreadPoolSize'] = opts[:'max_thread_pool_size'] if !opts[:'max_thread_pool_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_impl_canvas_page_delete_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :search_pattern 
    # @option opts [String] :replace_pattern 
    # @return [ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo]
    def com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :search_pattern 
    # @option opts [String] :replace_pattern 
    # @return [Array<(ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo, Integer, Hash)>] ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'search.pattern'] = opts[:'search_pattern'] if !opts[:'search_pattern'].nil?
      query_params[:'replace.pattern'] = opts[:'replace_pattern'] if !opts[:'replace_pattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_impl_entry_preprocessor_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :filepattern 
    # @option opts [Array<String>] :device_groups 
    # @option opts [Boolean] :build_page_nodes 
    # @option opts [Boolean] :build_client_libs 
    # @option opts [Boolean] :build_canvas_component 
    # @return [ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo]
    def com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :filepattern 
    # @option opts [Array<String>] :device_groups 
    # @option opts [Boolean] :build_page_nodes 
    # @option opts [Boolean] :build_client_libs 
    # @option opts [Boolean] :build_canvas_component 
    # @return [Array<(ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo, Integer, Hash)>] ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'filepattern'] = opts[:'filepattern'] if !opts[:'filepattern'].nil?
      query_params[:'device.groups'] = @api_client.build_collection_param(opts[:'device_groups'], :multi) if !opts[:'device_groups'].nil?
      query_params[:'build.page.nodes'] = opts[:'build_page_nodes'] if !opts[:'build_page_nodes'].nil?
      query_params[:'build.client.libs'] = opts[:'build_client_libs'] if !opts[:'build_client_libs'].nil?
      query_params[:'build.canvas.component'] = opts[:'build_canvas_component'] if !opts[:'build_canvas_component'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_impl_mobile_canvas_builder_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_canvas_compone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_compon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_default_tag_han\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_head_tag_handle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_i_frame_tag_hand\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?
      query_params[:'component.resourceType'] = opts[:'component_resource_type'] if !opts[:'component_resource_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_image_componen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_img_tag_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_inline_script_t\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_link_tag_handle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_meta_tag_handle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_non_script_tag_h\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?
      query_params[:'component.resourceType'] = opts[:'component_resource_type'] if !opts[:'component_resource_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_parsys_compone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_script_tag_hand\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_style_tag_handl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?
      query_params[:'component.resourceType'] = opts[:'component_resource_type'] if !opts[:'component_resource_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_text_component\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @option opts [String] :component_resource_type 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?
      query_params[:'component.resourceType'] = opts[:'component_resource_type'] if !opts[:'component_resource_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_componen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo]
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :tagpattern 
    # @return [Array<(ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo, Integer, Hash)>] ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo data, response status code and response headers
    def com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'tagpattern'] = opts[:'tagpattern'] if !opts[:'tagpattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_designimporter_parser_taghandlers_factory_title_tag_handl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :service_name 
    # @option opts [String] :sling_servlet_resource_types 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [Array<String>] :sling_servlet_methods 
    # @option opts [Boolean] :forms_formchooserservlet_advansesearch_require 
    # @return [ComDayCqWcmFoundationFormsImplFormChooserServletInfo]
    def com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :service_name 
    # @option opts [String] :sling_servlet_resource_types 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [Array<String>] :sling_servlet_methods 
    # @option opts [Boolean] :forms_formchooserservlet_advansesearch_require 
    # @return [Array<(ComDayCqWcmFoundationFormsImplFormChooserServletInfo, Integer, Hash)>] ComDayCqWcmFoundationFormsImplFormChooserServletInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.name'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'sling.servlet.resourceTypes'] = opts[:'sling_servlet_resource_types'] if !opts[:'sling_servlet_resource_types'].nil?
      query_params[:'sling.servlet.selectors'] = opts[:'sling_servlet_selectors'] if !opts[:'sling_servlet_selectors'].nil?
      query_params[:'sling.servlet.methods'] = @api_client.build_collection_param(opts[:'sling_servlet_methods'], :multi) if !opts[:'sling_servlet_methods'].nil?
      query_params[:'forms.formchooserservlet.advansesearch.require'] = opts[:'forms_formchooserservlet_advansesearch_require'] if !opts[:'forms_formchooserservlet_advansesearch_require'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationFormsImplFormChooserServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_forms_impl_form_chooser_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :forms_formparagraphpostprocessor_enabled 
    # @option opts [Array<String>] :forms_formparagraphpostprocessor_formresourcetypes 
    # @return [ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo]
    def com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :forms_formparagraphpostprocessor_enabled 
    # @option opts [Array<String>] :forms_formparagraphpostprocessor_formresourcetypes 
    # @return [Array<(ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo, Integer, Hash)>] ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'forms.formparagraphpostprocessor.enabled'] = opts[:'forms_formparagraphpostprocessor_enabled'] if !opts[:'forms_formparagraphpostprocessor_enabled'].nil?
      query_params[:'forms.formparagraphpostprocessor.formresourcetypes'] = @api_client.build_collection_param(opts[:'forms_formparagraphpostprocessor_formresourcetypes'], :multi) if !opts[:'forms_formparagraphpostprocessor_formresourcetypes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_forms_impl_form_paragraph_post_processor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name_whitelist 
    # @option opts [Boolean] :allow_expressions 
    # @return [ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo]
    def com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name_whitelist 
    # @option opts [Boolean] :allow_expressions 
    # @return [Array<(ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo, Integer, Hash)>] ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name.whitelist'] = opts[:'name_whitelist'] if !opts[:'name_whitelist'].nil?
      query_params[:'allow.expressions'] = opts[:'allow_expressions'] if !opts[:'allow_expressions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_forms_impl_forms_handling_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_resource_types 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [Array<String>] :resource_whitelist 
    # @option opts [String] :resource_blacklist 
    # @return [ComDayCqWcmFoundationFormsImplMailServletInfo]
    def com_day_cq_wcm_foundation_forms_impl_mail_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_forms_impl_mail_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_servlet_resource_types 
    # @option opts [String] :sling_servlet_selectors 
    # @option opts [Array<String>] :resource_whitelist 
    # @option opts [String] :resource_blacklist 
    # @return [Array<(ComDayCqWcmFoundationFormsImplMailServletInfo, Integer, Hash)>] ComDayCqWcmFoundationFormsImplMailServletInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_forms_impl_mail_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_forms_impl_mail_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.resourceTypes'] = opts[:'sling_servlet_resource_types'] if !opts[:'sling_servlet_resource_types'].nil?
      query_params[:'sling.servlet.selectors'] = opts[:'sling_servlet_selectors'] if !opts[:'sling_servlet_selectors'].nil?
      query_params[:'resource.whitelist'] = @api_client.build_collection_param(opts[:'resource_whitelist'], :multi) if !opts[:'resource_whitelist'].nil?
      query_params[:'resource.blacklist'] = opts[:'resource_blacklist'] if !opts[:'resource_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationFormsImplMailServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_forms_impl_mail_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_forms_impl_mail_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :adapt_supported_widths 
    # @return [ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo]
    def com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :adapt_supported_widths 
    # @return [Array<(ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo, Integer, Hash)>] ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'adapt.supported.widths'] = @api_client.build_collection_param(opts[:'adapt_supported_widths'], :multi) if !opts[:'adapt_supported_widths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_impl_adaptive_image_component_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Boolean] :auth_http_nologin 
    # @option opts [String] :auth_http_realm 
    # @option opts [String] :auth_default_loginpage 
    # @option opts [Array<String>] :auth_cred_form 
    # @option opts [Array<String>] :auth_cred_utf8 
    # @return [ComDayCqWcmFoundationImplHTTPAuthHandlerInfo]
    def com_day_cq_wcm_foundation_impl_http_auth_handler(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_impl_http_auth_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [Boolean] :auth_http_nologin 
    # @option opts [String] :auth_http_realm 
    # @option opts [String] :auth_default_loginpage 
    # @option opts [Array<String>] :auth_cred_form 
    # @option opts [Array<String>] :auth_cred_utf8 
    # @return [Array<(ComDayCqWcmFoundationImplHTTPAuthHandlerInfo, Integer, Hash)>] ComDayCqWcmFoundationImplHTTPAuthHandlerInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_impl_http_auth_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_impl_http_auth_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'auth.http.nologin'] = opts[:'auth_http_nologin'] if !opts[:'auth_http_nologin'].nil?
      query_params[:'auth.http.realm'] = opts[:'auth_http_realm'] if !opts[:'auth_http_realm'].nil?
      query_params[:'auth.default.loginpage'] = opts[:'auth_default_loginpage'] if !opts[:'auth_default_loginpage'].nil?
      query_params[:'auth.cred.form'] = @api_client.build_collection_param(opts[:'auth_cred_form'], :multi) if !opts[:'auth_cred_form'].nil?
      query_params[:'auth.cred.utf8'] = @api_client.build_collection_param(opts[:'auth_cred_utf8'], :multi) if !opts[:'auth_cred_utf8'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationImplHTTPAuthHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_impl_http_auth_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_impl_http_auth_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_auth_requirements 
    # @return [ComDayCqWcmFoundationImplPageImpressionsTrackerInfo]
    def com_day_cq_wcm_foundation_impl_page_impressions_tracker(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_impl_page_impressions_tracker_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_auth_requirements 
    # @return [Array<(ComDayCqWcmFoundationImplPageImpressionsTrackerInfo, Integer, Hash)>] ComDayCqWcmFoundationImplPageImpressionsTrackerInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_impl_page_impressions_tracker_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_impl_page_impressions_tracker ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.auth.requirements'] = opts[:'sling_auth_requirements'] if !opts[:'sling_auth_requirements'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationImplPageImpressionsTrackerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_impl_page_impressions_tracker",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_impl_page_impressions_tracker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :excluded_resource_types 
    # @return [ComDayCqWcmFoundationImplPageRedirectServletInfo]
    def com_day_cq_wcm_foundation_impl_page_redirect_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_impl_page_redirect_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :excluded_resource_types 
    # @return [Array<(ComDayCqWcmFoundationImplPageRedirectServletInfo, Integer, Hash)>] ComDayCqWcmFoundationImplPageRedirectServletInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_impl_page_redirect_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_impl_page_redirect_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'excluded.resource.types'] = @api_client.build_collection_param(opts[:'excluded_resource_types'], :multi) if !opts[:'excluded_resource_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationImplPageRedirectServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_impl_page_redirect_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_impl_page_redirect_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :default_attachment_type_blacklist 
    # @option opts [Array<String>] :baseline_attachment_type_blacklist 
    # @return [ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo]
    def com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :default_attachment_type_blacklist 
    # @option opts [Array<String>] :baseline_attachment_type_blacklist 
    # @return [Array<(ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo, Integer, Hash)>] ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'default.attachment.type.blacklist'] = @api_client.build_collection_param(opts[:'default_attachment_type_blacklist'], :multi) if !opts[:'default_attachment_type_blacklist'].nil?
      query_params[:'baseline.attachment.type.blacklist'] = @api_client.build_collection_param(opts[:'baseline_attachment_type_blacklist'], :multi) if !opts[:'baseline_attachment_type_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_security_impl_default_attachment_type_blacklist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :parameter_whitelist 
    # @option opts [Array<String>] :parameter_whitelist_prefixes 
    # @option opts [Array<String>] :binary_parameter_whitelist 
    # @option opts [Array<String>] :modifier_whitelist 
    # @option opts [Array<String>] :operation_whitelist 
    # @option opts [Array<String>] :operation_whitelist_prefixes 
    # @option opts [Array<String>] :typehint_whitelist 
    # @option opts [Array<String>] :resourcetype_whitelist 
    # @return [ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo]
    def com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :parameter_whitelist 
    # @option opts [Array<String>] :parameter_whitelist_prefixes 
    # @option opts [Array<String>] :binary_parameter_whitelist 
    # @option opts [Array<String>] :modifier_whitelist 
    # @option opts [Array<String>] :operation_whitelist 
    # @option opts [Array<String>] :operation_whitelist_prefixes 
    # @option opts [Array<String>] :typehint_whitelist 
    # @option opts [Array<String>] :resourcetype_whitelist 
    # @return [Array<(ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo, Integer, Hash)>] ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo data, response status code and response headers
    def com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'parameter.whitelist'] = @api_client.build_collection_param(opts[:'parameter_whitelist'], :multi) if !opts[:'parameter_whitelist'].nil?
      query_params[:'parameter.whitelist.prefixes'] = @api_client.build_collection_param(opts[:'parameter_whitelist_prefixes'], :multi) if !opts[:'parameter_whitelist_prefixes'].nil?
      query_params[:'binary.parameter.whitelist'] = @api_client.build_collection_param(opts[:'binary_parameter_whitelist'], :multi) if !opts[:'binary_parameter_whitelist'].nil?
      query_params[:'modifier.whitelist'] = @api_client.build_collection_param(opts[:'modifier_whitelist'], :multi) if !opts[:'modifier_whitelist'].nil?
      query_params[:'operation.whitelist'] = @api_client.build_collection_param(opts[:'operation_whitelist'], :multi) if !opts[:'operation_whitelist'].nil?
      query_params[:'operation.whitelist.prefixes'] = @api_client.build_collection_param(opts[:'operation_whitelist_prefixes'], :multi) if !opts[:'operation_whitelist_prefixes'].nil?
      query_params[:'typehint.whitelist'] = @api_client.build_collection_param(opts[:'typehint_whitelist'], :multi) if !opts[:'typehint_whitelist'].nil?
      query_params[:'resourcetype.whitelist'] = @api_client.build_collection_param(opts[:'resourcetype_whitelist'], :multi) if !opts[:'resourcetype_whitelist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_foundation_security_impl_safer_sling_post_validator_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :device_info_transformer_enabled 
    # @option opts [String] :device_info_transformer_css_style 
    # @return [ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo]
    def com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :device_info_transformer_enabled 
    # @option opts [String] :device_info_transformer_css_style 
    # @return [Array<(ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo, Integer, Hash)>] ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo data, response status code and response headers
    def com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'device.info.transformer.enabled'] = opts[:'device_info_transformer_enabled'] if !opts[:'device_info_transformer_enabled'].nil?
      query_params[:'device.info.transformer.css.style'] = opts[:'device_info_transformer_css_style'] if !opts[:'device_info_transformer_css_style'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_mobile_core_impl_device_device_info_transformer_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :redirect_enabled 
    # @option opts [Boolean] :redirect_stats_enabled 
    # @option opts [Array<String>] :redirect_extensions 
    # @option opts [Array<String>] :redirect_paths 
    # @return [ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo]
    def com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :redirect_enabled 
    # @option opts [Boolean] :redirect_stats_enabled 
    # @option opts [Array<String>] :redirect_extensions 
    # @option opts [Array<String>] :redirect_paths 
    # @return [Array<(ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo, Integer, Hash)>] ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo data, response status code and response headers
    def com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'redirect.enabled'] = opts[:'redirect_enabled'] if !opts[:'redirect_enabled'].nil?
      query_params[:'redirect.stats.enabled'] = opts[:'redirect_stats_enabled'] if !opts[:'redirect_stats_enabled'].nil?
      query_params[:'redirect.extensions'] = @api_client.build_collection_param(opts[:'redirect_extensions'], :multi) if !opts[:'redirect_extensions'].nil?
      query_params[:'redirect.paths'] = @api_client.build_collection_param(opts[:'redirect_paths'], :multi) if !opts[:'redirect_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_mobile_core_impl_redirect_redirect_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @option opts [String] :contentcopyaction_order_style 
    # @return [ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo]
    def com_day_cq_wcm_msm_impl_actions_content_copy_action_factory(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_actions_content_copy_action_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @option opts [String] :contentcopyaction_order_style 
    # @return [Array<(ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo, Integer, Hash)>] ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_actions_content_copy_action_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_content_copy_action_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.wcm.msm.action.excludednodetypes'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludednodetypes'], :multi) if !opts[:'cq_wcm_msm_action_excludednodetypes'].nil?
      query_params[:'cq.wcm.msm.action.excludedparagraphitems'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedparagraphitems'], :multi) if !opts[:'cq_wcm_msm_action_excludedparagraphitems'].nil?
      query_params[:'cq.wcm.msm.action.excludedprops'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedprops'], :multi) if !opts[:'cq_wcm_msm_action_excludedprops'].nil?
      query_params[:'contentcopyaction.order.style'] = opts[:'contentcopyaction_order_style'] if !opts[:'contentcopyaction_order_style'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_content_copy_action_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_actions_content_copy_action_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @return [ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo]
    def com_day_cq_wcm_msm_impl_actions_content_delete_action_factory(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_actions_content_delete_action_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @return [Array<(ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo, Integer, Hash)>] ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_actions_content_delete_action_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_content_delete_action_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.wcm.msm.action.excludednodetypes'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludednodetypes'], :multi) if !opts[:'cq_wcm_msm_action_excludednodetypes'].nil?
      query_params[:'cq.wcm.msm.action.excludedparagraphitems'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedparagraphitems'], :multi) if !opts[:'cq_wcm_msm_action_excludedparagraphitems'].nil?
      query_params[:'cq.wcm.msm.action.excludedprops'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedprops'], :multi) if !opts[:'cq_wcm_msm_action_excludedprops'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_content_delete_action_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_actions_content_delete_action_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @option opts [Array<String>] :cq_wcm_msm_action_ignored_mixin 
    # @return [ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo]
    def com_day_cq_wcm_msm_impl_actions_content_update_action_factory(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_actions_content_update_action_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @option opts [Array<String>] :cq_wcm_msm_action_ignored_mixin 
    # @return [Array<(ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo, Integer, Hash)>] ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_actions_content_update_action_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_content_update_action_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.wcm.msm.action.excludednodetypes'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludednodetypes'], :multi) if !opts[:'cq_wcm_msm_action_excludednodetypes'].nil?
      query_params[:'cq.wcm.msm.action.excludedparagraphitems'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedparagraphitems'], :multi) if !opts[:'cq_wcm_msm_action_excludedparagraphitems'].nil?
      query_params[:'cq.wcm.msm.action.excludedprops'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedprops'], :multi) if !opts[:'cq_wcm_msm_action_excludedprops'].nil?
      query_params[:'cq.wcm.msm.action.ignoredMixin'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_ignored_mixin'], :multi) if !opts[:'cq_wcm_msm_action_ignored_mixin'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_content_update_action_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_actions_content_update_action_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @return [ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo]
    def com_day_cq_wcm_msm_impl_actions_order_children_action_factory(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_actions_order_children_action_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @return [Array<(ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo, Integer, Hash)>] ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_actions_order_children_action_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_order_children_action_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.wcm.msm.action.excludednodetypes'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludednodetypes'], :multi) if !opts[:'cq_wcm_msm_action_excludednodetypes'].nil?
      query_params[:'cq.wcm.msm.action.excludedparagraphitems'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedparagraphitems'], :multi) if !opts[:'cq_wcm_msm_action_excludedparagraphitems'].nil?
      query_params[:'cq.wcm.msm.action.excludedprops'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedprops'], :multi) if !opts[:'cq_wcm_msm_action_excludedprops'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_order_children_action_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_actions_order_children_action_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @option opts [Boolean] :cq_wcm_msm_impl_actions_pagemove_prop_reference_update 
    # @return [ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo]
    def com_day_cq_wcm_msm_impl_actions_page_move_action_factory(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_actions_page_move_action_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @option opts [Boolean] :cq_wcm_msm_impl_actions_pagemove_prop_reference_update 
    # @return [Array<(ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo, Integer, Hash)>] ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_actions_page_move_action_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_page_move_action_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.wcm.msm.action.excludednodetypes'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludednodetypes'], :multi) if !opts[:'cq_wcm_msm_action_excludednodetypes'].nil?
      query_params[:'cq.wcm.msm.action.excludedparagraphitems'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedparagraphitems'], :multi) if !opts[:'cq_wcm_msm_action_excludedparagraphitems'].nil?
      query_params[:'cq.wcm.msm.action.excludedprops'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedprops'], :multi) if !opts[:'cq_wcm_msm_action_excludedprops'].nil?
      query_params[:'cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate'] = opts[:'cq_wcm_msm_impl_actions_pagemove_prop_reference_update'] if !opts[:'cq_wcm_msm_impl_actions_pagemove_prop_reference_update'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_page_move_action_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_actions_page_move_action_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @option opts [Boolean] :cq_wcm_msm_impl_action_referencesupdate_prop_update_nested 
    # @return [ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo]
    def com_day_cq_wcm_msm_impl_actions_references_update_action_factory(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_actions_references_update_action_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @option opts [Boolean] :cq_wcm_msm_impl_action_referencesupdate_prop_update_nested 
    # @return [Array<(ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo, Integer, Hash)>] ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_actions_references_update_action_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_references_update_action_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.wcm.msm.action.excludednodetypes'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludednodetypes'], :multi) if !opts[:'cq_wcm_msm_action_excludednodetypes'].nil?
      query_params[:'cq.wcm.msm.action.excludedparagraphitems'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedparagraphitems'], :multi) if !opts[:'cq_wcm_msm_action_excludedparagraphitems'].nil?
      query_params[:'cq.wcm.msm.action.excludedprops'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedprops'], :multi) if !opts[:'cq_wcm_msm_action_excludedprops'].nil?
      query_params[:'cq.wcm.msm.impl.action.referencesupdate.prop_updateNested'] = opts[:'cq_wcm_msm_impl_action_referencesupdate_prop_update_nested'] if !opts[:'cq_wcm_msm_impl_action_referencesupdate_prop_update_nested'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_references_update_action_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_actions_references_update_action_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @return [ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo]
    def com_day_cq_wcm_msm_impl_actions_version_copy_action_factory(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_actions_version_copy_action_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludednodetypes 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedparagraphitems 
    # @option opts [Array<String>] :cq_wcm_msm_action_excludedprops 
    # @return [Array<(ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo, Integer, Hash)>] ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_actions_version_copy_action_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_version_copy_action_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.wcm.msm.action.excludednodetypes'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludednodetypes'], :multi) if !opts[:'cq_wcm_msm_action_excludednodetypes'].nil?
      query_params[:'cq.wcm.msm.action.excludedparagraphitems'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedparagraphitems'], :multi) if !opts[:'cq_wcm_msm_action_excludedparagraphitems'].nil?
      query_params[:'cq.wcm.msm.action.excludedprops'] = @api_client.build_collection_param(opts[:'cq_wcm_msm_action_excludedprops'], :multi) if !opts[:'cq_wcm_msm_action_excludedprops'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_actions_version_copy_action_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_actions_version_copy_action_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :liverelationshipmgr_relationsconfig_default 
    # @return [ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo]
    def com_day_cq_wcm_msm_impl_live_relationship_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_live_relationship_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :liverelationshipmgr_relationsconfig_default 
    # @return [Array<(ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo, Integer, Hash)>] ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_live_relationship_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_live_relationship_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'liverelationshipmgr.relationsconfig.default'] = opts[:'liverelationshipmgr_relationsconfig_default'] if !opts[:'liverelationshipmgr_relationsconfig_default'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_live_relationship_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_live_relationship_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Array<String>] :rolloutmgr_excludedprops_default 
    # @option opts [Array<String>] :rolloutmgr_excludedparagraphprops_default 
    # @option opts [Array<String>] :rolloutmgr_excludednodetypes_default 
    # @option opts [Integer] :rolloutmgr_threadpool_maxsize 
    # @option opts [Integer] :rolloutmgr_threadpool_maxshutdowntime 
    # @option opts [String] :rolloutmgr_threadpool_priority 
    # @option opts [Integer] :rolloutmgr_commit_size 
    # @option opts [Boolean] :rolloutmgr_conflicthandling_enabled 
    # @return [ComDayCqWcmMsmImplRolloutManagerImplInfo]
    def com_day_cq_wcm_msm_impl_rollout_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_rollout_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Array<String>] :rolloutmgr_excludedprops_default 
    # @option opts [Array<String>] :rolloutmgr_excludedparagraphprops_default 
    # @option opts [Array<String>] :rolloutmgr_excludednodetypes_default 
    # @option opts [Integer] :rolloutmgr_threadpool_maxsize 
    # @option opts [Integer] :rolloutmgr_threadpool_maxshutdowntime 
    # @option opts [String] :rolloutmgr_threadpool_priority 
    # @option opts [Integer] :rolloutmgr_commit_size 
    # @option opts [Boolean] :rolloutmgr_conflicthandling_enabled 
    # @return [Array<(ComDayCqWcmMsmImplRolloutManagerImplInfo, Integer, Hash)>] ComDayCqWcmMsmImplRolloutManagerImplInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_rollout_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_rollout_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?
      query_params[:'rolloutmgr.excludedprops.default'] = @api_client.build_collection_param(opts[:'rolloutmgr_excludedprops_default'], :multi) if !opts[:'rolloutmgr_excludedprops_default'].nil?
      query_params[:'rolloutmgr.excludedparagraphprops.default'] = @api_client.build_collection_param(opts[:'rolloutmgr_excludedparagraphprops_default'], :multi) if !opts[:'rolloutmgr_excludedparagraphprops_default'].nil?
      query_params[:'rolloutmgr.excludednodetypes.default'] = @api_client.build_collection_param(opts[:'rolloutmgr_excludednodetypes_default'], :multi) if !opts[:'rolloutmgr_excludednodetypes_default'].nil?
      query_params[:'rolloutmgr.threadpool.maxsize'] = opts[:'rolloutmgr_threadpool_maxsize'] if !opts[:'rolloutmgr_threadpool_maxsize'].nil?
      query_params[:'rolloutmgr.threadpool.maxshutdowntime'] = opts[:'rolloutmgr_threadpool_maxshutdowntime'] if !opts[:'rolloutmgr_threadpool_maxshutdowntime'].nil?
      query_params[:'rolloutmgr.threadpool.priority'] = opts[:'rolloutmgr_threadpool_priority'] if !opts[:'rolloutmgr_threadpool_priority'].nil?
      query_params[:'rolloutmgr.commit.size'] = opts[:'rolloutmgr_commit_size'] if !opts[:'rolloutmgr_commit_size'].nil?
      query_params[:'rolloutmgr.conflicthandling.enabled'] = opts[:'rolloutmgr_conflicthandling_enabled'] if !opts[:'rolloutmgr_conflicthandling_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplRolloutManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_rollout_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_rollout_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :auditlogservlet_default_events_count 
    # @option opts [String] :auditlogservlet_default_path 
    # @return [ComDayCqWcmMsmImplServletsAuditLogServletInfo]
    def com_day_cq_wcm_msm_impl_servlets_audit_log_servlet(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_msm_impl_servlets_audit_log_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :auditlogservlet_default_events_count 
    # @option opts [String] :auditlogservlet_default_path 
    # @return [Array<(ComDayCqWcmMsmImplServletsAuditLogServletInfo, Integer, Hash)>] ComDayCqWcmMsmImplServletsAuditLogServletInfo data, response status code and response headers
    def com_day_cq_wcm_msm_impl_servlets_audit_log_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_msm_impl_servlets_audit_log_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'auditlogservlet.default.events.count'] = opts[:'auditlogservlet_default_events_count'] if !opts[:'auditlogservlet_default_events_count'].nil?
      query_params[:'auditlogservlet.default.path'] = opts[:'auditlogservlet_default_path'] if !opts[:'auditlogservlet_default_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmMsmImplServletsAuditLogServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_msm_impl_servlets_audit_log_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_msm_impl_servlets_audit_log_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :email_from 
    # @return [ComDayCqWcmNotificationEmailImplEmailChannelInfo]
    def com_day_cq_wcm_notification_email_impl_email_channel(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_notification_email_impl_email_channel_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :email_from 
    # @return [Array<(ComDayCqWcmNotificationEmailImplEmailChannelInfo, Integer, Hash)>] ComDayCqWcmNotificationEmailImplEmailChannelInfo data, response status code and response headers
    def com_day_cq_wcm_notification_email_impl_email_channel_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_notification_email_impl_email_channel ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'email.from'] = opts[:'email_from'] if !opts[:'email_from'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmNotificationEmailImplEmailChannelInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_notification_email_impl_email_channel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_notification_email_impl_email_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :event_topics 
    # @return [ComDayCqWcmNotificationImplNotificationManagerImplInfo]
    def com_day_cq_wcm_notification_impl_notification_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_notification_impl_notification_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :event_topics 
    # @return [Array<(ComDayCqWcmNotificationImplNotificationManagerImplInfo, Integer, Hash)>] ComDayCqWcmNotificationImplNotificationManagerImplInfo data, response status code and response headers
    def com_day_cq_wcm_notification_impl_notification_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_notification_impl_notification_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.topics'] = @api_client.build_collection_param(opts[:'event_topics'], :multi) if !opts[:'event_topics'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmNotificationImplNotificationManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_notification_impl_notification_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_notification_impl_notification_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_day_cq_wcm_scripting_bvp_script_engines 
    # @return [ComDayCqWcmScriptingImplBVPManagerInfo]
    def com_day_cq_wcm_scripting_impl_bvp_manager(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_scripting_impl_bvp_manager_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :com_day_cq_wcm_scripting_bvp_script_engines 
    # @return [Array<(ComDayCqWcmScriptingImplBVPManagerInfo, Integer, Hash)>] ComDayCqWcmScriptingImplBVPManagerInfo data, response status code and response headers
    def com_day_cq_wcm_scripting_impl_bvp_manager_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_scripting_impl_bvp_manager ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'com.day.cq.wcm.scripting.bvp.script.engines'] = @api_client.build_collection_param(opts[:'com_day_cq_wcm_scripting_bvp_script_engines'], :multi) if !opts[:'com_day_cq_wcm_scripting_bvp_script_engines'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmScriptingImplBVPManagerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_scripting_impl_bvp_manager",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_scripting_impl_bvp_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_wcm_undo_enabled 
    # @option opts [String] :cq_wcm_undo_path 
    # @option opts [Integer] :cq_wcm_undo_validity 
    # @option opts [Integer] :cq_wcm_undo_steps 
    # @option opts [String] :cq_wcm_undo_persistence 
    # @option opts [Boolean] :cq_wcm_undo_persistence_mode 
    # @option opts [String] :cq_wcm_undo_markermode 
    # @option opts [Array<String>] :cq_wcm_undo_whitelist 
    # @option opts [Array<String>] :cq_wcm_undo_blacklist 
    # @return [ComDayCqWcmUndoUndoConfigInfo]
    def com_day_cq_wcm_undo_undo_config(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_undo_undo_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :cq_wcm_undo_enabled 
    # @option opts [String] :cq_wcm_undo_path 
    # @option opts [Integer] :cq_wcm_undo_validity 
    # @option opts [Integer] :cq_wcm_undo_steps 
    # @option opts [String] :cq_wcm_undo_persistence 
    # @option opts [Boolean] :cq_wcm_undo_persistence_mode 
    # @option opts [String] :cq_wcm_undo_markermode 
    # @option opts [Array<String>] :cq_wcm_undo_whitelist 
    # @option opts [Array<String>] :cq_wcm_undo_blacklist 
    # @return [Array<(ComDayCqWcmUndoUndoConfigInfo, Integer, Hash)>] ComDayCqWcmUndoUndoConfigInfo data, response status code and response headers
    def com_day_cq_wcm_undo_undo_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_undo_undo_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cq.wcm.undo.enabled'] = opts[:'cq_wcm_undo_enabled'] if !opts[:'cq_wcm_undo_enabled'].nil?
      query_params[:'cq.wcm.undo.path'] = opts[:'cq_wcm_undo_path'] if !opts[:'cq_wcm_undo_path'].nil?
      query_params[:'cq.wcm.undo.validity'] = opts[:'cq_wcm_undo_validity'] if !opts[:'cq_wcm_undo_validity'].nil?
      query_params[:'cq.wcm.undo.steps'] = opts[:'cq_wcm_undo_steps'] if !opts[:'cq_wcm_undo_steps'].nil?
      query_params[:'cq.wcm.undo.persistence'] = opts[:'cq_wcm_undo_persistence'] if !opts[:'cq_wcm_undo_persistence'].nil?
      query_params[:'cq.wcm.undo.persistence.mode'] = opts[:'cq_wcm_undo_persistence_mode'] if !opts[:'cq_wcm_undo_persistence_mode'].nil?
      query_params[:'cq.wcm.undo.markermode'] = opts[:'cq_wcm_undo_markermode'] if !opts[:'cq_wcm_undo_markermode'].nil?
      query_params[:'cq.wcm.undo.whitelist'] = @api_client.build_collection_param(opts[:'cq_wcm_undo_whitelist'], :multi) if !opts[:'cq_wcm_undo_whitelist'].nil?
      query_params[:'cq.wcm.undo.blacklist'] = @api_client.build_collection_param(opts[:'cq_wcm_undo_blacklist'], :multi) if !opts[:'cq_wcm_undo_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmUndoUndoConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_undo_undo_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_undo_undo_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :flush_agents 
    # @return [ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo]
    def com_day_cq_wcm_webservicesupport_impl_replication_event_listener(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_webservicesupport_impl_replication_event_listener_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :flush_agents 
    # @return [Array<(ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo, Integer, Hash)>] ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo data, response status code and response headers
    def com_day_cq_wcm_webservicesupport_impl_replication_event_listener_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_webservicesupport_impl_replication_event_listener ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'Flush agents'] = @api_client.build_collection_param(opts[:'flush_agents'], :multi) if !opts[:'flush_agents'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_webservicesupport_impl_replication_event_listener",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_webservicesupport_impl_replication_event_listener\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Integer] :min_thread_pool_size 
    # @option opts [Integer] :max_thread_pool_size 
    # @option opts [Boolean] :cq_wcm_workflow_terminate_on_activate 
    # @option opts [Array<String>] :cq_wcm_worklfow_terminate_exclusion_list 
    # @return [ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo]
    def com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :event_filter 
    # @option opts [Integer] :min_thread_pool_size 
    # @option opts [Integer] :max_thread_pool_size 
    # @option opts [Boolean] :cq_wcm_workflow_terminate_on_activate 
    # @option opts [Array<String>] :cq_wcm_worklfow_terminate_exclusion_list 
    # @return [Array<(ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo, Integer, Hash)>] ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo data, response status code and response headers
    def com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'event.filter'] = opts[:'event_filter'] if !opts[:'event_filter'].nil?
      query_params[:'minThreadPoolSize'] = opts[:'min_thread_pool_size'] if !opts[:'min_thread_pool_size'].nil?
      query_params[:'maxThreadPoolSize'] = opts[:'max_thread_pool_size'] if !opts[:'max_thread_pool_size'].nil?
      query_params[:'cq.wcm.workflow.terminate.on.activate'] = opts[:'cq_wcm_workflow_terminate_on_activate'] if !opts[:'cq_wcm_workflow_terminate_on_activate'].nil?
      query_params[:'cq.wcm.worklfow.terminate.exclusion.list'] = @api_client.build_collection_param(opts[:'cq_wcm_worklfow_terminate_exclusion_list'], :multi) if !opts[:'cq_wcm_worklfow_terminate_exclusion_list'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_workflow_impl_wcm_workflow_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :workflowpackageinfoprovider_filter 
    # @option opts [String] :workflowpackageinfoprovider_filter_rootpath 
    # @return [ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo]
    def com_day_cq_wcm_workflow_impl_workflow_package_info_provider(opts = {})
      data, _status_code, _headers = com_day_cq_wcm_workflow_impl_workflow_package_info_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :workflowpackageinfoprovider_filter 
    # @option opts [String] :workflowpackageinfoprovider_filter_rootpath 
    # @return [Array<(ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo, Integer, Hash)>] ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo data, response status code and response headers
    def com_day_cq_wcm_workflow_impl_workflow_package_info_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_wcm_workflow_impl_workflow_package_info_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'workflowpackageinfoprovider.filter'] = @api_client.build_collection_param(opts[:'workflowpackageinfoprovider_filter'], :multi) if !opts[:'workflowpackageinfoprovider_filter'].nil?
      query_params[:'workflowpackageinfoprovider.filter.rootpath'] = opts[:'workflowpackageinfoprovider_filter_rootpath'] if !opts[:'workflowpackageinfoprovider_filter_rootpath'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_wcm_workflow_impl_workflow_package_info_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_wcm_workflow_impl_workflow_package_info_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :htmllibmanager_clientmanager 
    # @option opts [Boolean] :htmllibmanager_debug 
    # @option opts [Boolean] :htmllibmanager_debug_console 
    # @option opts [String] :htmllibmanager_debug_init_js 
    # @option opts [String] :htmllibmanager_defaultthemename 
    # @option opts [String] :htmllibmanager_defaultuserthemename 
    # @option opts [String] :htmllibmanager_firebuglite_path 
    # @option opts [Boolean] :htmllibmanager_force_cq_url_info 
    # @option opts [Boolean] :htmllibmanager_gzip 
    # @option opts [Integer] :htmllibmanager_maxage 
    # @option opts [Integer] :htmllibmanager_max_data_uri_size 
    # @option opts [Boolean] :htmllibmanager_minify 
    # @option opts [Array<String>] :htmllibmanager_path_list 
    # @option opts [Boolean] :htmllibmanager_timing 
    # @return [ComDayCqWidgetImplHtmlLibraryManagerImplInfo]
    def com_day_cq_widget_impl_html_library_manager_impl(opts = {})
      data, _status_code, _headers = com_day_cq_widget_impl_html_library_manager_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :htmllibmanager_clientmanager 
    # @option opts [Boolean] :htmllibmanager_debug 
    # @option opts [Boolean] :htmllibmanager_debug_console 
    # @option opts [String] :htmllibmanager_debug_init_js 
    # @option opts [String] :htmllibmanager_defaultthemename 
    # @option opts [String] :htmllibmanager_defaultuserthemename 
    # @option opts [String] :htmllibmanager_firebuglite_path 
    # @option opts [Boolean] :htmllibmanager_force_cq_url_info 
    # @option opts [Boolean] :htmllibmanager_gzip 
    # @option opts [Integer] :htmllibmanager_maxage 
    # @option opts [Integer] :htmllibmanager_max_data_uri_size 
    # @option opts [Boolean] :htmllibmanager_minify 
    # @option opts [Array<String>] :htmllibmanager_path_list 
    # @option opts [Boolean] :htmllibmanager_timing 
    # @return [Array<(ComDayCqWidgetImplHtmlLibraryManagerImplInfo, Integer, Hash)>] ComDayCqWidgetImplHtmlLibraryManagerImplInfo data, response status code and response headers
    def com_day_cq_widget_impl_html_library_manager_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_widget_impl_html_library_manager_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'htmllibmanager.clientmanager'] = opts[:'htmllibmanager_clientmanager'] if !opts[:'htmllibmanager_clientmanager'].nil?
      query_params[:'htmllibmanager.debug'] = opts[:'htmllibmanager_debug'] if !opts[:'htmllibmanager_debug'].nil?
      query_params[:'htmllibmanager.debug.console'] = opts[:'htmllibmanager_debug_console'] if !opts[:'htmllibmanager_debug_console'].nil?
      query_params[:'htmllibmanager.debug.init.js'] = opts[:'htmllibmanager_debug_init_js'] if !opts[:'htmllibmanager_debug_init_js'].nil?
      query_params[:'htmllibmanager.defaultthemename'] = opts[:'htmllibmanager_defaultthemename'] if !opts[:'htmllibmanager_defaultthemename'].nil?
      query_params[:'htmllibmanager.defaultuserthemename'] = opts[:'htmllibmanager_defaultuserthemename'] if !opts[:'htmllibmanager_defaultuserthemename'].nil?
      query_params[:'htmllibmanager.firebuglite.path'] = opts[:'htmllibmanager_firebuglite_path'] if !opts[:'htmllibmanager_firebuglite_path'].nil?
      query_params[:'htmllibmanager.forceCQUrlInfo'] = opts[:'htmllibmanager_force_cq_url_info'] if !opts[:'htmllibmanager_force_cq_url_info'].nil?
      query_params[:'htmllibmanager.gzip'] = opts[:'htmllibmanager_gzip'] if !opts[:'htmllibmanager_gzip'].nil?
      query_params[:'htmllibmanager.maxage'] = opts[:'htmllibmanager_maxage'] if !opts[:'htmllibmanager_maxage'].nil?
      query_params[:'htmllibmanager.maxDataUriSize'] = opts[:'htmllibmanager_max_data_uri_size'] if !opts[:'htmllibmanager_max_data_uri_size'].nil?
      query_params[:'htmllibmanager.minify'] = opts[:'htmllibmanager_minify'] if !opts[:'htmllibmanager_minify'].nil?
      query_params[:'htmllibmanager.path.list'] = @api_client.build_collection_param(opts[:'htmllibmanager_path_list'], :multi) if !opts[:'htmllibmanager_path_list'].nil?
      query_params[:'htmllibmanager.timing'] = opts[:'htmllibmanager_timing'] if !opts[:'htmllibmanager_timing'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWidgetImplHtmlLibraryManagerImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_widget_impl_html_library_manager_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_widget_impl_html_library_manager_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :extendable_widgets 
    # @option opts [Boolean] :widgetextensionprovider_debug 
    # @return [ComDayCqWidgetImplWidgetExtensionProviderImplInfo]
    def com_day_cq_widget_impl_widget_extension_provider_impl(opts = {})
      data, _status_code, _headers = com_day_cq_widget_impl_widget_extension_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :extendable_widgets 
    # @option opts [Boolean] :widgetextensionprovider_debug 
    # @return [Array<(ComDayCqWidgetImplWidgetExtensionProviderImplInfo, Integer, Hash)>] ComDayCqWidgetImplWidgetExtensionProviderImplInfo data, response status code and response headers
    def com_day_cq_widget_impl_widget_extension_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_widget_impl_widget_extension_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'extendable.widgets'] = @api_client.build_collection_param(opts[:'extendable_widgets'], :multi) if !opts[:'extendable_widgets'].nil?
      query_params[:'widgetextensionprovider.debug'] = opts[:'widgetextensionprovider_debug'] if !opts[:'widgetextensionprovider_debug'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWidgetImplWidgetExtensionProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_widget_impl_widget_extension_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_widget_impl_widget_extension_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :from_address 
    # @option opts [String] :host_prefix 
    # @option opts [Boolean] :notify_onabort 
    # @option opts [Boolean] :notify_oncomplete 
    # @option opts [Boolean] :notify_oncontainercomplete 
    # @option opts [Boolean] :notify_useronly 
    # @return [ComDayCqWorkflowImplEmailEMailNotificationServiceInfo]
    def com_day_cq_workflow_impl_email_e_mail_notification_service(opts = {})
      data, _status_code, _headers = com_day_cq_workflow_impl_email_e_mail_notification_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :from_address 
    # @option opts [String] :host_prefix 
    # @option opts [Boolean] :notify_onabort 
    # @option opts [Boolean] :notify_oncomplete 
    # @option opts [Boolean] :notify_oncontainercomplete 
    # @option opts [Boolean] :notify_useronly 
    # @return [Array<(ComDayCqWorkflowImplEmailEMailNotificationServiceInfo, Integer, Hash)>] ComDayCqWorkflowImplEmailEMailNotificationServiceInfo data, response status code and response headers
    def com_day_cq_workflow_impl_email_e_mail_notification_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_workflow_impl_email_e_mail_notification_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'from.address'] = opts[:'from_address'] if !opts[:'from_address'].nil?
      query_params[:'host.prefix'] = opts[:'host_prefix'] if !opts[:'host_prefix'].nil?
      query_params[:'notify.onabort'] = opts[:'notify_onabort'] if !opts[:'notify_onabort'].nil?
      query_params[:'notify.oncomplete'] = opts[:'notify_oncomplete'] if !opts[:'notify_oncomplete'].nil?
      query_params[:'notify.oncontainercomplete'] = opts[:'notify_oncontainercomplete'] if !opts[:'notify_oncontainercomplete'].nil?
      query_params[:'notify.useronly'] = opts[:'notify_useronly'] if !opts[:'notify_useronly'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWorkflowImplEmailEMailNotificationServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_workflow_impl_email_e_mail_notification_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_workflow_impl_email_e_mail_notification_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :notify_onupdate 
    # @option opts [Boolean] :notify_oncomplete 
    # @return [ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo]
    def com_day_cq_workflow_impl_email_task_e_mail_notification_service(opts = {})
      data, _status_code, _headers = com_day_cq_workflow_impl_email_task_e_mail_notification_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :notify_onupdate 
    # @option opts [Boolean] :notify_oncomplete 
    # @return [Array<(ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo, Integer, Hash)>] ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo data, response status code and response headers
    def com_day_cq_workflow_impl_email_task_e_mail_notification_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_cq_workflow_impl_email_task_e_mail_notification_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'notify.onupdate'] = opts[:'notify_onupdate'] if !opts[:'notify_onupdate'].nil?
      query_params[:'notify.oncomplete'] = opts[:'notify_oncomplete'] if !opts[:'notify_oncomplete'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_cq_workflow_impl_email_task_e_mail_notification_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_cq_workflow_impl_email_task_e_mail_notification_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [String] :token_required_attr 
    # @option opts [String] :token_alternate_url 
    # @option opts [Boolean] :token_encapsulated 
    # @option opts [Array<String>] :skip_token_refresh 
    # @return [ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo]
    def com_day_crx_security_token_impl_impl_token_authentication_handler(opts = {})
      data, _status_code, _headers = com_day_crx_security_token_impl_impl_token_authentication_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [String] :token_required_attr 
    # @option opts [String] :token_alternate_url 
    # @option opts [Boolean] :token_encapsulated 
    # @option opts [Array<String>] :skip_token_refresh 
    # @return [Array<(ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo, Integer, Hash)>] ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo data, response status code and response headers
    def com_day_crx_security_token_impl_impl_token_authentication_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_crx_security_token_impl_impl_token_authentication_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'token.required.attr'] = opts[:'token_required_attr'] if !opts[:'token_required_attr'].nil?
      query_params[:'token.alternate.url'] = opts[:'token_alternate_url'] if !opts[:'token_alternate_url'].nil?
      query_params[:'token.encapsulated'] = opts[:'token_encapsulated'] if !opts[:'token_encapsulated'].nil?
      query_params[:'skip.token.refresh'] = @api_client.build_collection_param(opts[:'skip_token_refresh'], :multi) if !opts[:'skip_token_refresh'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_crx_security_token_impl_impl_token_authentication_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_crx_security_token_impl_impl_token_authentication_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_token_cleanup_task 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :batch_size 
    # @return [ComDayCrxSecurityTokenImplTokenCleanupTaskInfo]
    def com_day_crx_security_token_impl_token_cleanup_task(opts = {})
      data, _status_code, _headers = com_day_crx_security_token_impl_token_cleanup_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enable_token_cleanup_task 
    # @option opts [String] :scheduler_expression 
    # @option opts [Integer] :batch_size 
    # @return [Array<(ComDayCrxSecurityTokenImplTokenCleanupTaskInfo, Integer, Hash)>] ComDayCrxSecurityTokenImplTokenCleanupTaskInfo data, response status code and response headers
    def com_day_crx_security_token_impl_token_cleanup_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.com_day_crx_security_token_impl_token_cleanup_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enable.token.cleanup.task'] = opts[:'enable_token_cleanup_task'] if !opts[:'enable_token_cleanup_task'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?
      query_params[:'batch.size'] = opts[:'batch_size'] if !opts[:'batch_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComDayCrxSecurityTokenImplTokenCleanupTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.com_day_crx_security_token_impl_token_cleanup_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#com_day_crx_security_token_impl_token_cleanup_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :supported_locales 
    # @option opts [Array<String>] :localizable_properties 
    # @return [GuideLocalizationServiceInfo]
    def guide_localization_service(opts = {})
      data, _status_code, _headers = guide_localization_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :supported_locales 
    # @option opts [Array<String>] :localizable_properties 
    # @return [Array<(GuideLocalizationServiceInfo, Integer, Hash)>] GuideLocalizationServiceInfo data, response status code and response headers
    def guide_localization_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.guide_localization_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/Guide Localization Service'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'supportedLocales'] = @api_client.build_collection_param(opts[:'supported_locales'], :multi) if !opts[:'supported_locales'].nil?
      query_params[:'Localizable Properties'] = @api_client.build_collection_param(opts[:'localizable_properties'], :multi) if !opts[:'localizable_properties'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GuideLocalizationServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.guide_localization_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#guide_localization_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [MessagingUserComponentFactoryInfo]
    def messaging_user_component_factory(opts = {})
      data, _status_code, _headers = messaging_user_component_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :priority 
    # @return [Array<(MessagingUserComponentFactoryInfo, Integer, Hash)>] MessagingUserComponentFactoryInfo data, response status code and response headers
    def messaging_user_component_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.messaging_user_component_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/MessagingUserComponentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessagingUserComponentFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.messaging_user_component_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#messaging_user_component_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :attribute_change_notification_enabled 
    # @return [OrgApacheAriesJmxFrameworkStateConfigInfo]
    def org_apache_aries_jmx_framework_state_config(opts = {})
      data, _status_code, _headers = org_apache_aries_jmx_framework_state_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :attribute_change_notification_enabled 
    # @return [Array<(OrgApacheAriesJmxFrameworkStateConfigInfo, Integer, Hash)>] OrgApacheAriesJmxFrameworkStateConfigInfo data, response status code and response headers
    def org_apache_aries_jmx_framework_state_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_aries_jmx_framework_state_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'attributeChangeNotificationEnabled'] = opts[:'attribute_change_notification_enabled'] if !opts[:'attribute_change_notification_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheAriesJmxFrameworkStateConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_aries_jmx_framework_state_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_aries_jmx_framework_state_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :org_apache_felix_eventadmin_thread_pool_size 
    # @option opts [Float] :org_apache_felix_eventadmin_async_to_sync_thread_ratio 
    # @option opts [Integer] :org_apache_felix_eventadmin_timeout 
    # @option opts [Boolean] :org_apache_felix_eventadmin_require_topic 
    # @option opts [Array<String>] :org_apache_felix_eventadmin_ignore_timeout 
    # @option opts [Array<String>] :org_apache_felix_eventadmin_ignore_topic 
    # @return [OrgApacheFelixEventadminImplEventAdminInfo]
    def org_apache_felix_eventadmin_impl_event_admin(opts = {})
      data, _status_code, _headers = org_apache_felix_eventadmin_impl_event_admin_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :org_apache_felix_eventadmin_thread_pool_size 
    # @option opts [Float] :org_apache_felix_eventadmin_async_to_sync_thread_ratio 
    # @option opts [Integer] :org_apache_felix_eventadmin_timeout 
    # @option opts [Boolean] :org_apache_felix_eventadmin_require_topic 
    # @option opts [Array<String>] :org_apache_felix_eventadmin_ignore_timeout 
    # @option opts [Array<String>] :org_apache_felix_eventadmin_ignore_topic 
    # @return [Array<(OrgApacheFelixEventadminImplEventAdminInfo, Integer, Hash)>] OrgApacheFelixEventadminImplEventAdminInfo data, response status code and response headers
    def org_apache_felix_eventadmin_impl_event_admin_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_eventadmin_impl_event_admin ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.felix.eventadmin.ThreadPoolSize'] = opts[:'org_apache_felix_eventadmin_thread_pool_size'] if !opts[:'org_apache_felix_eventadmin_thread_pool_size'].nil?
      query_params[:'org.apache.felix.eventadmin.AsyncToSyncThreadRatio'] = opts[:'org_apache_felix_eventadmin_async_to_sync_thread_ratio'] if !opts[:'org_apache_felix_eventadmin_async_to_sync_thread_ratio'].nil?
      query_params[:'org.apache.felix.eventadmin.Timeout'] = opts[:'org_apache_felix_eventadmin_timeout'] if !opts[:'org_apache_felix_eventadmin_timeout'].nil?
      query_params[:'org.apache.felix.eventadmin.RequireTopic'] = opts[:'org_apache_felix_eventadmin_require_topic'] if !opts[:'org_apache_felix_eventadmin_require_topic'].nil?
      query_params[:'org.apache.felix.eventadmin.IgnoreTimeout'] = @api_client.build_collection_param(opts[:'org_apache_felix_eventadmin_ignore_timeout'], :multi) if !opts[:'org_apache_felix_eventadmin_ignore_timeout'].nil?
      query_params[:'org.apache.felix.eventadmin.IgnoreTopic'] = @api_client.build_collection_param(opts[:'org_apache_felix_eventadmin_ignore_topic'], :multi) if !opts[:'org_apache_felix_eventadmin_ignore_topic'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixEventadminImplEventAdminInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_eventadmin_impl_event_admin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_eventadmin_impl_event_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_felix_http_host 
    # @option opts [Boolean] :org_apache_felix_http_enable 
    # @option opts [Integer] :org_osgi_service_http_port 
    # @option opts [Integer] :org_apache_felix_http_timeout 
    # @option opts [Boolean] :org_apache_felix_https_enable 
    # @option opts [Integer] :org_osgi_service_http_port_secure 
    # @option opts [String] :org_apache_felix_https_keystore 
    # @option opts [String] :org_apache_felix_https_keystore_password 
    # @option opts [String] :org_apache_felix_https_keystore_key_password 
    # @option opts [String] :org_apache_felix_https_truststore 
    # @option opts [String] :org_apache_felix_https_truststore_password 
    # @option opts [String] :org_apache_felix_https_clientcertificate 
    # @option opts [String] :org_apache_felix_http_context_path 
    # @option opts [Boolean] :org_apache_felix_http_mbeans 
    # @option opts [Integer] :org_apache_felix_http_session_timeout 
    # @option opts [Integer] :org_apache_felix_http_jetty_threadpool_max 
    # @option opts [Integer] :org_apache_felix_http_jetty_acceptors 
    # @option opts [Integer] :org_apache_felix_http_jetty_selectors 
    # @option opts [Integer] :org_apache_felix_http_jetty_header_buffer_size 
    # @option opts [Integer] :org_apache_felix_http_jetty_request_buffer_size 
    # @option opts [Integer] :org_apache_felix_http_jetty_response_buffer_size 
    # @option opts [Integer] :org_apache_felix_http_jetty_max_form_size 
    # @option opts [Array<String>] :org_apache_felix_http_path_exclusions 
    # @option opts [Array<String>] :org_apache_felix_https_jetty_ciphersuites_excluded 
    # @option opts [Array<String>] :org_apache_felix_https_jetty_ciphersuites_included 
    # @option opts [Boolean] :org_apache_felix_http_jetty_send_server_header 
    # @option opts [Array<String>] :org_apache_felix_https_jetty_protocols_included 
    # @option opts [Array<String>] :org_apache_felix_https_jetty_protocols_excluded 
    # @option opts [Boolean] :org_apache_felix_proxy_load_balancer_connection_enable 
    # @option opts [Boolean] :org_apache_felix_https_jetty_renegotiate_allowed 
    # @option opts [Boolean] :org_apache_felix_https_jetty_session_cookie_http_only 
    # @option opts [Boolean] :org_apache_felix_https_jetty_session_cookie_secure 
    # @option opts [String] :org_eclipse_jetty_servlet_session_id_path_parameter_name 
    # @option opts [Boolean] :org_eclipse_jetty_servlet_checking_remote_session_id_encoding 
    # @option opts [String] :org_eclipse_jetty_servlet_session_cookie 
    # @option opts [String] :org_eclipse_jetty_servlet_session_domain 
    # @option opts [String] :org_eclipse_jetty_servlet_session_path 
    # @option opts [Integer] :org_eclipse_jetty_servlet_max_age 
    # @option opts [String] :org_apache_felix_http_name 
    # @option opts [Boolean] :org_apache_felix_jetty_gziphandler_enable 
    # @option opts [Integer] :org_apache_felix_jetty_gzip_min_gzip_size 
    # @option opts [Integer] :org_apache_felix_jetty_gzip_compression_level 
    # @option opts [Integer] :org_apache_felix_jetty_gzip_inflate_buffer_size 
    # @option opts [Boolean] :org_apache_felix_jetty_gzip_sync_flush 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_excluded_user_agents 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_included_methods 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_excluded_methods 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_included_paths 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_excluded_paths 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_included_mime_types 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_excluded_mime_types 
    # @option opts [Boolean] :org_apache_felix_http_session_invalidate 
    # @option opts [Boolean] :org_apache_felix_http_session_uniqueid 
    # @return [OrgApacheFelixHttpInfo]
    def org_apache_felix_http(opts = {})
      data, _status_code, _headers = org_apache_felix_http_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_felix_http_host 
    # @option opts [Boolean] :org_apache_felix_http_enable 
    # @option opts [Integer] :org_osgi_service_http_port 
    # @option opts [Integer] :org_apache_felix_http_timeout 
    # @option opts [Boolean] :org_apache_felix_https_enable 
    # @option opts [Integer] :org_osgi_service_http_port_secure 
    # @option opts [String] :org_apache_felix_https_keystore 
    # @option opts [String] :org_apache_felix_https_keystore_password 
    # @option opts [String] :org_apache_felix_https_keystore_key_password 
    # @option opts [String] :org_apache_felix_https_truststore 
    # @option opts [String] :org_apache_felix_https_truststore_password 
    # @option opts [String] :org_apache_felix_https_clientcertificate 
    # @option opts [String] :org_apache_felix_http_context_path 
    # @option opts [Boolean] :org_apache_felix_http_mbeans 
    # @option opts [Integer] :org_apache_felix_http_session_timeout 
    # @option opts [Integer] :org_apache_felix_http_jetty_threadpool_max 
    # @option opts [Integer] :org_apache_felix_http_jetty_acceptors 
    # @option opts [Integer] :org_apache_felix_http_jetty_selectors 
    # @option opts [Integer] :org_apache_felix_http_jetty_header_buffer_size 
    # @option opts [Integer] :org_apache_felix_http_jetty_request_buffer_size 
    # @option opts [Integer] :org_apache_felix_http_jetty_response_buffer_size 
    # @option opts [Integer] :org_apache_felix_http_jetty_max_form_size 
    # @option opts [Array<String>] :org_apache_felix_http_path_exclusions 
    # @option opts [Array<String>] :org_apache_felix_https_jetty_ciphersuites_excluded 
    # @option opts [Array<String>] :org_apache_felix_https_jetty_ciphersuites_included 
    # @option opts [Boolean] :org_apache_felix_http_jetty_send_server_header 
    # @option opts [Array<String>] :org_apache_felix_https_jetty_protocols_included 
    # @option opts [Array<String>] :org_apache_felix_https_jetty_protocols_excluded 
    # @option opts [Boolean] :org_apache_felix_proxy_load_balancer_connection_enable 
    # @option opts [Boolean] :org_apache_felix_https_jetty_renegotiate_allowed 
    # @option opts [Boolean] :org_apache_felix_https_jetty_session_cookie_http_only 
    # @option opts [Boolean] :org_apache_felix_https_jetty_session_cookie_secure 
    # @option opts [String] :org_eclipse_jetty_servlet_session_id_path_parameter_name 
    # @option opts [Boolean] :org_eclipse_jetty_servlet_checking_remote_session_id_encoding 
    # @option opts [String] :org_eclipse_jetty_servlet_session_cookie 
    # @option opts [String] :org_eclipse_jetty_servlet_session_domain 
    # @option opts [String] :org_eclipse_jetty_servlet_session_path 
    # @option opts [Integer] :org_eclipse_jetty_servlet_max_age 
    # @option opts [String] :org_apache_felix_http_name 
    # @option opts [Boolean] :org_apache_felix_jetty_gziphandler_enable 
    # @option opts [Integer] :org_apache_felix_jetty_gzip_min_gzip_size 
    # @option opts [Integer] :org_apache_felix_jetty_gzip_compression_level 
    # @option opts [Integer] :org_apache_felix_jetty_gzip_inflate_buffer_size 
    # @option opts [Boolean] :org_apache_felix_jetty_gzip_sync_flush 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_excluded_user_agents 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_included_methods 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_excluded_methods 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_included_paths 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_excluded_paths 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_included_mime_types 
    # @option opts [Array<String>] :org_apache_felix_jetty_gzip_excluded_mime_types 
    # @option opts [Boolean] :org_apache_felix_http_session_invalidate 
    # @option opts [Boolean] :org_apache_felix_http_session_uniqueid 
    # @return [Array<(OrgApacheFelixHttpInfo, Integer, Hash)>] OrgApacheFelixHttpInfo data, response status code and response headers
    def org_apache_felix_http_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_http ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.http'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.felix.http.host'] = opts[:'org_apache_felix_http_host'] if !opts[:'org_apache_felix_http_host'].nil?
      query_params[:'org.apache.felix.http.enable'] = opts[:'org_apache_felix_http_enable'] if !opts[:'org_apache_felix_http_enable'].nil?
      query_params[:'org.osgi.service.http.port'] = opts[:'org_osgi_service_http_port'] if !opts[:'org_osgi_service_http_port'].nil?
      query_params[:'org.apache.felix.http.timeout'] = opts[:'org_apache_felix_http_timeout'] if !opts[:'org_apache_felix_http_timeout'].nil?
      query_params[:'org.apache.felix.https.enable'] = opts[:'org_apache_felix_https_enable'] if !opts[:'org_apache_felix_https_enable'].nil?
      query_params[:'org.osgi.service.http.port.secure'] = opts[:'org_osgi_service_http_port_secure'] if !opts[:'org_osgi_service_http_port_secure'].nil?
      query_params[:'org.apache.felix.https.keystore'] = opts[:'org_apache_felix_https_keystore'] if !opts[:'org_apache_felix_https_keystore'].nil?
      query_params[:'org.apache.felix.https.keystore.password'] = opts[:'org_apache_felix_https_keystore_password'] if !opts[:'org_apache_felix_https_keystore_password'].nil?
      query_params[:'org.apache.felix.https.keystore.key.password'] = opts[:'org_apache_felix_https_keystore_key_password'] if !opts[:'org_apache_felix_https_keystore_key_password'].nil?
      query_params[:'org.apache.felix.https.truststore'] = opts[:'org_apache_felix_https_truststore'] if !opts[:'org_apache_felix_https_truststore'].nil?
      query_params[:'org.apache.felix.https.truststore.password'] = opts[:'org_apache_felix_https_truststore_password'] if !opts[:'org_apache_felix_https_truststore_password'].nil?
      query_params[:'org.apache.felix.https.clientcertificate'] = opts[:'org_apache_felix_https_clientcertificate'] if !opts[:'org_apache_felix_https_clientcertificate'].nil?
      query_params[:'org.apache.felix.http.context_path'] = opts[:'org_apache_felix_http_context_path'] if !opts[:'org_apache_felix_http_context_path'].nil?
      query_params[:'org.apache.felix.http.mbeans'] = opts[:'org_apache_felix_http_mbeans'] if !opts[:'org_apache_felix_http_mbeans'].nil?
      query_params[:'org.apache.felix.http.session.timeout'] = opts[:'org_apache_felix_http_session_timeout'] if !opts[:'org_apache_felix_http_session_timeout'].nil?
      query_params[:'org.apache.felix.http.jetty.threadpool.max'] = opts[:'org_apache_felix_http_jetty_threadpool_max'] if !opts[:'org_apache_felix_http_jetty_threadpool_max'].nil?
      query_params[:'org.apache.felix.http.jetty.acceptors'] = opts[:'org_apache_felix_http_jetty_acceptors'] if !opts[:'org_apache_felix_http_jetty_acceptors'].nil?
      query_params[:'org.apache.felix.http.jetty.selectors'] = opts[:'org_apache_felix_http_jetty_selectors'] if !opts[:'org_apache_felix_http_jetty_selectors'].nil?
      query_params[:'org.apache.felix.http.jetty.headerBufferSize'] = opts[:'org_apache_felix_http_jetty_header_buffer_size'] if !opts[:'org_apache_felix_http_jetty_header_buffer_size'].nil?
      query_params[:'org.apache.felix.http.jetty.requestBufferSize'] = opts[:'org_apache_felix_http_jetty_request_buffer_size'] if !opts[:'org_apache_felix_http_jetty_request_buffer_size'].nil?
      query_params[:'org.apache.felix.http.jetty.responseBufferSize'] = opts[:'org_apache_felix_http_jetty_response_buffer_size'] if !opts[:'org_apache_felix_http_jetty_response_buffer_size'].nil?
      query_params[:'org.apache.felix.http.jetty.maxFormSize'] = opts[:'org_apache_felix_http_jetty_max_form_size'] if !opts[:'org_apache_felix_http_jetty_max_form_size'].nil?
      query_params[:'org.apache.felix.http.path_exclusions'] = @api_client.build_collection_param(opts[:'org_apache_felix_http_path_exclusions'], :multi) if !opts[:'org_apache_felix_http_path_exclusions'].nil?
      query_params[:'org.apache.felix.https.jetty.ciphersuites.excluded'] = @api_client.build_collection_param(opts[:'org_apache_felix_https_jetty_ciphersuites_excluded'], :multi) if !opts[:'org_apache_felix_https_jetty_ciphersuites_excluded'].nil?
      query_params[:'org.apache.felix.https.jetty.ciphersuites.included'] = @api_client.build_collection_param(opts[:'org_apache_felix_https_jetty_ciphersuites_included'], :multi) if !opts[:'org_apache_felix_https_jetty_ciphersuites_included'].nil?
      query_params[:'org.apache.felix.http.jetty.sendServerHeader'] = opts[:'org_apache_felix_http_jetty_send_server_header'] if !opts[:'org_apache_felix_http_jetty_send_server_header'].nil?
      query_params[:'org.apache.felix.https.jetty.protocols.included'] = @api_client.build_collection_param(opts[:'org_apache_felix_https_jetty_protocols_included'], :multi) if !opts[:'org_apache_felix_https_jetty_protocols_included'].nil?
      query_params[:'org.apache.felix.https.jetty.protocols.excluded'] = @api_client.build_collection_param(opts[:'org_apache_felix_https_jetty_protocols_excluded'], :multi) if !opts[:'org_apache_felix_https_jetty_protocols_excluded'].nil?
      query_params[:'org.apache.felix.proxy.load.balancer.connection.enable'] = opts[:'org_apache_felix_proxy_load_balancer_connection_enable'] if !opts[:'org_apache_felix_proxy_load_balancer_connection_enable'].nil?
      query_params[:'org.apache.felix.https.jetty.renegotiateAllowed'] = opts[:'org_apache_felix_https_jetty_renegotiate_allowed'] if !opts[:'org_apache_felix_https_jetty_renegotiate_allowed'].nil?
      query_params[:'org.apache.felix.https.jetty.session.cookie.httpOnly'] = opts[:'org_apache_felix_https_jetty_session_cookie_http_only'] if !opts[:'org_apache_felix_https_jetty_session_cookie_http_only'].nil?
      query_params[:'org.apache.felix.https.jetty.session.cookie.secure'] = opts[:'org_apache_felix_https_jetty_session_cookie_secure'] if !opts[:'org_apache_felix_https_jetty_session_cookie_secure'].nil?
      query_params[:'org.eclipse.jetty.servlet.SessionIdPathParameterName'] = opts[:'org_eclipse_jetty_servlet_session_id_path_parameter_name'] if !opts[:'org_eclipse_jetty_servlet_session_id_path_parameter_name'].nil?
      query_params[:'org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding'] = opts[:'org_eclipse_jetty_servlet_checking_remote_session_id_encoding'] if !opts[:'org_eclipse_jetty_servlet_checking_remote_session_id_encoding'].nil?
      query_params[:'org.eclipse.jetty.servlet.SessionCookie'] = opts[:'org_eclipse_jetty_servlet_session_cookie'] if !opts[:'org_eclipse_jetty_servlet_session_cookie'].nil?
      query_params[:'org.eclipse.jetty.servlet.SessionDomain'] = opts[:'org_eclipse_jetty_servlet_session_domain'] if !opts[:'org_eclipse_jetty_servlet_session_domain'].nil?
      query_params[:'org.eclipse.jetty.servlet.SessionPath'] = opts[:'org_eclipse_jetty_servlet_session_path'] if !opts[:'org_eclipse_jetty_servlet_session_path'].nil?
      query_params[:'org.eclipse.jetty.servlet.MaxAge'] = opts[:'org_eclipse_jetty_servlet_max_age'] if !opts[:'org_eclipse_jetty_servlet_max_age'].nil?
      query_params[:'org.apache.felix.http.name'] = opts[:'org_apache_felix_http_name'] if !opts[:'org_apache_felix_http_name'].nil?
      query_params[:'org.apache.felix.jetty.gziphandler.enable'] = opts[:'org_apache_felix_jetty_gziphandler_enable'] if !opts[:'org_apache_felix_jetty_gziphandler_enable'].nil?
      query_params[:'org.apache.felix.jetty.gzip.minGzipSize'] = opts[:'org_apache_felix_jetty_gzip_min_gzip_size'] if !opts[:'org_apache_felix_jetty_gzip_min_gzip_size'].nil?
      query_params[:'org.apache.felix.jetty.gzip.compressionLevel'] = opts[:'org_apache_felix_jetty_gzip_compression_level'] if !opts[:'org_apache_felix_jetty_gzip_compression_level'].nil?
      query_params[:'org.apache.felix.jetty.gzip.inflateBufferSize'] = opts[:'org_apache_felix_jetty_gzip_inflate_buffer_size'] if !opts[:'org_apache_felix_jetty_gzip_inflate_buffer_size'].nil?
      query_params[:'org.apache.felix.jetty.gzip.syncFlush'] = opts[:'org_apache_felix_jetty_gzip_sync_flush'] if !opts[:'org_apache_felix_jetty_gzip_sync_flush'].nil?
      query_params[:'org.apache.felix.jetty.gzip.excludedUserAgents'] = @api_client.build_collection_param(opts[:'org_apache_felix_jetty_gzip_excluded_user_agents'], :multi) if !opts[:'org_apache_felix_jetty_gzip_excluded_user_agents'].nil?
      query_params[:'org.apache.felix.jetty.gzip.includedMethods'] = @api_client.build_collection_param(opts[:'org_apache_felix_jetty_gzip_included_methods'], :multi) if !opts[:'org_apache_felix_jetty_gzip_included_methods'].nil?
      query_params[:'org.apache.felix.jetty.gzip.excludedMethods'] = @api_client.build_collection_param(opts[:'org_apache_felix_jetty_gzip_excluded_methods'], :multi) if !opts[:'org_apache_felix_jetty_gzip_excluded_methods'].nil?
      query_params[:'org.apache.felix.jetty.gzip.includedPaths'] = @api_client.build_collection_param(opts[:'org_apache_felix_jetty_gzip_included_paths'], :multi) if !opts[:'org_apache_felix_jetty_gzip_included_paths'].nil?
      query_params[:'org.apache.felix.jetty.gzip.excludedPaths'] = @api_client.build_collection_param(opts[:'org_apache_felix_jetty_gzip_excluded_paths'], :multi) if !opts[:'org_apache_felix_jetty_gzip_excluded_paths'].nil?
      query_params[:'org.apache.felix.jetty.gzip.includedMimeTypes'] = @api_client.build_collection_param(opts[:'org_apache_felix_jetty_gzip_included_mime_types'], :multi) if !opts[:'org_apache_felix_jetty_gzip_included_mime_types'].nil?
      query_params[:'org.apache.felix.jetty.gzip.excludedMimeTypes'] = @api_client.build_collection_param(opts[:'org_apache_felix_jetty_gzip_excluded_mime_types'], :multi) if !opts[:'org_apache_felix_jetty_gzip_excluded_mime_types'].nil?
      query_params[:'org.apache.felix.http.session.invalidate'] = opts[:'org_apache_felix_http_session_invalidate'] if !opts[:'org_apache_felix_http_session_invalidate'].nil?
      query_params[:'org.apache.felix.http.session.uniqueid'] = opts[:'org_apache_felix_http_session_uniqueid'] if !opts[:'org_apache_felix_http_session_uniqueid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixHttpInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_http",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_http\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :ssl_forward_header 
    # @option opts [String] :ssl_forward_value 
    # @option opts [String] :ssl_forward_cert_header 
    # @option opts [Boolean] :rewrite_absolute_urls 
    # @return [OrgApacheFelixHttpSslfilterSslFilterInfo]
    def org_apache_felix_http_sslfilter_ssl_filter(opts = {})
      data, _status_code, _headers = org_apache_felix_http_sslfilter_ssl_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :ssl_forward_header 
    # @option opts [String] :ssl_forward_value 
    # @option opts [String] :ssl_forward_cert_header 
    # @option opts [Boolean] :rewrite_absolute_urls 
    # @return [Array<(OrgApacheFelixHttpSslfilterSslFilterInfo, Integer, Hash)>] OrgApacheFelixHttpSslfilterSslFilterInfo data, response status code and response headers
    def org_apache_felix_http_sslfilter_ssl_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_http_sslfilter_ssl_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'ssl-forward.header'] = opts[:'ssl_forward_header'] if !opts[:'ssl_forward_header'].nil?
      query_params[:'ssl-forward.value'] = opts[:'ssl_forward_value'] if !opts[:'ssl_forward_value'].nil?
      query_params[:'ssl-forward-cert.header'] = opts[:'ssl_forward_cert_header'] if !opts[:'ssl_forward_cert_header'].nil?
      query_params[:'rewrite.absolute.urls'] = opts[:'rewrite_absolute_urls'] if !opts[:'rewrite_absolute_urls'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixHttpSslfilterSslFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_http_sslfilter_ssl_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_http_sslfilter_ssl_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jaas_control_flag 
    # @option opts [Integer] :jaas_ranking 
    # @option opts [String] :jaas_realm_name 
    # @option opts [String] :jaas_classname 
    # @option opts [Array<String>] :jaas_options 
    # @return [OrgApacheFelixJaasConfigurationFactoryInfo]
    def org_apache_felix_jaas_configuration_factory(opts = {})
      data, _status_code, _headers = org_apache_felix_jaas_configuration_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jaas_control_flag 
    # @option opts [Integer] :jaas_ranking 
    # @option opts [String] :jaas_realm_name 
    # @option opts [String] :jaas_classname 
    # @option opts [Array<String>] :jaas_options 
    # @return [Array<(OrgApacheFelixJaasConfigurationFactoryInfo, Integer, Hash)>] OrgApacheFelixJaasConfigurationFactoryInfo data, response status code and response headers
    def org_apache_felix_jaas_configuration_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_jaas_configuration_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.jaas.Configuration.factory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'jaas.controlFlag'] = opts[:'jaas_control_flag'] if !opts[:'jaas_control_flag'].nil?
      query_params[:'jaas.ranking'] = opts[:'jaas_ranking'] if !opts[:'jaas_ranking'].nil?
      query_params[:'jaas.realmName'] = opts[:'jaas_realm_name'] if !opts[:'jaas_realm_name'].nil?
      query_params[:'jaas.classname'] = opts[:'jaas_classname'] if !opts[:'jaas_classname'].nil?
      query_params[:'jaas.options'] = @api_client.build_collection_param(opts[:'jaas_options'], :multi) if !opts[:'jaas_options'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixJaasConfigurationFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_jaas_configuration_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_jaas_configuration_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jaas_default_realm_name 
    # @option opts [String] :jaas_config_provider_name 
    # @option opts [String] :jaas_global_config_policy 
    # @return [OrgApacheFelixJaasConfigurationSpiInfo]
    def org_apache_felix_jaas_configuration_spi(opts = {})
      data, _status_code, _headers = org_apache_felix_jaas_configuration_spi_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jaas_default_realm_name 
    # @option opts [String] :jaas_config_provider_name 
    # @option opts [String] :jaas_global_config_policy 
    # @return [Array<(OrgApacheFelixJaasConfigurationSpiInfo, Integer, Hash)>] OrgApacheFelixJaasConfigurationSpiInfo data, response status code and response headers
    def org_apache_felix_jaas_configuration_spi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_jaas_configuration_spi ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'jaas.defaultRealmName'] = opts[:'jaas_default_realm_name'] if !opts[:'jaas_default_realm_name'].nil?
      query_params[:'jaas.configProviderName'] = opts[:'jaas_config_provider_name'] if !opts[:'jaas_config_provider_name'].nil?
      query_params[:'jaas.globalConfigPolicy'] = opts[:'jaas_global_config_policy'] if !opts[:'jaas_global_config_policy'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixJaasConfigurationSpiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_jaas_configuration_spi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_jaas_configuration_spi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :ds_loglevel 
    # @option opts [Boolean] :ds_factory_enabled 
    # @option opts [Boolean] :ds_delayed_keep_instances 
    # @option opts [Integer] :ds_lock_timeout_milliseconds 
    # @option opts [Integer] :ds_stop_timeout_milliseconds 
    # @option opts [Boolean] :ds_global_extender 
    # @return [OrgApacheFelixScrScrServiceInfo]
    def org_apache_felix_scr_scr_service(opts = {})
      data, _status_code, _headers = org_apache_felix_scr_scr_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :ds_loglevel 
    # @option opts [Boolean] :ds_factory_enabled 
    # @option opts [Boolean] :ds_delayed_keep_instances 
    # @option opts [Integer] :ds_lock_timeout_milliseconds 
    # @option opts [Integer] :ds_stop_timeout_milliseconds 
    # @option opts [Boolean] :ds_global_extender 
    # @return [Array<(OrgApacheFelixScrScrServiceInfo, Integer, Hash)>] OrgApacheFelixScrScrServiceInfo data, response status code and response headers
    def org_apache_felix_scr_scr_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_scr_scr_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.scr.ScrService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'ds.loglevel'] = opts[:'ds_loglevel'] if !opts[:'ds_loglevel'].nil?
      query_params[:'ds.factory.enabled'] = opts[:'ds_factory_enabled'] if !opts[:'ds_factory_enabled'].nil?
      query_params[:'ds.delayed.keepInstances'] = opts[:'ds_delayed_keep_instances'] if !opts[:'ds_delayed_keep_instances'].nil?
      query_params[:'ds.lock.timeout.milliseconds'] = opts[:'ds_lock_timeout_milliseconds'] if !opts[:'ds_lock_timeout_milliseconds'].nil?
      query_params[:'ds.stop.timeout.milliseconds'] = opts[:'ds_stop_timeout_milliseconds'] if !opts[:'ds_stop_timeout_milliseconds'].nil?
      query_params[:'ds.global.extender'] = opts[:'ds_global_extender'] if !opts[:'ds_global_extender'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixScrScrServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_scr_scr_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_scr_scr_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :components_list 
    # @option opts [String] :type 
    # @return [OrgApacheFelixSystemreadyImplComponentsCheckInfo]
    def org_apache_felix_systemready_impl_components_check(opts = {})
      data, _status_code, _headers = org_apache_felix_systemready_impl_components_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :components_list 
    # @option opts [String] :type 
    # @return [Array<(OrgApacheFelixSystemreadyImplComponentsCheckInfo, Integer, Hash)>] OrgApacheFelixSystemreadyImplComponentsCheckInfo data, response status code and response headers
    def org_apache_felix_systemready_impl_components_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_systemready_impl_components_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'components.list'] = @api_client.build_collection_param(opts[:'components_list'], :multi) if !opts[:'components_list'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixSystemreadyImplComponentsCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_systemready_impl_components_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_systemready_impl_components_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :timeout 
    # @option opts [Integer] :target_start_level 
    # @option opts [String] :target_start_level_prop_name 
    # @option opts [String] :type 
    # @return [OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo]
    def org_apache_felix_systemready_impl_framework_start_check(opts = {})
      data, _status_code, _headers = org_apache_felix_systemready_impl_framework_start_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :timeout 
    # @option opts [Integer] :target_start_level 
    # @option opts [String] :target_start_level_prop_name 
    # @option opts [String] :type 
    # @return [Array<(OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo, Integer, Hash)>] OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo data, response status code and response headers
    def org_apache_felix_systemready_impl_framework_start_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_systemready_impl_framework_start_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'timeout'] = opts[:'timeout'] if !opts[:'timeout'].nil?
      query_params[:'target.start.level'] = opts[:'target_start_level'] if !opts[:'target_start_level'].nil?
      query_params[:'target.start.level.prop.name'] = opts[:'target_start_level_prop_name'] if !opts[:'target_start_level_prop_name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_systemready_impl_framework_start_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_systemready_impl_framework_start_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :services_list 
    # @option opts [String] :type 
    # @return [OrgApacheFelixSystemreadyImplServicesCheckInfo]
    def org_apache_felix_systemready_impl_services_check(opts = {})
      data, _status_code, _headers = org_apache_felix_systemready_impl_services_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :services_list 
    # @option opts [String] :type 
    # @return [Array<(OrgApacheFelixSystemreadyImplServicesCheckInfo, Integer, Hash)>] OrgApacheFelixSystemreadyImplServicesCheckInfo data, response status code and response headers
    def org_apache_felix_systemready_impl_services_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_systemready_impl_services_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'services.list'] = @api_client.build_collection_param(opts[:'services_list'], :multi) if !opts[:'services_list'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixSystemreadyImplServicesCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_systemready_impl_services_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_systemready_impl_services_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :osgi_http_whiteboard_servlet_pattern 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @return [OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo]
    def org_apache_felix_systemready_impl_servlet_system_alive_servlet(opts = {})
      data, _status_code, _headers = org_apache_felix_systemready_impl_servlet_system_alive_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :osgi_http_whiteboard_servlet_pattern 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @return [Array<(OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo, Integer, Hash)>] OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo data, response status code and response headers
    def org_apache_felix_systemready_impl_servlet_system_alive_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_systemready_impl_servlet_system_alive_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'osgi.http.whiteboard.servlet.pattern'] = opts[:'osgi_http_whiteboard_servlet_pattern'] if !opts[:'osgi_http_whiteboard_servlet_pattern'].nil?
      query_params[:'osgi.http.whiteboard.context.select'] = opts[:'osgi_http_whiteboard_context_select'] if !opts[:'osgi_http_whiteboard_context_select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_systemready_impl_servlet_system_alive_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_systemready_impl_servlet_system_alive_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :osgi_http_whiteboard_servlet_pattern 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @return [OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo]
    def org_apache_felix_systemready_impl_servlet_system_ready_servlet(opts = {})
      data, _status_code, _headers = org_apache_felix_systemready_impl_servlet_system_ready_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :osgi_http_whiteboard_servlet_pattern 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @return [Array<(OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo, Integer, Hash)>] OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo data, response status code and response headers
    def org_apache_felix_systemready_impl_servlet_system_ready_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_systemready_impl_servlet_system_ready_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'osgi.http.whiteboard.servlet.pattern'] = opts[:'osgi_http_whiteboard_servlet_pattern'] if !opts[:'osgi_http_whiteboard_servlet_pattern'].nil?
      query_params[:'osgi.http.whiteboard.context.select'] = opts[:'osgi_http_whiteboard_context_select'] if !opts[:'osgi_http_whiteboard_context_select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_systemready_impl_servlet_system_ready_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_systemready_impl_servlet_system_ready_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :poll_interval 
    # @return [OrgApacheFelixSystemreadySystemReadyMonitorInfo]
    def org_apache_felix_systemready_system_ready_monitor(opts = {})
      data, _status_code, _headers = org_apache_felix_systemready_system_ready_monitor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :poll_interval 
    # @return [Array<(OrgApacheFelixSystemreadySystemReadyMonitorInfo, Integer, Hash)>] OrgApacheFelixSystemreadySystemReadyMonitorInfo data, response status code and response headers
    def org_apache_felix_systemready_system_ready_monitor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_systemready_system_ready_monitor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'poll.interval'] = opts[:'poll_interval'] if !opts[:'poll_interval'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixSystemreadySystemReadyMonitorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_systemready_system_ready_monitor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_systemready_system_ready_monitor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :manager_root 
    # @option opts [String] :http_service_filter 
    # @option opts [String] :default_render 
    # @option opts [String] :realm 
    # @option opts [String] :username 
    # @option opts [String] :password 
    # @option opts [String] :category 
    # @option opts [String] :locale 
    # @option opts [Integer] :loglevel 
    # @option opts [String] :plugins 
    # @return [OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo]
    def org_apache_felix_webconsole_internal_servlet_osgi_manager(opts = {})
      data, _status_code, _headers = org_apache_felix_webconsole_internal_servlet_osgi_manager_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :manager_root 
    # @option opts [String] :http_service_filter 
    # @option opts [String] :default_render 
    # @option opts [String] :realm 
    # @option opts [String] :username 
    # @option opts [String] :password 
    # @option opts [String] :category 
    # @option opts [String] :locale 
    # @option opts [Integer] :loglevel 
    # @option opts [String] :plugins 
    # @return [Array<(OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo, Integer, Hash)>] OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo data, response status code and response headers
    def org_apache_felix_webconsole_internal_servlet_osgi_manager_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_webconsole_internal_servlet_osgi_manager ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'manager.root'] = opts[:'manager_root'] if !opts[:'manager_root'].nil?
      query_params[:'http.service.filter'] = opts[:'http_service_filter'] if !opts[:'http_service_filter'].nil?
      query_params[:'default.render'] = opts[:'default_render'] if !opts[:'default_render'].nil?
      query_params[:'realm'] = opts[:'realm'] if !opts[:'realm'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'locale'] = opts[:'locale'] if !opts[:'locale'].nil?
      query_params[:'loglevel'] = opts[:'loglevel'] if !opts[:'loglevel'].nil?
      query_params[:'plugins'] = opts[:'plugins'] if !opts[:'plugins'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_webconsole_internal_servlet_osgi_manager",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_webconsole_internal_servlet_osgi_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_size 
    # @return [OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo]
    def org_apache_felix_webconsole_plugins_event_internal_plugin_servlet(opts = {})
      data, _status_code, _headers = org_apache_felix_webconsole_plugins_event_internal_plugin_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_size 
    # @return [Array<(OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo, Integer, Hash)>] OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo data, response status code and response headers
    def org_apache_felix_webconsole_plugins_event_internal_plugin_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_webconsole_plugins_event_internal_plugin_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'max.size'] = opts[:'max_size'] if !opts[:'max_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_webconsole_plugins_event_internal_plugin_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_webconsole_plugins_event_internal_plugin_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :felix_memoryusage_dump_threshold 
    # @option opts [Integer] :felix_memoryusage_dump_interval 
    # @option opts [String] :felix_memoryusage_dump_location 
    # @return [OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo]
    def org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co(opts = {})
      data, _status_code, _headers = org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :felix_memoryusage_dump_threshold 
    # @option opts [Integer] :felix_memoryusage_dump_interval 
    # @option opts [String] :felix_memoryusage_dump_location 
    # @return [Array<(OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo, Integer, Hash)>] OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo data, response status code and response headers
    def org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'felix.memoryusage.dump.threshold'] = opts[:'felix_memoryusage_dump_threshold'] if !opts[:'felix_memoryusage_dump_threshold'].nil?
      query_params[:'felix.memoryusage.dump.interval'] = opts[:'felix_memoryusage_dump_interval'] if !opts[:'felix_memoryusage_dump_interval'].nil?
      query_params[:'felix.memoryusage.dump.location'] = opts[:'felix_memoryusage_dump_location'] if !opts[:'felix_memoryusage_dump_location'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_felix_webconsole_plugins_memoryusage_internal_memory_usage_co\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :proxy_enabled 
    # @option opts [String] :proxy_host 
    # @option opts [Integer] :proxy_port 
    # @option opts [String] :proxy_user 
    # @option opts [String] :proxy_password 
    # @option opts [Array<String>] :proxy_exceptions 
    # @return [OrgApacheHttpProxyconfiguratorInfo]
    def org_apache_http_proxyconfigurator(opts = {})
      data, _status_code, _headers = org_apache_http_proxyconfigurator_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :proxy_enabled 
    # @option opts [String] :proxy_host 
    # @option opts [Integer] :proxy_port 
    # @option opts [String] :proxy_user 
    # @option opts [String] :proxy_password 
    # @option opts [Array<String>] :proxy_exceptions 
    # @return [Array<(OrgApacheHttpProxyconfiguratorInfo, Integer, Hash)>] OrgApacheHttpProxyconfiguratorInfo data, response status code and response headers
    def org_apache_http_proxyconfigurator_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_http_proxyconfigurator ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.http.proxyconfigurator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'proxy.enabled'] = opts[:'proxy_enabled'] if !opts[:'proxy_enabled'].nil?
      query_params[:'proxy.host'] = opts[:'proxy_host'] if !opts[:'proxy_host'].nil?
      query_params[:'proxy.port'] = opts[:'proxy_port'] if !opts[:'proxy_port'].nil?
      query_params[:'proxy.user'] = opts[:'proxy_user'] if !opts[:'proxy_user'].nil?
      query_params[:'proxy.password'] = opts[:'proxy_password'] if !opts[:'proxy_password'].nil?
      query_params[:'proxy.exceptions'] = @api_client.build_collection_param(opts[:'proxy_exceptions'], :multi) if !opts[:'proxy_exceptions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheHttpProxyconfiguratorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_http_proxyconfigurator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_http_proxyconfigurator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :dir 
    # @return [OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo]
    def org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :dir 
    # @return [Array<(OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_blob_datastore_data_store_text_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @return [OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo]
    def org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @return [Array<(OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_blob_datastore_file_data_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :mongouri 
    # @option opts [String] :db 
    # @option opts [Boolean] :socket_keep_alive 
    # @option opts [Integer] :cache 
    # @option opts [Integer] :node_cache_percentage 
    # @option opts [Integer] :prev_doc_cache_percentage 
    # @option opts [Integer] :children_cache_percentage 
    # @option opts [Integer] :diff_cache_percentage 
    # @option opts [Integer] :cache_segment_count 
    # @option opts [Integer] :cache_stack_move_distance 
    # @option opts [Integer] :blob_cache_size 
    # @option opts [String] :persistent_cache 
    # @option opts [String] :journal_cache 
    # @option opts [Boolean] :custom_blob_store 
    # @option opts [Integer] :journal_gc_interval 
    # @option opts [Integer] :journal_gc_max_age 
    # @option opts [Boolean] :prefetch_external_changes 
    # @option opts [String] :role 
    # @option opts [Integer] :version_gc_max_age_in_secs 
    # @option opts [String] :version_gc_expression 
    # @option opts [Integer] :version_gc_time_limit_in_secs 
    # @option opts [Integer] :blob_gc_max_age_in_secs 
    # @option opts [Integer] :blob_track_snapshot_interval_in_secs 
    # @option opts [String] :repository_home 
    # @option opts [Integer] :max_replication_lag_in_secs 
    # @option opts [String] :document_store_type 
    # @option opts [Boolean] :bundling_disabled 
    # @option opts [Integer] :update_limit 
    # @option opts [Array<String>] :persistent_cache_includes 
    # @option opts [String] :lease_check_mode 
    # @return [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo]
    def org_apache_jackrabbit_oak_plugins_document_document_node_store_service(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_document_document_node_store_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :mongouri 
    # @option opts [String] :db 
    # @option opts [Boolean] :socket_keep_alive 
    # @option opts [Integer] :cache 
    # @option opts [Integer] :node_cache_percentage 
    # @option opts [Integer] :prev_doc_cache_percentage 
    # @option opts [Integer] :children_cache_percentage 
    # @option opts [Integer] :diff_cache_percentage 
    # @option opts [Integer] :cache_segment_count 
    # @option opts [Integer] :cache_stack_move_distance 
    # @option opts [Integer] :blob_cache_size 
    # @option opts [String] :persistent_cache 
    # @option opts [String] :journal_cache 
    # @option opts [Boolean] :custom_blob_store 
    # @option opts [Integer] :journal_gc_interval 
    # @option opts [Integer] :journal_gc_max_age 
    # @option opts [Boolean] :prefetch_external_changes 
    # @option opts [String] :role 
    # @option opts [Integer] :version_gc_max_age_in_secs 
    # @option opts [String] :version_gc_expression 
    # @option opts [Integer] :version_gc_time_limit_in_secs 
    # @option opts [Integer] :blob_gc_max_age_in_secs 
    # @option opts [Integer] :blob_track_snapshot_interval_in_secs 
    # @option opts [String] :repository_home 
    # @option opts [Integer] :max_replication_lag_in_secs 
    # @option opts [String] :document_store_type 
    # @option opts [Boolean] :bundling_disabled 
    # @option opts [Integer] :update_limit 
    # @option opts [Array<String>] :persistent_cache_includes 
    # @option opts [String] :lease_check_mode 
    # @return [Array<(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_document_document_node_store_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_document_document_node_store_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'mongouri'] = opts[:'mongouri'] if !opts[:'mongouri'].nil?
      query_params[:'db'] = opts[:'db'] if !opts[:'db'].nil?
      query_params[:'socketKeepAlive'] = opts[:'socket_keep_alive'] if !opts[:'socket_keep_alive'].nil?
      query_params[:'cache'] = opts[:'cache'] if !opts[:'cache'].nil?
      query_params[:'nodeCachePercentage'] = opts[:'node_cache_percentage'] if !opts[:'node_cache_percentage'].nil?
      query_params[:'prevDocCachePercentage'] = opts[:'prev_doc_cache_percentage'] if !opts[:'prev_doc_cache_percentage'].nil?
      query_params[:'childrenCachePercentage'] = opts[:'children_cache_percentage'] if !opts[:'children_cache_percentage'].nil?
      query_params[:'diffCachePercentage'] = opts[:'diff_cache_percentage'] if !opts[:'diff_cache_percentage'].nil?
      query_params[:'cacheSegmentCount'] = opts[:'cache_segment_count'] if !opts[:'cache_segment_count'].nil?
      query_params[:'cacheStackMoveDistance'] = opts[:'cache_stack_move_distance'] if !opts[:'cache_stack_move_distance'].nil?
      query_params[:'blobCacheSize'] = opts[:'blob_cache_size'] if !opts[:'blob_cache_size'].nil?
      query_params[:'persistentCache'] = opts[:'persistent_cache'] if !opts[:'persistent_cache'].nil?
      query_params[:'journalCache'] = opts[:'journal_cache'] if !opts[:'journal_cache'].nil?
      query_params[:'customBlobStore'] = opts[:'custom_blob_store'] if !opts[:'custom_blob_store'].nil?
      query_params[:'journalGCInterval'] = opts[:'journal_gc_interval'] if !opts[:'journal_gc_interval'].nil?
      query_params[:'journalGCMaxAge'] = opts[:'journal_gc_max_age'] if !opts[:'journal_gc_max_age'].nil?
      query_params[:'prefetchExternalChanges'] = opts[:'prefetch_external_changes'] if !opts[:'prefetch_external_changes'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'versionGcMaxAgeInSecs'] = opts[:'version_gc_max_age_in_secs'] if !opts[:'version_gc_max_age_in_secs'].nil?
      query_params[:'versionGCExpression'] = opts[:'version_gc_expression'] if !opts[:'version_gc_expression'].nil?
      query_params[:'versionGCTimeLimitInSecs'] = opts[:'version_gc_time_limit_in_secs'] if !opts[:'version_gc_time_limit_in_secs'].nil?
      query_params[:'blobGcMaxAgeInSecs'] = opts[:'blob_gc_max_age_in_secs'] if !opts[:'blob_gc_max_age_in_secs'].nil?
      query_params[:'blobTrackSnapshotIntervalInSecs'] = opts[:'blob_track_snapshot_interval_in_secs'] if !opts[:'blob_track_snapshot_interval_in_secs'].nil?
      query_params[:'repository.home'] = opts[:'repository_home'] if !opts[:'repository_home'].nil?
      query_params[:'maxReplicationLagInSecs'] = opts[:'max_replication_lag_in_secs'] if !opts[:'max_replication_lag_in_secs'].nil?
      query_params[:'documentStoreType'] = opts[:'document_store_type'] if !opts[:'document_store_type'].nil?
      query_params[:'bundlingDisabled'] = opts[:'bundling_disabled'] if !opts[:'bundling_disabled'].nil?
      query_params[:'updateLimit'] = opts[:'update_limit'] if !opts[:'update_limit'].nil?
      query_params[:'persistentCacheIncludes'] = @api_client.build_collection_param(opts[:'persistent_cache_includes'], :multi) if !opts[:'persistent_cache_includes'].nil?
      query_params[:'leaseCheckMode'] = opts[:'lease_check_mode'] if !opts[:'lease_check_mode'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_document_document_node_store_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_document_document_node_store_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :persistent_cache_includes 
    # @return [OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo]
    def org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :persistent_cache_includes 
    # @return [Array<(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'persistentCacheIncludes'] = @api_client.build_collection_param(opts[:'persistent_cache_includes'], :multi) if !opts[:'persistent_cache_includes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_document_document_node_store_service_pre\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :included_paths 
    # @option opts [Boolean] :enable_async_observer 
    # @option opts [Integer] :observer_queue_size 
    # @return [OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo]
    def org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :included_paths 
    # @option opts [Boolean] :enable_async_observer 
    # @option opts [Integer] :observer_queue_size 
    # @return [Array<(OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'includedPaths'] = @api_client.build_collection_param(opts[:'included_paths'], :multi) if !opts[:'included_paths'].nil?
      query_params[:'enableAsyncObserver'] = opts[:'enable_async_observer'] if !opts[:'enable_async_observer'].nil?
      query_params[:'observerQueueSize'] = opts[:'observer_queue_size'] if !opts[:'observer_queue_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_document_secondary_secondary_store_cac\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :async_configs 
    # @option opts [Integer] :lease_time_out_minutes 
    # @option opts [Integer] :failing_index_timeout_seconds 
    # @option opts [Integer] :error_warn_interval_seconds 
    # @return [OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo]
    def org_apache_jackrabbit_oak_plugins_index_async_indexer_service(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_index_async_indexer_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :async_configs 
    # @option opts [Integer] :lease_time_out_minutes 
    # @option opts [Integer] :failing_index_timeout_seconds 
    # @option opts [Integer] :error_warn_interval_seconds 
    # @return [Array<(OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_index_async_indexer_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_async_indexer_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'asyncConfigs'] = @api_client.build_collection_param(opts[:'async_configs'], :multi) if !opts[:'async_configs'].nil?
      query_params[:'leaseTimeOutMinutes'] = opts[:'lease_time_out_minutes'] if !opts[:'lease_time_out_minutes'].nil?
      query_params[:'failingIndexTimeoutSeconds'] = opts[:'failing_index_timeout_seconds'] if !opts[:'failing_index_timeout_seconds'].nil?
      query_params[:'errorWarnIntervalSeconds'] = opts[:'error_warn_interval_seconds'] if !opts[:'error_warn_interval_seconds'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_async_indexer_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_index_async_indexer_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :disabled 
    # @option opts [Boolean] :debug 
    # @option opts [String] :local_index_dir 
    # @option opts [Boolean] :enable_open_index_async 
    # @option opts [Integer] :thread_pool_size 
    # @option opts [Boolean] :prefetch_index_files 
    # @option opts [Integer] :extracted_text_cache_size_in_mb 
    # @option opts [Integer] :extracted_text_cache_expiry_in_secs 
    # @option opts [Boolean] :always_use_pre_extracted_cache 
    # @option opts [Integer] :boolean_clause_limit 
    # @option opts [Boolean] :enable_hybrid_indexing 
    # @option opts [Integer] :hybrid_queue_size 
    # @option opts [Boolean] :disable_stored_index_definition 
    # @option opts [Boolean] :deleted_blobs_collection_enabled 
    # @option opts [Integer] :prop_index_cleaner_interval_in_secs 
    # @option opts [Boolean] :enable_single_blob_index_files 
    # @return [OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo]
    def org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :disabled 
    # @option opts [Boolean] :debug 
    # @option opts [String] :local_index_dir 
    # @option opts [Boolean] :enable_open_index_async 
    # @option opts [Integer] :thread_pool_size 
    # @option opts [Boolean] :prefetch_index_files 
    # @option opts [Integer] :extracted_text_cache_size_in_mb 
    # @option opts [Integer] :extracted_text_cache_expiry_in_secs 
    # @option opts [Boolean] :always_use_pre_extracted_cache 
    # @option opts [Integer] :boolean_clause_limit 
    # @option opts [Boolean] :enable_hybrid_indexing 
    # @option opts [Integer] :hybrid_queue_size 
    # @option opts [Boolean] :disable_stored_index_definition 
    # @option opts [Boolean] :deleted_blobs_collection_enabled 
    # @option opts [Integer] :prop_index_cleaner_interval_in_secs 
    # @option opts [Boolean] :enable_single_blob_index_files 
    # @return [Array<(OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'disabled'] = opts[:'disabled'] if !opts[:'disabled'].nil?
      query_params[:'debug'] = opts[:'debug'] if !opts[:'debug'].nil?
      query_params[:'localIndexDir'] = opts[:'local_index_dir'] if !opts[:'local_index_dir'].nil?
      query_params[:'enableOpenIndexAsync'] = opts[:'enable_open_index_async'] if !opts[:'enable_open_index_async'].nil?
      query_params[:'threadPoolSize'] = opts[:'thread_pool_size'] if !opts[:'thread_pool_size'].nil?
      query_params[:'prefetchIndexFiles'] = opts[:'prefetch_index_files'] if !opts[:'prefetch_index_files'].nil?
      query_params[:'extractedTextCacheSizeInMB'] = opts[:'extracted_text_cache_size_in_mb'] if !opts[:'extracted_text_cache_size_in_mb'].nil?
      query_params[:'extractedTextCacheExpiryInSecs'] = opts[:'extracted_text_cache_expiry_in_secs'] if !opts[:'extracted_text_cache_expiry_in_secs'].nil?
      query_params[:'alwaysUsePreExtractedCache'] = opts[:'always_use_pre_extracted_cache'] if !opts[:'always_use_pre_extracted_cache'].nil?
      query_params[:'booleanClauseLimit'] = opts[:'boolean_clause_limit'] if !opts[:'boolean_clause_limit'].nil?
      query_params[:'enableHybridIndexing'] = opts[:'enable_hybrid_indexing'] if !opts[:'enable_hybrid_indexing'].nil?
      query_params[:'hybridQueueSize'] = opts[:'hybrid_queue_size'] if !opts[:'hybrid_queue_size'].nil?
      query_params[:'disableStoredIndexDefinition'] = opts[:'disable_stored_index_definition'] if !opts[:'disable_stored_index_definition'].nil?
      query_params[:'deletedBlobsCollectionEnabled'] = opts[:'deleted_blobs_collection_enabled'] if !opts[:'deleted_blobs_collection_enabled'].nil?
      query_params[:'propIndexCleanerIntervalInSecs'] = opts[:'prop_index_cleaner_interval_in_secs'] if !opts[:'prop_index_cleaner_interval_in_secs'].nil?
      query_params[:'enableSingleBlobIndexFiles'] = opts[:'enable_single_blob_index_files'] if !opts[:'enable_single_blob_index_files'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_index_lucene_lucene_index_provider_serv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :solr_home_path 
    # @option opts [String] :solr_core_name 
    # @return [OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo]
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :solr_home_path 
    # @option opts [String] :solr_core_name 
    # @return [Array<(OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'solr.home.path'] = opts[:'solr_home_path'] if !opts[:'solr_home_path'].nil?
      query_params[:'solr.core.name'] = opts[:'solr_core_name'] if !opts[:'solr_core_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_index_solr_osgi_embedded_solr_server_co\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo]
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [Array<(OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_index_solr_osgi_node_state_solr_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path_desc_field 
    # @option opts [String] :path_child_field 
    # @option opts [String] :path_parent_field 
    # @option opts [String] :path_exact_field 
    # @option opts [String] :catch_all_field 
    # @option opts [String] :collapsed_path_field 
    # @option opts [String] :path_depth_field 
    # @option opts [String] :commit_policy 
    # @option opts [Integer] :rows 
    # @option opts [Boolean] :path_restrictions 
    # @option opts [Boolean] :property_restrictions 
    # @option opts [Boolean] :primarytypes_restrictions 
    # @option opts [Array<String>] :ignored_properties 
    # @option opts [Array<String>] :used_properties 
    # @option opts [Array<String>] :type_mappings 
    # @option opts [Array<String>] :property_mappings 
    # @option opts [Boolean] :collapse_jcrcontent_nodes 
    # @return [OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo]
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path_desc_field 
    # @option opts [String] :path_child_field 
    # @option opts [String] :path_parent_field 
    # @option opts [String] :path_exact_field 
    # @option opts [String] :catch_all_field 
    # @option opts [String] :collapsed_path_field 
    # @option opts [String] :path_depth_field 
    # @option opts [String] :commit_policy 
    # @option opts [Integer] :rows 
    # @option opts [Boolean] :path_restrictions 
    # @option opts [Boolean] :property_restrictions 
    # @option opts [Boolean] :primarytypes_restrictions 
    # @option opts [Array<String>] :ignored_properties 
    # @option opts [Array<String>] :used_properties 
    # @option opts [Array<String>] :type_mappings 
    # @option opts [Array<String>] :property_mappings 
    # @option opts [Boolean] :collapse_jcrcontent_nodes 
    # @return [Array<(OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path.desc.field'] = opts[:'path_desc_field'] if !opts[:'path_desc_field'].nil?
      query_params[:'path.child.field'] = opts[:'path_child_field'] if !opts[:'path_child_field'].nil?
      query_params[:'path.parent.field'] = opts[:'path_parent_field'] if !opts[:'path_parent_field'].nil?
      query_params[:'path.exact.field'] = opts[:'path_exact_field'] if !opts[:'path_exact_field'].nil?
      query_params[:'catch.all.field'] = opts[:'catch_all_field'] if !opts[:'catch_all_field'].nil?
      query_params[:'collapsed.path.field'] = opts[:'collapsed_path_field'] if !opts[:'collapsed_path_field'].nil?
      query_params[:'path.depth.field'] = opts[:'path_depth_field'] if !opts[:'path_depth_field'].nil?
      query_params[:'commit.policy'] = opts[:'commit_policy'] if !opts[:'commit_policy'].nil?
      query_params[:'rows'] = opts[:'rows'] if !opts[:'rows'].nil?
      query_params[:'path.restrictions'] = opts[:'path_restrictions'] if !opts[:'path_restrictions'].nil?
      query_params[:'property.restrictions'] = opts[:'property_restrictions'] if !opts[:'property_restrictions'].nil?
      query_params[:'primarytypes.restrictions'] = opts[:'primarytypes_restrictions'] if !opts[:'primarytypes_restrictions'].nil?
      query_params[:'ignored.properties'] = @api_client.build_collection_param(opts[:'ignored_properties'], :multi) if !opts[:'ignored_properties'].nil?
      query_params[:'used.properties'] = @api_client.build_collection_param(opts[:'used_properties'], :multi) if !opts[:'used_properties'].nil?
      query_params[:'type.mappings'] = @api_client.build_collection_param(opts[:'type_mappings'], :multi) if !opts[:'type_mappings'].nil?
      query_params[:'property.mappings'] = @api_client.build_collection_param(opts[:'property_mappings'], :multi) if !opts[:'property_mappings'].nil?
      query_params[:'collapse.jcrcontent.nodes'] = opts[:'collapse_jcrcontent_nodes'] if !opts[:'collapse_jcrcontent_nodes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_index_solr_osgi_oak_solr_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :solr_http_url 
    # @option opts [String] :solr_zk_host 
    # @option opts [String] :solr_collection 
    # @option opts [Integer] :solr_socket_timeout 
    # @option opts [Integer] :solr_connection_timeout 
    # @option opts [Integer] :solr_shards_no 
    # @option opts [Integer] :solr_replication_factor 
    # @option opts [String] :solr_conf_dir 
    # @return [OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo]
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :solr_http_url 
    # @option opts [String] :solr_zk_host 
    # @option opts [String] :solr_collection 
    # @option opts [Integer] :solr_socket_timeout 
    # @option opts [Integer] :solr_connection_timeout 
    # @option opts [Integer] :solr_shards_no 
    # @option opts [Integer] :solr_replication_factor 
    # @option opts [String] :solr_conf_dir 
    # @return [Array<(OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'solr.http.url'] = opts[:'solr_http_url'] if !opts[:'solr_http_url'].nil?
      query_params[:'solr.zk.host'] = opts[:'solr_zk_host'] if !opts[:'solr_zk_host'].nil?
      query_params[:'solr.collection'] = opts[:'solr_collection'] if !opts[:'solr_collection'].nil?
      query_params[:'solr.socket.timeout'] = opts[:'solr_socket_timeout'] if !opts[:'solr_socket_timeout'].nil?
      query_params[:'solr.connection.timeout'] = opts[:'solr_connection_timeout'] if !opts[:'solr_connection_timeout'].nil?
      query_params[:'solr.shards.no'] = opts[:'solr_shards_no'] if !opts[:'solr_shards_no'].nil?
      query_params[:'solr.replication.factor'] = opts[:'solr_replication_factor'] if !opts[:'solr_replication_factor'].nil?
      query_params[:'solr.conf.dir'] = opts[:'solr_conf_dir'] if !opts[:'solr_conf_dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_index_solr_osgi_remote_solr_server_conf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :query_aggregation 
    # @return [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo]
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :query_aggregation 
    # @return [Array<(OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'query.aggregation'] = opts[:'query_aggregation'] if !opts[:'query_aggregation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_query_index_provid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :server_type 
    # @return [OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo]
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :server_type 
    # @return [Array<(OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'server.type'] = opts[:'server_type'] if !opts[:'server_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_index_solr_osgi_solr_server_provider_se\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_type 
    # @return [OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo]
    def org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_type 
    # @return [Array<(OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'providerType'] = opts[:'provider_type'] if !opts[:'provider_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_metric_statistics_provider_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_items 
    # @option opts [Integer] :max_path_depth 
    # @option opts [Boolean] :enabled 
    # @return [OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo]
    def org_apache_jackrabbit_oak_plugins_observation_change_collector_provider(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_plugins_observation_change_collector_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_items 
    # @option opts [Integer] :max_path_depth 
    # @option opts [Boolean] :enabled 
    # @return [Array<(OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo, Integer, Hash)>] OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_plugins_observation_change_collector_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_plugins_observation_change_collector_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'maxItems'] = opts[:'max_items'] if !opts[:'max_items'].nil?
      query_params[:'maxPathDepth'] = opts[:'max_path_depth'] if !opts[:'max_path_depth'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_plugins_observation_change_collector_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_plugins_observation_change_collector_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :query_limit_in_memory 
    # @option opts [Integer] :query_limit_reads 
    # @option opts [Boolean] :query_fail_traversal 
    # @option opts [Boolean] :fast_query_size 
    # @return [OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo]
    def org_apache_jackrabbit_oak_query_query_engine_settings_service(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_query_query_engine_settings_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :query_limit_in_memory 
    # @option opts [Integer] :query_limit_reads 
    # @option opts [Boolean] :query_fail_traversal 
    # @option opts [Boolean] :fast_query_size 
    # @return [Array<(OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo, Integer, Hash)>] OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_query_query_engine_settings_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_query_query_engine_settings_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'queryLimitInMemory'] = opts[:'query_limit_in_memory'] if !opts[:'query_limit_in_memory'].nil?
      query_params[:'queryLimitReads'] = opts[:'query_limit_reads'] if !opts[:'query_limit_reads'].nil?
      query_params[:'queryFailTraversal'] = opts[:'query_fail_traversal'] if !opts[:'query_fail_traversal'].nil?
      query_params[:'fastQuerySize'] = opts[:'fast_query_size'] if !opts[:'fast_query_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_query_query_engine_settings_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_query_query_engine_settings_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_jackrabbit_oak_authentication_app_name 
    # @option opts [String] :org_apache_jackrabbit_oak_authentication_config_spi_name 
    # @return [OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo]
    def org_apache_jackrabbit_oak_security_authentication_authentication_config(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_security_authentication_authentication_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_jackrabbit_oak_authentication_app_name 
    # @option opts [String] :org_apache_jackrabbit_oak_authentication_config_spi_name 
    # @return [Array<(OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo, Integer, Hash)>] OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_security_authentication_authentication_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_security_authentication_authentication_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.jackrabbit.oak.authentication.appName'] = opts[:'org_apache_jackrabbit_oak_authentication_app_name'] if !opts[:'org_apache_jackrabbit_oak_authentication_app_name'].nil?
      query_params[:'org.apache.jackrabbit.oak.authentication.configSpiName'] = opts[:'org_apache_jackrabbit_oak_authentication_config_spi_name'] if !opts[:'org_apache_jackrabbit_oak_authentication_config_spi_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_security_authentication_authentication_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_security_authentication_authentication_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_name 
    # @option opts [String] :host_name 
    # @option opts [Integer] :host_port 
    # @option opts [Boolean] :host_ssl 
    # @option opts [Boolean] :host_tls 
    # @option opts [Boolean] :host_no_cert_check 
    # @option opts [String] :bind_dn 
    # @option opts [String] :bind_password 
    # @option opts [String] :search_timeout 
    # @option opts [Integer] :admin_pool_max_active 
    # @option opts [Boolean] :admin_pool_lookup_on_validate 
    # @option opts [Integer] :user_pool_max_active 
    # @option opts [Boolean] :user_pool_lookup_on_validate 
    # @option opts [String] :user_base_dn 
    # @option opts [Array<String>] :user_objectclass 
    # @option opts [String] :user_id_attribute 
    # @option opts [String] :user_extra_filter 
    # @option opts [Boolean] :user_make_dn_path 
    # @option opts [String] :group_base_dn 
    # @option opts [Array<String>] :group_objectclass 
    # @option opts [String] :group_name_attribute 
    # @option opts [String] :group_extra_filter 
    # @option opts [Boolean] :group_make_dn_path 
    # @option opts [String] :group_member_attribute 
    # @option opts [Boolean] :use_uid_for_ext_id 
    # @option opts [Array<String>] :customattributes 
    # @return [OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo]
    def org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_name 
    # @option opts [String] :host_name 
    # @option opts [Integer] :host_port 
    # @option opts [Boolean] :host_ssl 
    # @option opts [Boolean] :host_tls 
    # @option opts [Boolean] :host_no_cert_check 
    # @option opts [String] :bind_dn 
    # @option opts [String] :bind_password 
    # @option opts [String] :search_timeout 
    # @option opts [Integer] :admin_pool_max_active 
    # @option opts [Boolean] :admin_pool_lookup_on_validate 
    # @option opts [Integer] :user_pool_max_active 
    # @option opts [Boolean] :user_pool_lookup_on_validate 
    # @option opts [String] :user_base_dn 
    # @option opts [Array<String>] :user_objectclass 
    # @option opts [String] :user_id_attribute 
    # @option opts [String] :user_extra_filter 
    # @option opts [Boolean] :user_make_dn_path 
    # @option opts [String] :group_base_dn 
    # @option opts [Array<String>] :group_objectclass 
    # @option opts [String] :group_name_attribute 
    # @option opts [String] :group_extra_filter 
    # @option opts [Boolean] :group_make_dn_path 
    # @option opts [String] :group_member_attribute 
    # @option opts [Boolean] :use_uid_for_ext_id 
    # @option opts [Array<String>] :customattributes 
    # @return [Array<(OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo, Integer, Hash)>] OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'provider.name'] = opts[:'provider_name'] if !opts[:'provider_name'].nil?
      query_params[:'host.name'] = opts[:'host_name'] if !opts[:'host_name'].nil?
      query_params[:'host.port'] = opts[:'host_port'] if !opts[:'host_port'].nil?
      query_params[:'host.ssl'] = opts[:'host_ssl'] if !opts[:'host_ssl'].nil?
      query_params[:'host.tls'] = opts[:'host_tls'] if !opts[:'host_tls'].nil?
      query_params[:'host.noCertCheck'] = opts[:'host_no_cert_check'] if !opts[:'host_no_cert_check'].nil?
      query_params[:'bind.dn'] = opts[:'bind_dn'] if !opts[:'bind_dn'].nil?
      query_params[:'bind.password'] = opts[:'bind_password'] if !opts[:'bind_password'].nil?
      query_params[:'searchTimeout'] = opts[:'search_timeout'] if !opts[:'search_timeout'].nil?
      query_params[:'adminPool.maxActive'] = opts[:'admin_pool_max_active'] if !opts[:'admin_pool_max_active'].nil?
      query_params[:'adminPool.lookupOnValidate'] = opts[:'admin_pool_lookup_on_validate'] if !opts[:'admin_pool_lookup_on_validate'].nil?
      query_params[:'userPool.maxActive'] = opts[:'user_pool_max_active'] if !opts[:'user_pool_max_active'].nil?
      query_params[:'userPool.lookupOnValidate'] = opts[:'user_pool_lookup_on_validate'] if !opts[:'user_pool_lookup_on_validate'].nil?
      query_params[:'user.baseDN'] = opts[:'user_base_dn'] if !opts[:'user_base_dn'].nil?
      query_params[:'user.objectclass'] = @api_client.build_collection_param(opts[:'user_objectclass'], :multi) if !opts[:'user_objectclass'].nil?
      query_params[:'user.idAttribute'] = opts[:'user_id_attribute'] if !opts[:'user_id_attribute'].nil?
      query_params[:'user.extraFilter'] = opts[:'user_extra_filter'] if !opts[:'user_extra_filter'].nil?
      query_params[:'user.makeDnPath'] = opts[:'user_make_dn_path'] if !opts[:'user_make_dn_path'].nil?
      query_params[:'group.baseDN'] = opts[:'group_base_dn'] if !opts[:'group_base_dn'].nil?
      query_params[:'group.objectclass'] = @api_client.build_collection_param(opts[:'group_objectclass'], :multi) if !opts[:'group_objectclass'].nil?
      query_params[:'group.nameAttribute'] = opts[:'group_name_attribute'] if !opts[:'group_name_attribute'].nil?
      query_params[:'group.extraFilter'] = opts[:'group_extra_filter'] if !opts[:'group_extra_filter'].nil?
      query_params[:'group.makeDnPath'] = opts[:'group_make_dn_path'] if !opts[:'group_make_dn_path'].nil?
      query_params[:'group.memberAttribute'] = opts[:'group_member_attribute'] if !opts[:'group_member_attribute'].nil?
      query_params[:'useUidForExtId'] = opts[:'use_uid_for_ext_id'] if !opts[:'use_uid_for_ext_id'].nil?
      query_params[:'customattributes'] = @api_client.build_collection_param(opts[:'customattributes'], :multi) if !opts[:'customattributes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_security_authentication_ldap_impl_ldap_identi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :token_expiration 
    # @option opts [String] :token_length 
    # @option opts [Boolean] :token_refresh 
    # @option opts [Integer] :token_cleanup_threshold 
    # @option opts [String] :password_hash_algorithm 
    # @option opts [Integer] :password_hash_iterations 
    # @option opts [Integer] :password_salt_size 
    # @return [OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo]
    def org_apache_jackrabbit_oak_security_authentication_token_token_configura(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_security_authentication_token_token_configura_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :token_expiration 
    # @option opts [String] :token_length 
    # @option opts [Boolean] :token_refresh 
    # @option opts [Integer] :token_cleanup_threshold 
    # @option opts [String] :password_hash_algorithm 
    # @option opts [Integer] :password_hash_iterations 
    # @option opts [Integer] :password_salt_size 
    # @return [Array<(OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo, Integer, Hash)>] OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_security_authentication_token_token_configura_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_security_authentication_token_token_configura ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'tokenExpiration'] = opts[:'token_expiration'] if !opts[:'token_expiration'].nil?
      query_params[:'tokenLength'] = opts[:'token_length'] if !opts[:'token_length'].nil?
      query_params[:'tokenRefresh'] = opts[:'token_refresh'] if !opts[:'token_refresh'].nil?
      query_params[:'tokenCleanupThreshold'] = opts[:'token_cleanup_threshold'] if !opts[:'token_cleanup_threshold'].nil?
      query_params[:'passwordHashAlgorithm'] = opts[:'password_hash_algorithm'] if !opts[:'password_hash_algorithm'].nil?
      query_params[:'passwordHashIterations'] = opts[:'password_hash_iterations'] if !opts[:'password_hash_iterations'].nil?
      query_params[:'passwordSaltSize'] = opts[:'password_salt_size'] if !opts[:'password_salt_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_security_authentication_token_token_configura",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_security_authentication_token_token_configura\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :permissions_jr2 
    # @option opts [String] :import_behavior 
    # @option opts [Array<String>] :read_paths 
    # @option opts [Array<String>] :administrative_principals 
    # @option opts [Integer] :configuration_ranking 
    # @return [OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo]
    def org_apache_jackrabbit_oak_security_authorization_authorization_configur(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_security_authorization_authorization_configur_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :permissions_jr2 
    # @option opts [String] :import_behavior 
    # @option opts [Array<String>] :read_paths 
    # @option opts [Array<String>] :administrative_principals 
    # @option opts [Integer] :configuration_ranking 
    # @return [Array<(OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo, Integer, Hash)>] OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_security_authorization_authorization_configur_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_security_authorization_authorization_configur ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'permissionsJr2'] = opts[:'permissions_jr2'] if !opts[:'permissions_jr2'].nil?
      query_params[:'importBehavior'] = opts[:'import_behavior'] if !opts[:'import_behavior'].nil?
      query_params[:'readPaths'] = @api_client.build_collection_param(opts[:'read_paths'], :multi) if !opts[:'read_paths'].nil?
      query_params[:'administrativePrincipals'] = @api_client.build_collection_param(opts[:'administrative_principals'], :multi) if !opts[:'administrative_principals'].nil?
      query_params[:'configurationRanking'] = opts[:'configuration_ranking'] if !opts[:'configuration_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_security_authorization_authorization_configur",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_security_authorization_authorization_configur\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :required_service_pids 
    # @option opts [String] :authorization_composition_type 
    # @return [OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo]
    def org_apache_jackrabbit_oak_security_internal_security_provider_registrati(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_security_internal_security_provider_registrati_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :required_service_pids 
    # @option opts [String] :authorization_composition_type 
    # @return [Array<(OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo, Integer, Hash)>] OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_security_internal_security_provider_registrati_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_security_internal_security_provider_registrati ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'requiredServicePids'] = @api_client.build_collection_param(opts[:'required_service_pids'], :multi) if !opts[:'required_service_pids'].nil?
      query_params[:'authorizationCompositionType'] = opts[:'authorization_composition_type'] if !opts[:'authorization_composition_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_security_internal_security_provider_registrati",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_security_internal_security_provider_registrati\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :length 
    # @return [OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo]
    def org_apache_jackrabbit_oak_security_user_random_authorizable_node_name(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_security_user_random_authorizable_node_name_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :length 
    # @return [Array<(OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo, Integer, Hash)>] OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_security_user_random_authorizable_node_name_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_security_user_random_authorizable_node_name ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'length'] = opts[:'length'] if !opts[:'length'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_security_user_random_authorizable_node_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_security_user_random_authorizable_node_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :users_path 
    # @option opts [String] :groups_path 
    # @option opts [String] :system_relative_path 
    # @option opts [Integer] :default_depth 
    # @option opts [String] :import_behavior 
    # @option opts [String] :password_hash_algorithm 
    # @option opts [Integer] :password_hash_iterations 
    # @option opts [Integer] :password_salt_size 
    # @option opts [Boolean] :omit_admin_pw 
    # @option opts [Boolean] :support_auto_save 
    # @option opts [Integer] :password_max_age 
    # @option opts [Boolean] :initial_password_change 
    # @option opts [Integer] :password_history_size 
    # @option opts [Boolean] :password_expiry_for_admin 
    # @option opts [Integer] :cache_expiration 
    # @option opts [Boolean] :enable_rfc7613_usercase_mapped_profile 
    # @return [OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo]
    def org_apache_jackrabbit_oak_security_user_user_configuration_impl(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_security_user_user_configuration_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :users_path 
    # @option opts [String] :groups_path 
    # @option opts [String] :system_relative_path 
    # @option opts [Integer] :default_depth 
    # @option opts [String] :import_behavior 
    # @option opts [String] :password_hash_algorithm 
    # @option opts [Integer] :password_hash_iterations 
    # @option opts [Integer] :password_salt_size 
    # @option opts [Boolean] :omit_admin_pw 
    # @option opts [Boolean] :support_auto_save 
    # @option opts [Integer] :password_max_age 
    # @option opts [Boolean] :initial_password_change 
    # @option opts [Integer] :password_history_size 
    # @option opts [Boolean] :password_expiry_for_admin 
    # @option opts [Integer] :cache_expiration 
    # @option opts [Boolean] :enable_rfc7613_usercase_mapped_profile 
    # @return [Array<(OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo, Integer, Hash)>] OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_security_user_user_configuration_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_security_user_user_configuration_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'usersPath'] = opts[:'users_path'] if !opts[:'users_path'].nil?
      query_params[:'groupsPath'] = opts[:'groups_path'] if !opts[:'groups_path'].nil?
      query_params[:'systemRelativePath'] = opts[:'system_relative_path'] if !opts[:'system_relative_path'].nil?
      query_params[:'defaultDepth'] = opts[:'default_depth'] if !opts[:'default_depth'].nil?
      query_params[:'importBehavior'] = opts[:'import_behavior'] if !opts[:'import_behavior'].nil?
      query_params[:'passwordHashAlgorithm'] = opts[:'password_hash_algorithm'] if !opts[:'password_hash_algorithm'].nil?
      query_params[:'passwordHashIterations'] = opts[:'password_hash_iterations'] if !opts[:'password_hash_iterations'].nil?
      query_params[:'passwordSaltSize'] = opts[:'password_salt_size'] if !opts[:'password_salt_size'].nil?
      query_params[:'omitAdminPw'] = opts[:'omit_admin_pw'] if !opts[:'omit_admin_pw'].nil?
      query_params[:'supportAutoSave'] = opts[:'support_auto_save'] if !opts[:'support_auto_save'].nil?
      query_params[:'passwordMaxAge'] = opts[:'password_max_age'] if !opts[:'password_max_age'].nil?
      query_params[:'initialPasswordChange'] = opts[:'initial_password_change'] if !opts[:'initial_password_change'].nil?
      query_params[:'passwordHistorySize'] = opts[:'password_history_size'] if !opts[:'password_history_size'].nil?
      query_params[:'passwordExpiryForAdmin'] = opts[:'password_expiry_for_admin'] if !opts[:'password_expiry_for_admin'].nil?
      query_params[:'cacheExpiration'] = opts[:'cache_expiration'] if !opts[:'cache_expiration'].nil?
      query_params[:'enableRFC7613UsercaseMappedProfile'] = opts[:'enable_rfc7613_usercase_mapped_profile'] if !opts[:'enable_rfc7613_usercase_mapped_profile'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_security_user_user_configuration_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_security_user_user_configuration_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :account_name 
    # @option opts [String] :container_name 
    # @option opts [String] :access_key 
    # @option opts [String] :root_path 
    # @option opts [String] :connection_url 
    # @return [OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo]
    def org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :account_name 
    # @option opts [String] :container_name 
    # @option opts [String] :access_key 
    # @option opts [String] :root_path 
    # @option opts [String] :connection_url 
    # @return [Array<(OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo, Integer, Hash)>] OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'accountName'] = opts[:'account_name'] if !opts[:'account_name'].nil?
      query_params[:'containerName'] = opts[:'container_name'] if !opts[:'container_name'].nil?
      query_params[:'accessKey'] = opts[:'access_key'] if !opts[:'access_key'].nil?
      query_params[:'rootPath'] = opts[:'root_path'] if !opts[:'root_path'].nil?
      query_params[:'connectionURL'] = opts[:'connection_url'] if !opts[:'connection_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_segment_azure_azure_segment_store_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :repository_home 
    # @option opts [String] :tarmk_mode 
    # @option opts [Integer] :tarmk_size 
    # @option opts [Integer] :segment_cache_size 
    # @option opts [Integer] :string_cache_size 
    # @option opts [Integer] :template_cache_size 
    # @option opts [Integer] :string_deduplication_cache_size 
    # @option opts [Integer] :template_deduplication_cache_size 
    # @option opts [Integer] :node_deduplication_cache_size 
    # @option opts [Boolean] :pause_compaction 
    # @option opts [Integer] :compaction_retry_count 
    # @option opts [Integer] :compaction_force_timeout 
    # @option opts [Integer] :compaction_size_delta_estimation 
    # @option opts [Boolean] :compaction_disable_estimation 
    # @option opts [Integer] :compaction_retained_generations 
    # @option opts [Integer] :compaction_memory_threshold 
    # @option opts [Integer] :compaction_progress_log 
    # @option opts [Boolean] :standby 
    # @option opts [Boolean] :custom_blob_store 
    # @option opts [Boolean] :custom_segment_store 
    # @option opts [Boolean] :split_persistence 
    # @option opts [String] :repository_backup_dir 
    # @option opts [Integer] :blob_gc_max_age_in_secs 
    # @option opts [Integer] :blob_track_snapshot_interval_in_secs 
    # @option opts [String] :role 
    # @option opts [Boolean] :register_descriptors 
    # @option opts [Boolean] :dispatch_changes 
    # @return [OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo]
    def org_apache_jackrabbit_oak_segment_segment_node_store_factory(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_segment_segment_node_store_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :repository_home 
    # @option opts [String] :tarmk_mode 
    # @option opts [Integer] :tarmk_size 
    # @option opts [Integer] :segment_cache_size 
    # @option opts [Integer] :string_cache_size 
    # @option opts [Integer] :template_cache_size 
    # @option opts [Integer] :string_deduplication_cache_size 
    # @option opts [Integer] :template_deduplication_cache_size 
    # @option opts [Integer] :node_deduplication_cache_size 
    # @option opts [Boolean] :pause_compaction 
    # @option opts [Integer] :compaction_retry_count 
    # @option opts [Integer] :compaction_force_timeout 
    # @option opts [Integer] :compaction_size_delta_estimation 
    # @option opts [Boolean] :compaction_disable_estimation 
    # @option opts [Integer] :compaction_retained_generations 
    # @option opts [Integer] :compaction_memory_threshold 
    # @option opts [Integer] :compaction_progress_log 
    # @option opts [Boolean] :standby 
    # @option opts [Boolean] :custom_blob_store 
    # @option opts [Boolean] :custom_segment_store 
    # @option opts [Boolean] :split_persistence 
    # @option opts [String] :repository_backup_dir 
    # @option opts [Integer] :blob_gc_max_age_in_secs 
    # @option opts [Integer] :blob_track_snapshot_interval_in_secs 
    # @option opts [String] :role 
    # @option opts [Boolean] :register_descriptors 
    # @option opts [Boolean] :dispatch_changes 
    # @return [Array<(OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo, Integer, Hash)>] OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_segment_segment_node_store_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_segment_segment_node_store_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'repository.home'] = opts[:'repository_home'] if !opts[:'repository_home'].nil?
      query_params[:'tarmk.mode'] = opts[:'tarmk_mode'] if !opts[:'tarmk_mode'].nil?
      query_params[:'tarmk.size'] = opts[:'tarmk_size'] if !opts[:'tarmk_size'].nil?
      query_params[:'segmentCache.size'] = opts[:'segment_cache_size'] if !opts[:'segment_cache_size'].nil?
      query_params[:'stringCache.size'] = opts[:'string_cache_size'] if !opts[:'string_cache_size'].nil?
      query_params[:'templateCache.size'] = opts[:'template_cache_size'] if !opts[:'template_cache_size'].nil?
      query_params[:'stringDeduplicationCache.size'] = opts[:'string_deduplication_cache_size'] if !opts[:'string_deduplication_cache_size'].nil?
      query_params[:'templateDeduplicationCache.size'] = opts[:'template_deduplication_cache_size'] if !opts[:'template_deduplication_cache_size'].nil?
      query_params[:'nodeDeduplicationCache.size'] = opts[:'node_deduplication_cache_size'] if !opts[:'node_deduplication_cache_size'].nil?
      query_params[:'pauseCompaction'] = opts[:'pause_compaction'] if !opts[:'pause_compaction'].nil?
      query_params[:'compaction.retryCount'] = opts[:'compaction_retry_count'] if !opts[:'compaction_retry_count'].nil?
      query_params[:'compaction.force.timeout'] = opts[:'compaction_force_timeout'] if !opts[:'compaction_force_timeout'].nil?
      query_params[:'compaction.sizeDeltaEstimation'] = opts[:'compaction_size_delta_estimation'] if !opts[:'compaction_size_delta_estimation'].nil?
      query_params[:'compaction.disableEstimation'] = opts[:'compaction_disable_estimation'] if !opts[:'compaction_disable_estimation'].nil?
      query_params[:'compaction.retainedGenerations'] = opts[:'compaction_retained_generations'] if !opts[:'compaction_retained_generations'].nil?
      query_params[:'compaction.memoryThreshold'] = opts[:'compaction_memory_threshold'] if !opts[:'compaction_memory_threshold'].nil?
      query_params[:'compaction.progressLog'] = opts[:'compaction_progress_log'] if !opts[:'compaction_progress_log'].nil?
      query_params[:'standby'] = opts[:'standby'] if !opts[:'standby'].nil?
      query_params[:'customBlobStore'] = opts[:'custom_blob_store'] if !opts[:'custom_blob_store'].nil?
      query_params[:'customSegmentStore'] = opts[:'custom_segment_store'] if !opts[:'custom_segment_store'].nil?
      query_params[:'splitPersistence'] = opts[:'split_persistence'] if !opts[:'split_persistence'].nil?
      query_params[:'repository.backup.dir'] = opts[:'repository_backup_dir'] if !opts[:'repository_backup_dir'].nil?
      query_params[:'blobGcMaxAgeInSecs'] = opts[:'blob_gc_max_age_in_secs'] if !opts[:'blob_gc_max_age_in_secs'].nil?
      query_params[:'blobTrackSnapshotIntervalInSecs'] = opts[:'blob_track_snapshot_interval_in_secs'] if !opts[:'blob_track_snapshot_interval_in_secs'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'registerDescriptors'] = opts[:'register_descriptors'] if !opts[:'register_descriptors'].nil?
      query_params[:'dispatchChanges'] = opts[:'dispatch_changes'] if !opts[:'dispatch_changes'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_segment_segment_node_store_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_segment_segment_node_store_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :commits_tracker_writer_groups 
    # @return [OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo]
    def org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :commits_tracker_writer_groups 
    # @return [Array<(OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo, Integer, Hash)>] OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'commitsTrackerWriterGroups'] = @api_client.build_collection_param(opts[:'commits_tracker_writer_groups'], :multi) if !opts[:'commits_tracker_writer_groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_segment_segment_node_store_monitor_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :repository_home 
    # @option opts [String] :tarmk_mode 
    # @option opts [Integer] :tarmk_size 
    # @option opts [Integer] :segment_cache_size 
    # @option opts [Integer] :string_cache_size 
    # @option opts [Integer] :template_cache_size 
    # @option opts [Integer] :string_deduplication_cache_size 
    # @option opts [Integer] :template_deduplication_cache_size 
    # @option opts [Integer] :node_deduplication_cache_size 
    # @option opts [Boolean] :pause_compaction 
    # @option opts [Integer] :compaction_retry_count 
    # @option opts [Integer] :compaction_force_timeout 
    # @option opts [Integer] :compaction_size_delta_estimation 
    # @option opts [Boolean] :compaction_disable_estimation 
    # @option opts [Integer] :compaction_retained_generations 
    # @option opts [Integer] :compaction_memory_threshold 
    # @option opts [Integer] :compaction_progress_log 
    # @option opts [Boolean] :standby 
    # @option opts [Boolean] :custom_blob_store 
    # @option opts [Boolean] :custom_segment_store 
    # @option opts [Boolean] :split_persistence 
    # @option opts [String] :repository_backup_dir 
    # @option opts [Integer] :blob_gc_max_age_in_secs 
    # @option opts [Integer] :blob_track_snapshot_interval_in_secs 
    # @return [OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo]
    def org_apache_jackrabbit_oak_segment_segment_node_store_service(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_segment_segment_node_store_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :repository_home 
    # @option opts [String] :tarmk_mode 
    # @option opts [Integer] :tarmk_size 
    # @option opts [Integer] :segment_cache_size 
    # @option opts [Integer] :string_cache_size 
    # @option opts [Integer] :template_cache_size 
    # @option opts [Integer] :string_deduplication_cache_size 
    # @option opts [Integer] :template_deduplication_cache_size 
    # @option opts [Integer] :node_deduplication_cache_size 
    # @option opts [Boolean] :pause_compaction 
    # @option opts [Integer] :compaction_retry_count 
    # @option opts [Integer] :compaction_force_timeout 
    # @option opts [Integer] :compaction_size_delta_estimation 
    # @option opts [Boolean] :compaction_disable_estimation 
    # @option opts [Integer] :compaction_retained_generations 
    # @option opts [Integer] :compaction_memory_threshold 
    # @option opts [Integer] :compaction_progress_log 
    # @option opts [Boolean] :standby 
    # @option opts [Boolean] :custom_blob_store 
    # @option opts [Boolean] :custom_segment_store 
    # @option opts [Boolean] :split_persistence 
    # @option opts [String] :repository_backup_dir 
    # @option opts [Integer] :blob_gc_max_age_in_secs 
    # @option opts [Integer] :blob_track_snapshot_interval_in_secs 
    # @return [Array<(OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo, Integer, Hash)>] OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_segment_segment_node_store_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_segment_segment_node_store_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'repository.home'] = opts[:'repository_home'] if !opts[:'repository_home'].nil?
      query_params[:'tarmk.mode'] = opts[:'tarmk_mode'] if !opts[:'tarmk_mode'].nil?
      query_params[:'tarmk.size'] = opts[:'tarmk_size'] if !opts[:'tarmk_size'].nil?
      query_params[:'segmentCache.size'] = opts[:'segment_cache_size'] if !opts[:'segment_cache_size'].nil?
      query_params[:'stringCache.size'] = opts[:'string_cache_size'] if !opts[:'string_cache_size'].nil?
      query_params[:'templateCache.size'] = opts[:'template_cache_size'] if !opts[:'template_cache_size'].nil?
      query_params[:'stringDeduplicationCache.size'] = opts[:'string_deduplication_cache_size'] if !opts[:'string_deduplication_cache_size'].nil?
      query_params[:'templateDeduplicationCache.size'] = opts[:'template_deduplication_cache_size'] if !opts[:'template_deduplication_cache_size'].nil?
      query_params[:'nodeDeduplicationCache.size'] = opts[:'node_deduplication_cache_size'] if !opts[:'node_deduplication_cache_size'].nil?
      query_params[:'pauseCompaction'] = opts[:'pause_compaction'] if !opts[:'pause_compaction'].nil?
      query_params[:'compaction.retryCount'] = opts[:'compaction_retry_count'] if !opts[:'compaction_retry_count'].nil?
      query_params[:'compaction.force.timeout'] = opts[:'compaction_force_timeout'] if !opts[:'compaction_force_timeout'].nil?
      query_params[:'compaction.sizeDeltaEstimation'] = opts[:'compaction_size_delta_estimation'] if !opts[:'compaction_size_delta_estimation'].nil?
      query_params[:'compaction.disableEstimation'] = opts[:'compaction_disable_estimation'] if !opts[:'compaction_disable_estimation'].nil?
      query_params[:'compaction.retainedGenerations'] = opts[:'compaction_retained_generations'] if !opts[:'compaction_retained_generations'].nil?
      query_params[:'compaction.memoryThreshold'] = opts[:'compaction_memory_threshold'] if !opts[:'compaction_memory_threshold'].nil?
      query_params[:'compaction.progressLog'] = opts[:'compaction_progress_log'] if !opts[:'compaction_progress_log'].nil?
      query_params[:'standby'] = opts[:'standby'] if !opts[:'standby'].nil?
      query_params[:'customBlobStore'] = opts[:'custom_blob_store'] if !opts[:'custom_blob_store'].nil?
      query_params[:'customSegmentStore'] = opts[:'custom_segment_store'] if !opts[:'custom_segment_store'].nil?
      query_params[:'splitPersistence'] = opts[:'split_persistence'] if !opts[:'split_persistence'].nil?
      query_params[:'repository.backup.dir'] = opts[:'repository_backup_dir'] if !opts[:'repository_backup_dir'].nil?
      query_params[:'blobGcMaxAgeInSecs'] = opts[:'blob_gc_max_age_in_secs'] if !opts[:'blob_gc_max_age_in_secs'].nil?
      query_params[:'blobTrackSnapshotIntervalInSecs'] = opts[:'blob_track_snapshot_interval_in_secs'] if !opts[:'blob_track_snapshot_interval_in_secs'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_segment_segment_node_store_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_segment_segment_node_store_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :org_apache_sling_installer_configuration_persist 
    # @option opts [String] :mode 
    # @option opts [Integer] :port 
    # @option opts [String] :primary_host 
    # @option opts [Integer] :interval 
    # @option opts [Array<String>] :primary_allowed_client_ip_ranges 
    # @option opts [Boolean] :secure 
    # @option opts [Integer] :standby_readtimeout 
    # @option opts [Boolean] :standby_autoclean 
    # @return [OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo]
    def org_apache_jackrabbit_oak_segment_standby_store_standby_store_service(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_segment_standby_store_standby_store_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :org_apache_sling_installer_configuration_persist 
    # @option opts [String] :mode 
    # @option opts [Integer] :port 
    # @option opts [String] :primary_host 
    # @option opts [Integer] :interval 
    # @option opts [Array<String>] :primary_allowed_client_ip_ranges 
    # @option opts [Boolean] :secure 
    # @option opts [Integer] :standby_readtimeout 
    # @option opts [Boolean] :standby_autoclean 
    # @return [Array<(OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo, Integer, Hash)>] OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_segment_standby_store_standby_store_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_segment_standby_store_standby_store_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.sling.installer.configuration.persist'] = opts[:'org_apache_sling_installer_configuration_persist'] if !opts[:'org_apache_sling_installer_configuration_persist'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'port'] = opts[:'port'] if !opts[:'port'].nil?
      query_params[:'primary.host'] = opts[:'primary_host'] if !opts[:'primary_host'].nil?
      query_params[:'interval'] = opts[:'interval'] if !opts[:'interval'].nil?
      query_params[:'primary.allowed-client-ip-ranges'] = @api_client.build_collection_param(opts[:'primary_allowed_client_ip_ranges'], :multi) if !opts[:'primary_allowed_client_ip_ranges'].nil?
      query_params[:'secure'] = opts[:'secure'] if !opts[:'secure'].nil?
      query_params[:'standby.readtimeout'] = opts[:'standby_readtimeout'] if !opts[:'standby_readtimeout'].nil?
      query_params[:'standby.autoclean'] = opts[:'standby_autoclean'] if !opts[:'standby_autoclean'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_segment_standby_store_standby_store_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_segment_standby_store_standby_store_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :handler_name 
    # @option opts [String] :user_expiration_time 
    # @option opts [Array<String>] :user_auto_membership 
    # @option opts [Array<String>] :user_property_mapping 
    # @option opts [String] :user_path_prefix 
    # @option opts [String] :user_membership_exp_time 
    # @option opts [Integer] :user_membership_nesting_depth 
    # @option opts [Boolean] :user_dynamic_membership 
    # @option opts [Boolean] :user_disable_missing 
    # @option opts [String] :group_expiration_time 
    # @option opts [Array<String>] :group_auto_membership 
    # @option opts [Array<String>] :group_property_mapping 
    # @option opts [String] :group_path_prefix 
    # @option opts [Boolean] :enable_rfc7613_usercase_mapped_profile 
    # @return [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo]
    def org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :handler_name 
    # @option opts [String] :user_expiration_time 
    # @option opts [Array<String>] :user_auto_membership 
    # @option opts [Array<String>] :user_property_mapping 
    # @option opts [String] :user_path_prefix 
    # @option opts [String] :user_membership_exp_time 
    # @option opts [Integer] :user_membership_nesting_depth 
    # @option opts [Boolean] :user_dynamic_membership 
    # @option opts [Boolean] :user_disable_missing 
    # @option opts [String] :group_expiration_time 
    # @option opts [Array<String>] :group_auto_membership 
    # @option opts [Array<String>] :group_property_mapping 
    # @option opts [String] :group_path_prefix 
    # @option opts [Boolean] :enable_rfc7613_usercase_mapped_profile 
    # @return [Array<(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo, Integer, Hash)>] OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'handler.name'] = opts[:'handler_name'] if !opts[:'handler_name'].nil?
      query_params[:'user.expirationTime'] = opts[:'user_expiration_time'] if !opts[:'user_expiration_time'].nil?
      query_params[:'user.autoMembership'] = @api_client.build_collection_param(opts[:'user_auto_membership'], :multi) if !opts[:'user_auto_membership'].nil?
      query_params[:'user.propertyMapping'] = @api_client.build_collection_param(opts[:'user_property_mapping'], :multi) if !opts[:'user_property_mapping'].nil?
      query_params[:'user.pathPrefix'] = opts[:'user_path_prefix'] if !opts[:'user_path_prefix'].nil?
      query_params[:'user.membershipExpTime'] = opts[:'user_membership_exp_time'] if !opts[:'user_membership_exp_time'].nil?
      query_params[:'user.membershipNestingDepth'] = opts[:'user_membership_nesting_depth'] if !opts[:'user_membership_nesting_depth'].nil?
      query_params[:'user.dynamicMembership'] = opts[:'user_dynamic_membership'] if !opts[:'user_dynamic_membership'].nil?
      query_params[:'user.disableMissing'] = opts[:'user_disable_missing'] if !opts[:'user_disable_missing'].nil?
      query_params[:'group.expirationTime'] = opts[:'group_expiration_time'] if !opts[:'group_expiration_time'].nil?
      query_params[:'group.autoMembership'] = @api_client.build_collection_param(opts[:'group_auto_membership'], :multi) if !opts[:'group_auto_membership'].nil?
      query_params[:'group.propertyMapping'] = @api_client.build_collection_param(opts[:'group_property_mapping'], :multi) if !opts[:'group_property_mapping'].nil?
      query_params[:'group.pathPrefix'] = opts[:'group_path_prefix'] if !opts[:'group_path_prefix'].nil?
      query_params[:'enableRFC7613UsercaseMappedProfile'] = opts[:'enable_rfc7613_usercase_mapped_profile'] if !opts[:'enable_rfc7613_usercase_mapped_profile'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_spi_security_authentication_external_impl_de\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :jaas_ranking 
    # @option opts [String] :jaas_control_flag 
    # @option opts [String] :jaas_realm_name 
    # @option opts [String] :idp_name 
    # @option opts [String] :sync_handler_name 
    # @return [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo]
    def org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :jaas_ranking 
    # @option opts [String] :jaas_control_flag 
    # @option opts [String] :jaas_realm_name 
    # @option opts [String] :idp_name 
    # @option opts [String] :sync_handler_name 
    # @return [Array<(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo, Integer, Hash)>] OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'jaas.ranking'] = opts[:'jaas_ranking'] if !opts[:'jaas_ranking'].nil?
      query_params[:'jaas.controlFlag'] = opts[:'jaas_control_flag'] if !opts[:'jaas_control_flag'].nil?
      query_params[:'jaas.realmName'] = opts[:'jaas_realm_name'] if !opts[:'jaas_realm_name'].nil?
      query_params[:'idp.name'] = opts[:'idp_name'] if !opts[:'idp_name'].nil?
      query_params[:'sync.handlerName'] = opts[:'sync_handler_name'] if !opts[:'sync_handler_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_spi_security_authentication_external_impl_ex\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :protect_external_id 
    # @return [OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo]
    def org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :protect_external_id 
    # @return [Array<(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo, Integer, Hash)>] OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'protectExternalId'] = opts[:'protect_external_id'] if !opts[:'protect_external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_spi_security_authentication_external_impl_pr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cug_supported_paths 
    # @option opts [Boolean] :cug_enabled 
    # @option opts [Integer] :configuration_ranking 
    # @return [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo]
    def org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :cug_supported_paths 
    # @option opts [Boolean] :cug_enabled 
    # @option opts [Integer] :configuration_ranking 
    # @return [Array<(OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo, Integer, Hash)>] OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'cugSupportedPaths'] = @api_client.build_collection_param(opts[:'cug_supported_paths'], :multi) if !opts[:'cug_supported_paths'].nil?
      query_params[:'cugEnabled'] = opts[:'cug_enabled'] if !opts[:'cug_enabled'].nil?
      query_params[:'configurationRanking'] = opts[:'configuration_ranking'] if !opts[:'configuration_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_confi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :principal_names 
    # @return [OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo]
    def org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :principal_names 
    # @return [Array<(OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo, Integer, Hash)>] OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'principalNames'] = @api_client.build_collection_param(opts[:'principal_names'], :multi) if !opts[:'principal_names'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_spi_security_authorization_cug_impl_cug_exclu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :enabled_actions 
    # @option opts [Array<String>] :user_privilege_names 
    # @option opts [Array<String>] :group_privilege_names 
    # @option opts [String] :constraint 
    # @return [OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo]
    def org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :enabled_actions 
    # @option opts [Array<String>] :user_privilege_names 
    # @option opts [Array<String>] :group_privilege_names 
    # @option opts [String] :constraint 
    # @return [Array<(OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo, Integer, Hash)>] OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo data, response status code and response headers
    def org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabledActions'] = opts[:'enabled_actions'] if !opts[:'enabled_actions'].nil?
      query_params[:'userPrivilegeNames'] = @api_client.build_collection_param(opts[:'user_privilege_names'], :multi) if !opts[:'user_privilege_names'].nil?
      query_params[:'groupPrivilegeNames'] = @api_client.build_collection_param(opts[:'group_privilege_names'], :multi) if !opts[:'group_privilege_names'].nil?
      query_params[:'constraint'] = opts[:'constraint'] if !opts[:'constraint'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_oak_spi_security_user_action_default_authorizable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :package_roots 
    # @return [OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo]
    def org_apache_jackrabbit_vault_packaging_impl_packaging_impl(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_vault_packaging_impl_packaging_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :package_roots 
    # @return [Array<(OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo, Integer, Hash)>] OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo data, response status code and response headers
    def org_apache_jackrabbit_vault_packaging_impl_packaging_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_vault_packaging_impl_packaging_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'packageRoots'] = @api_client.build_collection_param(opts[:'package_roots'], :multi) if !opts[:'package_roots'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_vault_packaging_impl_packaging_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_vault_packaging_impl_packaging_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :home_path 
    # @return [OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo]
    def org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry(opts = {})
      data, _status_code, _headers = org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :home_path 
    # @return [Array<(OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo, Integer, Hash)>] OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo data, response status code and response headers
    def org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'homePath'] = opts[:'home_path'] if !opts[:'home_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_jackrabbit_vault_packaging_registry_impl_fs_package_registry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_methods 
    # @option opts [String] :sling_servlet_paths 
    # @return [OrgApacheSlingAuthCoreImplLogoutServletInfo]
    def org_apache_sling_auth_core_impl_logout_servlet(opts = {})
      data, _status_code, _headers = org_apache_sling_auth_core_impl_logout_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_methods 
    # @option opts [String] :sling_servlet_paths 
    # @return [Array<(OrgApacheSlingAuthCoreImplLogoutServletInfo, Integer, Hash)>] OrgApacheSlingAuthCoreImplLogoutServletInfo data, response status code and response headers
    def org_apache_sling_auth_core_impl_logout_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_auth_core_impl_logout_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.methods'] = @api_client.build_collection_param(opts[:'sling_servlet_methods'], :multi) if !opts[:'sling_servlet_methods'].nil?
      query_params[:'sling.servlet.paths'] = opts[:'sling_servlet_paths'] if !opts[:'sling_servlet_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingAuthCoreImplLogoutServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_auth_core_impl_logout_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_auth_core_impl_logout_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo]
    def org_apache_sling_caconfig_impl_configuration_bindings_value_provider(opts = {})
      data, _status_code, _headers = org_apache_sling_caconfig_impl_configuration_bindings_value_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [Array<(OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo, Integer, Hash)>] OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo data, response status code and response headers
    def org_apache_sling_caconfig_impl_configuration_bindings_value_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_caconfig_impl_configuration_bindings_value_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_caconfig_impl_configuration_bindings_value_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_caconfig_impl_configuration_bindings_value_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :config_bucket_names 
    # @return [OrgApacheSlingCaconfigImplConfigurationResolverImplInfo]
    def org_apache_sling_caconfig_impl_configuration_resolver_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_caconfig_impl_configuration_resolver_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :config_bucket_names 
    # @return [Array<(OrgApacheSlingCaconfigImplConfigurationResolverImplInfo, Integer, Hash)>] OrgApacheSlingCaconfigImplConfigurationResolverImplInfo data, response status code and response headers
    def org_apache_sling_caconfig_impl_configuration_resolver_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_caconfig_impl_configuration_resolver_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'configBucketNames'] = @api_client.build_collection_param(opts[:'config_bucket_names'], :multi) if !opts[:'config_bucket_names'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCaconfigImplConfigurationResolverImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_caconfig_impl_configuration_resolver_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_caconfig_impl_configuration_resolver_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :config_property_inheritance_property_names 
    # @return [OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo]
    def org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra(opts = {})
      data, _status_code, _headers = org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :config_property_inheritance_property_names 
    # @return [Array<(OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo, Integer, Hash)>] OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo data, response status code and response headers
    def org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'configPropertyInheritancePropertyNames'] = @api_client.build_collection_param(opts[:'config_property_inheritance_property_names'], :multi) if !opts[:'config_property_inheritance_property_names'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_caconfig_impl_def_default_configuration_inheritance_stra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo]
    def org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra(opts = {})
      data, _status_code, _headers = org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @return [Array<(OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo, Integer, Hash)>] OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo data, response status code and response headers
    def org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_caconfig_impl_def_default_configuration_persistence_stra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :description 
    # @option opts [Array<String>] :overrides 
    # @option opts [Boolean] :enabled 
    # @option opts [Integer] :service_ranking 
    # @return [OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo]
    def org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi(opts = {})
      data, _status_code, _headers = org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :description 
    # @option opts [Array<String>] :overrides 
    # @option opts [Boolean] :enabled 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo, Integer, Hash)>] OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo data, response status code and response headers
    def org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'overrides'] = @api_client.build_collection_param(opts[:'overrides'], :multi) if !opts[:'overrides'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_caconfig_impl_override_osgi_configuration_override_provi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Integer] :service_ranking 
    # @return [OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo]
    def org_apache_sling_caconfig_impl_override_system_property_configuration_ove(opts = {})
      data, _status_code, _headers = org_apache_sling_caconfig_impl_override_system_property_configuration_ove_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo, Integer, Hash)>] OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo data, response status code and response headers
    def org_apache_sling_caconfig_impl_override_system_property_configuration_ove_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_caconfig_impl_override_system_property_configuration_ove ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_caconfig_impl_override_system_property_configuration_ove",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_caconfig_impl_override_system_property_configuration_ove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :ignore_property_name_regex 
    # @option opts [Array<String>] :config_collection_properties_resource_names 
    # @return [OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo]
    def org_apache_sling_caconfig_management_impl_configuration_management_setti(opts = {})
      data, _status_code, _headers = org_apache_sling_caconfig_management_impl_configuration_management_setti_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :ignore_property_name_regex 
    # @option opts [Array<String>] :config_collection_properties_resource_names 
    # @return [Array<(OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo, Integer, Hash)>] OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo data, response status code and response headers
    def org_apache_sling_caconfig_management_impl_configuration_management_setti_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_caconfig_management_impl_configuration_management_setti ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'ignorePropertyNameRegex'] = @api_client.build_collection_param(opts[:'ignore_property_name_regex'], :multi) if !opts[:'ignore_property_name_regex'].nil?
      query_params[:'configCollectionPropertiesResourceNames'] = @api_client.build_collection_param(opts[:'config_collection_properties_resource_names'], :multi) if !opts[:'config_collection_properties_resource_names'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_caconfig_management_impl_configuration_management_setti",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_caconfig_management_impl_configuration_management_setti\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :config_path 
    # @option opts [Array<String>] :fallback_paths 
    # @option opts [Array<String>] :config_collection_inheritance_property_names 
    # @return [OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo]
    def org_apache_sling_caconfig_resource_impl_def_default_configuration_resour(opts = {})
      data, _status_code, _headers = org_apache_sling_caconfig_resource_impl_def_default_configuration_resour_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :config_path 
    # @option opts [Array<String>] :fallback_paths 
    # @option opts [Array<String>] :config_collection_inheritance_property_names 
    # @return [Array<(OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo, Integer, Hash)>] OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo data, response status code and response headers
    def org_apache_sling_caconfig_resource_impl_def_default_configuration_resour_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_caconfig_resource_impl_def_default_configuration_resour ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'configPath'] = opts[:'config_path'] if !opts[:'config_path'].nil?
      query_params[:'fallbackPaths'] = @api_client.build_collection_param(opts[:'fallback_paths'], :multi) if !opts[:'fallback_paths'].nil?
      query_params[:'configCollectionInheritancePropertyNames'] = @api_client.build_collection_param(opts[:'config_collection_inheritance_property_names'], :multi) if !opts[:'config_collection_inheritance_property_names'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_caconfig_resource_impl_def_default_configuration_resour",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_caconfig_resource_impl_def_default_configuration_resour\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :config_ref_resource_names 
    # @option opts [Array<String>] :config_ref_property_names 
    # @option opts [Integer] :service_ranking 
    # @return [OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo]
    def org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy(opts = {})
      data, _status_code, _headers = org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :enabled 
    # @option opts [Array<String>] :config_ref_resource_names 
    # @option opts [Array<String>] :config_ref_property_names 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo, Integer, Hash)>] OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo data, response status code and response headers
    def org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'configRefResourceNames'] = @api_client.build_collection_param(opts[:'config_ref_resource_names'], :multi) if !opts[:'config_ref_resource_names'].nil?
      query_params[:'configRefPropertyNames'] = @api_client.build_collection_param(opts[:'config_ref_property_names'], :multi) if !opts[:'config_ref_property_names'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_caconfig_resource_impl_def_default_context_path_strategy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :parser_features 
    # @return [OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo]
    def org_apache_sling_commons_html_internal_tagsoup_html_parser(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_html_internal_tagsoup_html_parser_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :parser_features 
    # @return [Array<(OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo, Integer, Hash)>] OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo data, response status code and response headers
    def org_apache_sling_commons_html_internal_tagsoup_html_parser_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_html_internal_tagsoup_html_parser ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'parser.features'] = @api_client.build_collection_param(opts[:'parser_features'], :multi) if !opts[:'parser_features'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_html_internal_tagsoup_html_parser",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_html_internal_tagsoup_html_parser\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_sling_commons_log_level 
    # @option opts [String] :org_apache_sling_commons_log_file 
    # @option opts [Integer] :org_apache_sling_commons_log_file_number 
    # @option opts [String] :org_apache_sling_commons_log_file_size 
    # @option opts [String] :org_apache_sling_commons_log_pattern 
    # @option opts [String] :org_apache_sling_commons_log_configuration_file 
    # @option opts [Boolean] :org_apache_sling_commons_log_packaging_data_enabled 
    # @option opts [Integer] :org_apache_sling_commons_log_max_caller_data_depth 
    # @option opts [Integer] :org_apache_sling_commons_log_max_old_file_count_in_dump 
    # @option opts [Integer] :org_apache_sling_commons_log_num_of_lines 
    # @return [OrgApacheSlingCommonsLogLogManagerInfo]
    def org_apache_sling_commons_log_log_manager(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_log_log_manager_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_sling_commons_log_level 
    # @option opts [String] :org_apache_sling_commons_log_file 
    # @option opts [Integer] :org_apache_sling_commons_log_file_number 
    # @option opts [String] :org_apache_sling_commons_log_file_size 
    # @option opts [String] :org_apache_sling_commons_log_pattern 
    # @option opts [String] :org_apache_sling_commons_log_configuration_file 
    # @option opts [Boolean] :org_apache_sling_commons_log_packaging_data_enabled 
    # @option opts [Integer] :org_apache_sling_commons_log_max_caller_data_depth 
    # @option opts [Integer] :org_apache_sling_commons_log_max_old_file_count_in_dump 
    # @option opts [Integer] :org_apache_sling_commons_log_num_of_lines 
    # @return [Array<(OrgApacheSlingCommonsLogLogManagerInfo, Integer, Hash)>] OrgApacheSlingCommonsLogLogManagerInfo data, response status code and response headers
    def org_apache_sling_commons_log_log_manager_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_log_log_manager ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.log.LogManager'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.sling.commons.log.level'] = opts[:'org_apache_sling_commons_log_level'] if !opts[:'org_apache_sling_commons_log_level'].nil?
      query_params[:'org.apache.sling.commons.log.file'] = opts[:'org_apache_sling_commons_log_file'] if !opts[:'org_apache_sling_commons_log_file'].nil?
      query_params[:'org.apache.sling.commons.log.file.number'] = opts[:'org_apache_sling_commons_log_file_number'] if !opts[:'org_apache_sling_commons_log_file_number'].nil?
      query_params[:'org.apache.sling.commons.log.file.size'] = opts[:'org_apache_sling_commons_log_file_size'] if !opts[:'org_apache_sling_commons_log_file_size'].nil?
      query_params[:'org.apache.sling.commons.log.pattern'] = opts[:'org_apache_sling_commons_log_pattern'] if !opts[:'org_apache_sling_commons_log_pattern'].nil?
      query_params[:'org.apache.sling.commons.log.configurationFile'] = opts[:'org_apache_sling_commons_log_configuration_file'] if !opts[:'org_apache_sling_commons_log_configuration_file'].nil?
      query_params[:'org.apache.sling.commons.log.packagingDataEnabled'] = opts[:'org_apache_sling_commons_log_packaging_data_enabled'] if !opts[:'org_apache_sling_commons_log_packaging_data_enabled'].nil?
      query_params[:'org.apache.sling.commons.log.maxCallerDataDepth'] = opts[:'org_apache_sling_commons_log_max_caller_data_depth'] if !opts[:'org_apache_sling_commons_log_max_caller_data_depth'].nil?
      query_params[:'org.apache.sling.commons.log.maxOldFileCountInDump'] = opts[:'org_apache_sling_commons_log_max_old_file_count_in_dump'] if !opts[:'org_apache_sling_commons_log_max_old_file_count_in_dump'].nil?
      query_params[:'org.apache.sling.commons.log.numOfLines'] = opts[:'org_apache_sling_commons_log_num_of_lines'] if !opts[:'org_apache_sling_commons_log_num_of_lines'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsLogLogManagerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_log_log_manager",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_log_log_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_sling_commons_log_level 
    # @option opts [String] :org_apache_sling_commons_log_file 
    # @option opts [String] :org_apache_sling_commons_log_pattern 
    # @option opts [Array<String>] :org_apache_sling_commons_log_names 
    # @option opts [Boolean] :org_apache_sling_commons_log_additiv 
    # @return [OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo]
    def org_apache_sling_commons_log_log_manager_factory_config(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_log_log_manager_factory_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_sling_commons_log_level 
    # @option opts [String] :org_apache_sling_commons_log_file 
    # @option opts [String] :org_apache_sling_commons_log_pattern 
    # @option opts [Array<String>] :org_apache_sling_commons_log_names 
    # @option opts [Boolean] :org_apache_sling_commons_log_additiv 
    # @return [Array<(OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo, Integer, Hash)>] OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo data, response status code and response headers
    def org_apache_sling_commons_log_log_manager_factory_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_log_log_manager_factory_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.sling.commons.log.level'] = opts[:'org_apache_sling_commons_log_level'] if !opts[:'org_apache_sling_commons_log_level'].nil?
      query_params[:'org.apache.sling.commons.log.file'] = opts[:'org_apache_sling_commons_log_file'] if !opts[:'org_apache_sling_commons_log_file'].nil?
      query_params[:'org.apache.sling.commons.log.pattern'] = opts[:'org_apache_sling_commons_log_pattern'] if !opts[:'org_apache_sling_commons_log_pattern'].nil?
      query_params[:'org.apache.sling.commons.log.names'] = @api_client.build_collection_param(opts[:'org_apache_sling_commons_log_names'], :multi) if !opts[:'org_apache_sling_commons_log_names'].nil?
      query_params[:'org.apache.sling.commons.log.additiv'] = opts[:'org_apache_sling_commons_log_additiv'] if !opts[:'org_apache_sling_commons_log_additiv'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_log_log_manager_factory_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_log_log_manager_factory_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_sling_commons_log_file 
    # @option opts [Integer] :org_apache_sling_commons_log_file_number 
    # @option opts [String] :org_apache_sling_commons_log_file_size 
    # @option opts [Boolean] :org_apache_sling_commons_log_file_buffered 
    # @return [OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo]
    def org_apache_sling_commons_log_log_manager_factory_writer(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_log_log_manager_factory_writer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_sling_commons_log_file 
    # @option opts [Integer] :org_apache_sling_commons_log_file_number 
    # @option opts [String] :org_apache_sling_commons_log_file_size 
    # @option opts [Boolean] :org_apache_sling_commons_log_file_buffered 
    # @return [Array<(OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo, Integer, Hash)>] OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo data, response status code and response headers
    def org_apache_sling_commons_log_log_manager_factory_writer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_log_log_manager_factory_writer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.sling.commons.log.file'] = opts[:'org_apache_sling_commons_log_file'] if !opts[:'org_apache_sling_commons_log_file'].nil?
      query_params[:'org.apache.sling.commons.log.file.number'] = opts[:'org_apache_sling_commons_log_file_number'] if !opts[:'org_apache_sling_commons_log_file_number'].nil?
      query_params[:'org.apache.sling.commons.log.file.size'] = opts[:'org_apache_sling_commons_log_file_size'] if !opts[:'org_apache_sling_commons_log_file_size'].nil?
      query_params[:'org.apache.sling.commons.log.file.buffered'] = opts[:'org_apache_sling_commons_log_file_buffered'] if !opts[:'org_apache_sling_commons_log_file_buffered'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_log_log_manager_factory_writer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_log_log_manager_factory_writer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :period 
    # @option opts [String] :time_unit 
    # @option opts [String] :level 
    # @option opts [String] :logger_name 
    # @option opts [String] :prefix 
    # @option opts [String] :pattern 
    # @option opts [String] :registry_name 
    # @return [OrgApacheSlingCommonsMetricsInternalLogReporterInfo]
    def org_apache_sling_commons_metrics_internal_log_reporter(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_metrics_internal_log_reporter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :period 
    # @option opts [String] :time_unit 
    # @option opts [String] :level 
    # @option opts [String] :logger_name 
    # @option opts [String] :prefix 
    # @option opts [String] :pattern 
    # @option opts [String] :registry_name 
    # @return [Array<(OrgApacheSlingCommonsMetricsInternalLogReporterInfo, Integer, Hash)>] OrgApacheSlingCommonsMetricsInternalLogReporterInfo data, response status code and response headers
    def org_apache_sling_commons_metrics_internal_log_reporter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_metrics_internal_log_reporter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'timeUnit'] = opts[:'time_unit'] if !opts[:'time_unit'].nil?
      query_params[:'level'] = opts[:'level'] if !opts[:'level'].nil?
      query_params[:'loggerName'] = opts[:'logger_name'] if !opts[:'logger_name'].nil?
      query_params[:'prefix'] = opts[:'prefix'] if !opts[:'prefix'].nil?
      query_params[:'pattern'] = opts[:'pattern'] if !opts[:'pattern'].nil?
      query_params[:'registryName'] = opts[:'registry_name'] if !opts[:'registry_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsMetricsInternalLogReporterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_metrics_internal_log_reporter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_metrics_internal_log_reporter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :datasources 
    # @option opts [Integer] :step 
    # @option opts [Array<String>] :archives 
    # @option opts [String] :path 
    # @return [OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo]
    def org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :datasources 
    # @option opts [Integer] :step 
    # @option opts [Array<String>] :archives 
    # @option opts [String] :path 
    # @return [Array<(OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo, Integer, Hash)>] OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo data, response status code and response headers
    def org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'datasources'] = @api_client.build_collection_param(opts[:'datasources'], :multi) if !opts[:'datasources'].nil?
      query_params[:'step'] = opts[:'step'] if !opts[:'step'].nil?
      query_params[:'archives'] = @api_client.build_collection_param(opts[:'archives'], :multi) if !opts[:'archives'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_metrics_rrd4j_impl_codahale_metrics_reporter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :mime_types 
    # @return [OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo]
    def org_apache_sling_commons_mime_internal_mime_type_service_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_mime_internal_mime_type_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :mime_types 
    # @return [Array<(OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo, Integer, Hash)>] OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo data, response status code and response headers
    def org_apache_sling_commons_mime_internal_mime_type_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_mime_internal_mime_type_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'mime.types'] = @api_client.build_collection_param(opts[:'mime_types'], :multi) if !opts[:'mime_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_mime_internal_mime_type_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_mime_internal_mime_type_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pool_name 
    # @option opts [Array<String>] :allowed_pool_names 
    # @option opts [Boolean] :scheduler_useleaderforsingle 
    # @option opts [Array<String>] :metrics_filters 
    # @option opts [Integer] :slow_threshold_millis 
    # @return [OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo]
    def org_apache_sling_commons_scheduler_impl_quartz_scheduler(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_scheduler_impl_quartz_scheduler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :pool_name 
    # @option opts [Array<String>] :allowed_pool_names 
    # @option opts [Boolean] :scheduler_useleaderforsingle 
    # @option opts [Array<String>] :metrics_filters 
    # @option opts [Integer] :slow_threshold_millis 
    # @return [Array<(OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo, Integer, Hash)>] OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo data, response status code and response headers
    def org_apache_sling_commons_scheduler_impl_quartz_scheduler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_scheduler_impl_quartz_scheduler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'poolName'] = opts[:'pool_name'] if !opts[:'pool_name'].nil?
      query_params[:'allowedPoolNames'] = @api_client.build_collection_param(opts[:'allowed_pool_names'], :multi) if !opts[:'allowed_pool_names'].nil?
      query_params[:'scheduler.useleaderforsingle'] = opts[:'scheduler_useleaderforsingle'] if !opts[:'scheduler_useleaderforsingle'].nil?
      query_params[:'metrics.filters'] = @api_client.build_collection_param(opts[:'metrics_filters'], :multi) if !opts[:'metrics_filters'].nil?
      query_params[:'slowThresholdMillis'] = opts[:'slow_threshold_millis'] if !opts[:'slow_threshold_millis'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_scheduler_impl_quartz_scheduler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_scheduler_impl_quartz_scheduler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_quartz_job_duration_acceptable 
    # @return [OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo]
    def org_apache_sling_commons_scheduler_impl_scheduler_health_check(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_scheduler_impl_scheduler_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_quartz_job_duration_acceptable 
    # @return [Array<(OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo, Integer, Hash)>] OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo data, response status code and response headers
    def org_apache_sling_commons_scheduler_impl_scheduler_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_scheduler_impl_scheduler_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'max.quartzJob.duration.acceptable'] = opts[:'max_quartz_job_duration_acceptable'] if !opts[:'max_quartz_job_duration_acceptable'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_scheduler_impl_scheduler_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_scheduler_impl_scheduler_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [Integer] :min_pool_size 
    # @option opts [Integer] :max_pool_size 
    # @option opts [Integer] :queue_size 
    # @option opts [Integer] :max_thread_age 
    # @option opts [Integer] :keep_alive_time 
    # @option opts [String] :block_policy 
    # @option opts [Boolean] :shutdown_graceful 
    # @option opts [Boolean] :daemon 
    # @option opts [Integer] :shutdown_wait_time 
    # @option opts [String] :priority 
    # @return [OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo]
    def org_apache_sling_commons_threads_impl_default_thread_pool_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_commons_threads_impl_default_thread_pool_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [Integer] :min_pool_size 
    # @option opts [Integer] :max_pool_size 
    # @option opts [Integer] :queue_size 
    # @option opts [Integer] :max_thread_age 
    # @option opts [Integer] :keep_alive_time 
    # @option opts [String] :block_policy 
    # @option opts [Boolean] :shutdown_graceful 
    # @option opts [Boolean] :daemon 
    # @option opts [Integer] :shutdown_wait_time 
    # @option opts [String] :priority 
    # @return [Array<(OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo, Integer, Hash)>] OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo data, response status code and response headers
    def org_apache_sling_commons_threads_impl_default_thread_pool_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_commons_threads_impl_default_thread_pool_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'minPoolSize'] = opts[:'min_pool_size'] if !opts[:'min_pool_size'].nil?
      query_params[:'maxPoolSize'] = opts[:'max_pool_size'] if !opts[:'max_pool_size'].nil?
      query_params[:'queueSize'] = opts[:'queue_size'] if !opts[:'queue_size'].nil?
      query_params[:'maxThreadAge'] = opts[:'max_thread_age'] if !opts[:'max_thread_age'].nil?
      query_params[:'keepAliveTime'] = opts[:'keep_alive_time'] if !opts[:'keep_alive_time'].nil?
      query_params[:'blockPolicy'] = opts[:'block_policy'] if !opts[:'block_policy'].nil?
      query_params[:'shutdownGraceful'] = opts[:'shutdown_graceful'] if !opts[:'shutdown_graceful'].nil?
      query_params[:'daemon'] = opts[:'daemon'] if !opts[:'daemon'].nil?
      query_params[:'shutdownWaitTime'] = opts[:'shutdown_wait_time'] if !opts[:'shutdown_wait_time'].nil?
      query_params[:'priority'] = opts[:'priority'] if !opts[:'priority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_commons_threads_impl_default_thread_pool_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_commons_threads_impl_default_thread_pool_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :datasource_name 
    # @option opts [String] :datasource_svc_prop_name 
    # @option opts [String] :driver_class_name 
    # @option opts [String] :url 
    # @option opts [String] :username 
    # @option opts [String] :password 
    # @option opts [String] :default_auto_commit 
    # @option opts [String] :default_read_only 
    # @option opts [String] :default_transaction_isolation 
    # @option opts [String] :default_catalog 
    # @option opts [Integer] :max_active 
    # @option opts [Integer] :max_idle 
    # @option opts [Integer] :min_idle 
    # @option opts [Integer] :initial_size 
    # @option opts [Integer] :max_wait 
    # @option opts [Integer] :max_age 
    # @option opts [Boolean] :test_on_borrow 
    # @option opts [Boolean] :test_on_return 
    # @option opts [Boolean] :test_while_idle 
    # @option opts [String] :validation_query 
    # @option opts [Integer] :validation_query_timeout 
    # @option opts [Integer] :time_between_eviction_runs_millis 
    # @option opts [Integer] :min_evictable_idle_time_millis 
    # @option opts [String] :connection_properties 
    # @option opts [String] :init_sql 
    # @option opts [String] :jdbc_interceptors 
    # @option opts [Integer] :validation_interval 
    # @option opts [Boolean] :log_validation_errors 
    # @option opts [Array<String>] :datasource_svc_properties 
    # @return [OrgApacheSlingDatasourceDataSourceFactoryInfo]
    def org_apache_sling_datasource_data_source_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_datasource_data_source_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :datasource_name 
    # @option opts [String] :datasource_svc_prop_name 
    # @option opts [String] :driver_class_name 
    # @option opts [String] :url 
    # @option opts [String] :username 
    # @option opts [String] :password 
    # @option opts [String] :default_auto_commit 
    # @option opts [String] :default_read_only 
    # @option opts [String] :default_transaction_isolation 
    # @option opts [String] :default_catalog 
    # @option opts [Integer] :max_active 
    # @option opts [Integer] :max_idle 
    # @option opts [Integer] :min_idle 
    # @option opts [Integer] :initial_size 
    # @option opts [Integer] :max_wait 
    # @option opts [Integer] :max_age 
    # @option opts [Boolean] :test_on_borrow 
    # @option opts [Boolean] :test_on_return 
    # @option opts [Boolean] :test_while_idle 
    # @option opts [String] :validation_query 
    # @option opts [Integer] :validation_query_timeout 
    # @option opts [Integer] :time_between_eviction_runs_millis 
    # @option opts [Integer] :min_evictable_idle_time_millis 
    # @option opts [String] :connection_properties 
    # @option opts [String] :init_sql 
    # @option opts [String] :jdbc_interceptors 
    # @option opts [Integer] :validation_interval 
    # @option opts [Boolean] :log_validation_errors 
    # @option opts [Array<String>] :datasource_svc_properties 
    # @return [Array<(OrgApacheSlingDatasourceDataSourceFactoryInfo, Integer, Hash)>] OrgApacheSlingDatasourceDataSourceFactoryInfo data, response status code and response headers
    def org_apache_sling_datasource_data_source_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_datasource_data_source_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'datasource.name'] = opts[:'datasource_name'] if !opts[:'datasource_name'].nil?
      query_params[:'datasource.svc.prop.name'] = opts[:'datasource_svc_prop_name'] if !opts[:'datasource_svc_prop_name'].nil?
      query_params[:'driverClassName'] = opts[:'driver_class_name'] if !opts[:'driver_class_name'].nil?
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'defaultAutoCommit'] = opts[:'default_auto_commit'] if !opts[:'default_auto_commit'].nil?
      query_params[:'defaultReadOnly'] = opts[:'default_read_only'] if !opts[:'default_read_only'].nil?
      query_params[:'defaultTransactionIsolation'] = opts[:'default_transaction_isolation'] if !opts[:'default_transaction_isolation'].nil?
      query_params[:'defaultCatalog'] = opts[:'default_catalog'] if !opts[:'default_catalog'].nil?
      query_params[:'maxActive'] = opts[:'max_active'] if !opts[:'max_active'].nil?
      query_params[:'maxIdle'] = opts[:'max_idle'] if !opts[:'max_idle'].nil?
      query_params[:'minIdle'] = opts[:'min_idle'] if !opts[:'min_idle'].nil?
      query_params[:'initialSize'] = opts[:'initial_size'] if !opts[:'initial_size'].nil?
      query_params[:'maxWait'] = opts[:'max_wait'] if !opts[:'max_wait'].nil?
      query_params[:'maxAge'] = opts[:'max_age'] if !opts[:'max_age'].nil?
      query_params[:'testOnBorrow'] = opts[:'test_on_borrow'] if !opts[:'test_on_borrow'].nil?
      query_params[:'testOnReturn'] = opts[:'test_on_return'] if !opts[:'test_on_return'].nil?
      query_params[:'testWhileIdle'] = opts[:'test_while_idle'] if !opts[:'test_while_idle'].nil?
      query_params[:'validationQuery'] = opts[:'validation_query'] if !opts[:'validation_query'].nil?
      query_params[:'validationQueryTimeout'] = opts[:'validation_query_timeout'] if !opts[:'validation_query_timeout'].nil?
      query_params[:'timeBetweenEvictionRunsMillis'] = opts[:'time_between_eviction_runs_millis'] if !opts[:'time_between_eviction_runs_millis'].nil?
      query_params[:'minEvictableIdleTimeMillis'] = opts[:'min_evictable_idle_time_millis'] if !opts[:'min_evictable_idle_time_millis'].nil?
      query_params[:'connectionProperties'] = opts[:'connection_properties'] if !opts[:'connection_properties'].nil?
      query_params[:'initSQL'] = opts[:'init_sql'] if !opts[:'init_sql'].nil?
      query_params[:'jdbcInterceptors'] = opts[:'jdbc_interceptors'] if !opts[:'jdbc_interceptors'].nil?
      query_params[:'validationInterval'] = opts[:'validation_interval'] if !opts[:'validation_interval'].nil?
      query_params[:'logValidationErrors'] = opts[:'log_validation_errors'] if !opts[:'log_validation_errors'].nil?
      query_params[:'datasource.svc.properties'] = @api_client.build_collection_param(opts[:'datasource_svc_properties'], :multi) if !opts[:'datasource_svc_properties'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDatasourceDataSourceFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_datasource_data_source_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_datasource_data_source_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :datasource_name 
    # @option opts [String] :datasource_svc_prop_name 
    # @option opts [String] :datasource_jndi_name 
    # @option opts [Array<String>] :jndi_properties 
    # @return [OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo]
    def org_apache_sling_datasource_jndi_data_source_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_datasource_jndi_data_source_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :datasource_name 
    # @option opts [String] :datasource_svc_prop_name 
    # @option opts [String] :datasource_jndi_name 
    # @option opts [Array<String>] :jndi_properties 
    # @return [Array<(OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo, Integer, Hash)>] OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo data, response status code and response headers
    def org_apache_sling_datasource_jndi_data_source_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_datasource_jndi_data_source_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'datasource.name'] = opts[:'datasource_name'] if !opts[:'datasource_name'].nil?
      query_params[:'datasource.svc.prop.name'] = opts[:'datasource_svc_prop_name'] if !opts[:'datasource_svc_prop_name'].nil?
      query_params[:'datasource.jndi.name'] = opts[:'datasource_jndi_name'] if !opts[:'datasource_jndi_name'].nil?
      query_params[:'jndi.properties'] = @api_client.build_collection_param(opts[:'jndi_properties'], :multi) if !opts[:'jndi_properties'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_datasource_jndi_data_source_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_datasource_jndi_data_source_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :connector_ping_timeout 
    # @option opts [Integer] :connector_ping_interval 
    # @option opts [Integer] :discovery_lite_check_interval 
    # @option opts [Integer] :cluster_sync_service_timeout 
    # @option opts [Integer] :cluster_sync_service_interval 
    # @option opts [Boolean] :enable_sync_token 
    # @option opts [Integer] :min_event_delay 
    # @option opts [Integer] :socket_connect_timeout 
    # @option opts [Integer] :so_timeout 
    # @option opts [Array<String>] :topology_connector_urls 
    # @option opts [Array<String>] :topology_connector_whitelist 
    # @option opts [Boolean] :auto_stop_local_loop_enabled 
    # @option opts [Boolean] :gzip_connector_requests_enabled 
    # @option opts [Boolean] :hmac_enabled 
    # @option opts [Boolean] :enable_encryption 
    # @option opts [String] :shared_key 
    # @option opts [Integer] :hmac_shared_key_ttl 
    # @option opts [String] :backoff_standby_factor 
    # @option opts [String] :backoff_stable_factor 
    # @return [OrgApacheSlingDiscoveryOakConfigInfo]
    def org_apache_sling_discovery_oak_config(opts = {})
      data, _status_code, _headers = org_apache_sling_discovery_oak_config_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :connector_ping_timeout 
    # @option opts [Integer] :connector_ping_interval 
    # @option opts [Integer] :discovery_lite_check_interval 
    # @option opts [Integer] :cluster_sync_service_timeout 
    # @option opts [Integer] :cluster_sync_service_interval 
    # @option opts [Boolean] :enable_sync_token 
    # @option opts [Integer] :min_event_delay 
    # @option opts [Integer] :socket_connect_timeout 
    # @option opts [Integer] :so_timeout 
    # @option opts [Array<String>] :topology_connector_urls 
    # @option opts [Array<String>] :topology_connector_whitelist 
    # @option opts [Boolean] :auto_stop_local_loop_enabled 
    # @option opts [Boolean] :gzip_connector_requests_enabled 
    # @option opts [Boolean] :hmac_enabled 
    # @option opts [Boolean] :enable_encryption 
    # @option opts [String] :shared_key 
    # @option opts [Integer] :hmac_shared_key_ttl 
    # @option opts [String] :backoff_standby_factor 
    # @option opts [String] :backoff_stable_factor 
    # @return [Array<(OrgApacheSlingDiscoveryOakConfigInfo, Integer, Hash)>] OrgApacheSlingDiscoveryOakConfigInfo data, response status code and response headers
    def org_apache_sling_discovery_oak_config_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_discovery_oak_config ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.discovery.oak.Config'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'connectorPingTimeout'] = opts[:'connector_ping_timeout'] if !opts[:'connector_ping_timeout'].nil?
      query_params[:'connectorPingInterval'] = opts[:'connector_ping_interval'] if !opts[:'connector_ping_interval'].nil?
      query_params[:'discoveryLiteCheckInterval'] = opts[:'discovery_lite_check_interval'] if !opts[:'discovery_lite_check_interval'].nil?
      query_params[:'clusterSyncServiceTimeout'] = opts[:'cluster_sync_service_timeout'] if !opts[:'cluster_sync_service_timeout'].nil?
      query_params[:'clusterSyncServiceInterval'] = opts[:'cluster_sync_service_interval'] if !opts[:'cluster_sync_service_interval'].nil?
      query_params[:'enableSyncToken'] = opts[:'enable_sync_token'] if !opts[:'enable_sync_token'].nil?
      query_params[:'minEventDelay'] = opts[:'min_event_delay'] if !opts[:'min_event_delay'].nil?
      query_params[:'socketConnectTimeout'] = opts[:'socket_connect_timeout'] if !opts[:'socket_connect_timeout'].nil?
      query_params[:'soTimeout'] = opts[:'so_timeout'] if !opts[:'so_timeout'].nil?
      query_params[:'topologyConnectorUrls'] = @api_client.build_collection_param(opts[:'topology_connector_urls'], :multi) if !opts[:'topology_connector_urls'].nil?
      query_params[:'topologyConnectorWhitelist'] = @api_client.build_collection_param(opts[:'topology_connector_whitelist'], :multi) if !opts[:'topology_connector_whitelist'].nil?
      query_params[:'autoStopLocalLoopEnabled'] = opts[:'auto_stop_local_loop_enabled'] if !opts[:'auto_stop_local_loop_enabled'].nil?
      query_params[:'gzipConnectorRequestsEnabled'] = opts[:'gzip_connector_requests_enabled'] if !opts[:'gzip_connector_requests_enabled'].nil?
      query_params[:'hmacEnabled'] = opts[:'hmac_enabled'] if !opts[:'hmac_enabled'].nil?
      query_params[:'enableEncryption'] = opts[:'enable_encryption'] if !opts[:'enable_encryption'].nil?
      query_params[:'sharedKey'] = opts[:'shared_key'] if !opts[:'shared_key'].nil?
      query_params[:'hmacSharedKeyTTL'] = opts[:'hmac_shared_key_ttl'] if !opts[:'hmac_shared_key_ttl'].nil?
      query_params[:'backoffStandbyFactor'] = opts[:'backoff_standby_factor'] if !opts[:'backoff_standby_factor'].nil?
      query_params[:'backoffStableFactor'] = opts[:'backoff_stable_factor'] if !opts[:'backoff_stable_factor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDiscoveryOakConfigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_discovery_oak_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_discovery_oak_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @return [OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo]
    def org_apache_sling_discovery_oak_synchronized_clocks_health_check(opts = {})
      data, _status_code, _headers = org_apache_sling_discovery_oak_synchronized_clocks_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @return [Array<(OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo, Integer, Hash)>] OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo data, response status code and response headers
    def org_apache_sling_discovery_oak_synchronized_clocks_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_discovery_oak_synchronized_clocks_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.name'] = opts[:'hc_name'] if !opts[:'hc_name'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'hc.mbean.name'] = opts[:'hc_mbean_name'] if !opts[:'hc_mbean_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_discovery_oak_synchronized_clocks_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_discovery_oak_synchronized_clocks_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Array<String>] :allowed_roots 
    # @option opts [Boolean] :queue_processing_enabled 
    # @option opts [Array<String>] :package_importer_endpoints 
    # @option opts [Array<String>] :passive_queues 
    # @option opts [Array<String>] :priority_queues 
    # @option opts [String] :retry_strategy 
    # @option opts [Integer] :retry_attempts 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :transport_secret_provider_target 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :triggers_target 
    # @option opts [String] :queue_provider 
    # @option opts [Boolean] :async_delivery 
    # @option opts [Integer] :http_conn_timeout 
    # @return [OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo]
    def org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Array<String>] :allowed_roots 
    # @option opts [Boolean] :queue_processing_enabled 
    # @option opts [Array<String>] :package_importer_endpoints 
    # @option opts [Array<String>] :passive_queues 
    # @option opts [Array<String>] :priority_queues 
    # @option opts [String] :retry_strategy 
    # @option opts [Integer] :retry_attempts 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :transport_secret_provider_target 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :triggers_target 
    # @option opts [String] :queue_provider 
    # @option opts [Boolean] :async_delivery 
    # @option opts [Integer] :http_conn_timeout 
    # @return [Array<(OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo, Integer, Hash)>] OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo data, response status code and response headers
    def org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'log.level'] = opts[:'log_level'] if !opts[:'log_level'].nil?
      query_params[:'allowed.roots'] = @api_client.build_collection_param(opts[:'allowed_roots'], :multi) if !opts[:'allowed_roots'].nil?
      query_params[:'queue.processing.enabled'] = opts[:'queue_processing_enabled'] if !opts[:'queue_processing_enabled'].nil?
      query_params[:'packageImporter.endpoints'] = @api_client.build_collection_param(opts[:'package_importer_endpoints'], :multi) if !opts[:'package_importer_endpoints'].nil?
      query_params[:'passiveQueues'] = @api_client.build_collection_param(opts[:'passive_queues'], :multi) if !opts[:'passive_queues'].nil?
      query_params[:'priorityQueues'] = @api_client.build_collection_param(opts[:'priority_queues'], :multi) if !opts[:'priority_queues'].nil?
      query_params[:'retry.strategy'] = opts[:'retry_strategy'] if !opts[:'retry_strategy'].nil?
      query_params[:'retry.attempts'] = opts[:'retry_attempts'] if !opts[:'retry_attempts'].nil?
      query_params[:'requestAuthorizationStrategy.target'] = opts[:'request_authorization_strategy_target'] if !opts[:'request_authorization_strategy_target'].nil?
      query_params[:'transportSecretProvider.target'] = opts[:'transport_secret_provider_target'] if !opts[:'transport_secret_provider_target'].nil?
      query_params[:'packageBuilder.target'] = opts[:'package_builder_target'] if !opts[:'package_builder_target'].nil?
      query_params[:'triggers.target'] = opts[:'triggers_target'] if !opts[:'triggers_target'].nil?
      query_params[:'queue.provider'] = opts[:'queue_provider'] if !opts[:'queue_provider'].nil?
      query_params[:'async.delivery'] = opts[:'async_delivery'] if !opts[:'async_delivery'].nil?
      query_params[:'http.conn.timeout'] = opts[:'http_conn_timeout'] if !opts[:'http_conn_timeout'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_agent_impl_forward_distribution_agent_facto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :jcr_privilege 
    # @return [OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo]
    def org_apache_sling_distribution_agent_impl_privilege_distribution_request_a(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_agent_impl_privilege_distribution_request_a_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :jcr_privilege 
    # @return [Array<(OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo, Integer, Hash)>] OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo data, response status code and response headers
    def org_apache_sling_distribution_agent_impl_privilege_distribution_request_a_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_agent_impl_privilege_distribution_request_a ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'jcrPrivilege'] = opts[:'jcr_privilege'] if !opts[:'jcr_privilege'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_agent_impl_privilege_distribution_request_a",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_agent_impl_privilege_distribution_request_a\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Array<String>] :allowed_roots 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :queue_provider_factory_target 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :triggers_target 
    # @option opts [Array<String>] :priority_queues 
    # @return [OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo]
    def org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Array<String>] :allowed_roots 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :queue_provider_factory_target 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :triggers_target 
    # @option opts [Array<String>] :priority_queues 
    # @return [Array<(OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo, Integer, Hash)>] OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo data, response status code and response headers
    def org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'log.level'] = opts[:'log_level'] if !opts[:'log_level'].nil?
      query_params[:'allowed.roots'] = @api_client.build_collection_param(opts[:'allowed_roots'], :multi) if !opts[:'allowed_roots'].nil?
      query_params[:'requestAuthorizationStrategy.target'] = opts[:'request_authorization_strategy_target'] if !opts[:'request_authorization_strategy_target'].nil?
      query_params[:'queueProviderFactory.target'] = opts[:'queue_provider_factory_target'] if !opts[:'queue_provider_factory_target'].nil?
      query_params[:'packageBuilder.target'] = opts[:'package_builder_target'] if !opts[:'package_builder_target'].nil?
      query_params[:'triggers.target'] = opts[:'triggers_target'] if !opts[:'triggers_target'].nil?
      query_params[:'priorityQueues'] = @api_client.build_collection_param(opts[:'priority_queues'], :multi) if !opts[:'priority_queues'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_agent_impl_queue_distribution_agent_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Boolean] :queue_processing_enabled 
    # @option opts [Array<String>] :package_exporter_endpoints 
    # @option opts [Integer] :pull_items 
    # @option opts [Integer] :http_conn_timeout 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :transport_secret_provider_target 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :triggers_target 
    # @return [OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo]
    def org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Boolean] :queue_processing_enabled 
    # @option opts [Array<String>] :package_exporter_endpoints 
    # @option opts [Integer] :pull_items 
    # @option opts [Integer] :http_conn_timeout 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :transport_secret_provider_target 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :triggers_target 
    # @return [Array<(OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo, Integer, Hash)>] OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo data, response status code and response headers
    def org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'log.level'] = opts[:'log_level'] if !opts[:'log_level'].nil?
      query_params[:'queue.processing.enabled'] = opts[:'queue_processing_enabled'] if !opts[:'queue_processing_enabled'].nil?
      query_params[:'packageExporter.endpoints'] = @api_client.build_collection_param(opts[:'package_exporter_endpoints'], :multi) if !opts[:'package_exporter_endpoints'].nil?
      query_params[:'pull.items'] = opts[:'pull_items'] if !opts[:'pull_items'].nil?
      query_params[:'http.conn.timeout'] = opts[:'http_conn_timeout'] if !opts[:'http_conn_timeout'].nil?
      query_params[:'requestAuthorizationStrategy.target'] = opts[:'request_authorization_strategy_target'] if !opts[:'request_authorization_strategy_target'].nil?
      query_params[:'transportSecretProvider.target'] = opts[:'transport_secret_provider_target'] if !opts[:'transport_secret_provider_target'].nil?
      query_params[:'packageBuilder.target'] = opts[:'package_builder_target'] if !opts[:'package_builder_target'].nil?
      query_params[:'triggers.target'] = opts[:'triggers_target'] if !opts[:'triggers_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_agent_impl_reverse_distribution_agent_facto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Boolean] :queue_processing_enabled 
    # @option opts [String] :package_exporter_target 
    # @option opts [String] :package_importer_target 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :triggers_target 
    # @return [OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo]
    def org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Boolean] :queue_processing_enabled 
    # @option opts [String] :package_exporter_target 
    # @option opts [String] :package_importer_target 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :triggers_target 
    # @return [Array<(OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo, Integer, Hash)>] OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo data, response status code and response headers
    def org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'log.level'] = opts[:'log_level'] if !opts[:'log_level'].nil?
      query_params[:'queue.processing.enabled'] = opts[:'queue_processing_enabled'] if !opts[:'queue_processing_enabled'].nil?
      query_params[:'packageExporter.target'] = opts[:'package_exporter_target'] if !opts[:'package_exporter_target'].nil?
      query_params[:'packageImporter.target'] = opts[:'package_importer_target'] if !opts[:'package_importer_target'].nil?
      query_params[:'requestAuthorizationStrategy.target'] = opts[:'request_authorization_strategy_target'] if !opts[:'request_authorization_strategy_target'].nil?
      query_params[:'triggers.target'] = opts[:'triggers_target'] if !opts[:'triggers_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_agent_impl_simple_distribution_agent_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Boolean] :queue_processing_enabled 
    # @option opts [Array<String>] :passive_queues 
    # @option opts [Array<String>] :package_exporter_endpoints 
    # @option opts [Array<String>] :package_importer_endpoints 
    # @option opts [String] :retry_strategy 
    # @option opts [Integer] :retry_attempts 
    # @option opts [Integer] :pull_items 
    # @option opts [Integer] :http_conn_timeout 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :transport_secret_provider_target 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :triggers_target 
    # @return [OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo]
    def org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :title 
    # @option opts [String] :details 
    # @option opts [Boolean] :enabled 
    # @option opts [String] :service_name 
    # @option opts [String] :log_level 
    # @option opts [Boolean] :queue_processing_enabled 
    # @option opts [Array<String>] :passive_queues 
    # @option opts [Array<String>] :package_exporter_endpoints 
    # @option opts [Array<String>] :package_importer_endpoints 
    # @option opts [String] :retry_strategy 
    # @option opts [Integer] :retry_attempts 
    # @option opts [Integer] :pull_items 
    # @option opts [Integer] :http_conn_timeout 
    # @option opts [String] :request_authorization_strategy_target 
    # @option opts [String] :transport_secret_provider_target 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :triggers_target 
    # @return [Array<(OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo, Integer, Hash)>] OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo data, response status code and response headers
    def org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'details'] = opts[:'details'] if !opts[:'details'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'log.level'] = opts[:'log_level'] if !opts[:'log_level'].nil?
      query_params[:'queue.processing.enabled'] = opts[:'queue_processing_enabled'] if !opts[:'queue_processing_enabled'].nil?
      query_params[:'passiveQueues'] = @api_client.build_collection_param(opts[:'passive_queues'], :multi) if !opts[:'passive_queues'].nil?
      query_params[:'packageExporter.endpoints'] = @api_client.build_collection_param(opts[:'package_exporter_endpoints'], :multi) if !opts[:'package_exporter_endpoints'].nil?
      query_params[:'packageImporter.endpoints'] = @api_client.build_collection_param(opts[:'package_importer_endpoints'], :multi) if !opts[:'package_importer_endpoints'].nil?
      query_params[:'retry.strategy'] = opts[:'retry_strategy'] if !opts[:'retry_strategy'].nil?
      query_params[:'retry.attempts'] = opts[:'retry_attempts'] if !opts[:'retry_attempts'].nil?
      query_params[:'pull.items'] = opts[:'pull_items'] if !opts[:'pull_items'].nil?
      query_params[:'http.conn.timeout'] = opts[:'http_conn_timeout'] if !opts[:'http_conn_timeout'].nil?
      query_params[:'requestAuthorizationStrategy.target'] = opts[:'request_authorization_strategy_target'] if !opts[:'request_authorization_strategy_target'].nil?
      query_params[:'transportSecretProvider.target'] = opts[:'transport_secret_provider_target'] if !opts[:'transport_secret_provider_target'].nil?
      query_params[:'packageBuilder.target'] = opts[:'package_builder_target'] if !opts[:'package_builder_target'].nil?
      query_params[:'triggers.target'] = opts[:'triggers_target'] if !opts[:'triggers_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_agent_impl_sync_distribution_agent_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [Integer] :number_of_retries_allowed 
    # @return [OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo]
    def org_apache_sling_distribution_monitor_distribution_queue_health_check(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_monitor_distribution_queue_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [Integer] :number_of_retries_allowed 
    # @return [Array<(OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo, Integer, Hash)>] OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo data, response status code and response headers
    def org_apache_sling_distribution_monitor_distribution_queue_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_monitor_distribution_queue_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.name'] = opts[:'hc_name'] if !opts[:'hc_name'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'hc.mbean.name'] = opts[:'hc_mbean_name'] if !opts[:'hc_mbean_name'].nil?
      query_params[:'numberOfRetriesAllowed'] = opts[:'number_of_retries_allowed'] if !opts[:'number_of_retries_allowed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_monitor_distribution_queue_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_monitor_distribution_queue_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :queue 
    # @option opts [Boolean] :drop_invalid_items 
    # @option opts [String] :agent_target 
    # @return [OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo]
    def org_apache_sling_distribution_packaging_impl_exporter_agent_distributio(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_packaging_impl_exporter_agent_distributio_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :queue 
    # @option opts [Boolean] :drop_invalid_items 
    # @option opts [String] :agent_target 
    # @return [Array<(OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo, Integer, Hash)>] OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo data, response status code and response headers
    def org_apache_sling_distribution_packaging_impl_exporter_agent_distributio_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_packaging_impl_exporter_agent_distributio ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'drop.invalid.items'] = opts[:'drop_invalid_items'] if !opts[:'drop_invalid_items'].nil?
      query_params[:'agent.target'] = opts[:'agent_target'] if !opts[:'agent_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_packaging_impl_exporter_agent_distributio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_packaging_impl_exporter_agent_distributio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :package_builder_target 
    # @return [OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo]
    def org_apache_sling_distribution_packaging_impl_exporter_local_distributio(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_packaging_impl_exporter_local_distributio_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :package_builder_target 
    # @return [Array<(OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo, Integer, Hash)>] OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo data, response status code and response headers
    def org_apache_sling_distribution_packaging_impl_exporter_local_distributio_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_packaging_impl_exporter_local_distributio ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'packageBuilder.target'] = opts[:'package_builder_target'] if !opts[:'package_builder_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_packaging_impl_exporter_local_distributio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_packaging_impl_exporter_local_distributio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [Array<String>] :endpoints 
    # @option opts [Integer] :pull_items 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :transport_secret_provider_target 
    # @return [OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo]
    def org_apache_sling_distribution_packaging_impl_exporter_remote_distributi(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_packaging_impl_exporter_remote_distributi_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [Array<String>] :endpoints 
    # @option opts [Integer] :pull_items 
    # @option opts [String] :package_builder_target 
    # @option opts [String] :transport_secret_provider_target 
    # @return [Array<(OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo, Integer, Hash)>] OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo data, response status code and response headers
    def org_apache_sling_distribution_packaging_impl_exporter_remote_distributi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_packaging_impl_exporter_remote_distributi ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'endpoints'] = @api_client.build_collection_param(opts[:'endpoints'], :multi) if !opts[:'endpoints'].nil?
      query_params[:'pull.items'] = opts[:'pull_items'] if !opts[:'pull_items'].nil?
      query_params[:'packageBuilder.target'] = opts[:'package_builder_target'] if !opts[:'package_builder_target'].nil?
      query_params[:'transportSecretProvider.target'] = opts[:'transport_secret_provider_target'] if !opts[:'transport_secret_provider_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_packaging_impl_exporter_remote_distributi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_packaging_impl_exporter_remote_distributi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :package_builder_target 
    # @return [OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo]
    def org_apache_sling_distribution_packaging_impl_importer_local_distributio(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_packaging_impl_importer_local_distributio_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :package_builder_target 
    # @return [Array<(OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo, Integer, Hash)>] OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo data, response status code and response headers
    def org_apache_sling_distribution_packaging_impl_importer_local_distributio_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_packaging_impl_importer_local_distributio ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'packageBuilder.target'] = opts[:'package_builder_target'] if !opts[:'package_builder_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_packaging_impl_importer_local_distributio",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_packaging_impl_importer_local_distributio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [Array<String>] :endpoints 
    # @option opts [String] :transport_secret_provider_target 
    # @return [OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo]
    def org_apache_sling_distribution_packaging_impl_importer_remote_distributi(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_packaging_impl_importer_remote_distributi_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [Array<String>] :endpoints 
    # @option opts [String] :transport_secret_provider_target 
    # @return [Array<(OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo, Integer, Hash)>] OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo data, response status code and response headers
    def org_apache_sling_distribution_packaging_impl_importer_remote_distributi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_packaging_impl_importer_remote_distributi ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'endpoints'] = @api_client.build_collection_param(opts[:'endpoints'], :multi) if !opts[:'endpoints'].nil?
      query_params[:'transportSecretProvider.target'] = opts[:'transport_secret_provider_target'] if !opts[:'transport_secret_provider_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_packaging_impl_importer_remote_distributi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_packaging_impl_importer_remote_distributi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :service_name 
    # @option opts [String] :path 
    # @option opts [String] :privilege_name 
    # @return [OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo]
    def org_apache_sling_distribution_packaging_impl_importer_repository_distri(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_packaging_impl_importer_repository_distri_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :service_name 
    # @option opts [String] :path 
    # @option opts [String] :privilege_name 
    # @return [Array<(OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo, Integer, Hash)>] OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo data, response status code and response headers
    def org_apache_sling_distribution_packaging_impl_importer_repository_distri_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_packaging_impl_importer_repository_distri ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'service.name'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'privilege.name'] = opts[:'privilege_name'] if !opts[:'privilege_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_packaging_impl_importer_repository_distri",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_packaging_impl_importer_repository_distri\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_roots 
    # @option opts [String] :kind 
    # @return [OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo]
    def org_apache_sling_distribution_resources_impl_distribution_configuration(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_resources_impl_distribution_configuration_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_roots 
    # @option opts [String] :kind 
    # @return [Array<(OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo, Integer, Hash)>] OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo data, response status code and response headers
    def org_apache_sling_distribution_resources_impl_distribution_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_resources_impl_distribution_configuration ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'provider.roots'] = opts[:'provider_roots'] if !opts[:'provider_roots'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_resources_impl_distribution_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_resources_impl_distribution_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_roots 
    # @option opts [String] :kind 
    # @return [OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo]
    def org_apache_sling_distribution_resources_impl_distribution_service_resour(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_resources_impl_distribution_service_resour_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_roots 
    # @option opts [String] :kind 
    # @return [Array<(OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo, Integer, Hash)>] OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo data, response status code and response headers
    def org_apache_sling_distribution_resources_impl_distribution_service_resour_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_resources_impl_distribution_service_resour ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'provider.roots'] = opts[:'provider_roots'] if !opts[:'provider_roots'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_resources_impl_distribution_service_resour",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_resources_impl_distribution_service_resour\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :type 
    # @option opts [String] :format_target 
    # @option opts [String] :temp_fs_folder 
    # @option opts [Integer] :file_threshold 
    # @option opts [String] :memory_unit 
    # @option opts [Boolean] :use_off_heap_memory 
    # @option opts [String] :digest_algorithm 
    # @option opts [Integer] :monitoring_queue_size 
    # @option opts [Integer] :cleanup_delay 
    # @option opts [Array<String>] :package_filters 
    # @option opts [Array<String>] :property_filters 
    # @return [OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo]
    def org_apache_sling_distribution_serialization_impl_distribution_package_bu(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_serialization_impl_distribution_package_bu_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :type 
    # @option opts [String] :format_target 
    # @option opts [String] :temp_fs_folder 
    # @option opts [Integer] :file_threshold 
    # @option opts [String] :memory_unit 
    # @option opts [Boolean] :use_off_heap_memory 
    # @option opts [String] :digest_algorithm 
    # @option opts [Integer] :monitoring_queue_size 
    # @option opts [Integer] :cleanup_delay 
    # @option opts [Array<String>] :package_filters 
    # @option opts [Array<String>] :property_filters 
    # @return [Array<(OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo, Integer, Hash)>] OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo data, response status code and response headers
    def org_apache_sling_distribution_serialization_impl_distribution_package_bu_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_serialization_impl_distribution_package_bu ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'format.target'] = opts[:'format_target'] if !opts[:'format_target'].nil?
      query_params[:'tempFsFolder'] = opts[:'temp_fs_folder'] if !opts[:'temp_fs_folder'].nil?
      query_params[:'fileThreshold'] = opts[:'file_threshold'] if !opts[:'file_threshold'].nil?
      query_params[:'memoryUnit'] = opts[:'memory_unit'] if !opts[:'memory_unit'].nil?
      query_params[:'useOffHeapMemory'] = opts[:'use_off_heap_memory'] if !opts[:'use_off_heap_memory'].nil?
      query_params[:'digestAlgorithm'] = opts[:'digest_algorithm'] if !opts[:'digest_algorithm'].nil?
      query_params[:'monitoringQueueSize'] = opts[:'monitoring_queue_size'] if !opts[:'monitoring_queue_size'].nil?
      query_params[:'cleanupDelay'] = opts[:'cleanup_delay'] if !opts[:'cleanup_delay'].nil?
      query_params[:'package.filters'] = @api_client.build_collection_param(opts[:'package_filters'], :multi) if !opts[:'package_filters'].nil?
      query_params[:'property.filters'] = @api_client.build_collection_param(opts[:'property_filters'], :multi) if !opts[:'property_filters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_serialization_impl_distribution_package_bu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_serialization_impl_distribution_package_bu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :type 
    # @option opts [String] :import_mode 
    # @option opts [String] :acl_handling 
    # @option opts [String] :package_roots 
    # @option opts [Array<String>] :package_filters 
    # @option opts [Array<String>] :property_filters 
    # @option opts [String] :temp_fs_folder 
    # @option opts [Boolean] :use_binary_references 
    # @option opts [Integer] :auto_save_threshold 
    # @option opts [Integer] :cleanup_delay 
    # @option opts [Integer] :file_threshold 
    # @option opts [String] :mega_bytes 
    # @option opts [Boolean] :use_off_heap_memory 
    # @option opts [String] :digest_algorithm 
    # @option opts [Integer] :monitoring_queue_size 
    # @option opts [Array<String>] :paths_mapping 
    # @option opts [Boolean] :strict_import 
    # @return [OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo]
    def org_apache_sling_distribution_serialization_impl_vlt_vault_distribution(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_serialization_impl_vlt_vault_distribution_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :type 
    # @option opts [String] :import_mode 
    # @option opts [String] :acl_handling 
    # @option opts [String] :package_roots 
    # @option opts [Array<String>] :package_filters 
    # @option opts [Array<String>] :property_filters 
    # @option opts [String] :temp_fs_folder 
    # @option opts [Boolean] :use_binary_references 
    # @option opts [Integer] :auto_save_threshold 
    # @option opts [Integer] :cleanup_delay 
    # @option opts [Integer] :file_threshold 
    # @option opts [String] :mega_bytes 
    # @option opts [Boolean] :use_off_heap_memory 
    # @option opts [String] :digest_algorithm 
    # @option opts [Integer] :monitoring_queue_size 
    # @option opts [Array<String>] :paths_mapping 
    # @option opts [Boolean] :strict_import 
    # @return [Array<(OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo, Integer, Hash)>] OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo data, response status code and response headers
    def org_apache_sling_distribution_serialization_impl_vlt_vault_distribution_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_serialization_impl_vlt_vault_distribution ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'importMode'] = opts[:'import_mode'] if !opts[:'import_mode'].nil?
      query_params[:'aclHandling'] = opts[:'acl_handling'] if !opts[:'acl_handling'].nil?
      query_params[:'package.roots'] = opts[:'package_roots'] if !opts[:'package_roots'].nil?
      query_params[:'package.filters'] = @api_client.build_collection_param(opts[:'package_filters'], :multi) if !opts[:'package_filters'].nil?
      query_params[:'property.filters'] = @api_client.build_collection_param(opts[:'property_filters'], :multi) if !opts[:'property_filters'].nil?
      query_params[:'tempFsFolder'] = opts[:'temp_fs_folder'] if !opts[:'temp_fs_folder'].nil?
      query_params[:'useBinaryReferences'] = opts[:'use_binary_references'] if !opts[:'use_binary_references'].nil?
      query_params[:'autoSaveThreshold'] = opts[:'auto_save_threshold'] if !opts[:'auto_save_threshold'].nil?
      query_params[:'cleanupDelay'] = opts[:'cleanup_delay'] if !opts[:'cleanup_delay'].nil?
      query_params[:'fileThreshold'] = opts[:'file_threshold'] if !opts[:'file_threshold'].nil?
      query_params[:'MEGA_BYTES'] = opts[:'mega_bytes'] if !opts[:'mega_bytes'].nil?
      query_params[:'useOffHeapMemory'] = opts[:'use_off_heap_memory'] if !opts[:'use_off_heap_memory'].nil?
      query_params[:'digestAlgorithm'] = opts[:'digest_algorithm'] if !opts[:'digest_algorithm'].nil?
      query_params[:'monitoringQueueSize'] = opts[:'monitoring_queue_size'] if !opts[:'monitoring_queue_size'].nil?
      query_params[:'pathsMapping'] = @api_client.build_collection_param(opts[:'paths_mapping'], :multi) if !opts[:'paths_mapping'].nil?
      query_params[:'strictImport'] = opts[:'strict_import'] if !opts[:'strict_import'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_serialization_impl_vlt_vault_distribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_serialization_impl_vlt_vault_distribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :username 
    # @option opts [String] :password 
    # @return [OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo]
    def org_apache_sling_distribution_transport_impl_user_credentials_distributi(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_transport_impl_user_credentials_distributi_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :username 
    # @option opts [String] :password 
    # @return [Array<(OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo, Integer, Hash)>] OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo data, response status code and response headers
    def org_apache_sling_distribution_transport_impl_user_credentials_distributi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_transport_impl_user_credentials_distributi ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_transport_impl_user_credentials_distributi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_transport_impl_user_credentials_distributi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @return [OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo]
    def org_apache_sling_distribution_trigger_impl_distribution_event_distribute(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_trigger_impl_distribution_event_distribute_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @return [Array<(OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo, Integer, Hash)>] OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo data, response status code and response headers
    def org_apache_sling_distribution_trigger_impl_distribution_event_distribute_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_trigger_impl_distribution_event_distribute ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_trigger_impl_distribution_event_distribute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_trigger_impl_distribution_event_distribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @option opts [Array<String>] :ignored_paths_patterns 
    # @option opts [String] :service_name 
    # @option opts [Boolean] :deep 
    # @return [OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo]
    def org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @option opts [Array<String>] :ignored_paths_patterns 
    # @option opts [String] :service_name 
    # @option opts [Boolean] :deep 
    # @return [Array<(OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo, Integer, Hash)>] OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo data, response status code and response headers
    def org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'ignoredPathsPatterns'] = @api_client.build_collection_param(opts[:'ignored_paths_patterns'], :multi) if !opts[:'ignored_paths_patterns'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'deep'] = opts[:'deep'] if !opts[:'deep'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_trigger_impl_jcr_event_distribution_trigger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @option opts [String] :service_name 
    # @option opts [String] :nuggets_path 
    # @return [OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo]
    def org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @option opts [String] :service_name 
    # @option opts [String] :nuggets_path 
    # @return [Array<(OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo, Integer, Hash)>] OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo data, response status code and response headers
    def org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?
      query_params[:'nuggetsPath'] = opts[:'nuggets_path'] if !opts[:'nuggets_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_trigger_impl_persisted_jcr_event_distributi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :endpoint 
    # @option opts [String] :transport_secret_provider_target 
    # @return [OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo]
    def org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :endpoint 
    # @option opts [String] :transport_secret_provider_target 
    # @return [Array<(OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo, Integer, Hash)>] OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo data, response status code and response headers
    def org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'endpoint'] = opts[:'endpoint'] if !opts[:'endpoint'].nil?
      query_params[:'transportSecretProvider.target'] = opts[:'transport_secret_provider_target'] if !opts[:'transport_secret_provider_target'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_trigger_impl_remote_event_distribution_trig\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @return [OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo]
    def org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @return [Array<(OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo, Integer, Hash)>] OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo data, response status code and response headers
    def org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_trigger_impl_resource_event_distribution_tr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @option opts [String] :seconds 
    # @option opts [String] :service_name 
    # @return [OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo]
    def org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge(opts = {})
      data, _status_code, _headers = org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :path 
    # @option opts [String] :seconds 
    # @option opts [String] :service_name 
    # @return [Array<(OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo, Integer, Hash)>] OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo data, response status code and response headers
    def org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'seconds'] = opts[:'seconds'] if !opts[:'seconds'].nil?
      query_params[:'serviceName'] = opts[:'service_name'] if !opts[:'service_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_distribution_trigger_impl_scheduled_distribution_trigge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @option opts [String] :osgi_http_whiteboard_listener 
    # @option opts [String] :auth_sudo_cookie 
    # @option opts [String] :auth_sudo_parameter 
    # @option opts [Boolean] :auth_annonymous 
    # @option opts [Array<String>] :sling_auth_requirements 
    # @option opts [String] :sling_auth_anonymous_user 
    # @option opts [String] :sling_auth_anonymous_password 
    # @option opts [String] :auth_http 
    # @option opts [String] :auth_http_realm 
    # @option opts [Array<String>] :auth_uri_suffix 
    # @return [OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo]
    def org_apache_sling_engine_impl_auth_sling_authenticator(opts = {})
      data, _status_code, _headers = org_apache_sling_engine_impl_auth_sling_authenticator_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @option opts [String] :osgi_http_whiteboard_listener 
    # @option opts [String] :auth_sudo_cookie 
    # @option opts [String] :auth_sudo_parameter 
    # @option opts [Boolean] :auth_annonymous 
    # @option opts [Array<String>] :sling_auth_requirements 
    # @option opts [String] :sling_auth_anonymous_user 
    # @option opts [String] :sling_auth_anonymous_password 
    # @option opts [String] :auth_http 
    # @option opts [String] :auth_http_realm 
    # @option opts [Array<String>] :auth_uri_suffix 
    # @return [Array<(OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo, Integer, Hash)>] OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo data, response status code and response headers
    def org_apache_sling_engine_impl_auth_sling_authenticator_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_engine_impl_auth_sling_authenticator ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'osgi.http.whiteboard.context.select'] = opts[:'osgi_http_whiteboard_context_select'] if !opts[:'osgi_http_whiteboard_context_select'].nil?
      query_params[:'osgi.http.whiteboard.listener'] = opts[:'osgi_http_whiteboard_listener'] if !opts[:'osgi_http_whiteboard_listener'].nil?
      query_params[:'auth.sudo.cookie'] = opts[:'auth_sudo_cookie'] if !opts[:'auth_sudo_cookie'].nil?
      query_params[:'auth.sudo.parameter'] = opts[:'auth_sudo_parameter'] if !opts[:'auth_sudo_parameter'].nil?
      query_params[:'auth.annonymous'] = opts[:'auth_annonymous'] if !opts[:'auth_annonymous'].nil?
      query_params[:'sling.auth.requirements'] = @api_client.build_collection_param(opts[:'sling_auth_requirements'], :multi) if !opts[:'sling_auth_requirements'].nil?
      query_params[:'sling.auth.anonymous.user'] = opts[:'sling_auth_anonymous_user'] if !opts[:'sling_auth_anonymous_user'].nil?
      query_params[:'sling.auth.anonymous.password'] = opts[:'sling_auth_anonymous_password'] if !opts[:'sling_auth_anonymous_password'].nil?
      query_params[:'auth.http'] = opts[:'auth_http'] if !opts[:'auth_http'].nil?
      query_params[:'auth.http.realm'] = opts[:'auth_http_realm'] if !opts[:'auth_http_realm'].nil?
      query_params[:'auth.uri.suffix'] = @api_client.build_collection_param(opts[:'auth_uri_suffix'], :multi) if !opts[:'auth_uri_suffix'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_engine_impl_auth_sling_authenticator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_engine_impl_auth_sling_authenticator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :extensions 
    # @option opts [Integer] :min_duration_ms 
    # @option opts [Integer] :max_duration_ms 
    # @option opts [Boolean] :compact_log_format 
    # @return [OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo]
    def org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter(opts = {})
      data, _status_code, _headers = org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :extensions 
    # @option opts [Integer] :min_duration_ms 
    # @option opts [Integer] :max_duration_ms 
    # @option opts [Boolean] :compact_log_format 
    # @return [Array<(OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo, Integer, Hash)>] OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo data, response status code and response headers
    def org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'extensions'] = @api_client.build_collection_param(opts[:'extensions'], :multi) if !opts[:'extensions'].nil?
      query_params[:'minDurationMs'] = opts[:'min_duration_ms'] if !opts[:'min_duration_ms'].nil?
      query_params[:'maxDurationMs'] = opts[:'max_duration_ms'] if !opts[:'max_duration_ms'].nil?
      query_params[:'compactLogFormat'] = opts[:'compact_log_format'] if !opts[:'compact_log_format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_engine_impl_debug_request_progress_tracker_log_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :request_log_output 
    # @option opts [Integer] :request_log_outputtype 
    # @option opts [Boolean] :request_log_enabled 
    # @option opts [String] :access_log_output 
    # @option opts [Integer] :access_log_outputtype 
    # @option opts [Boolean] :access_log_enabled 
    # @return [OrgApacheSlingEngineImplLogRequestLoggerInfo]
    def org_apache_sling_engine_impl_log_request_logger(opts = {})
      data, _status_code, _headers = org_apache_sling_engine_impl_log_request_logger_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :request_log_output 
    # @option opts [Integer] :request_log_outputtype 
    # @option opts [Boolean] :request_log_enabled 
    # @option opts [String] :access_log_output 
    # @option opts [Integer] :access_log_outputtype 
    # @option opts [Boolean] :access_log_enabled 
    # @return [Array<(OrgApacheSlingEngineImplLogRequestLoggerInfo, Integer, Hash)>] OrgApacheSlingEngineImplLogRequestLoggerInfo data, response status code and response headers
    def org_apache_sling_engine_impl_log_request_logger_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_engine_impl_log_request_logger ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'request.log.output'] = opts[:'request_log_output'] if !opts[:'request_log_output'].nil?
      query_params[:'request.log.outputtype'] = opts[:'request_log_outputtype'] if !opts[:'request_log_outputtype'].nil?
      query_params[:'request.log.enabled'] = opts[:'request_log_enabled'] if !opts[:'request_log_enabled'].nil?
      query_params[:'access.log.output'] = opts[:'access_log_output'] if !opts[:'access_log_output'].nil?
      query_params[:'access.log.outputtype'] = opts[:'access_log_outputtype'] if !opts[:'access_log_outputtype'].nil?
      query_params[:'access.log.enabled'] = opts[:'access_log_enabled'] if !opts[:'access_log_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEngineImplLogRequestLoggerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_engine_impl_log_request_logger",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_engine_impl_log_request_logger\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :request_log_service_format 
    # @option opts [String] :request_log_service_output 
    # @option opts [Integer] :request_log_service_outputtype 
    # @option opts [Boolean] :request_log_service_onentry 
    # @return [OrgApacheSlingEngineImplLogRequestLoggerServiceInfo]
    def org_apache_sling_engine_impl_log_request_logger_service(opts = {})
      data, _status_code, _headers = org_apache_sling_engine_impl_log_request_logger_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :request_log_service_format 
    # @option opts [String] :request_log_service_output 
    # @option opts [Integer] :request_log_service_outputtype 
    # @option opts [Boolean] :request_log_service_onentry 
    # @return [Array<(OrgApacheSlingEngineImplLogRequestLoggerServiceInfo, Integer, Hash)>] OrgApacheSlingEngineImplLogRequestLoggerServiceInfo data, response status code and response headers
    def org_apache_sling_engine_impl_log_request_logger_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_engine_impl_log_request_logger_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'request.log.service.format'] = opts[:'request_log_service_format'] if !opts[:'request_log_service_format'].nil?
      query_params[:'request.log.service.output'] = opts[:'request_log_service_output'] if !opts[:'request_log_service_output'].nil?
      query_params[:'request.log.service.outputtype'] = opts[:'request_log_service_outputtype'] if !opts[:'request_log_service_outputtype'].nil?
      query_params[:'request.log.service.onentry'] = opts[:'request_log_service_onentry'] if !opts[:'request_log_service_onentry'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEngineImplLogRequestLoggerServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_engine_impl_log_request_logger_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_engine_impl_log_request_logger_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :sling_max_calls 
    # @option opts [Integer] :sling_max_inclusions 
    # @option opts [Boolean] :sling_trace_allow 
    # @option opts [Integer] :sling_max_record_requests 
    # @option opts [Array<String>] :sling_store_pattern_requests 
    # @option opts [String] :sling_serverinfo 
    # @option opts [Array<String>] :sling_additional_response_headers 
    # @return [OrgApacheSlingEngineImplSlingMainServletInfo]
    def org_apache_sling_engine_impl_sling_main_servlet(opts = {})
      data, _status_code, _headers = org_apache_sling_engine_impl_sling_main_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :sling_max_calls 
    # @option opts [Integer] :sling_max_inclusions 
    # @option opts [Boolean] :sling_trace_allow 
    # @option opts [Integer] :sling_max_record_requests 
    # @option opts [Array<String>] :sling_store_pattern_requests 
    # @option opts [String] :sling_serverinfo 
    # @option opts [Array<String>] :sling_additional_response_headers 
    # @return [Array<(OrgApacheSlingEngineImplSlingMainServletInfo, Integer, Hash)>] OrgApacheSlingEngineImplSlingMainServletInfo data, response status code and response headers
    def org_apache_sling_engine_impl_sling_main_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_engine_impl_sling_main_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.max.calls'] = opts[:'sling_max_calls'] if !opts[:'sling_max_calls'].nil?
      query_params[:'sling.max.inclusions'] = opts[:'sling_max_inclusions'] if !opts[:'sling_max_inclusions'].nil?
      query_params[:'sling.trace.allow'] = opts[:'sling_trace_allow'] if !opts[:'sling_trace_allow'].nil?
      query_params[:'sling.max.record.requests'] = opts[:'sling_max_record_requests'] if !opts[:'sling_max_record_requests'].nil?
      query_params[:'sling.store.pattern.requests'] = @api_client.build_collection_param(opts[:'sling_store_pattern_requests'], :multi) if !opts[:'sling_store_pattern_requests'].nil?
      query_params[:'sling.serverinfo'] = opts[:'sling_serverinfo'] if !opts[:'sling_serverinfo'].nil?
      query_params[:'sling.additional.response.headers'] = @api_client.build_collection_param(opts[:'sling_additional_response_headers'], :multi) if !opts[:'sling_additional_response_headers'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEngineImplSlingMainServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_engine_impl_sling_main_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_engine_impl_sling_main_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_default_parameter_encoding 
    # @option opts [Integer] :sling_default_max_parameters 
    # @option opts [String] :file_location 
    # @option opts [Integer] :file_threshold 
    # @option opts [Integer] :file_max 
    # @option opts [Integer] :request_max 
    # @option opts [Boolean] :sling_default_parameter_check_for_additional_container_parameters 
    # @return [OrgApacheSlingEngineParametersInfo]
    def org_apache_sling_engine_parameters(opts = {})
      data, _status_code, _headers = org_apache_sling_engine_parameters_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_default_parameter_encoding 
    # @option opts [Integer] :sling_default_max_parameters 
    # @option opts [String] :file_location 
    # @option opts [Integer] :file_threshold 
    # @option opts [Integer] :file_max 
    # @option opts [Integer] :request_max 
    # @option opts [Boolean] :sling_default_parameter_check_for_additional_container_parameters 
    # @return [Array<(OrgApacheSlingEngineParametersInfo, Integer, Hash)>] OrgApacheSlingEngineParametersInfo data, response status code and response headers
    def org_apache_sling_engine_parameters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_engine_parameters ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.engine.parameters'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.default.parameter.encoding'] = opts[:'sling_default_parameter_encoding'] if !opts[:'sling_default_parameter_encoding'].nil?
      query_params[:'sling.default.max.parameters'] = opts[:'sling_default_max_parameters'] if !opts[:'sling_default_max_parameters'].nil?
      query_params[:'file.location'] = opts[:'file_location'] if !opts[:'file_location'].nil?
      query_params[:'file.threshold'] = opts[:'file_threshold'] if !opts[:'file_threshold'].nil?
      query_params[:'file.max'] = opts[:'file_max'] if !opts[:'file_max'].nil?
      query_params[:'request.max'] = opts[:'request_max'] if !opts[:'request_max'].nil?
      query_params[:'sling.default.parameter.checkForAdditionalContainerParameters'] = opts[:'sling_default_parameter_check_for_additional_container_parameters'] if !opts[:'sling_default_parameter_check_for_additional_container_parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEngineParametersInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_engine_parameters",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_engine_parameters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :min_pool_size 
    # @return [OrgApacheSlingEventImplEventingThreadPoolInfo]
    def org_apache_sling_event_impl_eventing_thread_pool(opts = {})
      data, _status_code, _headers = org_apache_sling_event_impl_eventing_thread_pool_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :min_pool_size 
    # @return [Array<(OrgApacheSlingEventImplEventingThreadPoolInfo, Integer, Hash)>] OrgApacheSlingEventImplEventingThreadPoolInfo data, response status code and response headers
    def org_apache_sling_event_impl_eventing_thread_pool_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_event_impl_eventing_thread_pool ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'minPoolSize'] = opts[:'min_pool_size'] if !opts[:'min_pool_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEventImplEventingThreadPoolInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_event_impl_eventing_thread_pool",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_event_impl_eventing_thread_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :queue_priority 
    # @option opts [Integer] :queue_retries 
    # @option opts [Integer] :queue_retrydelay 
    # @option opts [Integer] :queue_maxparallel 
    # @return [OrgApacheSlingEventImplJobsDefaultJobManagerInfo]
    def org_apache_sling_event_impl_jobs_default_job_manager(opts = {})
      data, _status_code, _headers = org_apache_sling_event_impl_jobs_default_job_manager_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :queue_priority 
    # @option opts [Integer] :queue_retries 
    # @option opts [Integer] :queue_retrydelay 
    # @option opts [Integer] :queue_maxparallel 
    # @return [Array<(OrgApacheSlingEventImplJobsDefaultJobManagerInfo, Integer, Hash)>] OrgApacheSlingEventImplJobsDefaultJobManagerInfo data, response status code and response headers
    def org_apache_sling_event_impl_jobs_default_job_manager_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_event_impl_jobs_default_job_manager ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'queue.priority'] = opts[:'queue_priority'] if !opts[:'queue_priority'].nil?
      query_params[:'queue.retries'] = opts[:'queue_retries'] if !opts[:'queue_retries'].nil?
      query_params[:'queue.retrydelay'] = opts[:'queue_retrydelay'] if !opts[:'queue_retrydelay'].nil?
      query_params[:'queue.maxparallel'] = opts[:'queue_maxparallel'] if !opts[:'queue_maxparallel'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEventImplJobsDefaultJobManagerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_event_impl_jobs_default_job_manager",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_event_impl_jobs_default_job_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :job_consumermanager_disable_distribution 
    # @option opts [Integer] :startup_delay 
    # @option opts [Integer] :cleanup_period 
    # @return [OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo]
    def org_apache_sling_event_impl_jobs_jcr_persistence_handler(opts = {})
      data, _status_code, _headers = org_apache_sling_event_impl_jobs_jcr_persistence_handler_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :job_consumermanager_disable_distribution 
    # @option opts [Integer] :startup_delay 
    # @option opts [Integer] :cleanup_period 
    # @return [Array<(OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo, Integer, Hash)>] OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo data, response status code and response headers
    def org_apache_sling_event_impl_jobs_jcr_persistence_handler_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_event_impl_jobs_jcr_persistence_handler ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'job.consumermanager.disableDistribution'] = opts[:'job_consumermanager_disable_distribution'] if !opts[:'job_consumermanager_disable_distribution'].nil?
      query_params[:'startup.delay'] = opts[:'startup_delay'] if !opts[:'startup_delay'].nil?
      query_params[:'cleanup.period'] = opts[:'cleanup_period'] if !opts[:'cleanup_period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_event_impl_jobs_jcr_persistence_handler",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_event_impl_jobs_jcr_persistence_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :org_apache_sling_installer_configuration_persist 
    # @option opts [Array<String>] :job_consumermanager_whitelist 
    # @option opts [Array<String>] :job_consumermanager_blacklist 
    # @return [OrgApacheSlingEventImplJobsJobConsumerManagerInfo]
    def org_apache_sling_event_impl_jobs_job_consumer_manager(opts = {})
      data, _status_code, _headers = org_apache_sling_event_impl_jobs_job_consumer_manager_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :org_apache_sling_installer_configuration_persist 
    # @option opts [Array<String>] :job_consumermanager_whitelist 
    # @option opts [Array<String>] :job_consumermanager_blacklist 
    # @return [Array<(OrgApacheSlingEventImplJobsJobConsumerManagerInfo, Integer, Hash)>] OrgApacheSlingEventImplJobsJobConsumerManagerInfo data, response status code and response headers
    def org_apache_sling_event_impl_jobs_job_consumer_manager_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_event_impl_jobs_job_consumer_manager ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.sling.installer.configuration.persist'] = opts[:'org_apache_sling_installer_configuration_persist'] if !opts[:'org_apache_sling_installer_configuration_persist'].nil?
      query_params[:'job.consumermanager.whitelist'] = @api_client.build_collection_param(opts[:'job_consumermanager_whitelist'], :multi) if !opts[:'job_consumermanager_whitelist'].nil?
      query_params[:'job.consumermanager.blacklist'] = @api_client.build_collection_param(opts[:'job_consumermanager_blacklist'], :multi) if !opts[:'job_consumermanager_blacklist'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEventImplJobsJobConsumerManagerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_event_impl_jobs_job_consumer_manager",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_event_impl_jobs_job_consumer_manager\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :queue_name 
    # @option opts [Array<String>] :queue_topics 
    # @option opts [String] :queue_type 
    # @option opts [String] :queue_priority 
    # @option opts [Integer] :queue_retries 
    # @option opts [Integer] :queue_retrydelay 
    # @option opts [Float] :queue_maxparallel 
    # @option opts [Boolean] :queue_keep_jobs 
    # @option opts [Boolean] :queue_prefer_run_on_creation_instance 
    # @option opts [Integer] :queue_thread_pool_size 
    # @option opts [Integer] :service_ranking 
    # @return [OrgApacheSlingEventJobsQueueConfigurationInfo]
    def org_apache_sling_event_jobs_queue_configuration(opts = {})
      data, _status_code, _headers = org_apache_sling_event_jobs_queue_configuration_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :queue_name 
    # @option opts [Array<String>] :queue_topics 
    # @option opts [String] :queue_type 
    # @option opts [String] :queue_priority 
    # @option opts [Integer] :queue_retries 
    # @option opts [Integer] :queue_retrydelay 
    # @option opts [Float] :queue_maxparallel 
    # @option opts [Boolean] :queue_keep_jobs 
    # @option opts [Boolean] :queue_prefer_run_on_creation_instance 
    # @option opts [Integer] :queue_thread_pool_size 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(OrgApacheSlingEventJobsQueueConfigurationInfo, Integer, Hash)>] OrgApacheSlingEventJobsQueueConfigurationInfo data, response status code and response headers
    def org_apache_sling_event_jobs_queue_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_event_jobs_queue_configuration ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'queue.name'] = opts[:'queue_name'] if !opts[:'queue_name'].nil?
      query_params[:'queue.topics'] = @api_client.build_collection_param(opts[:'queue_topics'], :multi) if !opts[:'queue_topics'].nil?
      query_params[:'queue.type'] = opts[:'queue_type'] if !opts[:'queue_type'].nil?
      query_params[:'queue.priority'] = opts[:'queue_priority'] if !opts[:'queue_priority'].nil?
      query_params[:'queue.retries'] = opts[:'queue_retries'] if !opts[:'queue_retries'].nil?
      query_params[:'queue.retrydelay'] = opts[:'queue_retrydelay'] if !opts[:'queue_retrydelay'].nil?
      query_params[:'queue.maxparallel'] = opts[:'queue_maxparallel'] if !opts[:'queue_maxparallel'].nil?
      query_params[:'queue.keepJobs'] = opts[:'queue_keep_jobs'] if !opts[:'queue_keep_jobs'].nil?
      query_params[:'queue.preferRunOnCreationInstance'] = opts[:'queue_prefer_run_on_creation_instance'] if !opts[:'queue_prefer_run_on_creation_instance'].nil?
      query_params[:'queue.threadPoolSize'] = opts[:'queue_thread_pool_size'] if !opts[:'queue_thread_pool_size'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingEventJobsQueueConfigurationInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_event_jobs_queue_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_event_jobs_queue_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :users 
    # @option opts [Array<String>] :groups 
    # @return [OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo]
    def org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w(opts = {})
      data, _status_code, _headers = org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :users 
    # @option opts [Array<String>] :groups 
    # @return [Array<(OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo, Integer, Hash)>] OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo data, response status code and response headers
    def org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'users'] = @api_client.build_collection_param(opts[:'users'], :multi) if !opts[:'users'].nil?
      query_params[:'groups'] = @api_client.build_collection_param(opts[:'groups'], :multi) if !opts[:'groups'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_extensions_webconsolesecurityprovider_internal_sling_w\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :description 
    # @option opts [Boolean] :enabled 
    # @return [OrgApacheSlingFeatureflagsFeatureInfo]
    def org_apache_sling_featureflags_feature(opts = {})
      data, _status_code, _headers = org_apache_sling_featureflags_feature_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :description 
    # @option opts [Boolean] :enabled 
    # @return [Array<(OrgApacheSlingFeatureflagsFeatureInfo, Integer, Hash)>] OrgApacheSlingFeatureflagsFeatureInfo data, response status code and response headers
    def org_apache_sling_featureflags_feature_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_featureflags_feature ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.featureflags.Feature'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingFeatureflagsFeatureInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_featureflags_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_featureflags_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :description 
    # @option opts [Boolean] :enabled 
    # @return [OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo]
    def org_apache_sling_featureflags_impl_configured_feature(opts = {})
      data, _status_code, _headers = org_apache_sling_featureflags_impl_configured_feature_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :name 
    # @option opts [String] :description 
    # @option opts [Boolean] :enabled 
    # @return [Array<(OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo, Integer, Hash)>] OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo data, response status code and response headers
    def org_apache_sling_featureflags_impl_configured_feature_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_featureflags_impl_configured_feature ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_featureflags_impl_configured_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_featureflags_impl_configured_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_sling_hapi_tools_resourcetype 
    # @option opts [String] :org_apache_sling_hapi_tools_collectionresourcetype 
    # @option opts [Array<String>] :org_apache_sling_hapi_tools_searchpaths 
    # @option opts [String] :org_apache_sling_hapi_tools_externalurl 
    # @option opts [Boolean] :org_apache_sling_hapi_tools_enabled 
    # @return [OrgApacheSlingHapiImplHApiUtilImplInfo]
    def org_apache_sling_hapi_impl_h_api_util_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_hapi_impl_h_api_util_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :org_apache_sling_hapi_tools_resourcetype 
    # @option opts [String] :org_apache_sling_hapi_tools_collectionresourcetype 
    # @option opts [Array<String>] :org_apache_sling_hapi_tools_searchpaths 
    # @option opts [String] :org_apache_sling_hapi_tools_externalurl 
    # @option opts [Boolean] :org_apache_sling_hapi_tools_enabled 
    # @return [Array<(OrgApacheSlingHapiImplHApiUtilImplInfo, Integer, Hash)>] OrgApacheSlingHapiImplHApiUtilImplInfo data, response status code and response headers
    def org_apache_sling_hapi_impl_h_api_util_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_hapi_impl_h_api_util_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.sling.hapi.tools.resourcetype'] = opts[:'org_apache_sling_hapi_tools_resourcetype'] if !opts[:'org_apache_sling_hapi_tools_resourcetype'].nil?
      query_params[:'org.apache.sling.hapi.tools.collectionresourcetype'] = opts[:'org_apache_sling_hapi_tools_collectionresourcetype'] if !opts[:'org_apache_sling_hapi_tools_collectionresourcetype'].nil?
      query_params[:'org.apache.sling.hapi.tools.searchpaths'] = @api_client.build_collection_param(opts[:'org_apache_sling_hapi_tools_searchpaths'], :multi) if !opts[:'org_apache_sling_hapi_tools_searchpaths'].nil?
      query_params[:'org.apache.sling.hapi.tools.externalurl'] = opts[:'org_apache_sling_hapi_tools_externalurl'] if !opts[:'org_apache_sling_hapi_tools_externalurl'].nil?
      query_params[:'org.apache.sling.hapi.tools.enabled'] = opts[:'org_apache_sling_hapi_tools_enabled'] if !opts[:'org_apache_sling_hapi_tools_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingHapiImplHApiUtilImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_hapi_impl_h_api_util_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_hapi_impl_h_api_util_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [Array<String>] :filter_tags 
    # @option opts [Boolean] :filter_combine_tags_with_or 
    # @return [OrgApacheSlingHcCoreImplCompositeHealthCheckInfo]
    def org_apache_sling_hc_core_impl_composite_health_check(opts = {})
      data, _status_code, _headers = org_apache_sling_hc_core_impl_composite_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [Array<String>] :filter_tags 
    # @option opts [Boolean] :filter_combine_tags_with_or 
    # @return [Array<(OrgApacheSlingHcCoreImplCompositeHealthCheckInfo, Integer, Hash)>] OrgApacheSlingHcCoreImplCompositeHealthCheckInfo data, response status code and response headers
    def org_apache_sling_hc_core_impl_composite_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_hc_core_impl_composite_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.name'] = opts[:'hc_name'] if !opts[:'hc_name'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'hc.mbean.name'] = opts[:'hc_mbean_name'] if !opts[:'hc_mbean_name'].nil?
      query_params[:'filter.tags'] = @api_client.build_collection_param(opts[:'filter_tags'], :multi) if !opts[:'filter_tags'].nil?
      query_params[:'filter.combineTagsWithOr'] = opts[:'filter_combine_tags_with_or'] if !opts[:'filter_combine_tags_with_or'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingHcCoreImplCompositeHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_hc_core_impl_composite_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_hc_core_impl_composite_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :timeout_in_ms 
    # @option opts [Integer] :long_running_future_threshold_for_critical_ms 
    # @option opts [Integer] :result_cache_ttl_in_ms 
    # @return [OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo]
    def org_apache_sling_hc_core_impl_executor_health_check_executor_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_hc_core_impl_executor_health_check_executor_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :timeout_in_ms 
    # @option opts [Integer] :long_running_future_threshold_for_critical_ms 
    # @option opts [Integer] :result_cache_ttl_in_ms 
    # @return [Array<(OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo, Integer, Hash)>] OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo data, response status code and response headers
    def org_apache_sling_hc_core_impl_executor_health_check_executor_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_hc_core_impl_executor_health_check_executor_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'timeoutInMs'] = opts[:'timeout_in_ms'] if !opts[:'timeout_in_ms'].nil?
      query_params[:'longRunningFutureThresholdForCriticalMs'] = opts[:'long_running_future_threshold_for_critical_ms'] if !opts[:'long_running_future_threshold_for_critical_ms'].nil?
      query_params[:'resultCacheTtlInMs'] = opts[:'result_cache_ttl_in_ms'] if !opts[:'result_cache_ttl_in_ms'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_hc_core_impl_executor_health_check_executor_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_hc_core_impl_executor_health_check_executor_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [String] :mbean_name 
    # @option opts [String] :attribute_name 
    # @option opts [String] :attribute_value_constraint 
    # @return [OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo]
    def org_apache_sling_hc_core_impl_jmx_attribute_health_check(opts = {})
      data, _status_code, _headers = org_apache_sling_hc_core_impl_jmx_attribute_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [String] :mbean_name 
    # @option opts [String] :attribute_name 
    # @option opts [String] :attribute_value_constraint 
    # @return [Array<(OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo, Integer, Hash)>] OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo data, response status code and response headers
    def org_apache_sling_hc_core_impl_jmx_attribute_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_hc_core_impl_jmx_attribute_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.name'] = opts[:'hc_name'] if !opts[:'hc_name'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'hc.mbean.name'] = opts[:'hc_mbean_name'] if !opts[:'hc_mbean_name'].nil?
      query_params[:'mbean.name'] = opts[:'mbean_name'] if !opts[:'mbean_name'].nil?
      query_params[:'attribute.name'] = opts[:'attribute_name'] if !opts[:'attribute_name'].nil?
      query_params[:'attribute.value.constraint'] = opts[:'attribute_value_constraint'] if !opts[:'attribute_value_constraint'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_hc_core_impl_jmx_attribute_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_hc_core_impl_jmx_attribute_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [String] :expression 
    # @option opts [String] :language_extension 
    # @return [OrgApacheSlingHcCoreImplScriptableHealthCheckInfo]
    def org_apache_sling_hc_core_impl_scriptable_health_check(opts = {})
      data, _status_code, _headers = org_apache_sling_hc_core_impl_scriptable_health_check_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :hc_name 
    # @option opts [Array<String>] :hc_tags 
    # @option opts [String] :hc_mbean_name 
    # @option opts [String] :expression 
    # @option opts [String] :language_extension 
    # @return [Array<(OrgApacheSlingHcCoreImplScriptableHealthCheckInfo, Integer, Hash)>] OrgApacheSlingHcCoreImplScriptableHealthCheckInfo data, response status code and response headers
    def org_apache_sling_hc_core_impl_scriptable_health_check_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_hc_core_impl_scriptable_health_check ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'hc.name'] = opts[:'hc_name'] if !opts[:'hc_name'].nil?
      query_params[:'hc.tags'] = @api_client.build_collection_param(opts[:'hc_tags'], :multi) if !opts[:'hc_tags'].nil?
      query_params[:'hc.mbean.name'] = opts[:'hc_mbean_name'] if !opts[:'hc_mbean_name'].nil?
      query_params[:'expression'] = opts[:'expression'] if !opts[:'expression'].nil?
      query_params[:'language.extension'] = opts[:'language_extension'] if !opts[:'language_extension'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingHcCoreImplScriptableHealthCheckInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_hc_core_impl_scriptable_health_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_hc_core_impl_scriptable_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :servlet_path 
    # @option opts [Boolean] :disabled 
    # @option opts [String] :cors_access_control_allow_origin 
    # @return [OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo]
    def org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet(opts = {})
      data, _status_code, _headers = org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :servlet_path 
    # @option opts [Boolean] :disabled 
    # @option opts [String] :cors_access_control_allow_origin 
    # @return [Array<(OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo, Integer, Hash)>] OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo data, response status code and response headers
    def org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'servletPath'] = opts[:'servlet_path'] if !opts[:'servlet_path'].nil?
      query_params[:'disabled'] = opts[:'disabled'] if !opts[:'disabled'].nil?
      query_params[:'cors.accessControlAllowOrigin'] = opts[:'cors_access_control_allow_origin'] if !opts[:'cors_access_control_allow_origin'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_hc_core_impl_servlet_health_check_executor_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :total_width 
    # @option opts [Integer] :col_width_name 
    # @option opts [Integer] :col_width_result 
    # @option opts [Integer] :col_width_timing 
    # @return [OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo]
    def org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer(opts = {})
      data, _status_code, _headers = org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :total_width 
    # @option opts [Integer] :col_width_name 
    # @option opts [Integer] :col_width_result 
    # @option opts [Integer] :col_width_timing 
    # @return [Array<(OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo, Integer, Hash)>] OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo data, response status code and response headers
    def org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'totalWidth'] = opts[:'total_width'] if !opts[:'total_width'].nil?
      query_params[:'colWidthName'] = opts[:'col_width_name'] if !opts[:'col_width_name'].nil?
      query_params[:'colWidthResult'] = opts[:'col_width_result'] if !opts[:'col_width_result'].nil?
      query_params[:'colWidthTiming'] = opts[:'col_width_timing'] if !opts[:'col_width_timing'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_hc_core_impl_servlet_result_txt_verbose_serializer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Array<String>] :sling_filter_scope 
    # @return [OrgApacheSlingI18nImplI18NFilterInfo]
    def org_apache_sling_i18n_impl_i18_n_filter(opts = {})
      data, _status_code, _headers = org_apache_sling_i18n_impl_i18_n_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Array<String>] :sling_filter_scope 
    # @return [Array<(OrgApacheSlingI18nImplI18NFilterInfo, Integer, Hash)>] OrgApacheSlingI18nImplI18NFilterInfo data, response status code and response headers
    def org_apache_sling_i18n_impl_i18_n_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_i18n_impl_i18_n_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'sling.filter.scope'] = @api_client.build_collection_param(opts[:'sling_filter_scope'], :multi) if !opts[:'sling_filter_scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingI18nImplI18NFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_i18n_impl_i18_n_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_i18n_impl_i18_n_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :locale_default 
    # @option opts [Boolean] :preload_bundles 
    # @option opts [Integer] :invalidation_delay 
    # @return [OrgApacheSlingI18nImplJcrResourceBundleProviderInfo]
    def org_apache_sling_i18n_impl_jcr_resource_bundle_provider(opts = {})
      data, _status_code, _headers = org_apache_sling_i18n_impl_jcr_resource_bundle_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :locale_default 
    # @option opts [Boolean] :preload_bundles 
    # @option opts [Integer] :invalidation_delay 
    # @return [Array<(OrgApacheSlingI18nImplJcrResourceBundleProviderInfo, Integer, Hash)>] OrgApacheSlingI18nImplJcrResourceBundleProviderInfo data, response status code and response headers
    def org_apache_sling_i18n_impl_jcr_resource_bundle_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_i18n_impl_jcr_resource_bundle_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'locale.default'] = opts[:'locale_default'] if !opts[:'locale_default'].nil?
      query_params[:'preload.bundles'] = opts[:'preload_bundles'] if !opts[:'preload_bundles'].nil?
      query_params[:'invalidation.delay'] = opts[:'invalidation_delay'] if !opts[:'invalidation_delay'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingI18nImplJcrResourceBundleProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_i18n_impl_jcr_resource_bundle_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_i18n_impl_jcr_resource_bundle_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :handler_schemes 
    # @option opts [String] :sling_jcrinstall_folder_name_regexp 
    # @option opts [Integer] :sling_jcrinstall_folder_max_depth 
    # @option opts [Array<String>] :sling_jcrinstall_search_path 
    # @option opts [String] :sling_jcrinstall_new_config_path 
    # @option opts [String] :sling_jcrinstall_signal_path 
    # @option opts [Boolean] :sling_jcrinstall_enable_writeback 
    # @return [OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo]
    def org_apache_sling_installer_provider_jcr_impl_jcr_installer(opts = {})
      data, _status_code, _headers = org_apache_sling_installer_provider_jcr_impl_jcr_installer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :handler_schemes 
    # @option opts [String] :sling_jcrinstall_folder_name_regexp 
    # @option opts [Integer] :sling_jcrinstall_folder_max_depth 
    # @option opts [Array<String>] :sling_jcrinstall_search_path 
    # @option opts [String] :sling_jcrinstall_new_config_path 
    # @option opts [String] :sling_jcrinstall_signal_path 
    # @option opts [Boolean] :sling_jcrinstall_enable_writeback 
    # @return [Array<(OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo, Integer, Hash)>] OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo data, response status code and response headers
    def org_apache_sling_installer_provider_jcr_impl_jcr_installer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_installer_provider_jcr_impl_jcr_installer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'handler.schemes'] = @api_client.build_collection_param(opts[:'handler_schemes'], :multi) if !opts[:'handler_schemes'].nil?
      query_params[:'sling.jcrinstall.folder.name.regexp'] = opts[:'sling_jcrinstall_folder_name_regexp'] if !opts[:'sling_jcrinstall_folder_name_regexp'].nil?
      query_params[:'sling.jcrinstall.folder.max.depth'] = opts[:'sling_jcrinstall_folder_max_depth'] if !opts[:'sling_jcrinstall_folder_max_depth'].nil?
      query_params[:'sling.jcrinstall.search.path'] = @api_client.build_collection_param(opts[:'sling_jcrinstall_search_path'], :multi) if !opts[:'sling_jcrinstall_search_path'].nil?
      query_params[:'sling.jcrinstall.new.config.path'] = opts[:'sling_jcrinstall_new_config_path'] if !opts[:'sling_jcrinstall_new_config_path'].nil?
      query_params[:'sling.jcrinstall.signal.path'] = opts[:'sling_jcrinstall_signal_path'] if !opts[:'sling_jcrinstall_signal_path'].nil?
      query_params[:'sling.jcrinstall.enable.writeback'] = opts[:'sling_jcrinstall_enable_writeback'] if !opts[:'sling_jcrinstall_enable_writeback'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_installer_provider_jcr_impl_jcr_installer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_installer_provider_jcr_impl_jcr_installer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :whitelist_bypass 
    # @option opts [String] :whitelist_bundles_regexp 
    # @return [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo]
    def org_apache_sling_jcr_base_internal_login_admin_whitelist(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_base_internal_login_admin_whitelist_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :whitelist_bypass 
    # @option opts [String] :whitelist_bundles_regexp 
    # @return [Array<(OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo, Integer, Hash)>] OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo data, response status code and response headers
    def org_apache_sling_jcr_base_internal_login_admin_whitelist_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_base_internal_login_admin_whitelist ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'whitelist.bypass'] = opts[:'whitelist_bypass'] if !opts[:'whitelist_bypass'].nil?
      query_params[:'whitelist.bundles.regexp'] = opts[:'whitelist_bundles_regexp'] if !opts[:'whitelist_bundles_regexp'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_base_internal_login_admin_whitelist",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_base_internal_login_admin_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :whitelist_name 
    # @option opts [Array<String>] :whitelist_bundles 
    # @return [OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo]
    def org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :whitelist_name 
    # @option opts [Array<String>] :whitelist_bundles 
    # @return [Array<(OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo, Integer, Hash)>] OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo data, response status code and response headers
    def org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'whitelist.name'] = opts[:'whitelist_name'] if !opts[:'whitelist_name'].nil?
      query_params[:'whitelist.bundles'] = @api_client.build_collection_param(opts[:'whitelist_bundles'], :multi) if !opts[:'whitelist_bundles'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_base_internal_login_admin_whitelist_fragment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :_alias 
    # @option opts [Boolean] :dav_create_absolute_uri 
    # @option opts [String] :dav_protectedhandlers 
    # @return [OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo]
    def org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :_alias 
    # @option opts [Boolean] :dav_create_absolute_uri 
    # @option opts [String] :dav_protectedhandlers 
    # @return [Array<(OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo, Integer, Hash)>] OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo data, response status code and response headers
    def org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'alias'] = opts[:'_alias'] if !opts[:'_alias'].nil?
      query_params[:'dav.create-absolute-uri'] = opts[:'dav_create_absolute_uri'] if !opts[:'dav_create_absolute_uri'].nil?
      query_params[:'dav.protectedhandlers'] = opts[:'dav_protectedhandlers'] if !opts[:'dav_protectedhandlers'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_davex_impl_servlets_sling_dav_ex_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :java_naming_factory_initial 
    # @option opts [String] :java_naming_provider_url 
    # @return [OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo]
    def org_apache_sling_jcr_jackrabbit_server_jndi_registration_support(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_jackrabbit_server_jndi_registration_support_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :java_naming_factory_initial 
    # @option opts [String] :java_naming_provider_url 
    # @return [Array<(OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo, Integer, Hash)>] OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo data, response status code and response headers
    def org_apache_sling_jcr_jackrabbit_server_jndi_registration_support_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_jackrabbit_server_jndi_registration_support ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'java.naming.factory.initial'] = opts[:'java_naming_factory_initial'] if !opts[:'java_naming_factory_initial'].nil?
      query_params[:'java.naming.provider.url'] = opts[:'java_naming_provider_url'] if !opts[:'java_naming_provider_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_jackrabbit_server_jndi_registration_support",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_jackrabbit_server_jndi_registration_support\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :port 
    # @return [OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo]
    def org_apache_sling_jcr_jackrabbit_server_rmi_registration_support(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_jackrabbit_server_rmi_registration_support_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :port 
    # @return [Array<(OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo, Integer, Hash)>] OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo data, response status code and response headers
    def org_apache_sling_jcr_jackrabbit_server_rmi_registration_support_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_jackrabbit_server_rmi_registration_support ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'port'] = opts[:'port'] if !opts[:'port'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_jackrabbit_server_rmi_registration_support",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_jackrabbit_server_rmi_registration_support\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :references 
    # @return [OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo]
    def org_apache_sling_jcr_repoinit_impl_repository_initializer(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_repoinit_impl_repository_initializer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :references 
    # @return [Array<(OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo, Integer, Hash)>] OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo data, response status code and response headers
    def org_apache_sling_jcr_repoinit_impl_repository_initializer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_repoinit_impl_repository_initializer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'references'] = @api_client.build_collection_param(opts[:'references'], :multi) if !opts[:'references'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_repoinit_impl_repository_initializer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_repoinit_impl_repository_initializer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :references 
    # @option opts [Array<String>] :scripts 
    # @return [OrgApacheSlingJcrRepoinitRepositoryInitializerInfo]
    def org_apache_sling_jcr_repoinit_repository_initializer(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_repoinit_repository_initializer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :references 
    # @option opts [Array<String>] :scripts 
    # @return [Array<(OrgApacheSlingJcrRepoinitRepositoryInitializerInfo, Integer, Hash)>] OrgApacheSlingJcrRepoinitRepositoryInitializerInfo data, response status code and response headers
    def org_apache_sling_jcr_repoinit_repository_initializer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_repoinit_repository_initializer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'references'] = @api_client.build_collection_param(opts[:'references'], :multi) if !opts[:'references'].nil?
      query_params[:'scripts'] = @api_client.build_collection_param(opts[:'scripts'], :multi) if !opts[:'scripts'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrRepoinitRepositoryInitializerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_repoinit_repository_initializer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_repoinit_repository_initializer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :resource_resolver_searchpath 
    # @option opts [Boolean] :resource_resolver_manglenamespaces 
    # @option opts [Boolean] :resource_resolver_allow_direct 
    # @option opts [Array<String>] :resource_resolver_required_providers 
    # @option opts [Array<String>] :resource_resolver_required_providernames 
    # @option opts [Array<String>] :resource_resolver_virtual 
    # @option opts [Array<String>] :resource_resolver_mapping 
    # @option opts [String] :resource_resolver_map_location 
    # @option opts [Array<String>] :resource_resolver_map_observation 
    # @option opts [Integer] :resource_resolver_default_vanity_redirect_status 
    # @option opts [Boolean] :resource_resolver_enable_vanitypath 
    # @option opts [Integer] :resource_resolver_vanitypath_max_entries 
    # @option opts [Boolean] :resource_resolver_vanitypath_max_entries_startup 
    # @option opts [Integer] :resource_resolver_vanitypath_bloomfilter_max_bytes 
    # @option opts [Boolean] :resource_resolver_optimize_alias_resolution 
    # @option opts [Array<String>] :resource_resolver_vanitypath_whitelist 
    # @option opts [Array<String>] :resource_resolver_vanitypath_blacklist 
    # @option opts [Boolean] :resource_resolver_vanity_precedence 
    # @option opts [Boolean] :resource_resolver_providerhandling_paranoid 
    # @option opts [Boolean] :resource_resolver_log_closing 
    # @option opts [Boolean] :resource_resolver_log_unclosed 
    # @return [OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo]
    def org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :resource_resolver_searchpath 
    # @option opts [Boolean] :resource_resolver_manglenamespaces 
    # @option opts [Boolean] :resource_resolver_allow_direct 
    # @option opts [Array<String>] :resource_resolver_required_providers 
    # @option opts [Array<String>] :resource_resolver_required_providernames 
    # @option opts [Array<String>] :resource_resolver_virtual 
    # @option opts [Array<String>] :resource_resolver_mapping 
    # @option opts [String] :resource_resolver_map_location 
    # @option opts [Array<String>] :resource_resolver_map_observation 
    # @option opts [Integer] :resource_resolver_default_vanity_redirect_status 
    # @option opts [Boolean] :resource_resolver_enable_vanitypath 
    # @option opts [Integer] :resource_resolver_vanitypath_max_entries 
    # @option opts [Boolean] :resource_resolver_vanitypath_max_entries_startup 
    # @option opts [Integer] :resource_resolver_vanitypath_bloomfilter_max_bytes 
    # @option opts [Boolean] :resource_resolver_optimize_alias_resolution 
    # @option opts [Array<String>] :resource_resolver_vanitypath_whitelist 
    # @option opts [Array<String>] :resource_resolver_vanitypath_blacklist 
    # @option opts [Boolean] :resource_resolver_vanity_precedence 
    # @option opts [Boolean] :resource_resolver_providerhandling_paranoid 
    # @option opts [Boolean] :resource_resolver_log_closing 
    # @option opts [Boolean] :resource_resolver_log_unclosed 
    # @return [Array<(OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo, Integer, Hash)>] OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo data, response status code and response headers
    def org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'resource.resolver.searchpath'] = @api_client.build_collection_param(opts[:'resource_resolver_searchpath'], :multi) if !opts[:'resource_resolver_searchpath'].nil?
      query_params[:'resource.resolver.manglenamespaces'] = opts[:'resource_resolver_manglenamespaces'] if !opts[:'resource_resolver_manglenamespaces'].nil?
      query_params[:'resource.resolver.allowDirect'] = opts[:'resource_resolver_allow_direct'] if !opts[:'resource_resolver_allow_direct'].nil?
      query_params[:'resource.resolver.required.providers'] = @api_client.build_collection_param(opts[:'resource_resolver_required_providers'], :multi) if !opts[:'resource_resolver_required_providers'].nil?
      query_params[:'resource.resolver.required.providernames'] = @api_client.build_collection_param(opts[:'resource_resolver_required_providernames'], :multi) if !opts[:'resource_resolver_required_providernames'].nil?
      query_params[:'resource.resolver.virtual'] = @api_client.build_collection_param(opts[:'resource_resolver_virtual'], :multi) if !opts[:'resource_resolver_virtual'].nil?
      query_params[:'resource.resolver.mapping'] = @api_client.build_collection_param(opts[:'resource_resolver_mapping'], :multi) if !opts[:'resource_resolver_mapping'].nil?
      query_params[:'resource.resolver.map.location'] = opts[:'resource_resolver_map_location'] if !opts[:'resource_resolver_map_location'].nil?
      query_params[:'resource.resolver.map.observation'] = @api_client.build_collection_param(opts[:'resource_resolver_map_observation'], :multi) if !opts[:'resource_resolver_map_observation'].nil?
      query_params[:'resource.resolver.default.vanity.redirect.status'] = opts[:'resource_resolver_default_vanity_redirect_status'] if !opts[:'resource_resolver_default_vanity_redirect_status'].nil?
      query_params[:'resource.resolver.enable.vanitypath'] = opts[:'resource_resolver_enable_vanitypath'] if !opts[:'resource_resolver_enable_vanitypath'].nil?
      query_params[:'resource.resolver.vanitypath.maxEntries'] = opts[:'resource_resolver_vanitypath_max_entries'] if !opts[:'resource_resolver_vanitypath_max_entries'].nil?
      query_params[:'resource.resolver.vanitypath.maxEntries.startup'] = opts[:'resource_resolver_vanitypath_max_entries_startup'] if !opts[:'resource_resolver_vanitypath_max_entries_startup'].nil?
      query_params[:'resource.resolver.vanitypath.bloomfilter.maxBytes'] = opts[:'resource_resolver_vanitypath_bloomfilter_max_bytes'] if !opts[:'resource_resolver_vanitypath_bloomfilter_max_bytes'].nil?
      query_params[:'resource.resolver.optimize.alias.resolution'] = opts[:'resource_resolver_optimize_alias_resolution'] if !opts[:'resource_resolver_optimize_alias_resolution'].nil?
      query_params[:'resource.resolver.vanitypath.whitelist'] = @api_client.build_collection_param(opts[:'resource_resolver_vanitypath_whitelist'], :multi) if !opts[:'resource_resolver_vanitypath_whitelist'].nil?
      query_params[:'resource.resolver.vanitypath.blacklist'] = @api_client.build_collection_param(opts[:'resource_resolver_vanitypath_blacklist'], :multi) if !opts[:'resource_resolver_vanitypath_blacklist'].nil?
      query_params[:'resource.resolver.vanity.precedence'] = opts[:'resource_resolver_vanity_precedence'] if !opts[:'resource_resolver_vanity_precedence'].nil?
      query_params[:'resource.resolver.providerhandling.paranoid'] = opts[:'resource_resolver_providerhandling_paranoid'] if !opts[:'resource_resolver_providerhandling_paranoid'].nil?
      query_params[:'resource.resolver.log.closing'] = opts[:'resource_resolver_log_closing'] if !opts[:'resource_resolver_log_closing'].nil?
      query_params[:'resource.resolver.log.unclosed'] = opts[:'resource_resolver_log_unclosed'] if !opts[:'resource_resolver_log_unclosed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_resource_internal_jcr_resource_resolver_factory_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :allow_only_system_user 
    # @return [OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo]
    def org_apache_sling_jcr_resource_internal_jcr_system_user_validator(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_resource_internal_jcr_system_user_validator_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :allow_only_system_user 
    # @return [Array<(OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo, Integer, Hash)>] OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo data, response status code and response headers
    def org_apache_sling_jcr_resource_internal_jcr_system_user_validator_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_resource_internal_jcr_system_user_validator ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'allow.only.system.user'] = opts[:'allow_only_system_user'] if !opts[:'allow_only_system_user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_resource_internal_jcr_system_user_validator",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_resource_internal_jcr_system_user_validator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [String] :checkpath_prefix 
    # @option opts [String] :jcr_path 
    # @return [OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo]
    def org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :path 
    # @option opts [String] :checkpath_prefix 
    # @option opts [String] :jcr_path 
    # @return [Array<(OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo, Integer, Hash)>] OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo data, response status code and response headers
    def org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'checkpath.prefix'] = opts[:'checkpath_prefix'] if !opts[:'checkpath_prefix'].nil?
      query_params[:'jcrPath'] = opts[:'jcr_path'] if !opts[:'jcr_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_resourcesecurity_impl_resource_access_gate_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :type_collections 
    # @option opts [String] :type_noncollections 
    # @option opts [String] :type_content 
    # @return [OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo]
    def org_apache_sling_jcr_webdav_impl_handler_default_handler_service(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_webdav_impl_handler_default_handler_service_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [String] :type_collections 
    # @option opts [String] :type_noncollections 
    # @option opts [String] :type_content 
    # @return [Array<(OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo, Integer, Hash)>] OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo data, response status code and response headers
    def org_apache_sling_jcr_webdav_impl_handler_default_handler_service_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_webdav_impl_handler_default_handler_service ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'type.collections'] = opts[:'type_collections'] if !opts[:'type_collections'].nil?
      query_params[:'type.noncollections'] = opts[:'type_noncollections'] if !opts[:'type_noncollections'].nil?
      query_params[:'type.content'] = opts[:'type_content'] if !opts[:'type_content'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_webdav_impl_handler_default_handler_service",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_webdav_impl_handler_default_handler_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @return [OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo]
    def org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @return [Array<(OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo, Integer, Hash)>] OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo data, response status code and response headers
    def org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_webdav_impl_handler_dir_listing_export_handler_servic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :dav_root 
    # @option opts [Boolean] :dav_create_absolute_uri 
    # @option opts [String] :dav_realm 
    # @option opts [Array<String>] :collection_types 
    # @option opts [Array<String>] :filter_prefixes 
    # @option opts [String] :filter_types 
    # @option opts [String] :filter_uris 
    # @option opts [String] :type_collections 
    # @option opts [String] :type_noncollections 
    # @option opts [String] :type_content 
    # @return [OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo]
    def org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet(opts = {})
      data, _status_code, _headers = org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :dav_root 
    # @option opts [Boolean] :dav_create_absolute_uri 
    # @option opts [String] :dav_realm 
    # @option opts [Array<String>] :collection_types 
    # @option opts [Array<String>] :filter_prefixes 
    # @option opts [String] :filter_types 
    # @option opts [String] :filter_uris 
    # @option opts [String] :type_collections 
    # @option opts [String] :type_noncollections 
    # @option opts [String] :type_content 
    # @return [Array<(OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo, Integer, Hash)>] OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo data, response status code and response headers
    def org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'dav.root'] = opts[:'dav_root'] if !opts[:'dav_root'].nil?
      query_params[:'dav.create-absolute-uri'] = opts[:'dav_create_absolute_uri'] if !opts[:'dav_create_absolute_uri'].nil?
      query_params[:'dav.realm'] = opts[:'dav_realm'] if !opts[:'dav_realm'].nil?
      query_params[:'collection.types'] = @api_client.build_collection_param(opts[:'collection_types'], :multi) if !opts[:'collection_types'].nil?
      query_params[:'filter.prefixes'] = @api_client.build_collection_param(opts[:'filter_prefixes'], :multi) if !opts[:'filter_prefixes'].nil?
      query_params[:'filter.types'] = opts[:'filter_types'] if !opts[:'filter_types'].nil?
      query_params[:'filter.uris'] = opts[:'filter_uris'] if !opts[:'filter_uris'].nil?
      query_params[:'type.collections'] = opts[:'type_collections'] if !opts[:'type_collections'].nil?
      query_params[:'type.noncollections'] = opts[:'type_noncollections'] if !opts[:'type_noncollections'].nil?
      query_params[:'type.content'] = opts[:'type_content'] if !opts[:'type_content'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jcr_webdav_impl_servlets_simple_web_dav_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_roots 
    # @return [OrgApacheSlingJmxProviderImplJMXResourceProviderInfo]
    def org_apache_sling_jmx_provider_impl_jmx_resource_provider(opts = {})
      data, _status_code, _headers = org_apache_sling_jmx_provider_impl_jmx_resource_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :provider_roots 
    # @return [Array<(OrgApacheSlingJmxProviderImplJMXResourceProviderInfo, Integer, Hash)>] OrgApacheSlingJmxProviderImplJMXResourceProviderInfo data, response status code and response headers
    def org_apache_sling_jmx_provider_impl_jmx_resource_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_jmx_provider_impl_jmx_resource_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'provider.roots'] = opts[:'provider_roots'] if !opts[:'provider_roots'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingJmxProviderImplJMXResourceProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_jmx_provider_impl_jmx_resource_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_jmx_provider_impl_jmx_resource_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :osgi_http_whiteboard_listener 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @option opts [Integer] :max_recursion_depth 
    # @option opts [Integer] :cleanup_job_period 
    # @return [OrgApacheSlingModelsImplModelAdapterFactoryInfo]
    def org_apache_sling_models_impl_model_adapter_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_models_impl_model_adapter_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :osgi_http_whiteboard_listener 
    # @option opts [String] :osgi_http_whiteboard_context_select 
    # @option opts [Integer] :max_recursion_depth 
    # @option opts [Integer] :cleanup_job_period 
    # @return [Array<(OrgApacheSlingModelsImplModelAdapterFactoryInfo, Integer, Hash)>] OrgApacheSlingModelsImplModelAdapterFactoryInfo data, response status code and response headers
    def org_apache_sling_models_impl_model_adapter_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_models_impl_model_adapter_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'osgi.http.whiteboard.listener'] = opts[:'osgi_http_whiteboard_listener'] if !opts[:'osgi_http_whiteboard_listener'].nil?
      query_params[:'osgi.http.whiteboard.context.select'] = opts[:'osgi_http_whiteboard_context_select'] if !opts[:'osgi_http_whiteboard_context_select'].nil?
      query_params[:'max.recursion.depth'] = opts[:'max_recursion_depth'] if !opts[:'max_recursion_depth'].nil?
      query_params[:'cleanup.job.period'] = opts[:'cleanup_job_period'] if !opts[:'cleanup_job_period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingModelsImplModelAdapterFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_models_impl_model_adapter_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_models_impl_model_adapter_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_recursion_levels 
    # @return [OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo]
    def org_apache_sling_models_jacksonexporter_impl_resource_module_provider(opts = {})
      data, _status_code, _headers = org_apache_sling_models_jacksonexporter_impl_resource_module_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :max_recursion_levels 
    # @return [Array<(OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo, Integer, Hash)>] OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo data, response status code and response headers
    def org_apache_sling_models_jacksonexporter_impl_resource_module_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_models_jacksonexporter_impl_resource_module_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'max.recursion.levels'] = opts[:'max_recursion_levels'] if !opts[:'max_recursion_levels'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_models_jacksonexporter_impl_resource_module_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_models_jacksonexporter_impl_resource_module_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :felix_inventory_printer_name 
    # @option opts [String] :felix_inventory_printer_title 
    # @option opts [String] :path 
    # @return [OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo]
    def org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto(opts = {})
      data, _status_code, _headers = org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :felix_inventory_printer_name 
    # @option opts [String] :felix_inventory_printer_title 
    # @option opts [String] :path 
    # @return [Array<(OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo, Integer, Hash)>] OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo data, response status code and response headers
    def org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'felix.inventory.printer.name'] = opts[:'felix_inventory_printer_name'] if !opts[:'felix_inventory_printer_name'].nil?
      query_params[:'felix.inventory.printer.title'] = opts[:'felix_inventory_printer_title'] if !opts[:'felix_inventory_printer_title'].nil?
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_resource_inventory_impl_resource_inventory_printer_facto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :merge_root 
    # @option opts [Boolean] :merge_read_only 
    # @return [OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo]
    def org_apache_sling_resourcemerger_impl_merged_resource_provider_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_resourcemerger_impl_merged_resource_provider_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :merge_root 
    # @option opts [Boolean] :merge_read_only 
    # @return [Array<(OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo, Integer, Hash)>] OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo data, response status code and response headers
    def org_apache_sling_resourcemerger_impl_merged_resource_provider_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_resourcemerger_impl_merged_resource_provider_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'merge.root'] = opts[:'merge_root'] if !opts[:'merge_root'].nil?
      query_params[:'merge.readOnly'] = opts[:'merge_read_only'] if !opts[:'merge_read_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_resourcemerger_impl_merged_resource_provider_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_resourcemerger_impl_merged_resource_provider_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :merge_root 
    # @option opts [Boolean] :merge_read_only 
    # @return [OrgApacheSlingResourcemergerPickerOverridingInfo]
    def org_apache_sling_resourcemerger_picker_overriding(opts = {})
      data, _status_code, _headers = org_apache_sling_resourcemerger_picker_overriding_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :merge_root 
    # @option opts [Boolean] :merge_read_only 
    # @return [Array<(OrgApacheSlingResourcemergerPickerOverridingInfo, Integer, Hash)>] OrgApacheSlingResourcemergerPickerOverridingInfo data, response status code and response headers
    def org_apache_sling_resourcemerger_picker_overriding_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_resourcemerger_picker_overriding ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'merge.root'] = opts[:'merge_root'] if !opts[:'merge_root'].nil?
      query_params[:'merge.readOnly'] = opts[:'merge_read_only'] if !opts[:'merge_read_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingResourcemergerPickerOverridingInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_resourcemerger_picker_overriding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_resourcemerger_picker_overriding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :org_apache_sling_scripting_cache_size 
    # @option opts [Array<String>] :org_apache_sling_scripting_cache_additional_extensions 
    # @return [OrgApacheSlingScriptingCoreImplScriptCacheImplInfo]
    def org_apache_sling_scripting_core_impl_script_cache_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_scripting_core_impl_script_cache_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :org_apache_sling_scripting_cache_size 
    # @option opts [Array<String>] :org_apache_sling_scripting_cache_additional_extensions 
    # @return [Array<(OrgApacheSlingScriptingCoreImplScriptCacheImplInfo, Integer, Hash)>] OrgApacheSlingScriptingCoreImplScriptCacheImplInfo data, response status code and response headers
    def org_apache_sling_scripting_core_impl_script_cache_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_scripting_core_impl_script_cache_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.sling.scripting.cache.size'] = opts[:'org_apache_sling_scripting_cache_size'] if !opts[:'org_apache_sling_scripting_cache_size'].nil?
      query_params[:'org.apache.sling.scripting.cache.additional_extensions'] = @api_client.build_collection_param(opts[:'org_apache_sling_scripting_cache_additional_extensions'], :multi) if !opts[:'org_apache_sling_scripting_cache_additional_extensions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingScriptingCoreImplScriptCacheImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_scripting_core_impl_script_cache_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_scripting_core_impl_script_cache_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :log_stacktrace_onclose 
    # @return [OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo]
    def org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider(opts = {})
      data, _status_code, _headers = org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :log_stacktrace_onclose 
    # @return [Array<(OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo, Integer, Hash)>] OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo data, response status code and response headers
    def org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'log.stacktrace.onclose'] = opts[:'log_stacktrace_onclose'] if !opts[:'log_stacktrace_onclose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_scripting_core_impl_scripting_resource_resolver_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :java_classdebuginfo 
    # @option opts [String] :java_java_encoding 
    # @option opts [String] :java_compiler_source_vm 
    # @option opts [String] :java_compiler_target_vm 
    # @return [OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo]
    def org_apache_sling_scripting_java_impl_java_script_engine_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_scripting_java_impl_java_script_engine_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :java_classdebuginfo 
    # @option opts [String] :java_java_encoding 
    # @option opts [String] :java_compiler_source_vm 
    # @option opts [String] :java_compiler_target_vm 
    # @return [Array<(OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo, Integer, Hash)>] OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo data, response status code and response headers
    def org_apache_sling_scripting_java_impl_java_script_engine_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_scripting_java_impl_java_script_engine_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'java.classdebuginfo'] = opts[:'java_classdebuginfo'] if !opts[:'java_classdebuginfo'].nil?
      query_params[:'java.javaEncoding'] = opts[:'java_java_encoding'] if !opts[:'java_java_encoding'].nil?
      query_params[:'java.compilerSourceVM'] = opts[:'java_compiler_source_vm'] if !opts[:'java_compiler_source_vm'].nil?
      query_params[:'java.compilerTargetVM'] = opts[:'java_compiler_target_vm'] if !opts[:'java_compiler_target_vm'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_scripting_java_impl_java_script_engine_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_scripting_java_impl_java_script_engine_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :org_apache_sling_scripting_javascript_rhino_opt_level 
    # @return [OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo]
    def org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa(opts = {})
      data, _status_code, _headers = org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :org_apache_sling_scripting_javascript_rhino_opt_level 
    # @return [Array<(OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo, Integer, Hash)>] OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo data, response status code and response headers
    def org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.sling.scripting.javascript.rhino.optLevel'] = opts[:'org_apache_sling_scripting_javascript_rhino_opt_level'] if !opts[:'org_apache_sling_scripting_javascript_rhino_opt_level'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_scripting_javascript_internal_rhino_java_script_engine_fa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jasper_compiler_target_vm 
    # @option opts [String] :jasper_compiler_source_vm 
    # @option opts [Boolean] :jasper_classdebuginfo 
    # @option opts [Boolean] :jasper_enable_pooling 
    # @option opts [String] :jasper_ie_class_id 
    # @option opts [Boolean] :jasper_gen_string_as_char_array 
    # @option opts [Boolean] :jasper_keepgenerated 
    # @option opts [Boolean] :jasper_mappedfile 
    # @option opts [Boolean] :jasper_trim_spaces 
    # @option opts [Boolean] :jasper_display_source_fragments 
    # @option opts [Boolean] :default_is_session 
    # @return [OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo]
    def org_apache_sling_scripting_jsp_jsp_script_engine_factory(opts = {})
      data, _status_code, _headers = org_apache_sling_scripting_jsp_jsp_script_engine_factory_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :jasper_compiler_target_vm 
    # @option opts [String] :jasper_compiler_source_vm 
    # @option opts [Boolean] :jasper_classdebuginfo 
    # @option opts [Boolean] :jasper_enable_pooling 
    # @option opts [String] :jasper_ie_class_id 
    # @option opts [Boolean] :jasper_gen_string_as_char_array 
    # @option opts [Boolean] :jasper_keepgenerated 
    # @option opts [Boolean] :jasper_mappedfile 
    # @option opts [Boolean] :jasper_trim_spaces 
    # @option opts [Boolean] :jasper_display_source_fragments 
    # @option opts [Boolean] :default_is_session 
    # @return [Array<(OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo, Integer, Hash)>] OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo data, response status code and response headers
    def org_apache_sling_scripting_jsp_jsp_script_engine_factory_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_scripting_jsp_jsp_script_engine_factory ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'jasper.compilerTargetVM'] = opts[:'jasper_compiler_target_vm'] if !opts[:'jasper_compiler_target_vm'].nil?
      query_params[:'jasper.compilerSourceVM'] = opts[:'jasper_compiler_source_vm'] if !opts[:'jasper_compiler_source_vm'].nil?
      query_params[:'jasper.classdebuginfo'] = opts[:'jasper_classdebuginfo'] if !opts[:'jasper_classdebuginfo'].nil?
      query_params[:'jasper.enablePooling'] = opts[:'jasper_enable_pooling'] if !opts[:'jasper_enable_pooling'].nil?
      query_params[:'jasper.ieClassId'] = opts[:'jasper_ie_class_id'] if !opts[:'jasper_ie_class_id'].nil?
      query_params[:'jasper.genStringAsCharArray'] = opts[:'jasper_gen_string_as_char_array'] if !opts[:'jasper_gen_string_as_char_array'].nil?
      query_params[:'jasper.keepgenerated'] = opts[:'jasper_keepgenerated'] if !opts[:'jasper_keepgenerated'].nil?
      query_params[:'jasper.mappedfile'] = opts[:'jasper_mappedfile'] if !opts[:'jasper_mappedfile'].nil?
      query_params[:'jasper.trimSpaces'] = opts[:'jasper_trim_spaces'] if !opts[:'jasper_trim_spaces'].nil?
      query_params[:'jasper.displaySourceFragments'] = opts[:'jasper_display_source_fragments'] if !opts[:'jasper_display_source_fragments'].nil?
      query_params[:'default.is.session'] = opts[:'default_is_session'] if !opts[:'default_is_session'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_scripting_jsp_jsp_script_engine_factory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_scripting_jsp_jsp_script_engine_factory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :org_apache_sling_scripting_sightly_js_bindings 
    # @return [OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo]
    def org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov(opts = {})
      data, _status_code, _headers = org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :org_apache_sling_scripting_sightly_js_bindings 
    # @return [Array<(OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo, Integer, Hash)>] OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo data, response status code and response headers
    def org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'org.apache.sling.scripting.sightly.js.bindings'] = @api_client.build_collection_param(opts[:'org_apache_sling_scripting_sightly_js_bindings'], :multi) if !opts[:'org_apache_sling_scripting_sightly_js_bindings'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_scripting_sightly_js_impl_jsapi_sly_bindings_values_prov\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_content_disposition_paths 
    # @option opts [Array<String>] :sling_content_disposition_excluded_paths 
    # @option opts [Boolean] :sling_content_disposition_all_paths 
    # @return [OrgApacheSlingSecurityImplContentDispositionFilterInfo]
    def org_apache_sling_security_impl_content_disposition_filter(opts = {})
      data, _status_code, _headers = org_apache_sling_security_impl_content_disposition_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_content_disposition_paths 
    # @option opts [Array<String>] :sling_content_disposition_excluded_paths 
    # @option opts [Boolean] :sling_content_disposition_all_paths 
    # @return [Array<(OrgApacheSlingSecurityImplContentDispositionFilterInfo, Integer, Hash)>] OrgApacheSlingSecurityImplContentDispositionFilterInfo data, response status code and response headers
    def org_apache_sling_security_impl_content_disposition_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_security_impl_content_disposition_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.content.disposition.paths'] = @api_client.build_collection_param(opts[:'sling_content_disposition_paths'], :multi) if !opts[:'sling_content_disposition_paths'].nil?
      query_params[:'sling.content.disposition.excluded.paths'] = @api_client.build_collection_param(opts[:'sling_content_disposition_excluded_paths'], :multi) if !opts[:'sling_content_disposition_excluded_paths'].nil?
      query_params[:'sling.content.disposition.all.paths'] = opts[:'sling_content_disposition_all_paths'] if !opts[:'sling_content_disposition_all_paths'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingSecurityImplContentDispositionFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_security_impl_content_disposition_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_security_impl_content_disposition_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :allow_empty 
    # @option opts [Array<String>] :allow_hosts 
    # @option opts [Array<String>] :allow_hosts_regexp 
    # @option opts [Array<String>] :filter_methods 
    # @option opts [Array<String>] :exclude_agents_regexp 
    # @return [OrgApacheSlingSecurityImplReferrerFilterInfo]
    def org_apache_sling_security_impl_referrer_filter(opts = {})
      data, _status_code, _headers = org_apache_sling_security_impl_referrer_filter_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :allow_empty 
    # @option opts [Array<String>] :allow_hosts 
    # @option opts [Array<String>] :allow_hosts_regexp 
    # @option opts [Array<String>] :filter_methods 
    # @option opts [Array<String>] :exclude_agents_regexp 
    # @return [Array<(OrgApacheSlingSecurityImplReferrerFilterInfo, Integer, Hash)>] OrgApacheSlingSecurityImplReferrerFilterInfo data, response status code and response headers
    def org_apache_sling_security_impl_referrer_filter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_security_impl_referrer_filter ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'allow.empty'] = opts[:'allow_empty'] if !opts[:'allow_empty'].nil?
      query_params[:'allow.hosts'] = @api_client.build_collection_param(opts[:'allow_hosts'], :multi) if !opts[:'allow_hosts'].nil?
      query_params[:'allow.hosts.regexp'] = @api_client.build_collection_param(opts[:'allow_hosts_regexp'], :multi) if !opts[:'allow_hosts_regexp'].nil?
      query_params[:'filter.methods'] = @api_client.build_collection_param(opts[:'filter_methods'], :multi) if !opts[:'filter_methods'].nil?
      query_params[:'exclude.agents.regexp'] = @api_client.build_collection_param(opts[:'exclude_agents_regexp'], :multi) if !opts[:'exclude_agents_regexp'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingSecurityImplReferrerFilterInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_security_impl_referrer_filter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_security_impl_referrer_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :user_mapping 
    # @option opts [String] :user_default 
    # @option opts [Boolean] :user_enable_default_mapping 
    # @option opts [Boolean] :require_validation 
    # @return [OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo]
    def org_apache_sling_serviceusermapping_impl_service_user_mapper_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :user_mapping 
    # @option opts [String] :user_default 
    # @option opts [Boolean] :user_enable_default_mapping 
    # @option opts [Boolean] :require_validation 
    # @return [Array<(OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo, Integer, Hash)>] OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo data, response status code and response headers
    def org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_serviceusermapping_impl_service_user_mapper_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'user.mapping'] = @api_client.build_collection_param(opts[:'user_mapping'], :multi) if !opts[:'user_mapping'].nil?
      query_params[:'user.default'] = opts[:'user_default'] if !opts[:'user_default'].nil?
      query_params[:'user.enable.default.mapping'] = opts[:'user_enable_default_mapping'] if !opts[:'user_enable_default_mapping'].nil?
      query_params[:'require.validation'] = opts[:'require_validation'] if !opts[:'require_validation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_serviceusermapping_impl_service_user_mapper_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_serviceusermapping_impl_service_user_mapper_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Array<String>] :user_mapping 
    # @return [OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo]
    def org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended(opts = {})
      data, _status_code, _headers = org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Integer] :service_ranking 
    # @option opts [Array<String>] :user_mapping 
    # @return [Array<(OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo, Integer, Hash)>] OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo data, response status code and response headers
    def org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'service.ranking'] = opts[:'service_ranking'] if !opts[:'service_ranking'].nil?
      query_params[:'user.mapping'] = @api_client.build_collection_param(opts[:'user_mapping'], :multi) if !opts[:'user_mapping'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_serviceusermapping_impl_service_user_mapper_impl_amended\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :aliases 
    # @option opts [Boolean] :index 
    # @option opts [Array<String>] :index_files 
    # @option opts [Boolean] :enable_html 
    # @option opts [Boolean] :enable_json 
    # @option opts [Boolean] :enable_txt 
    # @option opts [Boolean] :enable_xml 
    # @option opts [Integer] :json_maximumresults 
    # @option opts [Boolean] :ecma_suport 
    # @return [OrgApacheSlingServletsGetDefaultGetServletInfo]
    def org_apache_sling_servlets_get_default_get_servlet(opts = {})
      data, _status_code, _headers = org_apache_sling_servlets_get_default_get_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :aliases 
    # @option opts [Boolean] :index 
    # @option opts [Array<String>] :index_files 
    # @option opts [Boolean] :enable_html 
    # @option opts [Boolean] :enable_json 
    # @option opts [Boolean] :enable_txt 
    # @option opts [Boolean] :enable_xml 
    # @option opts [Integer] :json_maximumresults 
    # @option opts [Boolean] :ecma_suport 
    # @return [Array<(OrgApacheSlingServletsGetDefaultGetServletInfo, Integer, Hash)>] OrgApacheSlingServletsGetDefaultGetServletInfo data, response status code and response headers
    def org_apache_sling_servlets_get_default_get_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_servlets_get_default_get_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'aliases'] = @api_client.build_collection_param(opts[:'aliases'], :multi) if !opts[:'aliases'].nil?
      query_params[:'index'] = opts[:'index'] if !opts[:'index'].nil?
      query_params[:'index.files'] = @api_client.build_collection_param(opts[:'index_files'], :multi) if !opts[:'index_files'].nil?
      query_params[:'enable.html'] = opts[:'enable_html'] if !opts[:'enable_html'].nil?
      query_params[:'enable.json'] = opts[:'enable_json'] if !opts[:'enable_json'].nil?
      query_params[:'enable.txt'] = opts[:'enable_txt'] if !opts[:'enable_txt'].nil?
      query_params[:'enable.xml'] = opts[:'enable_xml'] if !opts[:'enable_xml'].nil?
      query_params[:'json.maximumresults'] = opts[:'json_maximumresults'] if !opts[:'json_maximumresults'].nil?
      query_params[:'ecmaSuport'] = opts[:'ecma_suport'] if !opts[:'ecma_suport'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingServletsGetDefaultGetServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_servlets_get_default_get_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_servlets_get_default_get_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_selectors 
    # @option opts [Boolean] :ecma_suport 
    # @return [OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo]
    def org_apache_sling_servlets_get_impl_version_version_info_servlet(opts = {})
      data, _status_code, _headers = org_apache_sling_servlets_get_impl_version_version_info_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :sling_servlet_selectors 
    # @option opts [Boolean] :ecma_suport 
    # @return [Array<(OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo, Integer, Hash)>] OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo data, response status code and response headers
    def org_apache_sling_servlets_get_impl_version_version_info_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_servlets_get_impl_version_version_info_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.servlet.selectors'] = @api_client.build_collection_param(opts[:'sling_servlet_selectors'], :multi) if !opts[:'sling_servlet_selectors'].nil?
      query_params[:'ecmaSuport'] = opts[:'ecma_suport'] if !opts[:'ecma_suport'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_servlets_get_impl_version_version_info_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_servlets_get_impl_version_version_info_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Boolean] :scheduler_concurrent 
    # @option opts [Integer] :chunk_cleanup_age 
    # @return [OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo]
    def org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task(opts = {})
      data, _status_code, _headers = org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :scheduler_expression 
    # @option opts [Boolean] :scheduler_concurrent 
    # @option opts [Integer] :chunk_cleanup_age 
    # @return [Array<(OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo, Integer, Hash)>] OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo data, response status code and response headers
    def org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'scheduler.expression'] = opts[:'scheduler_expression'] if !opts[:'scheduler_expression'].nil?
      query_params[:'scheduler.concurrent'] = opts[:'scheduler_concurrent'] if !opts[:'scheduler_concurrent'].nil?
      query_params[:'chunk.cleanup.age'] = opts[:'chunk_cleanup_age'] if !opts[:'chunk_cleanup_age'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_servlets_post_impl_helper_chunk_clean_up_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :servlet_post_date_formats 
    # @option opts [Array<String>] :servlet_post_node_name_hints 
    # @option opts [Integer] :servlet_post_node_name_max_length 
    # @option opts [Boolean] :servlet_post_checkin_new_versionable_nodes 
    # @option opts [Boolean] :servlet_post_auto_checkout 
    # @option opts [Boolean] :servlet_post_auto_checkin 
    # @option opts [String] :servlet_post_ignore_pattern 
    # @return [OrgApacheSlingServletsPostImplSlingPostServletInfo]
    def org_apache_sling_servlets_post_impl_sling_post_servlet(opts = {})
      data, _status_code, _headers = org_apache_sling_servlets_post_impl_sling_post_servlet_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :servlet_post_date_formats 
    # @option opts [Array<String>] :servlet_post_node_name_hints 
    # @option opts [Integer] :servlet_post_node_name_max_length 
    # @option opts [Boolean] :servlet_post_checkin_new_versionable_nodes 
    # @option opts [Boolean] :servlet_post_auto_checkout 
    # @option opts [Boolean] :servlet_post_auto_checkin 
    # @option opts [String] :servlet_post_ignore_pattern 
    # @return [Array<(OrgApacheSlingServletsPostImplSlingPostServletInfo, Integer, Hash)>] OrgApacheSlingServletsPostImplSlingPostServletInfo data, response status code and response headers
    def org_apache_sling_servlets_post_impl_sling_post_servlet_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_servlets_post_impl_sling_post_servlet ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'servlet.post.dateFormats'] = @api_client.build_collection_param(opts[:'servlet_post_date_formats'], :multi) if !opts[:'servlet_post_date_formats'].nil?
      query_params[:'servlet.post.nodeNameHints'] = @api_client.build_collection_param(opts[:'servlet_post_node_name_hints'], :multi) if !opts[:'servlet_post_node_name_hints'].nil?
      query_params[:'servlet.post.nodeNameMaxLength'] = opts[:'servlet_post_node_name_max_length'] if !opts[:'servlet_post_node_name_max_length'].nil?
      query_params[:'servlet.post.checkinNewVersionableNodes'] = opts[:'servlet_post_checkin_new_versionable_nodes'] if !opts[:'servlet_post_checkin_new_versionable_nodes'].nil?
      query_params[:'servlet.post.autoCheckout'] = opts[:'servlet_post_auto_checkout'] if !opts[:'servlet_post_auto_checkout'].nil?
      query_params[:'servlet.post.autoCheckin'] = opts[:'servlet_post_auto_checkin'] if !opts[:'servlet_post_auto_checkin'].nil?
      query_params[:'servlet.post.ignorePattern'] = opts[:'servlet_post_ignore_pattern'] if !opts[:'servlet_post_ignore_pattern'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingServletsPostImplSlingPostServletInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_servlets_post_impl_sling_post_servlet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_servlets_post_impl_sling_post_servlet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :servletresolver_servlet_root 
    # @option opts [Integer] :servletresolver_cache_size 
    # @option opts [Array<String>] :servletresolver_paths 
    # @option opts [Array<String>] :servletresolver_default_extensions 
    # @return [OrgApacheSlingServletsResolverSlingServletResolverInfo]
    def org_apache_sling_servlets_resolver_sling_servlet_resolver(opts = {})
      data, _status_code, _headers = org_apache_sling_servlets_resolver_sling_servlet_resolver_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :servletresolver_servlet_root 
    # @option opts [Integer] :servletresolver_cache_size 
    # @option opts [Array<String>] :servletresolver_paths 
    # @option opts [Array<String>] :servletresolver_default_extensions 
    # @return [Array<(OrgApacheSlingServletsResolverSlingServletResolverInfo, Integer, Hash)>] OrgApacheSlingServletsResolverSlingServletResolverInfo data, response status code and response headers
    def org_apache_sling_servlets_resolver_sling_servlet_resolver_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_servlets_resolver_sling_servlet_resolver ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'servletresolver.servletRoot'] = opts[:'servletresolver_servlet_root'] if !opts[:'servletresolver_servlet_root'].nil?
      query_params[:'servletresolver.cacheSize'] = opts[:'servletresolver_cache_size'] if !opts[:'servletresolver_cache_size'].nil?
      query_params[:'servletresolver.paths'] = @api_client.build_collection_param(opts[:'servletresolver_paths'], :multi) if !opts[:'servletresolver_paths'].nil?
      query_params[:'servletresolver.defaultExtensions'] = @api_client.build_collection_param(opts[:'servletresolver_default_extensions'], :multi) if !opts[:'servletresolver_default_extensions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingServletsResolverSlingServletResolverInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_servlets_resolver_sling_servlet_resolver",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_servlets_resolver_sling_servlet_resolver\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_name 
    # @option opts [String] :sling_description 
    # @return [OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo]
    def org_apache_sling_settings_impl_sling_settings_service_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_settings_impl_sling_settings_service_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :sling_name 
    # @option opts [String] :sling_description 
    # @return [Array<(OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo, Integer, Hash)>] OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo data, response status code and response headers
    def org_apache_sling_settings_impl_sling_settings_service_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_settings_impl_sling_settings_service_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'sling.name'] = opts[:'sling_name'] if !opts[:'sling_name'].nil?
      query_params[:'sling.description'] = opts[:'sling_description'] if !opts[:'sling_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_settings_impl_sling_settings_service_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_settings_impl_sling_settings_service_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :active_by_default 
    # @option opts [String] :default_message 
    # @return [OrgApacheSlingStartupfilterImplStartupFilterImplInfo]
    def org_apache_sling_startupfilter_impl_startup_filter_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_startupfilter_impl_startup_filter_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Boolean] :active_by_default 
    # @option opts [String] :default_message 
    # @return [Array<(OrgApacheSlingStartupfilterImplStartupFilterImplInfo, Integer, Hash)>] OrgApacheSlingStartupfilterImplStartupFilterImplInfo data, response status code and response headers
    def org_apache_sling_startupfilter_impl_startup_filter_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_startupfilter_impl_startup_filter_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'active.by.default'] = opts[:'active_by_default'] if !opts[:'active_by_default'].nil?
      query_params[:'default.message'] = opts[:'default_message'] if !opts[:'default_message'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingStartupfilterImplStartupFilterImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_startupfilter_impl_startup_filter_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_startupfilter_impl_startup_filter_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :tenant_root 
    # @option opts [Array<String>] :tenant_path_matcher 
    # @return [OrgApacheSlingTenantInternalTenantProviderImplInfo]
    def org_apache_sling_tenant_internal_tenant_provider_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_tenant_internal_tenant_provider_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :tenant_root 
    # @option opts [Array<String>] :tenant_path_matcher 
    # @return [Array<(OrgApacheSlingTenantInternalTenantProviderImplInfo, Integer, Hash)>] OrgApacheSlingTenantInternalTenantProviderImplInfo data, response status code and response headers
    def org_apache_sling_tenant_internal_tenant_provider_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_tenant_internal_tenant_provider_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'tenant.root'] = opts[:'tenant_root'] if !opts[:'tenant_root'].nil?
      query_params[:'tenant.path.matcher'] = @api_client.build_collection_param(opts[:'tenant_path_matcher'], :multi) if !opts[:'tenant_path_matcher'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingTenantInternalTenantProviderImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_tenant_internal_tenant_provider_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_tenant_internal_tenant_provider_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :tracer_sets 
    # @option opts [Boolean] :enabled 
    # @option opts [Boolean] :servlet_enabled 
    # @option opts [Integer] :recording_cache_size_in_mb 
    # @option opts [Integer] :recording_cache_duration_in_secs 
    # @option opts [Boolean] :recording_compression_enabled 
    # @option opts [Boolean] :gzip_response 
    # @return [OrgApacheSlingTracerInternalLogTracerInfo]
    def org_apache_sling_tracer_internal_log_tracer(opts = {})
      data, _status_code, _headers = org_apache_sling_tracer_internal_log_tracer_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [Array<String>] :tracer_sets 
    # @option opts [Boolean] :enabled 
    # @option opts [Boolean] :servlet_enabled 
    # @option opts [Integer] :recording_cache_size_in_mb 
    # @option opts [Integer] :recording_cache_duration_in_secs 
    # @option opts [Boolean] :recording_compression_enabled 
    # @option opts [Boolean] :gzip_response 
    # @return [Array<(OrgApacheSlingTracerInternalLogTracerInfo, Integer, Hash)>] OrgApacheSlingTracerInternalLogTracerInfo data, response status code and response headers
    def org_apache_sling_tracer_internal_log_tracer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_tracer_internal_log_tracer ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'tracerSets'] = @api_client.build_collection_param(opts[:'tracer_sets'], :multi) if !opts[:'tracer_sets'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'servletEnabled'] = opts[:'servlet_enabled'] if !opts[:'servlet_enabled'].nil?
      query_params[:'recordingCacheSizeInMB'] = opts[:'recording_cache_size_in_mb'] if !opts[:'recording_cache_size_in_mb'].nil?
      query_params[:'recordingCacheDurationInSecs'] = opts[:'recording_cache_duration_in_secs'] if !opts[:'recording_cache_duration_in_secs'].nil?
      query_params[:'recordingCompressionEnabled'] = opts[:'recording_compression_enabled'] if !opts[:'recording_compression_enabled'].nil?
      query_params[:'gzipResponse'] = opts[:'gzip_response'] if !opts[:'gzip_response'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingTracerInternalLogTracerInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_tracer_internal_log_tracer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_tracer_internal_log_tracer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :policy_path 
    # @return [OrgApacheSlingXssImplXSSFilterImplInfo]
    def org_apache_sling_xss_impl_xss_filter_impl(opts = {})
      data, _status_code, _headers = org_apache_sling_xss_impl_xss_filter_impl_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :post 
    # @option opts [Boolean] :apply 
    # @option opts [Boolean] :delete 
    # @option opts [String] :action 
    # @option opts [String] :location 
    # @option opts [Array<String>] :propertylist 
    # @option opts [String] :policy_path 
    # @return [Array<(OrgApacheSlingXssImplXSSFilterImplInfo, Integer, Hash)>] OrgApacheSlingXssImplXSSFilterImplInfo data, response status code and response headers
    def org_apache_sling_xss_impl_xss_filter_impl_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigmgrApi.org_apache_sling_xss_impl_xss_filter_impl ...'
      end
      # resource path
      local_var_path = '/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'post'] = opts[:'post'] if !opts[:'post'].nil?
      query_params[:'apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'delete'] = opts[:'delete'] if !opts[:'delete'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'$location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'propertylist'] = @api_client.build_collection_param(opts[:'propertylist'], :csv) if !opts[:'propertylist'].nil?
      query_params[:'policyPath'] = opts[:'policy_path'] if !opts[:'policy_path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgApacheSlingXssImplXSSFilterImplInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['aemAuth']

      new_options = opts.merge(
        :operation => :"ConfigmgrApi.org_apache_sling_xss_impl_xss_filter_impl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigmgrApi#org_apache_sling_xss_impl_xss_filter_impl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
