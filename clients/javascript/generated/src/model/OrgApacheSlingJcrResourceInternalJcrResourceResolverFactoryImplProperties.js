/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigNodePropertyArray from './ConfigNodePropertyArray';
import ConfigNodePropertyBoolean from './ConfigNodePropertyBoolean';
import ConfigNodePropertyInteger from './ConfigNodePropertyInteger';
import ConfigNodePropertyString from './ConfigNodePropertyString';

/**
 * The OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties model module.
 * @module model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
 * @version 1.0.0
 */
class OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties {
    /**
     * Constructs a new <code>OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties</code>.
     * @alias module:model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties
     */
    constructor() { 
        
        OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties} obj Optional instance to populate.
     * @return {module:model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties} The populated <code>OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();

            if (data.hasOwnProperty('resource.resolver.searchpath')) {
                obj['resource.resolver.searchpath'] = ConfigNodePropertyArray.constructFromObject(data['resource.resolver.searchpath']);
            }
            if (data.hasOwnProperty('resource.resolver.manglenamespaces')) {
                obj['resource.resolver.manglenamespaces'] = ConfigNodePropertyBoolean.constructFromObject(data['resource.resolver.manglenamespaces']);
            }
            if (data.hasOwnProperty('resource.resolver.allowDirect')) {
                obj['resource.resolver.allowDirect'] = ConfigNodePropertyBoolean.constructFromObject(data['resource.resolver.allowDirect']);
            }
            if (data.hasOwnProperty('resource.resolver.required.providers')) {
                obj['resource.resolver.required.providers'] = ConfigNodePropertyArray.constructFromObject(data['resource.resolver.required.providers']);
            }
            if (data.hasOwnProperty('resource.resolver.required.providernames')) {
                obj['resource.resolver.required.providernames'] = ConfigNodePropertyArray.constructFromObject(data['resource.resolver.required.providernames']);
            }
            if (data.hasOwnProperty('resource.resolver.virtual')) {
                obj['resource.resolver.virtual'] = ConfigNodePropertyArray.constructFromObject(data['resource.resolver.virtual']);
            }
            if (data.hasOwnProperty('resource.resolver.mapping')) {
                obj['resource.resolver.mapping'] = ConfigNodePropertyArray.constructFromObject(data['resource.resolver.mapping']);
            }
            if (data.hasOwnProperty('resource.resolver.map.location')) {
                obj['resource.resolver.map.location'] = ConfigNodePropertyString.constructFromObject(data['resource.resolver.map.location']);
            }
            if (data.hasOwnProperty('resource.resolver.map.observation')) {
                obj['resource.resolver.map.observation'] = ConfigNodePropertyArray.constructFromObject(data['resource.resolver.map.observation']);
            }
            if (data.hasOwnProperty('resource.resolver.default.vanity.redirect.status')) {
                obj['resource.resolver.default.vanity.redirect.status'] = ConfigNodePropertyInteger.constructFromObject(data['resource.resolver.default.vanity.redirect.status']);
            }
            if (data.hasOwnProperty('resource.resolver.enable.vanitypath')) {
                obj['resource.resolver.enable.vanitypath'] = ConfigNodePropertyBoolean.constructFromObject(data['resource.resolver.enable.vanitypath']);
            }
            if (data.hasOwnProperty('resource.resolver.vanitypath.maxEntries')) {
                obj['resource.resolver.vanitypath.maxEntries'] = ConfigNodePropertyInteger.constructFromObject(data['resource.resolver.vanitypath.maxEntries']);
            }
            if (data.hasOwnProperty('resource.resolver.vanitypath.maxEntries.startup')) {
                obj['resource.resolver.vanitypath.maxEntries.startup'] = ConfigNodePropertyBoolean.constructFromObject(data['resource.resolver.vanitypath.maxEntries.startup']);
            }
            if (data.hasOwnProperty('resource.resolver.vanitypath.bloomfilter.maxBytes')) {
                obj['resource.resolver.vanitypath.bloomfilter.maxBytes'] = ConfigNodePropertyInteger.constructFromObject(data['resource.resolver.vanitypath.bloomfilter.maxBytes']);
            }
            if (data.hasOwnProperty('resource.resolver.optimize.alias.resolution')) {
                obj['resource.resolver.optimize.alias.resolution'] = ConfigNodePropertyBoolean.constructFromObject(data['resource.resolver.optimize.alias.resolution']);
            }
            if (data.hasOwnProperty('resource.resolver.vanitypath.whitelist')) {
                obj['resource.resolver.vanitypath.whitelist'] = ConfigNodePropertyArray.constructFromObject(data['resource.resolver.vanitypath.whitelist']);
            }
            if (data.hasOwnProperty('resource.resolver.vanitypath.blacklist')) {
                obj['resource.resolver.vanitypath.blacklist'] = ConfigNodePropertyArray.constructFromObject(data['resource.resolver.vanitypath.blacklist']);
            }
            if (data.hasOwnProperty('resource.resolver.vanity.precedence')) {
                obj['resource.resolver.vanity.precedence'] = ConfigNodePropertyBoolean.constructFromObject(data['resource.resolver.vanity.precedence']);
            }
            if (data.hasOwnProperty('resource.resolver.providerhandling.paranoid')) {
                obj['resource.resolver.providerhandling.paranoid'] = ConfigNodePropertyBoolean.constructFromObject(data['resource.resolver.providerhandling.paranoid']);
            }
            if (data.hasOwnProperty('resource.resolver.log.closing')) {
                obj['resource.resolver.log.closing'] = ConfigNodePropertyBoolean.constructFromObject(data['resource.resolver.log.closing']);
            }
            if (data.hasOwnProperty('resource.resolver.log.unclosed')) {
                obj['resource.resolver.log.unclosed'] = ConfigNodePropertyBoolean.constructFromObject(data['resource.resolver.log.unclosed']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ConfigNodePropertyArray} resource.resolver.searchpath
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.searchpath'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyBoolean} resource.resolver.manglenamespaces
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.manglenamespaces'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyBoolean} resource.resolver.allowDirect
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.allowDirect'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyArray} resource.resolver.required.providers
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.required.providers'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyArray} resource.resolver.required.providernames
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.required.providernames'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyArray} resource.resolver.virtual
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.virtual'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyArray} resource.resolver.mapping
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.mapping'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyString} resource.resolver.map.location
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.map.location'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyArray} resource.resolver.map.observation
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.map.observation'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyInteger} resource.resolver.default.vanity.redirect.status
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.default.vanity.redirect.status'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyBoolean} resource.resolver.enable.vanitypath
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.enable.vanitypath'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyInteger} resource.resolver.vanitypath.maxEntries
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.vanitypath.maxEntries'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyBoolean} resource.resolver.vanitypath.maxEntries.startup
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.vanitypath.maxEntries.startup'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyInteger} resource.resolver.vanitypath.bloomfilter.maxBytes
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.vanitypath.bloomfilter.maxBytes'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyBoolean} resource.resolver.optimize.alias.resolution
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.optimize.alias.resolution'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyArray} resource.resolver.vanitypath.whitelist
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.vanitypath.whitelist'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyArray} resource.resolver.vanitypath.blacklist
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.vanitypath.blacklist'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyBoolean} resource.resolver.vanity.precedence
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.vanity.precedence'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyBoolean} resource.resolver.providerhandling.paranoid
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.providerhandling.paranoid'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyBoolean} resource.resolver.log.closing
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.log.closing'] = undefined;

/**
 * @member {module:model/ConfigNodePropertyBoolean} resource.resolver.log.unclosed
 */
OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.prototype['resource.resolver.log.unclosed'] = undefined;






export default OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties;

