/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo from '../model/AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo';
import AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo from '../model/AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo';
import AnalyticsComponentQueryCacheServiceInfo from '../model/AnalyticsComponentQueryCacheServiceInfo';
import ApacheSlingHealthCheckResultHTMLSerializerInfo from '../model/ApacheSlingHealthCheckResultHTMLSerializerInfo';
import ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo from '../model/ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo';
import ComAdobeAemTransactionCoreImplTransactionRecorderInfo from '../model/ComAdobeAemTransactionCoreImplTransactionRecorderInfo';
import ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo from '../model/ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo';
import ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo from '../model/ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo';
import ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo from '../model/ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo';
import ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo from '../model/ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo';
import ComAdobeCqAccountApiAccountManagementServiceInfo from '../model/ComAdobeCqAccountApiAccountManagementServiceInfo';
import ComAdobeCqAccountImplAccountManagementServletInfo from '../model/ComAdobeCqAccountImplAccountManagementServletInfo';
import ComAdobeCqAddressImplLocationLocationListServletInfo from '../model/ComAdobeCqAddressImplLocationLocationListServletInfo';
import ComAdobeCqAuditPurgeDamInfo from '../model/ComAdobeCqAuditPurgeDamInfo';
import ComAdobeCqAuditPurgePagesInfo from '../model/ComAdobeCqAuditPurgePagesInfo';
import ComAdobeCqAuditPurgeReplicationInfo from '../model/ComAdobeCqAuditPurgeReplicationInfo';
import ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo from '../model/ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo';
import ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo from '../model/ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo';
import ComAdobeCqCdnRewriterImplCDNRewriterInfo from '../model/ComAdobeCqCdnRewriterImplCDNRewriterInfo';
import ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo from '../model/ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo';
import ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo from '../model/ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo';
import ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo from '../model/ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo';
import ComAdobeCqCommerceImplAssetStaticImageHandlerInfo from '../model/ComAdobeCqCommerceImplAssetStaticImageHandlerInfo';
import ComAdobeCqCommerceImplAssetVideoHandlerInfo from '../model/ComAdobeCqCommerceImplAssetVideoHandlerInfo';
import ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo from '../model/ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo';
import ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo from '../model/ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo';
import ComAdobeCqCommercePimImplPageEventListenerInfo from '../model/ComAdobeCqCommercePimImplPageEventListenerInfo';
import ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo from '../model/ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo';
import ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo from '../model/ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo';
import ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo from '../model/ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo';
import ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo from '../model/ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo';
import ComAdobeCqDamCfmImplComponentComponentConfigImplInfo from '../model/ComAdobeCqDamCfmImplComponentComponentConfigImplInfo';
import ComAdobeCqDamCfmImplConfFeatureConfigImplInfo from '../model/ComAdobeCqDamCfmImplConfFeatureConfigImplInfo';
import ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo from '../model/ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo';
import ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo from '../model/ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo';
import ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo from '../model/ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo';
import ComAdobeCqDamDmProcessImagePTiffManagerImplInfo from '../model/ComAdobeCqDamDmProcessImagePTiffManagerImplInfo';
import ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo from '../model/ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo';
import ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo from '../model/ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo';
import ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo from '../model/ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo';
import ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo from '../model/ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo';
import ComAdobeCqDamS7imagingImplIsImageServerComponentInfo from '../model/ComAdobeCqDamS7imagingImplIsImageServerComponentInfo';
import ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo from '../model/ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo';
import ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo from '../model/ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo';
import ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo from '../model/ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo';
import ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo from '../model/ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo';
import ComAdobeCqDeserfwImplDeserializationFirewallImplInfo from '../model/ComAdobeCqDeserfwImplDeserializationFirewallImplInfo';
import ComAdobeCqDtmImplServiceDTMWebServiceImplInfo from '../model/ComAdobeCqDtmImplServiceDTMWebServiceImplInfo';
import ComAdobeCqDtmImplServletsDTMDeployHookServletInfo from '../model/ComAdobeCqDtmImplServletsDTMDeployHookServletInfo';
import ComAdobeCqDtmReactorImplServiceWebServiceImplInfo from '../model/ComAdobeCqDtmReactorImplServiceWebServiceImplInfo';
import ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo from '../model/ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo';
import ComAdobeCqHcContentPackagesHealthCheckInfo from '../model/ComAdobeCqHcContentPackagesHealthCheckInfo';
import ComAdobeCqHistoryImplHistoryRequestFilterInfo from '../model/ComAdobeCqHistoryImplHistoryRequestFilterInfo';
import ComAdobeCqHistoryImplHistoryServiceImplInfo from '../model/ComAdobeCqHistoryImplHistoryServiceImplInfo';
import ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo from '../model/ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo';
import ComAdobeCqProjectsImplServletProjectImageServletInfo from '../model/ComAdobeCqProjectsImplServletProjectImageServletInfo';
import ComAdobeCqProjectsPurgeSchedulerInfo from '../model/ComAdobeCqProjectsPurgeSchedulerInfo';
import ComAdobeCqScheduledExporterImplScheduledExporterImplInfo from '../model/ComAdobeCqScheduledExporterImplScheduledExporterImplInfo';
import ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo from '../model/ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo';
import ComAdobeCqScreensDeviceImplDeviceServiceInfo from '../model/ComAdobeCqScreensDeviceImplDeviceServiceInfo';
import ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo from '../model/ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo';
import ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo from '../model/ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo';
import ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo from '../model/ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo';
import ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo from '../model/ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo';
import ComAdobeCqScreensImplScreensChannelPostProcessorInfo from '../model/ComAdobeCqScreensImplScreensChannelPostProcessorInfo';
import ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo from '../model/ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo';
import ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo from '../model/ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo';
import ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo from '../model/ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo';
import ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo from '../model/ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo';
import ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo from '../model/ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo';
import ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo from '../model/ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo';
import ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo from '../model/ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo';
import ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo from '../model/ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo';
import ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo from '../model/ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo';
import ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo from '../model/ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo';
import ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo from '../model/ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo';
import ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo from '../model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo';
import ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo from '../model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo';
import ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo from '../model/ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo';
import ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo from '../model/ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo';
import ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo from '../model/ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo';
import ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo from '../model/ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo';
import ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo from '../model/ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo';
import ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo from '../model/ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo';
import ComAdobeCqSocialCalendarServletsTimeZoneServletInfo from '../model/ComAdobeCqSocialCalendarServletsTimeZoneServletInfo';
import ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo from '../model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo';
import ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo from '../model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo';
import ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo from '../model/ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo';
import ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo from '../model/ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo';
import ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo from '../model/ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo';
import ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo from '../model/ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo';
import ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo';
import ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo';
import ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo';
import ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo';
import ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo';
import ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo';
import ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo';
import ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo';
import ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo';
import ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo';
import ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo';
import ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo';
import ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo from '../model/ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo';
import ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo from '../model/ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo';
import ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo from '../model/ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo';
import ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo from '../model/ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo';
import ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo from '../model/ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo';
import ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo from '../model/ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo';
import ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo from '../model/ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo';
import ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo from '../model/ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo';
import ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo from '../model/ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo';
import ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo from '../model/ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo';
import ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo from '../model/ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo';
import ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo from '../model/ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo';
import ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo from '../model/ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo';
import ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo from '../model/ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo';
import ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo from '../model/ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo';
import ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo from '../model/ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo';
import ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo from '../model/ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo';
import ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo from '../model/ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo';
import ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo from '../model/ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo';
import ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo from '../model/ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo';
import ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo from '../model/ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo';
import ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo from '../model/ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo';
import ComAdobeCqSocialGroupImplGroupServiceImplInfo from '../model/ComAdobeCqSocialGroupImplGroupServiceImplInfo';
import ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo from '../model/ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo';
import ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo from '../model/ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo';
import ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo from '../model/ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo';
import ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo from '../model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo';
import ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo from '../model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo';
import ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo from '../model/ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo';
import ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo from '../model/ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo';
import ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo from '../model/ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo';
import ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo from '../model/ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo';
import ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo from '../model/ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo';
import ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo from '../model/ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo';
import ComAdobeCqSocialNotificationsImplMentionsRouterInfo from '../model/ComAdobeCqSocialNotificationsImplMentionsRouterInfo';
import ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo from '../model/ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo';
import ComAdobeCqSocialNotificationsImplNotificationsRouterInfo from '../model/ComAdobeCqSocialNotificationsImplNotificationsRouterInfo';
import ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo from '../model/ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo';
import ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo from '../model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo';
import ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo from '../model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo';
import ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo from '../model/ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo';
import ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo from '../model/ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo';
import ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo from '../model/ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo';
import ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo from '../model/ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo';
import ComAdobeCqSocialScoringImplScoringEventListenerInfo from '../model/ComAdobeCqSocialScoringImplScoringEventListenerInfo';
import ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo from '../model/ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo';
import ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo from '../model/ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo';
import ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo from '../model/ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo';
import ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo from '../model/ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo';
import ComAdobeCqSocialSrpImplSocialSolrConnectorInfo from '../model/ComAdobeCqSocialSrpImplSocialSolrConnectorInfo';
import ComAdobeCqSocialSyncImplDiffChangesObserverInfo from '../model/ComAdobeCqSocialSyncImplDiffChangesObserverInfo';
import ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo from '../model/ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo';
import ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo from '../model/ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo';
import ComAdobeCqSocialSyncImplUserSyncListenerImplInfo from '../model/ComAdobeCqSocialSyncImplUserSyncListenerImplInfo';
import ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo from '../model/ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo';
import ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo from '../model/ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo';
import ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo from '../model/ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo';
import ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo from '../model/ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo';
import ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo from '../model/ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo';
import ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo from '../model/ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo';
import ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo from '../model/ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo';
import ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo from '../model/ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo';
import ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo from '../model/ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo';
import ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo from '../model/ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo';
import ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo from '../model/ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo';
import ComAdobeCqSocialUserImplTransportHttpToPublisherInfo from '../model/ComAdobeCqSocialUserImplTransportHttpToPublisherInfo';
import ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo from '../model/ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo';
import ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo from '../model/ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo';
import ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo from '../model/ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo';
import ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo from '../model/ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo';
import ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo from '../model/ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo';
import ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo from '../model/ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo';
import ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo from '../model/ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo';
import ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo from '../model/ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo';
import ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo from '../model/ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo';
import ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo from '../model/ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo';
import ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo from '../model/ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo';
import ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo from '../model/ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo';
import ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo from '../model/ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo';
import ComAdobeFormsCommonServiceImplDefaultDataProviderInfo from '../model/ComAdobeFormsCommonServiceImplDefaultDataProviderInfo';
import ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo from '../model/ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo';
import ComAdobeFormsCommonServletTempCleanUpTaskInfo from '../model/ComAdobeFormsCommonServletTempCleanUpTaskInfo';
import ComAdobeGraniteAcpPlatformPlatformServletInfo from '../model/ComAdobeGraniteAcpPlatformPlatformServletInfo';
import ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo from '../model/ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo';
import ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo from '../model/ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo';
import ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo from '../model/ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo';
import ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo from '../model/ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo';
import ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo from '../model/ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo';
import ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo from '../model/ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo';
import ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo from '../model/ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo';
import ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo from '../model/ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo';
import ComAdobeGraniteAuthImsImplIMSProviderImplInfo from '../model/ComAdobeGraniteAuthImsImplIMSProviderImplInfo';
import ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo from '../model/ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo';
import ComAdobeGraniteAuthImsInfo from '../model/ComAdobeGraniteAuthImsInfo';
import ComAdobeGraniteAuthOauthAccesstokenProviderInfo from '../model/ComAdobeGraniteAuthOauthAccesstokenProviderInfo';
import ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo from '../model/ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo';
import ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo from '../model/ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo';
import ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo from '../model/ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo';
import ComAdobeGraniteAuthOauthImplGithubProviderImplInfo from '../model/ComAdobeGraniteAuthOauthImplGithubProviderImplInfo';
import ComAdobeGraniteAuthOauthImplGraniteProviderInfo from '../model/ComAdobeGraniteAuthOauthImplGraniteProviderInfo';
import ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo from '../model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo';
import ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo from '../model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo';
import ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo from '../model/ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo';
import ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo from '../model/ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo';
import ComAdobeGraniteAuthOauthProviderInfo from '../model/ComAdobeGraniteAuthOauthProviderInfo';
import ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo from '../model/ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo';
import ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo from '../model/ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo';
import ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo from '../model/ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo';
import ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo';
import ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo';
import ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo';
import ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo';
import ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo';
import ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo';
import ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo';
import ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo';
import ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo';
import ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo from '../model/ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo';
import ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo from '../model/ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo';
import ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo from '../model/ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo';
import ComAdobeGraniteCompatrouterImplRoutingConfigInfo from '../model/ComAdobeGraniteCompatrouterImplRoutingConfigInfo';
import ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo from '../model/ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo';
import ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo from '../model/ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo';
import ComAdobeGraniteContexthubImplContextHubImplInfo from '../model/ComAdobeGraniteContexthubImplContextHubImplInfo';
import ComAdobeGraniteCorsImplCORSPolicyImplInfo from '../model/ComAdobeGraniteCorsImplCORSPolicyImplInfo';
import ComAdobeGraniteCsrfImplCSRFFilterInfo from '../model/ComAdobeGraniteCsrfImplCSRFFilterInfo';
import ComAdobeGraniteCsrfImplCSRFServletInfo from '../model/ComAdobeGraniteCsrfImplCSRFServletInfo';
import ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo from '../model/ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo';
import ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo from '../model/ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo';
import ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo from '../model/ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo';
import ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo from '../model/ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo';
import ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo from '../model/ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo';
import ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo from '../model/ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo';
import ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo from '../model/ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo';
import ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo from '../model/ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo';
import ComAdobeGraniteFragsImplRandomFeatureInfo from '../model/ComAdobeGraniteFragsImplRandomFeatureInfo';
import ComAdobeGraniteHttpcacheFileFileCacheStoreInfo from '../model/ComAdobeGraniteHttpcacheFileFileCacheStoreInfo';
import ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo from '../model/ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo';
import ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo from '../model/ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo';
import ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo from '../model/ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo';
import ComAdobeGraniteInfocollectorInfoCollectorInfo from '../model/ComAdobeGraniteInfocollectorInfoCollectorInfo';
import ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo from '../model/ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo';
import ComAdobeGraniteLicenseImplLicenseCheckFilterInfo from '../model/ComAdobeGraniteLicenseImplLicenseCheckFilterInfo';
import ComAdobeGraniteLoggingImplLogAnalyserImplInfo from '../model/ComAdobeGraniteLoggingImplLogAnalyserImplInfo';
import ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo from '../model/ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo';
import ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo from '../model/ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo';
import ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo from '../model/ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo';
import ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo from '../model/ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo';
import ComAdobeGraniteMonitoringImplScriptConfigImplInfo from '../model/ComAdobeGraniteMonitoringImplScriptConfigImplInfo';
import ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo from '../model/ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo';
import ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo from '../model/ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo';
import ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo from '../model/ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo';
import ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo from '../model/ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo';
import ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo from '../model/ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo';
import ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo from '../model/ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo';
import ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo from '../model/ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo';
import ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo from '../model/ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo';
import ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo from '../model/ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo';
import ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo from '../model/ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo';
import ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo from '../model/ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo';
import ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo from '../model/ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo';
import ComAdobeGraniteOptoutImplOptOutServiceImplInfo from '../model/ComAdobeGraniteOptoutImplOptOutServiceImplInfo';
import ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo from '../model/ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo';
import ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo from '../model/ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo';
import ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo from '../model/ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo';
import ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo from '../model/ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo';
import ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo from '../model/ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo';
import ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo from '../model/ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo';
import ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo from '../model/ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo';
import ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo from '../model/ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo';
import ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo from '../model/ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo';
import ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo from '../model/ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo';
import ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo from '../model/ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo';
import ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo from '../model/ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo';
import ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo from '../model/ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo';
import ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo from '../model/ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo';
import ComAdobeGraniteRepositoryImplCommitStatsConfigInfo from '../model/ComAdobeGraniteRepositoryImplCommitStatsConfigInfo';
import ComAdobeGraniteRepositoryServiceUserConfigurationInfo from '../model/ComAdobeGraniteRepositoryServiceUserConfigurationInfo';
import ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo from '../model/ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo';
import ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo from '../model/ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo';
import ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo from '../model/ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo';
import ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo from '../model/ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo';
import ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo from '../model/ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo';
import ComAdobeGraniteRestImplServletDefaultGETServletInfo from '../model/ComAdobeGraniteRestImplServletDefaultGETServletInfo';
import ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo from '../model/ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo';
import ComAdobeGraniteSecurityUserUserPropertiesServiceInfo from '../model/ComAdobeGraniteSecurityUserUserPropertiesServiceInfo';
import ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo from '../model/ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo';
import ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo from '../model/ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo';
import ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo from '../model/ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo';
import ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo from '../model/ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo';
import ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo from '../model/ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo';
import ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo from '../model/ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo';
import ComAdobeGraniteThreaddumpThreadDumpCollectorInfo from '../model/ComAdobeGraniteThreaddumpThreadDumpCollectorInfo';
import ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo from '../model/ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo';
import ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo from '../model/ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo';
import ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo from '../model/ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo';
import ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo from '../model/ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo';
import ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo from '../model/ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo';
import ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo from '../model/ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo';
import ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo from '../model/ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo';
import ComAdobeGraniteWorkflowCoreJobJobHandlerInfo from '../model/ComAdobeGraniteWorkflowCoreJobJobHandlerInfo';
import ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo from '../model/ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo';
import ComAdobeGraniteWorkflowCorePayloadMapCacheInfo from '../model/ComAdobeGraniteWorkflowCorePayloadMapCacheInfo';
import ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo from '../model/ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo';
import ComAdobeGraniteWorkflowCoreWorkflowConfigInfo from '../model/ComAdobeGraniteWorkflowCoreWorkflowConfigInfo';
import ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo from '../model/ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo';
import ComAdobeGraniteWorkflowPurgeSchedulerInfo from '../model/ComAdobeGraniteWorkflowPurgeSchedulerInfo';
import ComAdobeOctopusNcommBootstrapInfo from '../model/ComAdobeOctopusNcommBootstrapInfo';
import ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo from '../model/ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo';
import ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo from '../model/ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo';
import ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo from '../model/ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo';
import ComDayCommonsHttpclientInfo from '../model/ComDayCommonsHttpclientInfo';
import ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo from '../model/ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo';
import ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo from '../model/ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo';
import ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo from '../model/ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo';
import ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo from '../model/ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo';
import ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo from '../model/ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo';
import ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo from '../model/ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo';
import ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo from '../model/ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo';
import ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo from '../model/ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo';
import ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo from '../model/ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo';
import ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo from '../model/ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo';
import ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo from '../model/ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo';
import ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo from '../model/ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo';
import ComDayCqAuthImplCugCugSupportImplInfo from '../model/ComDayCqAuthImplCugCugSupportImplInfo';
import ComDayCqAuthImplLoginSelectorHandlerInfo from '../model/ComDayCqAuthImplLoginSelectorHandlerInfo';
import ComDayCqCommonsImplExternalizerImplInfo from '../model/ComDayCqCommonsImplExternalizerImplInfo';
import ComDayCqCommonsServletsRootMappingServletInfo from '../model/ComDayCqCommonsServletsRootMappingServletInfo';
import ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo from '../model/ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo';
import ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo from '../model/ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo';
import ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo from '../model/ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo';
import ComDayCqContentsyncImplContentSyncManagerImplInfo from '../model/ComDayCqContentsyncImplContentSyncManagerImplInfo';
import ComDayCqDamCommonsHandlerStandardImageHandlerInfo from '../model/ComDayCqDamCommonsHandlerStandardImageHandlerInfo';
import ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo from '../model/ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo';
import ComDayCqDamCommonsUtilImplAssetCacheImplInfo from '../model/ComDayCqDamCommonsUtilImplAssetCacheImplInfo';
import ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo from '../model/ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo';
import ComDayCqDamCoreImplAssetMoveListenerInfo from '../model/ComDayCqDamCoreImplAssetMoveListenerInfo';
import ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo from '../model/ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo';
import ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo from '../model/ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo';
import ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo from '../model/ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo';
import ComDayCqDamCoreImplDamChangeEventListenerInfo from '../model/ComDayCqDamCoreImplDamChangeEventListenerInfo';
import ComDayCqDamCoreImplDamEventPurgeServiceInfo from '../model/ComDayCqDamCoreImplDamEventPurgeServiceInfo';
import ComDayCqDamCoreImplDamEventRecorderImplInfo from '../model/ComDayCqDamCoreImplDamEventRecorderImplInfo';
import ComDayCqDamCoreImplEventDamEventAuditListenerInfo from '../model/ComDayCqDamCoreImplEventDamEventAuditListenerInfo';
import ComDayCqDamCoreImplExpiryNotificationJobImplInfo from '../model/ComDayCqDamCoreImplExpiryNotificationJobImplInfo';
import ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo from '../model/ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo';
import ComDayCqDamCoreImplGfxCommonsGfxRendererInfo from '../model/ComDayCqDamCoreImplGfxCommonsGfxRendererInfo';
import ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo from '../model/ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo';
import ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo from '../model/ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo';
import ComDayCqDamCoreImplHandlerJpegHandlerInfo from '../model/ComDayCqDamCoreImplHandlerJpegHandlerInfo';
import ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo from '../model/ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo';
import ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo from '../model/ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo';
import ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo from '../model/ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo';
import ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo from '../model/ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo';
import ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo from '../model/ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo';
import ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo from '../model/ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo';
import ComDayCqDamCoreImplLightboxLightboxServletInfo from '../model/ComDayCqDamCoreImplLightboxLightboxServletInfo';
import ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo from '../model/ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo';
import ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo from '../model/ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo';
import ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo from '../model/ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo';
import ComDayCqDamCoreImplMissingMetadataNotificationJobInfo from '../model/ComDayCqDamCoreImplMissingMetadataNotificationJobInfo';
import ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo from '../model/ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo';
import ComDayCqDamCoreImplProcessTextExtractionProcessInfo from '../model/ComDayCqDamCoreImplProcessTextExtractionProcessInfo';
import ComDayCqDamCoreImplRenditionMakerImplInfo from '../model/ComDayCqDamCoreImplRenditionMakerImplInfo';
import ComDayCqDamCoreImplReportsReportExportServiceInfo from '../model/ComDayCqDamCoreImplReportsReportExportServiceInfo';
import ComDayCqDamCoreImplReportsReportPurgeServiceInfo from '../model/ComDayCqDamCoreImplReportsReportPurgeServiceInfo';
import ComDayCqDamCoreImplServletAssetDownloadServletInfo from '../model/ComDayCqDamCoreImplServletAssetDownloadServletInfo';
import ComDayCqDamCoreImplServletAssetStatusServletInfo from '../model/ComDayCqDamCoreImplServletAssetStatusServletInfo';
import ComDayCqDamCoreImplServletAssetXMPSearchServletInfo from '../model/ComDayCqDamCoreImplServletAssetXMPSearchServletInfo';
import ComDayCqDamCoreImplServletBatchMetadataServletInfo from '../model/ComDayCqDamCoreImplServletBatchMetadataServletInfo';
import ComDayCqDamCoreImplServletBinaryProviderServletInfo from '../model/ComDayCqDamCoreImplServletBinaryProviderServletInfo';
import ComDayCqDamCoreImplServletCollectionServletInfo from '../model/ComDayCqDamCoreImplServletCollectionServletInfo';
import ComDayCqDamCoreImplServletCollectionsServletInfo from '../model/ComDayCqDamCoreImplServletCollectionsServletInfo';
import ComDayCqDamCoreImplServletCompanionServletInfo from '../model/ComDayCqDamCoreImplServletCompanionServletInfo';
import ComDayCqDamCoreImplServletCreateAssetServletInfo from '../model/ComDayCqDamCoreImplServletCreateAssetServletInfo';
import ComDayCqDamCoreImplServletDamContentDispositionFilterInfo from '../model/ComDayCqDamCoreImplServletDamContentDispositionFilterInfo';
import ComDayCqDamCoreImplServletGuidLookupFilterInfo from '../model/ComDayCqDamCoreImplServletGuidLookupFilterInfo';
import ComDayCqDamCoreImplServletHealthCheckServletInfo from '../model/ComDayCqDamCoreImplServletHealthCheckServletInfo';
import ComDayCqDamCoreImplServletMetadataGetServletInfo from '../model/ComDayCqDamCoreImplServletMetadataGetServletInfo';
import ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo from '../model/ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo';
import ComDayCqDamCoreImplServletResourceCollectionServletInfo from '../model/ComDayCqDamCoreImplServletResourceCollectionServletInfo';
import ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo from '../model/ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo';
import ComDayCqDamCoreImplUnzipUnzipConfigInfo from '../model/ComDayCqDamCoreImplUnzipUnzipConfigInfo';
import ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo from '../model/ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo';
import ComDayCqDamCoreProcessExtractMetadataProcessInfo from '../model/ComDayCqDamCoreProcessExtractMetadataProcessInfo';
import ComDayCqDamCoreProcessMetadataProcessorProcessInfo from '../model/ComDayCqDamCoreProcessMetadataProcessorProcessInfo';
import ComDayCqDamHandlerFfmpegLocatorImplInfo from '../model/ComDayCqDamHandlerFfmpegLocatorImplInfo';
import ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo from '../model/ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo';
import ComDayCqDamHandlerStandardPdfPdfHandlerInfo from '../model/ComDayCqDamHandlerStandardPdfPdfHandlerInfo';
import ComDayCqDamHandlerStandardPsPostScriptHandlerInfo from '../model/ComDayCqDamHandlerStandardPsPostScriptHandlerInfo';
import ComDayCqDamHandlerStandardPsdPsdHandlerInfo from '../model/ComDayCqDamHandlerStandardPsdPsdHandlerInfo';
import ComDayCqDamIdsImplIDSJobProcessorInfo from '../model/ComDayCqDamIdsImplIDSJobProcessorInfo';
import ComDayCqDamIdsImplIDSPoolManagerImplInfo from '../model/ComDayCqDamIdsImplIDSPoolManagerImplInfo';
import ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo from '../model/ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo';
import ComDayCqDamInddImplServletSnippetCreationServletInfo from '../model/ComDayCqDamInddImplServletSnippetCreationServletInfo';
import ComDayCqDamInddProcessINDDMediaExtractProcessInfo from '../model/ComDayCqDamInddProcessINDDMediaExtractProcessInfo';
import ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo from '../model/ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo';
import ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo from '../model/ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo';
import ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo from '../model/ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo';
import ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo from '../model/ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo';
import ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo from '../model/ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo';
import ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo from '../model/ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo';
import ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo from '../model/ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo';
import ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo from '../model/ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo';
import ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo from '../model/ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo';
import ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo from '../model/ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo';
import ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo from '../model/ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo';
import ComDayCqDamScene7ImplScene7APIClientImplInfo from '../model/ComDayCqDamScene7ImplScene7APIClientImplInfo';
import ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo from '../model/ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo';
import ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo from '../model/ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo';
import ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo from '../model/ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo';
import ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo from '../model/ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo';
import ComDayCqDamScene7ImplScene7UploadServiceImplInfo from '../model/ComDayCqDamScene7ImplScene7UploadServiceImplInfo';
import ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo from '../model/ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo';
import ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo from '../model/ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo';
import ComDayCqDamVideoImplServletVideoTestServletInfo from '../model/ComDayCqDamVideoImplServletVideoTestServletInfo';
import ComDayCqExtwidgetServletsImageSpriteServletInfo from '../model/ComDayCqExtwidgetServletsImageSpriteServletInfo';
import ComDayCqImageInternalFontFontHelperInfo from '../model/ComDayCqImageInternalFontFontHelperInfo';
import ComDayCqJcrclustersupportClusterStartLevelControllerInfo from '../model/ComDayCqJcrclustersupportClusterStartLevelControllerInfo';
import ComDayCqMailerDefaultMailServiceInfo from '../model/ComDayCqMailerDefaultMailServiceInfo';
import ComDayCqMailerImplCqMailingServiceInfo from '../model/ComDayCqMailerImplCqMailingServiceInfo';
import ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo from '../model/ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo';
import ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo from '../model/ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo';
import ComDayCqMcmCampaignImplIntegrationConfigImplInfo from '../model/ComDayCqMcmCampaignImplIntegrationConfigImplInfo';
import ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo from '../model/ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo';
import ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo from '../model/ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo';
import ComDayCqMcmImplMCMConfigurationInfo from '../model/ComDayCqMcmImplMCMConfigurationInfo';
import ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo from '../model/ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo';
import ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo from '../model/ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo';
import ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo from '../model/ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo';
import ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo from '../model/ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo';
import ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo from '../model/ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo';
import ComDayCqNotificationImplNotificationServiceImplInfo from '../model/ComDayCqNotificationImplNotificationServiceImplInfo';
import ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo from '../model/ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo';
import ComDayCqPollingImporterImplManagedPollConfigImplInfo from '../model/ComDayCqPollingImporterImplManagedPollConfigImplInfo';
import ComDayCqPollingImporterImplManagedPollingImporterImplInfo from '../model/ComDayCqPollingImporterImplManagedPollingImporterImplInfo';
import ComDayCqPollingImporterImplPollingImporterImplInfo from '../model/ComDayCqPollingImporterImplPollingImporterImplInfo';
import ComDayCqReplicationAuditReplicationEventListenerInfo from '../model/ComDayCqReplicationAuditReplicationEventListenerInfo';
import ComDayCqReplicationContentStaticContentBuilderInfo from '../model/ComDayCqReplicationContentStaticContentBuilderInfo';
import ComDayCqReplicationImplAgentManagerImplInfo from '../model/ComDayCqReplicationImplAgentManagerImplInfo';
import ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo from '../model/ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo';
import ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo from '../model/ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo';
import ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo from '../model/ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo';
import ComDayCqReplicationImplReplicationReceiverImplInfo from '../model/ComDayCqReplicationImplReplicationReceiverImplInfo';
import ComDayCqReplicationImplReplicatorImplInfo from '../model/ComDayCqReplicationImplReplicatorImplInfo';
import ComDayCqReplicationImplReverseReplicatorInfo from '../model/ComDayCqReplicationImplReverseReplicatorInfo';
import ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo from '../model/ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo';
import ComDayCqReplicationImplTransportHttpInfo from '../model/ComDayCqReplicationImplTransportHttpInfo';
import ComDayCqReportingImplCacheCacheImplInfo from '../model/ComDayCqReportingImplCacheCacheImplInfo';
import ComDayCqReportingImplConfigServiceImplInfo from '../model/ComDayCqReportingImplConfigServiceImplInfo';
import ComDayCqReportingImplRLogAnalyzerInfo from '../model/ComDayCqReportingImplRLogAnalyzerInfo';
import ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo from '../model/ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo';
import ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo from '../model/ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo';
import ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo from '../model/ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo';
import ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo from '../model/ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo';
import ComDayCqRewriterProcessorImplHtmlParserFactoryInfo from '../model/ComDayCqRewriterProcessorImplHtmlParserFactoryInfo';
import ComDayCqSearchImplBuilderQueryBuilderImplInfo from '../model/ComDayCqSearchImplBuilderQueryBuilderImplInfo';
import ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo from '../model/ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo';
import ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo from '../model/ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo';
import ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo from '../model/ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo';
import ComDayCqSecurityACLSetupInfo from '../model/ComDayCqSecurityACLSetupInfo';
import ComDayCqStatisticsImplStatisticsServiceImplInfo from '../model/ComDayCqStatisticsImplStatisticsServiceImplInfo';
import ComDayCqTaggingImplJcrTagManagerFactoryImplInfo from '../model/ComDayCqTaggingImplJcrTagManagerFactoryImplInfo';
import ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo from '../model/ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo';
import ComDayCqTaggingImplTagGarbageCollectorInfo from '../model/ComDayCqTaggingImplTagGarbageCollectorInfo';
import ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo from '../model/ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo';
import ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo from '../model/ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo';
import ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo from '../model/ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo';
import ComDayCqWcmCoreImplCommandsWCMCommandServletInfo from '../model/ComDayCqWcmCoreImplCommandsWCMCommandServletInfo';
import ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo from '../model/ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo';
import ComDayCqWcmCoreImplEventPageEventAuditListenerInfo from '../model/ComDayCqWcmCoreImplEventPageEventAuditListenerInfo';
import ComDayCqWcmCoreImplEventPagePostProcessorInfo from '../model/ComDayCqWcmCoreImplEventPagePostProcessorInfo';
import ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo from '../model/ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo';
import ComDayCqWcmCoreImplEventTemplatePostProcessorInfo from '../model/ComDayCqWcmCoreImplEventTemplatePostProcessorInfo';
import ComDayCqWcmCoreImplLanguageManagerImplInfo from '../model/ComDayCqWcmCoreImplLanguageManagerImplInfo';
import ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo from '../model/ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo';
import ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo from '../model/ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo';
import ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo from '../model/ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo';
import ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo from '../model/ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo';
import ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo from '../model/ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo';
import ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo from '../model/ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo';
import ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo from '../model/ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo';
import ComDayCqWcmCoreImplServletsFindReplaceServletInfo from '../model/ComDayCqWcmCoreImplServletsFindReplaceServletInfo';
import ComDayCqWcmCoreImplServletsReferenceSearchServletInfo from '../model/ComDayCqWcmCoreImplServletsReferenceSearchServletInfo';
import ComDayCqWcmCoreImplServletsThumbnailServletInfo from '../model/ComDayCqWcmCoreImplServletsThumbnailServletInfo';
import ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo from '../model/ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo';
import ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo from '../model/ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo';
import ComDayCqWcmCoreImplVersionManagerImplInfo from '../model/ComDayCqWcmCoreImplVersionManagerImplInfo';
import ComDayCqWcmCoreImplVersionPurgeTaskInfo from '../model/ComDayCqWcmCoreImplVersionPurgeTaskInfo';
import ComDayCqWcmCoreImplWCMDebugFilterInfo from '../model/ComDayCqWcmCoreImplWCMDebugFilterInfo';
import ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo from '../model/ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo';
import ComDayCqWcmCoreImplWarpTimeWarpFilterInfo from '../model/ComDayCqWcmCoreImplWarpTimeWarpFilterInfo';
import ComDayCqWcmCoreMvtMVTStatisticsImplInfo from '../model/ComDayCqWcmCoreMvtMVTStatisticsImplInfo';
import ComDayCqWcmCoreStatsPageViewStatisticsImplInfo from '../model/ComDayCqWcmCoreStatsPageViewStatisticsImplInfo';
import ComDayCqWcmCoreWCMRequestFilterInfo from '../model/ComDayCqWcmCoreWCMRequestFilterInfo';
import ComDayCqWcmDesignimporterDesignPackageImporterInfo from '../model/ComDayCqWcmDesignimporterDesignPackageImporterInfo';
import ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo from '../model/ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo';
import ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo from '../model/ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo';
import ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo from '../model/ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo';
import ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo from '../model/ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo';
import ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo from '../model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo';
import ComDayCqWcmFoundationFormsImplFormChooserServletInfo from '../model/ComDayCqWcmFoundationFormsImplFormChooserServletInfo';
import ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo from '../model/ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo';
import ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo from '../model/ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo';
import ComDayCqWcmFoundationFormsImplMailServletInfo from '../model/ComDayCqWcmFoundationFormsImplMailServletInfo';
import ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo from '../model/ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo';
import ComDayCqWcmFoundationImplHTTPAuthHandlerInfo from '../model/ComDayCqWcmFoundationImplHTTPAuthHandlerInfo';
import ComDayCqWcmFoundationImplPageImpressionsTrackerInfo from '../model/ComDayCqWcmFoundationImplPageImpressionsTrackerInfo';
import ComDayCqWcmFoundationImplPageRedirectServletInfo from '../model/ComDayCqWcmFoundationImplPageRedirectServletInfo';
import ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo from '../model/ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo';
import ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo from '../model/ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo';
import ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo from '../model/ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo';
import ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo from '../model/ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo';
import ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo from '../model/ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo';
import ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo from '../model/ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo';
import ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo from '../model/ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo';
import ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo from '../model/ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo';
import ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo from '../model/ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo';
import ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo from '../model/ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo';
import ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo from '../model/ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo';
import ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo from '../model/ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo';
import ComDayCqWcmMsmImplRolloutManagerImplInfo from '../model/ComDayCqWcmMsmImplRolloutManagerImplInfo';
import ComDayCqWcmMsmImplServletsAuditLogServletInfo from '../model/ComDayCqWcmMsmImplServletsAuditLogServletInfo';
import ComDayCqWcmNotificationEmailImplEmailChannelInfo from '../model/ComDayCqWcmNotificationEmailImplEmailChannelInfo';
import ComDayCqWcmNotificationImplNotificationManagerImplInfo from '../model/ComDayCqWcmNotificationImplNotificationManagerImplInfo';
import ComDayCqWcmScriptingImplBVPManagerInfo from '../model/ComDayCqWcmScriptingImplBVPManagerInfo';
import ComDayCqWcmUndoUndoConfigInfo from '../model/ComDayCqWcmUndoUndoConfigInfo';
import ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo from '../model/ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo';
import ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo from '../model/ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo';
import ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo from '../model/ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo';
import ComDayCqWidgetImplHtmlLibraryManagerImplInfo from '../model/ComDayCqWidgetImplHtmlLibraryManagerImplInfo';
import ComDayCqWidgetImplWidgetExtensionProviderImplInfo from '../model/ComDayCqWidgetImplWidgetExtensionProviderImplInfo';
import ComDayCqWorkflowImplEmailEMailNotificationServiceInfo from '../model/ComDayCqWorkflowImplEmailEMailNotificationServiceInfo';
import ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo from '../model/ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo';
import ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo from '../model/ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo';
import ComDayCrxSecurityTokenImplTokenCleanupTaskInfo from '../model/ComDayCrxSecurityTokenImplTokenCleanupTaskInfo';
import GuideLocalizationServiceInfo from '../model/GuideLocalizationServiceInfo';
import MessagingUserComponentFactoryInfo from '../model/MessagingUserComponentFactoryInfo';
import OrgApacheAriesJmxFrameworkStateConfigInfo from '../model/OrgApacheAriesJmxFrameworkStateConfigInfo';
import OrgApacheFelixEventadminImplEventAdminInfo from '../model/OrgApacheFelixEventadminImplEventAdminInfo';
import OrgApacheFelixHttpInfo from '../model/OrgApacheFelixHttpInfo';
import OrgApacheFelixHttpSslfilterSslFilterInfo from '../model/OrgApacheFelixHttpSslfilterSslFilterInfo';
import OrgApacheFelixJaasConfigurationFactoryInfo from '../model/OrgApacheFelixJaasConfigurationFactoryInfo';
import OrgApacheFelixJaasConfigurationSpiInfo from '../model/OrgApacheFelixJaasConfigurationSpiInfo';
import OrgApacheFelixScrScrServiceInfo from '../model/OrgApacheFelixScrScrServiceInfo';
import OrgApacheFelixSystemreadyImplComponentsCheckInfo from '../model/OrgApacheFelixSystemreadyImplComponentsCheckInfo';
import OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo from '../model/OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo';
import OrgApacheFelixSystemreadyImplServicesCheckInfo from '../model/OrgApacheFelixSystemreadyImplServicesCheckInfo';
import OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo from '../model/OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo';
import OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo from '../model/OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo';
import OrgApacheFelixSystemreadySystemReadyMonitorInfo from '../model/OrgApacheFelixSystemreadySystemReadyMonitorInfo';
import OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo from '../model/OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo';
import OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo from '../model/OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo';
import OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo from '../model/OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo';
import OrgApacheHttpProxyconfiguratorInfo from '../model/OrgApacheHttpProxyconfiguratorInfo';
import OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo from '../model/OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo';
import OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo from '../model/OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo';
import OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo from '../model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo';
import OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo from '../model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo';
import OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo from '../model/OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo';
import OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo from '../model/OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo';
import OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo from '../model/OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo';
import OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo from '../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo';
import OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo from '../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo';
import OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo from '../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo';
import OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo from '../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo';
import OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo from '../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo';
import OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo from '../model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo';
import OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo from '../model/OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo';
import OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo from '../model/OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo';
import OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo from '../model/OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo';
import OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo from '../model/OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo';
import OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo from '../model/OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo';
import OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo from '../model/OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo';
import OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo from '../model/OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo';
import OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo from '../model/OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo';
import OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo from '../model/OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo';
import OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo from '../model/OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo';
import OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo from '../model/OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo';
import OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo from '../model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo';
import OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo from '../model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo';
import OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo from '../model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo';
import OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo from '../model/OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo';
import OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo from '../model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo';
import OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo from '../model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo';
import OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo from '../model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo';
import OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo from '../model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo';
import OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo from '../model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo';
import OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo from '../model/OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo';
import OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo from '../model/OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo';
import OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo from '../model/OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo';
import OrgApacheSlingAuthCoreImplLogoutServletInfo from '../model/OrgApacheSlingAuthCoreImplLogoutServletInfo';
import OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo from '../model/OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo';
import OrgApacheSlingCaconfigImplConfigurationResolverImplInfo from '../model/OrgApacheSlingCaconfigImplConfigurationResolverImplInfo';
import OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo from '../model/OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo';
import OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo from '../model/OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo';
import OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo from '../model/OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo';
import OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo from '../model/OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo';
import OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo from '../model/OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo';
import OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo from '../model/OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo';
import OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo from '../model/OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo';
import OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo from '../model/OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo';
import OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo from '../model/OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo';
import OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo from '../model/OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo';
import OrgApacheSlingCommonsLogLogManagerInfo from '../model/OrgApacheSlingCommonsLogLogManagerInfo';
import OrgApacheSlingCommonsMetricsInternalLogReporterInfo from '../model/OrgApacheSlingCommonsMetricsInternalLogReporterInfo';
import OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo from '../model/OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo';
import OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo from '../model/OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo';
import OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo from '../model/OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo';
import OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo from '../model/OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo';
import OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo from '../model/OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo';
import OrgApacheSlingDatasourceDataSourceFactoryInfo from '../model/OrgApacheSlingDatasourceDataSourceFactoryInfo';
import OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo from '../model/OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo';
import OrgApacheSlingDiscoveryOakConfigInfo from '../model/OrgApacheSlingDiscoveryOakConfigInfo';
import OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo from '../model/OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo';
import OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo from '../model/OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo';
import OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo from '../model/OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo';
import OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo from '../model/OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo';
import OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo from '../model/OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo';
import OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo from '../model/OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo';
import OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo from '../model/OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo';
import OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo from '../model/OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo';
import OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo from '../model/OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo';
import OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo from '../model/OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo';
import OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo from '../model/OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo';
import OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo from '../model/OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo';
import OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo from '../model/OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo';
import OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo from '../model/OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo';
import OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo from '../model/OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo';
import OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo from '../model/OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo';
import OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo from '../model/OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo';
import OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo from '../model/OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo';
import OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo from '../model/OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo';
import OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo from '../model/OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo';
import OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo from '../model/OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo';
import OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo from '../model/OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo';
import OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo from '../model/OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo';
import OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo from '../model/OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo';
import OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo from '../model/OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo';
import OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo from '../model/OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo';
import OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo from '../model/OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo';
import OrgApacheSlingEngineImplLogRequestLoggerInfo from '../model/OrgApacheSlingEngineImplLogRequestLoggerInfo';
import OrgApacheSlingEngineImplLogRequestLoggerServiceInfo from '../model/OrgApacheSlingEngineImplLogRequestLoggerServiceInfo';
import OrgApacheSlingEngineImplSlingMainServletInfo from '../model/OrgApacheSlingEngineImplSlingMainServletInfo';
import OrgApacheSlingEngineParametersInfo from '../model/OrgApacheSlingEngineParametersInfo';
import OrgApacheSlingEventImplEventingThreadPoolInfo from '../model/OrgApacheSlingEventImplEventingThreadPoolInfo';
import OrgApacheSlingEventImplJobsDefaultJobManagerInfo from '../model/OrgApacheSlingEventImplJobsDefaultJobManagerInfo';
import OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo from '../model/OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo';
import OrgApacheSlingEventImplJobsJobConsumerManagerInfo from '../model/OrgApacheSlingEventImplJobsJobConsumerManagerInfo';
import OrgApacheSlingEventJobsQueueConfigurationInfo from '../model/OrgApacheSlingEventJobsQueueConfigurationInfo';
import OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo from '../model/OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo';
import OrgApacheSlingFeatureflagsFeatureInfo from '../model/OrgApacheSlingFeatureflagsFeatureInfo';
import OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo from '../model/OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo';
import OrgApacheSlingHapiImplHApiUtilImplInfo from '../model/OrgApacheSlingHapiImplHApiUtilImplInfo';
import OrgApacheSlingHcCoreImplCompositeHealthCheckInfo from '../model/OrgApacheSlingHcCoreImplCompositeHealthCheckInfo';
import OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo from '../model/OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo';
import OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo from '../model/OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo';
import OrgApacheSlingHcCoreImplScriptableHealthCheckInfo from '../model/OrgApacheSlingHcCoreImplScriptableHealthCheckInfo';
import OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo from '../model/OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo';
import OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo from '../model/OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo';
import OrgApacheSlingI18nImplI18NFilterInfo from '../model/OrgApacheSlingI18nImplI18NFilterInfo';
import OrgApacheSlingI18nImplJcrResourceBundleProviderInfo from '../model/OrgApacheSlingI18nImplJcrResourceBundleProviderInfo';
import OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo from '../model/OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo';
import OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo from '../model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo';
import OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo from '../model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo';
import OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo from '../model/OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo';
import OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo from '../model/OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo';
import OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo from '../model/OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo';
import OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo from '../model/OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo';
import OrgApacheSlingJcrRepoinitRepositoryInitializerInfo from '../model/OrgApacheSlingJcrRepoinitRepositoryInitializerInfo';
import OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo from '../model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo';
import OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo from '../model/OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo';
import OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo from '../model/OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo';
import OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo from '../model/OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo';
import OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo from '../model/OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo';
import OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo from '../model/OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo';
import OrgApacheSlingJmxProviderImplJMXResourceProviderInfo from '../model/OrgApacheSlingJmxProviderImplJMXResourceProviderInfo';
import OrgApacheSlingModelsImplModelAdapterFactoryInfo from '../model/OrgApacheSlingModelsImplModelAdapterFactoryInfo';
import OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo from '../model/OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo';
import OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo from '../model/OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo';
import OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo from '../model/OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo';
import OrgApacheSlingResourcemergerPickerOverridingInfo from '../model/OrgApacheSlingResourcemergerPickerOverridingInfo';
import OrgApacheSlingScriptingCoreImplScriptCacheImplInfo from '../model/OrgApacheSlingScriptingCoreImplScriptCacheImplInfo';
import OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo from '../model/OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo';
import OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo from '../model/OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo';
import OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo from '../model/OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo';
import OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo from '../model/OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo';
import OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo from '../model/OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo';
import OrgApacheSlingSecurityImplContentDispositionFilterInfo from '../model/OrgApacheSlingSecurityImplContentDispositionFilterInfo';
import OrgApacheSlingSecurityImplReferrerFilterInfo from '../model/OrgApacheSlingSecurityImplReferrerFilterInfo';
import OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo from '../model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo';
import OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo from '../model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo';
import OrgApacheSlingServletsGetDefaultGetServletInfo from '../model/OrgApacheSlingServletsGetDefaultGetServletInfo';
import OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo from '../model/OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo';
import OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo from '../model/OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo';
import OrgApacheSlingServletsPostImplSlingPostServletInfo from '../model/OrgApacheSlingServletsPostImplSlingPostServletInfo';
import OrgApacheSlingServletsResolverSlingServletResolverInfo from '../model/OrgApacheSlingServletsResolverSlingServletResolverInfo';
import OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo from '../model/OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo';
import OrgApacheSlingStartupfilterImplStartupFilterImplInfo from '../model/OrgApacheSlingStartupfilterImplStartupFilterImplInfo';
import OrgApacheSlingTenantInternalTenantProviderImplInfo from '../model/OrgApacheSlingTenantInternalTenantProviderImplInfo';
import OrgApacheSlingTracerInternalLogTracerInfo from '../model/OrgApacheSlingTracerInternalLogTracerInfo';
import OrgApacheSlingXssImplXSSFilterImplInfo from '../model/OrgApacheSlingXssImplXSSFilterImplInfo';

/**
* Configmgr service.
* @module api/ConfigmgrApi
* @version 1.0.0
*/
export default class ConfigmgrApi {

    /**
    * Constructs a new ConfigmgrApi. 
    * @alias module:api/ConfigmgrApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adaptiveFormAndInteractiveCommunicationWebChannelConfiguration operation.
     * @callback module:api/ConfigmgrApi~adaptiveFormAndInteractiveCommunicationWebChannelConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.showPlaceholder 
     * @param {Number} opts.maximumCacheEntries 
     * @param {String} opts.afScriptingCompatversion 
     * @param {Boolean} opts.makeFileNameUnique 
     * @param {Boolean} opts.generatingCompliantData 
     * @param {module:api/ConfigmgrApi~adaptiveFormAndInteractiveCommunicationWebChannelConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo}
     */
    adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'showPlaceholder': opts['showPlaceholder'],
        'maximumCacheEntries': opts['maximumCacheEntries'],
        'af.scripting.compatversion': opts['afScriptingCompatversion'],
        'makeFileNameUnique': opts['makeFileNameUnique'],
        'generatingCompliantData': opts['generatingCompliantData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur operation.
     * @callback module:api/ConfigmgrApi~adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fontList 
     * @param {module:api/ConfigmgrApi~adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo}
     */
    adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fontList': this.apiClient.buildCollectionParam(opts['fontList'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analyticsComponentQueryCacheService operation.
     * @callback module:api/ConfigmgrApi~analyticsComponentQueryCacheServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsComponentQueryCacheServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqAnalyticsComponentQueryCacheSize 
     * @param {module:api/ConfigmgrApi~analyticsComponentQueryCacheServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsComponentQueryCacheServiceInfo}
     */
    analyticsComponentQueryCacheService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.analytics.component.query.cache.size': opts['cqAnalyticsComponentQueryCacheSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = AnalyticsComponentQueryCacheServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/Analytics Component Query Cache Service', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apacheSlingHealthCheckResultHTMLSerializer operation.
     * @callback module:api/ConfigmgrApi~apacheSlingHealthCheckResultHTMLSerializerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApacheSlingHealthCheckResultHTMLSerializerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.styleString 
     * @param {module:api/ConfigmgrApi~apacheSlingHealthCheckResultHTMLSerializerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApacheSlingHealthCheckResultHTMLSerializerInfo}
     */
    apacheSlingHealthCheckResultHTMLSerializer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'styleString': opts['styleString']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ApacheSlingHealthCheckResultHTMLSerializerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/Apache Sling Health Check Result HTML Serializer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.formsManagerConfigIncludeOOTBTemplates 
     * @param {Boolean} opts.formsManagerConfigIncludeDeprecatedTemplates 
     * @param {module:api/ConfigmgrApi~comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo}
     */
    comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'formsManagerConfig.includeOOTBTemplates': opts['formsManagerConfigIncludeOOTBTemplates'],
        'formsManagerConfig.includeDeprecatedTemplates': opts['formsManagerConfigIncludeDeprecatedTemplates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemTransactionCoreImplTransactionRecorder operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemTransactionCoreImplTransactionRecorderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemTransactionCoreImplTransactionRecorderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isTransactionRecordingEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeAemTransactionCoreImplTransactionRecorderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemTransactionCoreImplTransactionRecorderInfo}
     */
    comAdobeAemTransactionCoreImplTransactionRecorder(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'isTransactionRecordingEnabled': opts['isTransactionRecordingEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeAemTransactionCoreImplTransactionRecorderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo}
     */
    comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.name': opts['hcName'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'hc.mbean.name': opts['hcMbeanName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo}
     */
    comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.name': opts['hcName'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'hc.mbean.name': opts['hcMbeanName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.preUpgradeMaintenanceTasks 
     * @param {Array.<String>} opts.preUpgradeHcTags 
     * @param {module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo}
     */
    comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'pre-upgrade.maintenance.tasks': this.apiClient.buildCollectionParam(opts['preUpgradeMaintenanceTasks'], 'multi'),
        'pre-upgrade.hc.tags': this.apiClient.buildCollectionParam(opts['preUpgradeHcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.rootPath 
     * @param {Boolean} opts.fixInconsistencies 
     * @param {module:api/ConfigmgrApi~comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo}
     */
    comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'root.path': opts['rootPath'],
        'fix.inconsistencies': opts['fixInconsistencies']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAccountApiAccountManagementService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAccountApiAccountManagementServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAccountApiAccountManagementServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqAccountmanagerTokenValidityPeriod 
     * @param {String} opts.cqAccountmanagerConfigRequestnewaccountMail 
     * @param {String} opts.cqAccountmanagerConfigRequestnewpwdMail 
     * @param {module:api/ConfigmgrApi~comAdobeCqAccountApiAccountManagementServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAccountApiAccountManagementServiceInfo}
     */
    comAdobeCqAccountApiAccountManagementService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.accountmanager.token.validity.period': opts['cqAccountmanagerTokenValidityPeriod'],
        'cq.accountmanager.config.requestnewaccount.mail': opts['cqAccountmanagerConfigRequestnewaccountMail'],
        'cq.accountmanager.config.requestnewpwd.mail': opts['cqAccountmanagerConfigRequestnewpwdMail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqAccountApiAccountManagementServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAccountImplAccountManagementServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAccountImplAccountManagementServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAccountImplAccountManagementServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqAccountmanagerConfigInformnewaccountMail 
     * @param {String} opts.cqAccountmanagerConfigInformnewpwdMail 
     * @param {module:api/ConfigmgrApi~comAdobeCqAccountImplAccountManagementServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAccountImplAccountManagementServletInfo}
     */
    comAdobeCqAccountImplAccountManagementServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.accountmanager.config.informnewaccount.mail': opts['cqAccountmanagerConfigInformnewaccountMail'],
        'cq.accountmanager.config.informnewpwd.mail': opts['cqAccountmanagerConfigInformnewpwdMail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqAccountImplAccountManagementServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAddressImplLocationLocationListServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAddressImplLocationLocationListServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAddressImplLocationLocationListServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqAddressLocationDefaultMaxResults 
     * @param {module:api/ConfigmgrApi~comAdobeCqAddressImplLocationLocationListServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAddressImplLocationLocationListServletInfo}
     */
    comAdobeCqAddressImplLocationLocationListServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.address.location.default.maxResults': opts['cqAddressLocationDefaultMaxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqAddressImplLocationLocationListServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAuditPurgeDam operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAuditPurgeDamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAuditPurgeDamInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.auditlogRuleName 
     * @param {String} opts.auditlogRuleContentpath 
     * @param {Number} opts.auditlogRuleMinimumage 
     * @param {String} opts.auditlogRuleTypes 
     * @param {module:api/ConfigmgrApi~comAdobeCqAuditPurgeDamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAuditPurgeDamInfo}
     */
    comAdobeCqAuditPurgeDam(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'auditlog.rule.name': opts['auditlogRuleName'],
        'auditlog.rule.contentpath': opts['auditlogRuleContentpath'],
        'auditlog.rule.minimumage': opts['auditlogRuleMinimumage'],
        'auditlog.rule.types': opts['auditlogRuleTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqAuditPurgeDamInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.audit.purge.Dam', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAuditPurgePages operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAuditPurgePagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAuditPurgePagesInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.auditlogRuleName 
     * @param {String} opts.auditlogRuleContentpath 
     * @param {Number} opts.auditlogRuleMinimumage 
     * @param {String} opts.auditlogRuleTypes 
     * @param {module:api/ConfigmgrApi~comAdobeCqAuditPurgePagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAuditPurgePagesInfo}
     */
    comAdobeCqAuditPurgePages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'auditlog.rule.name': opts['auditlogRuleName'],
        'auditlog.rule.contentpath': opts['auditlogRuleContentpath'],
        'auditlog.rule.minimumage': opts['auditlogRuleMinimumage'],
        'auditlog.rule.types': opts['auditlogRuleTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqAuditPurgePagesInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.audit.purge.Pages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqAuditPurgeReplication operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqAuditPurgeReplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqAuditPurgeReplicationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.auditlogRuleName 
     * @param {String} opts.auditlogRuleContentpath 
     * @param {Number} opts.auditlogRuleMinimumage 
     * @param {String} opts.auditlogRuleTypes 
     * @param {module:api/ConfigmgrApi~comAdobeCqAuditPurgeReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqAuditPurgeReplicationInfo}
     */
    comAdobeCqAuditPurgeReplication(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'auditlog.rule.name': opts['auditlogRuleName'],
        'auditlog.rule.contentpath': opts['auditlogRuleContentpath'],
        'auditlog.rule.minimumage': opts['auditlogRuleMinimumage'],
        'auditlog.rule.types': opts['auditlogRuleTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqAuditPurgeReplicationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.audit.purge.Replication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCdnRewriterImplAWSCloudFrontRewriter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplAWSCloudFrontRewriterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.keypairId 
     * @param {String} opts.keypairAlias 
     * @param {Array.<String>} opts.cdnrewriterAttributes 
     * @param {String} opts.cdnRewriterDistributionDomain 
     * @param {module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplAWSCloudFrontRewriterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo}
     */
    comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'keypair.id': opts['keypairId'],
        'keypair.alias': opts['keypairAlias'],
        'cdnrewriter.attributes': this.apiClient.buildCollectionParam(opts['cdnrewriterAttributes'], 'multi'),
        'cdn.rewriter.distribution.domain': opts['cdnRewriterDistributionDomain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCdnRewriterImplCDNConfigServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplCDNConfigServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cdnConfigDistributionDomain 
     * @param {Boolean} opts.cdnConfigEnableRewriting 
     * @param {Array.<String>} opts.cdnConfigPathPrefixes 
     * @param {Number} opts.cdnConfigCdnttl 
     * @param {String} opts.cdnConfigApplicationProtocol 
     * @param {module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplCDNConfigServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo}
     */
    comAdobeCqCdnRewriterImplCDNConfigServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cdn.config.distribution.domain': opts['cdnConfigDistributionDomain'],
        'cdn.config.enable.rewriting': opts['cdnConfigEnableRewriting'],
        'cdn.config.path.prefixes': this.apiClient.buildCollectionParam(opts['cdnConfigPathPrefixes'], 'multi'),
        'cdn.config.cdnttl': opts['cdnConfigCdnttl'],
        'cdn.config.application.protocol': opts['cdnConfigApplicationProtocol']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCdnRewriterImplCDNRewriter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplCDNRewriterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCdnRewriterImplCDNRewriterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Array.<String>} opts.cdnrewriterAttributes 
     * @param {String} opts.cdnRewriterDistributionDomain 
     * @param {module:api/ConfigmgrApi~comAdobeCqCdnRewriterImplCDNRewriterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCdnRewriterImplCDNRewriterInfo}
     */
    comAdobeCqCdnRewriterImplCDNRewriter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'cdnrewriter.attributes': this.apiClient.buildCollectionParam(opts['cdnrewriterAttributes'], 'multi'),
        'cdn.rewriter.distribution.domain': opts['cdnRewriterDistributionDomain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCdnRewriterImplCDNRewriterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.flushAgents 
     * @param {module:api/ConfigmgrApi~comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo}
     */
    comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'flush.agents': this.apiClient.buildCollectionParam(opts['flushAgents'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplAssetDynamicImageHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetDynamicImageHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqCommerceAssetHandlerActive 
     * @param {String} opts.cqCommerceAssetHandlerName 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetDynamicImageHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo}
     */
    comAdobeCqCommerceImplAssetDynamicImageHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.commerce.asset.handler.active': opts['cqCommerceAssetHandlerActive'],
        'cq.commerce.asset.handler.name': opts['cqCommerceAssetHandlerName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqCommerceAssetHandlerFallback 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo}
     */
    comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.commerce.asset.handler.fallback': opts['cqCommerceAssetHandlerFallback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplAssetStaticImageHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetStaticImageHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplAssetStaticImageHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqCommerceAssetHandlerActive 
     * @param {String} opts.cqCommerceAssetHandlerName 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetStaticImageHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplAssetStaticImageHandlerInfo}
     */
    comAdobeCqCommerceImplAssetStaticImageHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.commerce.asset.handler.active': opts['cqCommerceAssetHandlerActive'],
        'cq.commerce.asset.handler.name': opts['cqCommerceAssetHandlerName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplAssetVideoHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetVideoHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplAssetVideoHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqCommerceAssetHandlerActive 
     * @param {String} opts.cqCommerceAssetHandlerName 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplAssetVideoHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplAssetVideoHandlerInfo}
     */
    comAdobeCqCommerceImplAssetVideoHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.commerce.asset.handler.active': opts['cqCommerceAssetHandlerActive'],
        'cq.commerce.asset.handler.name': opts['cqCommerceAssetHandlerName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCommerceImplAssetVideoHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommerceImplPromotionPromotionManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommerceImplPromotionPromotionManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqCommercePromotionRoot 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommerceImplPromotionPromotionManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo}
     */
    comAdobeCqCommerceImplPromotionPromotionManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.commerce.promotion.root': opts['cqCommercePromotionRoot']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqCommerceCataloggeneratorBucketsize 
     * @param {String} opts.cqCommerceCataloggeneratorBucketname 
     * @param {Array.<String>} opts.cqCommerceCataloggeneratorExcludedtemplateproperties 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo}
     */
    comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.commerce.cataloggenerator.bucketsize': opts['cqCommerceCataloggeneratorBucketsize'],
        'cq.commerce.cataloggenerator.bucketname': opts['cqCommerceCataloggeneratorBucketname'],
        'cq.commerce.cataloggenerator.excludedtemplateproperties': this.apiClient.buildCollectionParam(opts['cqCommerceCataloggeneratorExcludedtemplateproperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommercePimImplPageEventListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommercePimImplPageEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommercePimImplPageEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqCommercePageeventlistenerEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommercePimImplPageEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommercePimImplPageEventListenerInfo}
     */
    comAdobeCqCommercePimImplPageEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.commerce.pageeventlistener.enabled': opts['cqCommercePageeventlistenerEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCommercePimImplPageEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqCommercePimImplProductfeedProductFeedServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.feedGeneratorAlgorithm 
     * @param {module:api/ConfigmgrApi~comAdobeCqCommercePimImplProductfeedProductFeedServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo}
     */
    comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'Feed generator algorithm': opts['feedGeneratorAlgorithm']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqContentinsightImplReportingServicesSettingsProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqContentinsightImplReportingServicesSettingsProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.reportingservicesUrl 
     * @param {module:api/ConfigmgrApi~comAdobeCqContentinsightImplReportingServicesSettingsProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo}
     */
    comAdobeCqContentinsightImplReportingServicesSettingsProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'reportingservices.url': opts['reportingservicesUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqContentinsightImplServletsBrightEdgeProxyServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.brightedgeUrl 
     * @param {module:api/ConfigmgrApi~comAdobeCqContentinsightImplServletsBrightEdgeProxyServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo}
     */
    comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'brightedge.url': opts['brightedgeUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqContentinsightImplServletsReportingServicesProxyServle operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqContentinsightImplServletsReportingServicesProxyServleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.reportingservicesProxyWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqContentinsightImplServletsReportingServicesProxyServleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo}
     */
    comAdobeCqContentinsightImplServletsReportingServicesProxyServle(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'reportingservices.proxy.whitelist': this.apiClient.buildCollectionParam(opts['reportingservicesProxyWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplComponentComponentConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplComponentComponentConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplComponentComponentConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.damCfmComponentResourceType 
     * @param {String} opts.damCfmComponentFileReferenceProp 
     * @param {String} opts.damCfmComponentElementsProp 
     * @param {String} opts.damCfmComponentVariationProp 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplComponentComponentConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplComponentComponentConfigImplInfo}
     */
    comAdobeCqDamCfmImplComponentComponentConfigImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'dam.cfm.component.resourceType': opts['damCfmComponentResourceType'],
        'dam.cfm.component.fileReferenceProp': opts['damCfmComponentFileReferenceProp'],
        'dam.cfm.component.elementsProp': opts['damCfmComponentElementsProp'],
        'dam.cfm.component.variationProp': opts['damCfmComponentVariationProp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplConfFeatureConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplConfFeatureConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplConfFeatureConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.damCfmResourceTypes 
     * @param {Array.<String>} opts.damCfmReferenceProperties 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplConfFeatureConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplConfFeatureConfigImplInfo}
     */
    comAdobeCqDamCfmImplConfFeatureConfigImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'dam.cfm.resourceTypes': this.apiClient.buildCollectionParam(opts['damCfmResourceTypes'], 'multi'),
        'dam.cfm.referenceProperties': this.apiClient.buildCollectionParam(opts['damCfmReferenceProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplContentRewriterAssetProcessor operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterAssetProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pipelineType 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterAssetProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo}
     */
    comAdobeCqDamCfmImplContentRewriterAssetProcessor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'pipeline.type': opts['pipelineType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplContentRewriterParRangeFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterParRangeFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pipelineType 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterParRangeFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo}
     */
    comAdobeCqDamCfmImplContentRewriterParRangeFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'pipeline.type': opts['pipelineType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamCfmImplContentRewriterPayloadFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterPayloadFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pipelineType 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamCfmImplContentRewriterPayloadFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo}
     */
    comAdobeCqDamCfmImplContentRewriterPayloadFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'pipeline.type': opts['pipelineType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamDmProcessImagePTiffManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamDmProcessImagePTiffManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamDmProcessImagePTiffManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxMemory 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamDmProcessImagePTiffManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamDmProcessImagePTiffManagerImplInfo}
     */
    comAdobeCqDamDmProcessImagePTiffManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'maxMemory': opts['maxMemory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.dmreplicateonmodifyEnabled 
     * @param {Boolean} opts.dmreplicateonmodifyForcesyncdeletes 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo}
     */
    comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'dmreplicateonmodify.enabled': opts['dmreplicateonmodifyEnabled'],
        'dmreplicateonmodify.forcesyncdeletes': opts['dmreplicateonmodifyForcesyncdeletes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamMacSyncHelperImplMACSyncClientImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamMacSyncHelperImplMACSyncClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.comAdobeDamMacSyncClientSoTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamMacSyncHelperImplMACSyncClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo}
     */
    comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.dam.mac.sync.client.so.timeout': opts['comAdobeDamMacSyncClientSoTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamMacSyncImplDAMSyncServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamMacSyncImplDAMSyncServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths 
     * @param {Boolean} opts.comAdobeCqDamMacSyncDamsyncserviceSyncRenditions 
     * @param {Number} opts.comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs 
     * @param {String} opts.comAdobeCqDamMacSyncDamsyncservicePlatform 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamMacSyncImplDAMSyncServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo}
     */
    comAdobeCqDamMacSyncImplDAMSyncServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths': this.apiClient.buildCollectionParam(opts['comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths'], 'multi'),
        'com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions': opts['comAdobeCqDamMacSyncDamsyncserviceSyncRenditions'],
        'com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms': opts['comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs'],
        'com.adobe.cq.dam.mac.sync.damsyncservice.platform': opts['comAdobeCqDamMacSyncDamsyncservicePlatform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamProcessorNuiImplNuiAssetProcessor operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamProcessorNuiImplNuiAssetProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.nuiEnabled 
     * @param {String} opts.nuiServiceUrl 
     * @param {String} opts.nuiApiKey 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamProcessorNuiImplNuiAssetProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo}
     */
    comAdobeCqDamProcessorNuiImplNuiAssetProcessor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'nuiEnabled': opts['nuiEnabled'],
        'nuiServiceUrl': opts['nuiServiceUrl'],
        'nuiApiKey': opts['nuiApiKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamS7imagingImplIsImageServerComponent operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamS7imagingImplIsImageServerComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamS7imagingImplIsImageServerComponentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.tcpPort 
     * @param {Boolean} opts.allowRemoteAccess 
     * @param {String} opts.maxRenderRgnPixels 
     * @param {String} opts.maxMessageSize 
     * @param {Number} opts.randomAccessUrlTimeout 
     * @param {Number} opts.workerThreads 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamS7imagingImplIsImageServerComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamS7imagingImplIsImageServerComponentInfo}
     */
    comAdobeCqDamS7imagingImplIsImageServerComponent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'TcpPort': opts['tcpPort'],
        'AllowRemoteAccess': opts['allowRemoteAccess'],
        'MaxRenderRgnPixels': opts['maxRenderRgnPixels'],
        'MaxMessageSize': opts['maxMessageSize'],
        'RandomAccessUrlTimeout': opts['randomAccessUrlTimeout'],
        'WorkerThreads': opts['workerThreads']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamS7imagingImplPsPlatformServerServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamS7imagingImplPsPlatformServerServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cacheEnable 
     * @param {Array.<String>} opts.cacheRootPaths 
     * @param {Number} opts.cacheMaxSize 
     * @param {Number} opts.cacheMaxEntries 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamS7imagingImplPsPlatformServerServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo}
     */
    comAdobeCqDamS7imagingImplPsPlatformServerServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cache.enable': opts['cacheEnable'],
        'cache.rootPaths': this.apiClient.buildCollectionParam(opts['cacheRootPaths'], 'multi'),
        'cache.maxSize': opts['cacheMaxSize'],
        'cache.maxEntries': opts['cacheMaxEntries']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamWebdavImplIoAssetIOHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoAssetIOHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.pathPrefix 
     * @param {Boolean} opts.createVersion 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoAssetIOHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo}
     */
    comAdobeCqDamWebdavImplIoAssetIOHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'pathPrefix': opts['pathPrefix'],
        'createVersion': opts['createVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamWebdavVersionLinkingEnable 
     * @param {Number} opts.cqDamWebdavVersionLinkingSchedulerPeriod 
     * @param {Number} opts.cqDamWebdavVersionLinkingStagingTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo}
     */
    comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.webdav.version.linking.enable': opts['cqDamWebdavVersionLinkingEnable'],
        'cq.dam.webdav.version.linking.scheduler.period': opts['cqDamWebdavVersionLinkingSchedulerPeriod'],
        'cq.dam.webdav.version.linking.staging.timeout': opts['cqDamWebdavVersionLinkingStagingTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDamWebdavImplIoSpecialFilesHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoSpecialFilesHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters 
     * @param {module:api/ConfigmgrApi~comAdobeCqDamWebdavImplIoSpecialFilesHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo}
     */
    comAdobeCqDamWebdavImplIoSpecialFilesHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters': this.apiClient.buildCollectionParam(opts['comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDeserfwImplDeserializationFirewallImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDeserfwImplDeserializationFirewallImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDeserfwImplDeserializationFirewallImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.firewallDeserializationWhitelist 
     * @param {Array.<String>} opts.firewallDeserializationBlacklist 
     * @param {String} opts.firewallDeserializationDiagnostics 
     * @param {module:api/ConfigmgrApi~comAdobeCqDeserfwImplDeserializationFirewallImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDeserfwImplDeserializationFirewallImplInfo}
     */
    comAdobeCqDeserfwImplDeserializationFirewallImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'firewall.deserialization.whitelist': this.apiClient.buildCollectionParam(opts['firewallDeserializationWhitelist'], 'multi'),
        'firewall.deserialization.blacklist': this.apiClient.buildCollectionParam(opts['firewallDeserializationBlacklist'], 'multi'),
        'firewall.deserialization.diagnostics': opts['firewallDeserializationDiagnostics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDtmImplServiceDTMWebServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDtmImplServiceDTMWebServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDtmImplServiceDTMWebServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqDtmImplServiceDTMWebServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDtmImplServiceDTMWebServiceImplInfo}
     */
    comAdobeCqDtmImplServiceDTMWebServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'connection.timeout': opts['connectionTimeout'],
        'socket.timeout': opts['socketTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDtmImplServletsDTMDeployHookServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDtmImplServletsDTMDeployHookServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDtmImplServletsDTMDeployHookServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.dtmStagingIpWhitelist 
     * @param {Array.<String>} opts.dtmProductionIpWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqDtmImplServletsDTMDeployHookServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDtmImplServletsDTMDeployHookServletInfo}
     */
    comAdobeCqDtmImplServletsDTMDeployHookServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'dtm.staging.ip.whitelist': this.apiClient.buildCollectionParam(opts['dtmStagingIpWhitelist'], 'multi'),
        'dtm.production.ip.whitelist': this.apiClient.buildCollectionParam(opts['dtmProductionIpWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqDtmReactorImplServiceWebServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqDtmReactorImplServiceWebServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqDtmReactorImplServiceWebServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.endpointUri 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqDtmReactorImplServiceWebServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqDtmReactorImplServiceWebServiceImplInfo}
     */
    comAdobeCqDtmReactorImplServiceWebServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'endpointUri': opts['endpointUri'],
        'connectionTimeout': opts['connectionTimeout'],
        'socketTimeout': opts['socketTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqExperiencelogImplExperienceLogConfigServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqExperiencelogImplExperienceLogConfigServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.disabledForGroups 
     * @param {module:api/ConfigmgrApi~comAdobeCqExperiencelogImplExperienceLogConfigServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo}
     */
    comAdobeCqExperiencelogImplExperienceLogConfigServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled'],
        'disabledForGroups': this.apiClient.buildCollectionParam(opts['disabledForGroups'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqHcContentPackagesHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqHcContentPackagesHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqHcContentPackagesHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {Array.<String>} opts.packageNames 
     * @param {module:api/ConfigmgrApi~comAdobeCqHcContentPackagesHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqHcContentPackagesHealthCheckInfo}
     */
    comAdobeCqHcContentPackagesHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.name': opts['hcName'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'hc.mbean.name': opts['hcMbeanName'],
        'package.names': this.apiClient.buildCollectionParam(opts['packageNames'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqHcContentPackagesHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqHistoryImplHistoryRequestFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqHistoryImplHistoryRequestFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqHistoryImplHistoryRequestFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.historyRequestFilterExcludedSelectors 
     * @param {Array.<String>} opts.historyRequestFilterExcludedExtensions 
     * @param {module:api/ConfigmgrApi~comAdobeCqHistoryImplHistoryRequestFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqHistoryImplHistoryRequestFilterInfo}
     */
    comAdobeCqHistoryImplHistoryRequestFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'history.requestFilter.excludedSelectors': this.apiClient.buildCollectionParam(opts['historyRequestFilterExcludedSelectors'], 'multi'),
        'history.requestFilter.excludedExtensions': this.apiClient.buildCollectionParam(opts['historyRequestFilterExcludedExtensions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqHistoryImplHistoryRequestFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqHistoryImplHistoryServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqHistoryImplHistoryServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqHistoryImplHistoryServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.historyServiceResourceTypes 
     * @param {Array.<String>} opts.historyServicePathFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqHistoryImplHistoryServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqHistoryImplHistoryServiceImplInfo}
     */
    comAdobeCqHistoryImplHistoryServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'history.service.resourceTypes': this.apiClient.buildCollectionParam(opts['historyServiceResourceTypes'], 'multi'),
        'history.service.pathFilter': this.apiClient.buildCollectionParam(opts['historyServicePathFilter'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqHistoryImplHistoryServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqInboxImplTypeproviderItemTypeProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqInboxImplTypeproviderItemTypeProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.inboxImplTypeproviderRegistrypaths 
     * @param {Array.<String>} opts.inboxImplTypeproviderLegacypaths 
     * @param {String} opts.inboxImplTypeproviderDefaulturlFailureitem 
     * @param {String} opts.inboxImplTypeproviderDefaulturlWorkitem 
     * @param {String} opts.inboxImplTypeproviderDefaulturlTask 
     * @param {module:api/ConfigmgrApi~comAdobeCqInboxImplTypeproviderItemTypeProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo}
     */
    comAdobeCqInboxImplTypeproviderItemTypeProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'inbox.impl.typeprovider.registrypaths': this.apiClient.buildCollectionParam(opts['inboxImplTypeproviderRegistrypaths'], 'multi'),
        'inbox.impl.typeprovider.legacypaths': this.apiClient.buildCollectionParam(opts['inboxImplTypeproviderLegacypaths'], 'multi'),
        'inbox.impl.typeprovider.defaulturl.failureitem': opts['inboxImplTypeproviderDefaulturlFailureitem'],
        'inbox.impl.typeprovider.defaulturl.workitem': opts['inboxImplTypeproviderDefaulturlWorkitem'],
        'inbox.impl.typeprovider.defaulturl.task': opts['inboxImplTypeproviderDefaulturlTask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqProjectsImplServletProjectImageServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqProjectsImplServletProjectImageServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqProjectsImplServletProjectImageServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.imageQuality 
     * @param {String} opts.imageSupportedResolutions 
     * @param {module:api/ConfigmgrApi~comAdobeCqProjectsImplServletProjectImageServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqProjectsImplServletProjectImageServletInfo}
     */
    comAdobeCqProjectsImplServletProjectImageServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'image.quality': opts['imageQuality'],
        'image.supported.resolutions': opts['imageSupportedResolutions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqProjectsImplServletProjectImageServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqProjectsPurgeScheduler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqProjectsPurgeSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqProjectsPurgeSchedulerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.scheduledpurgeName 
     * @param {Boolean} opts.scheduledpurgePurgeActive 
     * @param {Array.<String>} opts.scheduledpurgeTemplates 
     * @param {Boolean} opts.scheduledpurgePurgeGroups 
     * @param {Boolean} opts.scheduledpurgePurgeAssets 
     * @param {Boolean} opts.scheduledpurgeTerminateRunningWorkflows 
     * @param {Number} opts.scheduledpurgeDaysold 
     * @param {Number} opts.scheduledpurgeSaveThreshold 
     * @param {module:api/ConfigmgrApi~comAdobeCqProjectsPurgeSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqProjectsPurgeSchedulerInfo}
     */
    comAdobeCqProjectsPurgeScheduler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduledpurge.name': opts['scheduledpurgeName'],
        'scheduledpurge.purgeActive': opts['scheduledpurgePurgeActive'],
        'scheduledpurge.templates': this.apiClient.buildCollectionParam(opts['scheduledpurgeTemplates'], 'multi'),
        'scheduledpurge.purgeGroups': opts['scheduledpurgePurgeGroups'],
        'scheduledpurge.purgeAssets': opts['scheduledpurgePurgeAssets'],
        'scheduledpurge.terminateRunningWorkflows': opts['scheduledpurgeTerminateRunningWorkflows'],
        'scheduledpurge.daysold': opts['scheduledpurgeDaysold'],
        'scheduledpurge.saveThreshold': opts['scheduledpurgeSaveThreshold']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqProjectsPurgeSchedulerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScheduledExporterImplScheduledExporterImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScheduledExporterImplScheduledExporterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScheduledExporterImplScheduledExporterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.includePaths 
     * @param {String} opts.exporterUser 
     * @param {module:api/ConfigmgrApi~comAdobeCqScheduledExporterImplScheduledExporterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScheduledExporterImplScheduledExporterImplInfo}
     */
    comAdobeCqScheduledExporterImplScheduledExporterImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'include.paths': this.apiClient.buildCollectionParam(opts['includePaths'], 'multi'),
        'exporter.user': opts['exporterUser']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.comAdobeCqScreensAnalyticsImplUrl 
     * @param {String} opts.comAdobeCqScreensAnalyticsImplApikey 
     * @param {String} opts.comAdobeCqScreensAnalyticsImplProject 
     * @param {String} opts.comAdobeCqScreensAnalyticsImplEnvironment 
     * @param {Number} opts.comAdobeCqScreensAnalyticsImplSendFrequency 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo}
     */
    comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.cq.screens.analytics.impl.url': opts['comAdobeCqScreensAnalyticsImplUrl'],
        'com.adobe.cq.screens.analytics.impl.apikey': opts['comAdobeCqScreensAnalyticsImplApikey'],
        'com.adobe.cq.screens.analytics.impl.project': opts['comAdobeCqScreensAnalyticsImplProject'],
        'com.adobe.cq.screens.analytics.impl.environment': opts['comAdobeCqScreensAnalyticsImplEnvironment'],
        'com.adobe.cq.screens.analytics.impl.sendFrequency': opts['comAdobeCqScreensAnalyticsImplSendFrequency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensDeviceImplDeviceService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensDeviceImplDeviceServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensDeviceImplDeviceServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.comAdobeAemScreensPlayerPingfrequency 
     * @param {String} opts.comAdobeAemScreensDevicePaswordSpecialchars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinlowercasechars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinuppercasechars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinnumberchars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinspecialchars 
     * @param {Number} opts.comAdobeAemScreensDevicePaswordMinlength 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensDeviceImplDeviceServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensDeviceImplDeviceServiceInfo}
     */
    comAdobeCqScreensDeviceImplDeviceService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.aem.screens.player.pingfrequency': opts['comAdobeAemScreensPlayerPingfrequency'],
        'com.adobe.aem.screens.device.pasword.specialchars': opts['comAdobeAemScreensDevicePaswordSpecialchars'],
        'com.adobe.aem.screens.device.pasword.minlowercasechars': opts['comAdobeAemScreensDevicePaswordMinlowercasechars'],
        'com.adobe.aem.screens.device.pasword.minuppercasechars': opts['comAdobeAemScreensDevicePaswordMinuppercasechars'],
        'com.adobe.aem.screens.device.pasword.minnumberchars': opts['comAdobeAemScreensDevicePaswordMinnumberchars'],
        'com.adobe.aem.screens.device.pasword.minspecialchars': opts['comAdobeAemScreensDevicePaswordMinspecialchars'],
        'com.adobe.aem.screens.device.pasword.minlength': opts['comAdobeAemScreensDevicePaswordMinlength']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensDeviceImplDeviceServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.deviceRegistrationTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo}
     */
    comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'deviceRegistrationTimeout': opts['deviceRegistrationTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensImplHandlerChannelsUpdateHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensImplHandlerChannelsUpdateHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqPagesupdatehandlerImageresourcetypes 
     * @param {Array.<String>} opts.cqPagesupdatehandlerProductresourcetypes 
     * @param {Array.<String>} opts.cqPagesupdatehandlerVideoresourcetypes 
     * @param {Array.<String>} opts.cqPagesupdatehandlerDynamicsequenceresourcetypes 
     * @param {Array.<String>} opts.cqPagesupdatehandlerPreviewmodepaths 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensImplHandlerChannelsUpdateHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo}
     */
    comAdobeCqScreensImplHandlerChannelsUpdateHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.pagesupdatehandler.imageresourcetypes': this.apiClient.buildCollectionParam(opts['cqPagesupdatehandlerImageresourcetypes'], 'multi'),
        'cq.pagesupdatehandler.productresourcetypes': this.apiClient.buildCollectionParam(opts['cqPagesupdatehandlerProductresourcetypes'], 'multi'),
        'cq.pagesupdatehandler.videoresourcetypes': this.apiClient.buildCollectionParam(opts['cqPagesupdatehandlerVideoresourcetypes'], 'multi'),
        'cq.pagesupdatehandler.dynamicsequenceresourcetypes': this.apiClient.buildCollectionParam(opts['cqPagesupdatehandlerDynamicsequenceresourcetypes'], 'multi'),
        'cq.pagesupdatehandler.previewmodepaths': this.apiClient.buildCollectionParam(opts['cqPagesupdatehandlerPreviewmodepaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo}
     */
    comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensImplRemoteImplDistributedHttpClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.comAdobeAemScreensImplRemoteRequestTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensImplRemoteImplDistributedHttpClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo}
     */
    comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.aem.screens.impl.remote.request_timeout': opts['comAdobeAemScreensImplRemoteRequestTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensImplScreensChannelPostProcessor operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensImplScreensChannelPostProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensImplScreensChannelPostProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.screensChannelsPropertiesToRemove 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensImplScreensChannelPostProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensImplScreensChannelPostProcessorInfo}
     */
    comAdobeCqScreensImplScreensChannelPostProcessor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'screens.channels.properties.to.remove': this.apiClient.buildCollectionParam(opts['screensChannelsPropertiesToRemove'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensImplScreensChannelPostProcessorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency 
     * @param {Number} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver 
     * @param {Number} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport 
     * @param {Boolean} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername 
     * @param {String} opts.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo}
     */
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath': this.apiClient.buildCollectionParam(opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath'], 'multi'),
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername'],
        'com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password': opts['comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensMqActivemqImplArtemisJMSProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensMqActivemqImplArtemisJMSProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Number} opts.globalSize 
     * @param {Number} opts.maxDiskUsage 
     * @param {Boolean} opts.persistenceEnabled 
     * @param {Number} opts.threadPoolMaxSize 
     * @param {Number} opts.scheduledThreadPoolMaxSize 
     * @param {Number} opts.gracefulShutdownTimeout 
     * @param {Array.<String>} opts.queues 
     * @param {Array.<String>} opts.topics 
     * @param {Number} opts.addressesMaxDeliveryAttempts 
     * @param {Number} opts.addressesExpiryDelay 
     * @param {String} opts.addressesAddressFullMessagePolicy 
     * @param {Number} opts.addressesMaxSizeBytes 
     * @param {Number} opts.addressesPageSizeBytes 
     * @param {Number} opts.addressesPageCacheMaxSize 
     * @param {String} opts.clusterUser 
     * @param {String} opts.clusterPassword 
     * @param {Number} opts.clusterCallTimeout 
     * @param {Number} opts.clusterCallFailoverTimeout 
     * @param {Number} opts.clusterClientFailureCheckPeriod 
     * @param {Number} opts.clusterNotificationAttempts 
     * @param {Number} opts.clusterNotificationInterval 
     * @param {Number} opts.idCacheSize 
     * @param {Number} opts.clusterConfirmationWindowSize 
     * @param {Number} opts.clusterConnectionTtl 
     * @param {Boolean} opts.clusterDuplicateDetection 
     * @param {Number} opts.clusterInitialConnectAttempts 
     * @param {Number} opts.clusterMaxRetryInterval 
     * @param {Number} opts.clusterMinLargeMessageSize 
     * @param {Number} opts.clusterProducerWindowSize 
     * @param {Number} opts.clusterReconnectAttempts 
     * @param {Number} opts.clusterRetryInterval 
     * @param {Number} opts.clusterRetryIntervalMultiplier 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensMqActivemqImplArtemisJMSProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo}
     */
    comAdobeCqScreensMqActivemqImplArtemisJMSProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'global.size': opts['globalSize'],
        'max.disk.usage': opts['maxDiskUsage'],
        'persistence.enabled': opts['persistenceEnabled'],
        'thread.pool.max.size': opts['threadPoolMaxSize'],
        'scheduled.thread.pool.max.size': opts['scheduledThreadPoolMaxSize'],
        'graceful.shutdown.timeout': opts['gracefulShutdownTimeout'],
        'queues': this.apiClient.buildCollectionParam(opts['queues'], 'multi'),
        'topics': this.apiClient.buildCollectionParam(opts['topics'], 'multi'),
        'addresses.max.delivery.attempts': opts['addressesMaxDeliveryAttempts'],
        'addresses.expiry.delay': opts['addressesExpiryDelay'],
        'addresses.address.full.message.policy': opts['addressesAddressFullMessagePolicy'],
        'addresses.max.size.bytes': opts['addressesMaxSizeBytes'],
        'addresses.page.size.bytes': opts['addressesPageSizeBytes'],
        'addresses.page.cache.max.size': opts['addressesPageCacheMaxSize'],
        'cluster.user': opts['clusterUser'],
        'cluster.password': opts['clusterPassword'],
        'cluster.call.timeout': opts['clusterCallTimeout'],
        'cluster.call.failover.timeout': opts['clusterCallFailoverTimeout'],
        'cluster.client.failure.check.period': opts['clusterClientFailureCheckPeriod'],
        'cluster.notification.attempts': opts['clusterNotificationAttempts'],
        'cluster.notification.interval': opts['clusterNotificationInterval'],
        'id.cache.size': opts['idCacheSize'],
        'cluster.confirmation.window.size': opts['clusterConfirmationWindowSize'],
        'cluster.connection.ttl': opts['clusterConnectionTtl'],
        'cluster.duplicate.detection': opts['clusterDuplicateDetection'],
        'cluster.initial.connect.attempts': opts['clusterInitialConnectAttempts'],
        'cluster.max.retry.interval': opts['clusterMaxRetryInterval'],
        'cluster.min.large.message.size': opts['clusterMinLargeMessageSize'],
        'cluster.producer.window.size': opts['clusterProducerWindowSize'],
        'cluster.reconnect.attempts': opts['clusterReconnectAttempts'],
        'cluster.retry.interval': opts['clusterRetryInterval'],
        'cluster.retry.interval.multiplier': opts['clusterRetryIntervalMultiplier']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath 
     * @param {String} opts.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo}
     */
    comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath': this.apiClient.buildCollectionParam(opts['comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath'], 'multi'),
        'com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency': opts['comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.disableSmartSync 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo}
     */
    comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'disableSmartSync': opts['disableSmartSync']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqScreensSegmentationImplSegmentationFeatureFlag operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqScreensSegmentationImplSegmentationFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableDataTriggeredContent 
     * @param {module:api/ConfigmgrApi~comAdobeCqScreensSegmentationImplSegmentationFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo}
     */
    comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enableDataTriggeredContent': opts['enableDataTriggeredContent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo}
     */
    comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo}
     */
    comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.dispatcherAddress 
     * @param {Array.<String>} opts.dispatcherFilterAllowed 
     * @param {Array.<String>} opts.dispatcherFilterBlocked 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo}
     */
    comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'dispatcher.address': opts['dispatcherAddress'],
        'dispatcher.filter.allowed': this.apiClient.buildCollectionParam(opts['dispatcherFilterAllowed'], 'multi'),
        'dispatcher.filter.blocked': this.apiClient.buildCollectionParam(opts['dispatcherFilterBlocked'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo}
     */
    comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.webserverAddress 
     * @param {module:api/ConfigmgrApi~comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo}
     */
    comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'webserver.address': opts['webserverAddress']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialAccountverificationImplAccountManagementConfigIm operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialAccountverificationImplAccountManagementConfigImCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enable 
     * @param {Number} opts.ttl1 
     * @param {Number} opts.ttl2 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialAccountverificationImplAccountManagementConfigImCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo}
     */
    comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enable': opts['enable'],
        'ttl1': opts['ttl1'],
        'ttl2': opts['ttl2']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo}
     */
    comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo}
     */
    comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo}
     */
    comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsListenerImplModerationEventExten operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.accepted 
     * @param {Number} opts.ranked 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo}
     */
    comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'accepted': opts['accepted'],
        'ranked': opts['ranked']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.ranking 
     * @param {Boolean} opts.enable 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo}
     */
    comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'ranking': opts['ranking'],
        'enable': opts['enable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.streamPath 
     * @param {String} opts.streamName 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo}
     */
    comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'streamPath': opts['streamPath'],
        'streamName': opts['streamName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsICallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxRetry 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo}
     */
    comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'MaxRetry': opts['maxRetry'],
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.attachmentTypeBlacklist 
     * @param {Number} opts.extensionOrder 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo}
     */
    comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'attachmentTypeBlacklist': opts['attachmentTypeBlacklist'],
        'extension.order': opts['extensionOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCalendarServletsTimeZoneServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCalendarServletsTimeZoneServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCalendarServletsTimeZoneServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.timezonesExpirytime 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCalendarServletsTimeZoneServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCalendarServletsTimeZoneServletInfo}
     */
    comAdobeCqSocialCalendarServletsTimeZoneServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'timezones.expirytime': opts['timezonesExpirytime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.ranking 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo}
     */
    comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'ranking': opts['ranking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo}
     */
    comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo}
     */
    comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.numUserLimit 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo}
     */
    comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'numUserLimit': opts['numUserLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableScheduledPostsSearch 
     * @param {Number} opts.numberOfMinutes 
     * @param {Number} opts.maxSearchLimit 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo}
     */
    comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enableScheduledPostsSearch': opts['enableScheduledPostsSearch'],
        'numberOfMinutes': opts['numberOfMinutes'],
        'maxSearchLimit': opts['maxSearchLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsCorsCORSAuthenticationFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsCorsCORSAuthenticationFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.corsEnabling 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsCorsCORSAuthenticationFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo}
     */
    comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cors.enabling': opts['corsEnabling']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priorityOrder': opts['priorityOrder'],
        'replyEmailPatterns': this.apiClient.buildCollectionParam(opts['replyEmailPatterns'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.contextPath 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'context.path': opts['contextPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.topics': opts['eventTopics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priorityOrder': opts['priorityOrder'],
        'replyEmailPatterns': this.apiClient.buildCollectionParam(opts['replyEmailPatterns'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.patternTime 
     * @param {String} opts.patternNewline 
     * @param {String} opts.patternDayOfMonth 
     * @param {String} opts.patternMonth 
     * @param {String} opts.patternYear 
     * @param {String} opts.patternDate 
     * @param {String} opts.patternDateTime 
     * @param {String} opts.patternEmail 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'pattern.time': opts['patternTime'],
        'pattern.newline': opts['patternNewline'],
        'pattern.dayOfMonth': opts['patternDayOfMonth'],
        'pattern.month': opts['patternMonth'],
        'pattern.year': opts['patternYear'],
        'pattern.date': opts['patternDate'],
        'pattern.dateTime': opts['patternDateTime'],
        'pattern.email': opts['patternEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.emailName 
     * @param {Boolean} opts.emailCreatePostFromReply 
     * @param {String} opts.emailAddCommentIdTo 
     * @param {Number} opts.emailSubjectMaximumLength 
     * @param {String} opts.emailReplyToAddress 
     * @param {String} opts.emailReplyToDelimiter 
     * @param {String} opts.emailTrackerIdPrefixInSubject 
     * @param {String} opts.emailTrackerIdPrefixInBody 
     * @param {Boolean} opts.emailAsHTML 
     * @param {String} opts.emailDefaultUserName 
     * @param {String} opts.emailTemplatesRootPath 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'email.name': opts['emailName'],
        'email.createPostFromReply': opts['emailCreatePostFromReply'],
        'email.addCommentIdTo': opts['emailAddCommentIdTo'],
        'email.subjectMaximumLength': opts['emailSubjectMaximumLength'],
        'email.replyToAddress': opts['emailReplyToAddress'],
        'email.replyToDelimiter': opts['emailReplyToDelimiter'],
        'email.trackerIdPrefixInSubject': opts['emailTrackerIdPrefixInSubject'],
        'email.trackerIdPrefixInBody': opts['emailTrackerIdPrefixInBody'],
        'email.asHTML': opts['emailAsHTML'],
        'email.defaultUserName': opts['emailDefaultUserName'],
        'email.templates.rootPath': opts['emailTemplatesRootPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.connectProtocol 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'connectProtocol': opts['connectProtocol']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priorityOrder': opts['priorityOrder'],
        'replyEmailPatterns': this.apiClient.buildCollectionParam(opts['replyEmailPatterns'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priorityOrder': opts['priorityOrder'],
        'replyEmailPatterns': this.apiClient.buildCollectionParam(opts['replyEmailPatterns'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priorityOrder': opts['priorityOrder'],
        'replyEmailPatterns': this.apiClient.buildCollectionParam(opts['replyEmailPatterns'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priorityOrder': opts['priorityOrder'],
        'replyEmailPatterns': this.apiClient.buildCollectionParam(opts['replyEmailPatterns'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {Number} opts.priorityOrder 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'replyEmailPatterns': this.apiClient.buildCollectionParam(opts['replyEmailPatterns'], 'multi'),
        'priorityOrder': opts['priorityOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priorityOrder 
     * @param {Array.<String>} opts.replyEmailPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo}
     */
    comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priorityOrder': opts['priorityOrder'],
        'replyEmailPatterns': this.apiClient.buildCollectionParam(opts['replyEmailPatterns'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.numberOfDays 
     * @param {Number} opts.ageOfFile 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo}
     */
    comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'numberOfDays': opts['numberOfDays'],
        'ageOfFile': opts['ageOfFile']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {Array.<String>} opts.verbs 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo}
     */
    comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter'],
        'verbs': this.apiClient.buildCollectionParam(opts['verbs'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enable 
     * @param {Number} opts.uGCLimit 
     * @param {Number} opts.ugcLimitDuration 
     * @param {Array.<String>} opts.domains 
     * @param {Array.<String>} opts.toList 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo}
     */
    comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enable': opts['enable'],
        'UGCLimit': opts['uGCLimit'],
        'ugcLimitDuration': opts['ugcLimitDuration'],
        'domains': this.apiClient.buildCollectionParam(opts['domains'], 'multi'),
        'toList': this.apiClient.buildCollectionParam(opts['toList'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialConnectOauthImplFacebookProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplFacebookProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthCloudConfigRoot 
     * @param {String} opts.providerConfigRoot 
     * @param {Boolean} opts.providerConfigCreateTagsEnabled 
     * @param {String} opts.providerConfigUserFolder 
     * @param {Boolean} opts.providerConfigFacebookFetchFields 
     * @param {Array.<String>} opts.providerConfigFacebookFields 
     * @param {Boolean} opts.providerConfigRefreshUserdataEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplFacebookProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo}
     */
    comAdobeCqSocialConnectOauthImplFacebookProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.cloud.config.root': opts['oauthCloudConfigRoot'],
        'provider.config.root': opts['providerConfigRoot'],
        'provider.config.create.tags.enabled': opts['providerConfigCreateTagsEnabled'],
        'provider.config.user.folder': opts['providerConfigUserFolder'],
        'provider.config.facebook.fetch.fields': opts['providerConfigFacebookFetchFields'],
        'provider.config.facebook.fields': this.apiClient.buildCollectionParam(opts['providerConfigFacebookFields'], 'multi'),
        'provider.config.refresh.userdata.enabled': opts['providerConfigRefreshUserdataEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo}
     */
    comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': this.apiClient.buildCollectionParam(opts['path'], 'multi'),
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.facebook 
     * @param {Array.<String>} opts.twitter 
     * @param {String} opts.providerConfigUserFolder 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo}
     */
    comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'facebook': this.apiClient.buildCollectionParam(opts['facebook'], 'multi'),
        'twitter': this.apiClient.buildCollectionParam(opts['twitter'], 'multi'),
        'provider.config.user.folder': opts['providerConfigUserFolder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialConnectOauthImplTwitterProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplTwitterProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthCloudConfigRoot 
     * @param {String} opts.providerConfigRoot 
     * @param {String} opts.providerConfigUserFolder 
     * @param {Boolean} opts.providerConfigTwitterEnableParams 
     * @param {Array.<String>} opts.providerConfigTwitterParams 
     * @param {Boolean} opts.providerConfigRefreshUserdataEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialConnectOauthImplTwitterProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo}
     */
    comAdobeCqSocialConnectOauthImplTwitterProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.cloud.config.root': opts['oauthCloudConfigRoot'],
        'provider.config.root': opts['providerConfigRoot'],
        'provider.config.user.folder': opts['providerConfigUserFolder'],
        'provider.config.twitter.enable.params': opts['providerConfigTwitterEnableParams'],
        'provider.config.twitter.params': this.apiClient.buildCollectionParam(opts['providerConfigTwitterParams'], 'multi'),
        'provider.config.refresh.userdata.enabled': opts['providerConfigRefreshUserdataEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqSocialContentFragmentsServicesEnabled 
     * @param {Number} opts.cqSocialContentFragmentsServicesWaitTimeSeconds 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo}
     */
    comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.social.content.fragments.services.enabled': opts['cqSocialContentFragmentsServicesEnabled'],
        'cq.social.content.fragments.services.waitTimeSeconds': opts['cqSocialContentFragmentsServicesWaitTimeSeconds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialDatastoreAsImplASResourceProviderFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.versionId 
     * @param {Boolean} opts.cacheOn 
     * @param {Number} opts.concurrencyLevel 
     * @param {Number} opts.cacheStartSize 
     * @param {Number} opts.cacheTtl 
     * @param {Number} opts.cacheSize 
     * @param {Number} opts.timeLimit 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo}
     */
    comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'version.id': opts['versionId'],
        'cache.on': opts['cacheOn'],
        'concurrency.level': opts['concurrencyLevel'],
        'cache.start.size': opts['cacheStartSize'],
        'cache.ttl': opts['cacheTtl'],
        'cache.size': opts['cacheSize'],
        'time.limit': opts['timeLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.solrZkTimeout 
     * @param {String} opts.solrCommit 
     * @param {Boolean} opts.cacheOn 
     * @param {Number} opts.concurrencyLevel 
     * @param {Number} opts.cacheStartSize 
     * @param {Number} opts.cacheTtl 
     * @param {Number} opts.cacheSize 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo}
     */
    comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'solr.zk.timeout': opts['solrZkTimeout'],
        'solr.commit': opts['solrCommit'],
        'cache.on': opts['cacheOn'],
        'concurrency.level': opts['concurrencyLevel'],
        'cache.start.size': opts['cacheStartSize'],
        'cache.ttl': opts['cacheTtl'],
        'cache.size': opts['cacheSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.solrZkTimeout 
     * @param {String} opts.solrCommit 
     * @param {Boolean} opts.cacheOn 
     * @param {Number} opts.concurrencyLevel 
     * @param {Number} opts.cacheStartSize 
     * @param {Number} opts.cacheTtl 
     * @param {Number} opts.cacheSize 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo}
     */
    comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'solr.zk.timeout': opts['solrZkTimeout'],
        'solr.commit': opts['solrCommit'],
        'cache.on': opts['cacheOn'],
        'concurrency.level': opts['concurrencyLevel'],
        'cache.start.size': opts['cacheStartSize'],
        'cache.ttl': opts['cacheTtl'],
        'cache.size': opts['cacheSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isMemberCheck 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo}
     */
    comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'isMemberCheck': opts['isMemberCheck']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isMemberCheck 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo}
     */
    comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'isMemberCheck': opts['isMemberCheck']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo}
     */
    comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo}
     */
    comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialEnablementServicesImplAuthorMarkerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialEnablementServicesImplAuthorMarkerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo}
     */
    comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletSelectors 
     * @param {String} opts.slingServletExtensions 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo}
     */
    comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'sling.servlet.extensions': opts['slingServletExtensions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo}
     */
    comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialForumClientEndpointsImplForumOperationsService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo}
     */
    comAdobeCqSocialForumClientEndpointsImplForumOperationsService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialForumDispatcherImplFlushOperations operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialForumDispatcherImplFlushOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.extensionOrder 
     * @param {Boolean} opts.flushForumontopic 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialForumDispatcherImplFlushOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo}
     */
    comAdobeCqSocialForumDispatcherImplFlushOperations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'extension.order': opts['extensionOrder'],
        'flush.forumontopic': opts['flushForumontopic']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.groupListingPaginationEnable 
     * @param {Boolean} opts.groupListingLazyloadingEnable 
     * @param {Number} opts.pageSize 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo}
     */
    comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'group.listing.pagination.enable': opts['groupListingPaginationEnable'],
        'group.listing.lazyloading.enable': opts['groupListingLazyloadingEnable'],
        'page.size': opts['pageSize'],
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialGroupImplGroupServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialGroupImplGroupServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialGroupImplGroupServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxWaitTime 
     * @param {Number} opts.minWaitBetweenRetries 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialGroupImplGroupServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialGroupImplGroupServiceImplInfo}
     */
    comAdobeCqSocialGroupImplGroupServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'maxWaitTime': opts['maxWaitTime'],
        'minWaitBetweenRetries': opts['minWaitBetweenRetries']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialGroupImplGroupServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialHandlebarsGuavaTemplateCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.parameterGuavaCacheEnabled 
     * @param {String} opts.parameterGuavaCacheParams 
     * @param {Boolean} opts.parameterGuavaCacheReload 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialHandlebarsGuavaTemplateCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo}
     */
    comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'parameter.guava.cache.enabled': opts['parameterGuavaCacheEnabled'],
        'parameter.guava.cache.params': opts['parameterGuavaCacheParams'],
        'parameter.guava.cache.reload': opts['parameterGuavaCacheReload'],
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo}
     */
    comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo}
     */
    comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo}
     */
    comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo}
     */
    comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.everyoneLimit 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo}
     */
    comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'everyoneLimit': opts['everyoneLimit'],
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.messageProperties 
     * @param {Number} opts.messageBoxSizeLimit 
     * @param {Number} opts.messageCountLimit 
     * @param {Boolean} opts.notifyFailure 
     * @param {String} opts.failureMessageFrom 
     * @param {String} opts.failureTemplatePath 
     * @param {Number} opts.maxRetries 
     * @param {Number} opts.minWaitBetweenRetries 
     * @param {Number} opts.countUpdatePoolSize 
     * @param {String} opts.inboxPath 
     * @param {String} opts.sentitemsPath 
     * @param {Boolean} opts.supportAttachments 
     * @param {Boolean} opts.supportGroupMessaging 
     * @param {Number} opts.maxTotalRecipients 
     * @param {Number} opts.batchSize 
     * @param {Number} opts.maxTotalAttachmentSize 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {Array.<String>} opts.allowedAttachmentTypes 
     * @param {String} opts.serviceSelector 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo}
     */
    comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'message.properties': this.apiClient.buildCollectionParam(opts['messageProperties'], 'multi'),
        'messageBoxSizeLimit': opts['messageBoxSizeLimit'],
        'messageCountLimit': opts['messageCountLimit'],
        'notifyFailure': opts['notifyFailure'],
        'failureMessageFrom': opts['failureMessageFrom'],
        'failureTemplatePath': opts['failureTemplatePath'],
        'maxRetries': opts['maxRetries'],
        'minWaitBetweenRetries': opts['minWaitBetweenRetries'],
        'countUpdatePoolSize': opts['countUpdatePoolSize'],
        'inbox.path': opts['inboxPath'],
        'sentitems.path': opts['sentitemsPath'],
        'supportAttachments': opts['supportAttachments'],
        'supportGroupMessaging': opts['supportGroupMessaging'],
        'maxTotalRecipients': opts['maxTotalRecipients'],
        'batchSize': opts['batchSize'],
        'maxTotalAttachmentSize': opts['maxTotalAttachmentSize'],
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi'),
        'allowedAttachmentTypes': this.apiClient.buildCollectionParam(opts['allowedAttachmentTypes'], 'multi'),
        'serviceSelector': opts['serviceSelector'],
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.resourceTypeFilters 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo}
     */
    comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'resourceType.filters': this.apiClient.buildCollectionParam(opts['resourceTypeFilters'], 'multi'),
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialModerationDashboardApiModerationDashboardSocial operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiModerationDashboardSocialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiModerationDashboardSocialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo}
     */
    comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo}
     */
    comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.resourceTypeFilters 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo}
     */
    comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'resourceType.filters': this.apiClient.buildCollectionParam(opts['resourceTypeFilters'], 'multi'),
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialNotificationsImplMentionsRouter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplMentionsRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialNotificationsImplMentionsRouterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplMentionsRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialNotificationsImplMentionsRouterInfo}
     */
    comAdobeCqSocialNotificationsImplMentionsRouter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialNotificationsImplMentionsRouterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialNotificationsImplNotificationManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplNotificationManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxUnreadNotificationCount 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplNotificationManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo}
     */
    comAdobeCqSocialNotificationsImplNotificationManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'max.unread.notification.count': opts['maxUnreadNotificationCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialNotificationsImplNotificationsRouter operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplNotificationsRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialNotificationsImplNotificationsRouterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialNotificationsImplNotificationsRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialNotificationsImplNotificationsRouterInfo}
     */
    comAdobeCqSocialNotificationsImplNotificationsRouter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo}
     */
    comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportICallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqSocialReportingAnalyticsPollingImporterInterval 
     * @param {Number} opts.cqSocialReportingAnalyticsPollingImporterPageSize 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo}
     */
    comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.social.reporting.analytics.polling.importer.interval': opts['cqSocialReportingAnalyticsPollingImporterInterval'],
        'cq.social.reporting.analytics.polling.importer.pageSize': opts['cqSocialReportingAnalyticsPollingImporterPageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.reportFetchDelay 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo}
     */
    comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'report.fetch.delay': opts['reportFetchDelay']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqSocialConsoleAnalyticsSitesMapping 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo}
     */
    comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.social.console.analytics.sites.mapping': this.apiClient.buildCollectionParam(opts['cqSocialConsoleAnalyticsSitesMapping'], 'multi'),
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.attachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo}
     */
    comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'attachmentTypeBlacklist': this.apiClient.buildCollectionParam(opts['attachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletSelectors 
     * @param {String} opts.slingServletExtensions 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo}
     */
    comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'sling.servlet.extensions': opts['slingServletExtensions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletSelectors 
     * @param {String} opts.slingServletExtensions 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo}
     */
    comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.selectors': this.apiClient.buildCollectionParam(opts['slingServletSelectors'], 'multi'),
        'sling.servlet.extensions': opts['slingServletExtensions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialScoringImplScoringEventListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialScoringImplScoringEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialScoringImplScoringEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialScoringImplScoringEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialScoringImplScoringEventListenerInfo}
     */
    comAdobeCqSocialScoringImplScoringEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialScoringImplScoringEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableFallback 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo}
     */
    comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enableFallback': opts['enableFallback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSiteEndpointsImplSiteOperationService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSiteEndpointsImplSiteOperationServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fieldWhitelist 
     * @param {Array.<String>} opts.sitePathFilters 
     * @param {String} opts.sitePackageGroup 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSiteEndpointsImplSiteOperationServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo}
     */
    comAdobeCqSocialSiteEndpointsImplSiteOperationService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fieldWhitelist': this.apiClient.buildCollectionParam(opts['fieldWhitelist'], 'multi'),
        'sitePathFilters': this.apiClient.buildCollectionParam(opts['sitePathFilters'], 'multi'),
        'sitePackageGroup': opts['sitePackageGroup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqSocialConsoleAnalyticsComponents 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo}
     */
    comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.social.console.analytics.components': this.apiClient.buildCollectionParam(opts['cqSocialConsoleAnalyticsComponents'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSiteImplSiteConfiguratorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSiteImplSiteConfiguratorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.componentsUsingTags 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSiteImplSiteConfiguratorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo}
     */
    comAdobeCqSocialSiteImplSiteConfiguratorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'componentsUsingTags': this.apiClient.buildCollectionParam(opts['componentsUsingTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSrpImplSocialSolrConnector operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSrpImplSocialSolrConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSrpImplSocialSolrConnectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.srpType 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSrpImplSocialSolrConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSrpImplSocialSolrConnectorInfo}
     */
    comAdobeCqSocialSrpImplSocialSolrConnector(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'srp.type': opts['srpType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSyncImplDiffChangesObserver operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSyncImplDiffChangesObserverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSyncImplDiffChangesObserverInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.agentName 
     * @param {String} opts.diffPath 
     * @param {String} opts.propertyNames 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSyncImplDiffChangesObserverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSyncImplDiffChangesObserverInfo}
     */
    comAdobeCqSocialSyncImplDiffChangesObserver(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled'],
        'agentName': opts['agentName'],
        'diffPath': opts['diffPath'],
        'propertyNames': opts['propertyNames']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialSyncImplDiffChangesObserverInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSyncImplGroupSyncListenerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSyncImplGroupSyncListenerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.nodetypes 
     * @param {Array.<String>} opts.ignorableprops 
     * @param {String} opts.ignorablenodes 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.distfolders 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSyncImplGroupSyncListenerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo}
     */
    comAdobeCqSocialSyncImplGroupSyncListenerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'nodetypes': this.apiClient.buildCollectionParam(opts['nodetypes'], 'multi'),
        'ignorableprops': this.apiClient.buildCollectionParam(opts['ignorableprops'], 'multi'),
        'ignorablenodes': opts['ignorablenodes'],
        'enabled': opts['enabled'],
        'distfolders': opts['distfolders']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSyncImplPublisherSyncServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSyncImplPublisherSyncServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.activeRunModes 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSyncImplPublisherSyncServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo}
     */
    comAdobeCqSocialSyncImplPublisherSyncServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'activeRunModes': this.apiClient.buildCollectionParam(opts['activeRunModes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialSyncImplUserSyncListenerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialSyncImplUserSyncListenerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialSyncImplUserSyncListenerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.nodetypes 
     * @param {Array.<String>} opts.ignorableprops 
     * @param {Array.<String>} opts.ignorablenodes 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.distfolders 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialSyncImplUserSyncListenerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialSyncImplUserSyncListenerImplInfo}
     */
    comAdobeCqSocialSyncImplUserSyncListenerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'nodetypes': this.apiClient.buildCollectionParam(opts['nodetypes'], 'multi'),
        'ignorableprops': this.apiClient.buildCollectionParam(opts['ignorableprops'], 'multi'),
        'ignorablenodes': this.apiClient.buildCollectionParam(opts['ignorablenodes'], 'multi'),
        'enabled': opts['enabled'],
        'distfolders': this.apiClient.buildCollectionParam(opts['distfolders'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialTranslationImplTranslationServiceConfigManager operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialTranslationImplTranslationServiceConfigManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.translateLanguage 
     * @param {String} opts.translateDisplay 
     * @param {Boolean} opts.translateAttribution 
     * @param {String} opts.translateCaching 
     * @param {String} opts.translateSmartRendering 
     * @param {String} opts.translateCachingDuration 
     * @param {String} opts.translateSessionSaveInterval 
     * @param {String} opts.translateSessionSaveBatchLimit 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialTranslationImplTranslationServiceConfigManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo}
     */
    comAdobeCqSocialTranslationImplTranslationServiceConfigManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'translate.language': opts['translateLanguage'],
        'translate.display': opts['translateDisplay'],
        'translate.attribution': opts['translateAttribution'],
        'translate.caching': opts['translateCaching'],
        'translate.smart.rendering': opts['translateSmartRendering'],
        'translate.caching.duration': opts['translateCachingDuration'],
        'translate.session.save.interval': opts['translateSessionSaveInterval'],
        'translate.session.save.batchLimit': opts['translateSessionSaveBatchLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialTranslationImplUGCLanguageDetector operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialTranslationImplUGCLanguageDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventTopics 
     * @param {String} opts.eventFilter 
     * @param {Array.<String>} opts.translateListenerType 
     * @param {Array.<String>} opts.translatePropertyList 
     * @param {Number} opts.poolSize 
     * @param {Number} opts.maxPoolSize 
     * @param {Number} opts.queueSize 
     * @param {Number} opts.keepAliveTime 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialTranslationImplUGCLanguageDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo}
     */
    comAdobeCqSocialTranslationImplUGCLanguageDetector(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.topics': opts['eventTopics'],
        'event.filter': opts['eventFilter'],
        'translate.listener.type': this.apiClient.buildCollectionParam(opts['translateListenerType'], 'multi'),
        'translate.property.list': this.apiClient.buildCollectionParam(opts['translatePropertyList'], 'multi'),
        'poolSize': opts['poolSize'],
        'maxPoolSize': opts['maxPoolSize'],
        'queueSize': opts['queueSize'],
        'keepAliveTime': opts['keepAliveTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.threadPoolSize 
     * @param {Number} opts.delayTime 
     * @param {Number} opts.workerSleepTime 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo}
     */
    comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'threadPoolSize': opts['threadPoolSize'],
        'delayTime': opts['delayTime'],
        'workerSleepTime': opts['workerSleepTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.poolSize 
     * @param {Number} opts.maxPoolSize 
     * @param {Number} opts.queueSize 
     * @param {Number} opts.keepAliveTime 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo}
     */
    comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'poolSize': opts['poolSize'],
        'maxPoolSize': opts['maxPoolSize'],
        'queueSize': opts['queueSize'],
        'keepAliveTime': opts['keepAliveTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplPublisherConfigurationImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isPrimaryPublisher 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplPublisherConfigurationImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo}
     */
    comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'isPrimaryPublisher': opts['isPrimaryPublisher']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseImplSocialUtilsImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplSocialUtilsImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.legacyCloudUGCPathMapping 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseImplSocialUtilsImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo}
     */
    comAdobeCqSocialUgcbaseImplSocialUtilsImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'legacyCloudUGCPathMapping': opts['legacyCloudUGCPathMapping']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseModerationImplAutoModerationImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.automoderationSequence 
     * @param {Boolean} opts.automoderationOnfailurestop 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseModerationImplAutoModerationImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo}
     */
    comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'automoderation.sequence': this.apiClient.buildCollectionParam(opts['automoderationSequence'], 'multi'),
        'automoderation.onfailurestop': opts['automoderationOnfailurestop']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseModerationImplSentimentProcess operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseModerationImplSentimentProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.watchwordsPositive 
     * @param {Array.<String>} opts.watchwordsNegative 
     * @param {String} opts.watchwordsPath 
     * @param {String} opts.sentimentPath 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseModerationImplSentimentProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo}
     */
    comAdobeCqSocialUgcbaseModerationImplSentimentProcess(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'watchwords.positive': this.apiClient.buildCollectionParam(opts['watchwordsPositive'], 'multi'),
        'watchwords.negative': this.apiClient.buildCollectionParam(opts['watchwordsNegative'], 'multi'),
        'watchwords.path': opts['watchwordsPath'],
        'sentiment.path': opts['sentimentPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.defaultAttachmentTypeBlacklist 
     * @param {Array.<String>} opts.baselineAttachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo}
     */
    comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'default.attachment.type.blacklist': this.apiClient.buildCollectionParam(opts['defaultAttachmentTypeBlacklist'], 'multi'),
        'baseline.attachment.type.blacklist': this.apiClient.buildCollectionParam(opts['baselineAttachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.parameterWhitelist 
     * @param {Array.<String>} opts.parameterWhitelistPrefixes 
     * @param {Array.<String>} opts.binaryParameterWhitelist 
     * @param {Array.<String>} opts.modifierWhitelist 
     * @param {Array.<String>} opts.operationWhitelist 
     * @param {Array.<String>} opts.operationWhitelistPrefixes 
     * @param {Array.<String>} opts.typehintWhitelist 
     * @param {Array.<String>} opts.resourcetypeWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo}
     */
    comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'parameter.whitelist': this.apiClient.buildCollectionParam(opts['parameterWhitelist'], 'multi'),
        'parameter.whitelist.prefixes': this.apiClient.buildCollectionParam(opts['parameterWhitelistPrefixes'], 'multi'),
        'binary.parameter.whitelist': this.apiClient.buildCollectionParam(opts['binaryParameterWhitelist'], 'multi'),
        'modifier.whitelist': this.apiClient.buildCollectionParam(opts['modifierWhitelist'], 'multi'),
        'operation.whitelist': this.apiClient.buildCollectionParam(opts['operationWhitelist'], 'multi'),
        'operation.whitelist.prefixes': this.apiClient.buildCollectionParam(opts['operationWhitelistPrefixes'], 'multi'),
        'typehint.whitelist': this.apiClient.buildCollectionParam(opts['typehintWhitelist'], 'multi'),
        'resourcetype.whitelist': this.apiClient.buildCollectionParam(opts['resourcetypeWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletExtensions 
     * @param {String} opts.slingServletPaths 
     * @param {String} opts.slingServletMethods 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo}
     */
    comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.extensions': opts['slingServletExtensions'],
        'sling.servlet.paths': opts['slingServletPaths'],
        'sling.servlet.methods': opts['slingServletMethods']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqSocialUserImplTransportHttpToPublisher operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqSocialUserImplTransportHttpToPublisherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqSocialUserImplTransportHttpToPublisherInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enable 
     * @param {Array.<String>} opts.agentConfiguration 
     * @param {String} opts.contextPath 
     * @param {Array.<String>} opts.disabledCipherSuites 
     * @param {Array.<String>} opts.enabledCipherSuites 
     * @param {module:api/ConfigmgrApi~comAdobeCqSocialUserImplTransportHttpToPublisherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqSocialUserImplTransportHttpToPublisherInfo}
     */
    comAdobeCqSocialUserImplTransportHttpToPublisher(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enable': opts['enable'],
        'agent.configuration': this.apiClient.buildCollectionParam(opts['agentConfiguration'], 'multi'),
        'context.path': opts['contextPath'],
        'disabled.cipher.suites': this.apiClient.buildCollectionParam(opts['disabledCipherSuites'], 'multi'),
        'enabled.cipher.suites': this.apiClient.buildCollectionParam(opts['enabledCipherSuites'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.resourceTypes 
     * @param {module:api/ConfigmgrApi~comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo}
     */
    comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'resource.types': this.apiClient.buildCollectionParam(opts['resourceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqUpgradesCleanupImplUpgradeContentCleanup operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqUpgradesCleanupImplUpgradeContentCleanupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.deletePathRegexps 
     * @param {String} opts.deleteSql2Query 
     * @param {module:api/ConfigmgrApi~comAdobeCqUpgradesCleanupImplUpgradeContentCleanupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo}
     */
    comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'delete.path.regexps': this.apiClient.buildCollectionParam(opts['deletePathRegexps'], 'multi'),
        'delete.sql2.query': opts['deleteSql2Query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.deleteNameRegexps 
     * @param {module:api/ConfigmgrApi~comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo}
     */
    comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'delete.name.regexps': this.apiClient.buildCollectionParam(opts['deleteNameRegexps'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.threshold 
     * @param {String} opts.jobTopicName 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo}
     */
    comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'threshold': opts['threshold'],
        'jobTopicName': opts['jobTopicName'],
        'emailEnabled': opts['emailEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.jobPurgeThreshold 
     * @param {Number} opts.jobPurgeMaxJobs 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo}
     */
    comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression'],
        'job.purge.threshold': opts['jobPurgeThreshold'],
        'job.purge.max.jobs': opts['jobPurgeMaxJobs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.threshold 
     * @param {String} opts.jobTopicName 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo}
     */
    comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'threshold': opts['threshold'],
        'jobTopicName': opts['jobTopicName'],
        'emailEnabled': opts['emailEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.threshold 
     * @param {String} opts.jobTopicName 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo}
     */
    comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'threshold': opts['threshold'],
        'jobTopicName': opts['jobTopicName'],
        'emailEnabled': opts['emailEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmLaunchesImplLaunchesEventHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmLaunchesImplLaunchesEventHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Number} opts.launchesEventhandlerThreadpoolMaxsize 
     * @param {String} opts.launchesEventhandlerThreadpoolPriority 
     * @param {Boolean} opts.launchesEventhandlerUpdatelastmodification 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmLaunchesImplLaunchesEventHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo}
     */
    comAdobeCqWcmLaunchesImplLaunchesEventHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.filter': opts['eventFilter'],
        'launches.eventhandler.threadpool.maxsize': opts['launchesEventhandlerThreadpoolMaxsize'],
        'launches.eventhandler.threadpool.priority': opts['launchesEventhandlerThreadpoolPriority'],
        'launches.eventhandler.updatelastmodification': opts['launchesEventhandlerUpdatelastmodification']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmQrcodeServletWhitelist 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo}
     */
    comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.wcm.qrcode.servlet.whitelist': this.apiClient.buildCollectionParam(opts['cqWcmQrcodeServletWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.size 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo}
     */
    comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.syncTranslationStateSchedulingFormat 
     * @param {String} opts.schedulingRepeatTranslationSchedulingFormat 
     * @param {String} opts.syncTranslationStateLockTimeoutInMinutes 
     * @param {String} opts.exportFormat 
     * @param {module:api/ConfigmgrApi~comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo}
     */
    comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'syncTranslationState.schedulingFormat': opts['syncTranslationStateSchedulingFormat'],
        'schedulingRepeatTranslation.schedulingFormat': opts['schedulingRepeatTranslationSchedulingFormat'],
        'syncTranslationState.lockTimeoutInMinutes': opts['syncTranslationStateLockTimeoutInMinutes'],
        'export.format': opts['exportFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService operation.
     * @callback module:api/ConfigmgrApi~comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.portalOutboxes 
     * @param {String} opts.draftDataService 
     * @param {String} opts.draftMetadataService 
     * @param {String} opts.submitDataService 
     * @param {String} opts.submitMetadataService 
     * @param {String} opts.pendingSignDataService 
     * @param {String} opts.pendingSignMetadataService 
     * @param {module:api/ConfigmgrApi~comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo}
     */
    comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'portal.outboxes': this.apiClient.buildCollectionParam(opts['portalOutboxes'], 'multi'),
        'draft.data.service': opts['draftDataService'],
        'draft.metadata.service': opts['draftMetadataService'],
        'submit.data.service': opts['submitDataService'],
        'submit.metadata.service': opts['submitMetadataService'],
        'pendingSign.data.service': opts['pendingSignDataService'],
        'pendingSign.metadata.service': opts['pendingSignMetadataService']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFdFpConfigFormsPortalSchedulerService operation.
     * @callback module:api/ConfigmgrApi~comAdobeFdFpConfigFormsPortalSchedulerServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.formportalInterval 
     * @param {module:api/ConfigmgrApi~comAdobeFdFpConfigFormsPortalSchedulerServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo}
     */
    comAdobeFdFpConfigFormsPortalSchedulerService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'formportal.interval': opts['formportalInterval']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFormsCommonServiceImplDefaultDataProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeFormsCommonServiceImplDefaultDataProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFormsCommonServiceImplDefaultDataProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.alloweddataFileLocations 
     * @param {module:api/ConfigmgrApi~comAdobeFormsCommonServiceImplDefaultDataProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFormsCommonServiceImplDefaultDataProviderInfo}
     */
    comAdobeFormsCommonServiceImplDefaultDataProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'alloweddataFileLocations': this.apiClient.buildCollectionParam(opts['alloweddataFileLocations'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp operation.
     * @callback module:api/ConfigmgrApi~comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.tempStorageConfig 
     * @param {module:api/ConfigmgrApi~comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo}
     */
    comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'tempStorageConfig': opts['tempStorageConfig']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeFormsCommonServletTempCleanUpTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeFormsCommonServletTempCleanUpTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeFormsCommonServletTempCleanUpTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {String} opts.durationForTemporaryStorage 
     * @param {String} opts.durationForAnonymousStorage 
     * @param {module:api/ConfigmgrApi~comAdobeFormsCommonServletTempCleanUpTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeFormsCommonServletTempCleanUpTaskInfo}
     */
    comAdobeFormsCommonServletTempCleanUpTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression'],
        'Duration for Temporary Storage': opts['durationForTemporaryStorage'],
        'Duration for Anonymous Storage': opts['durationForAnonymousStorage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeFormsCommonServletTempCleanUpTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAcpPlatformPlatformServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAcpPlatformPlatformServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAcpPlatformPlatformServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.queryLimit 
     * @param {Array.<String>} opts.fileTypeExtensionMap 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAcpPlatformPlatformServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAcpPlatformPlatformServletInfo}
     */
    comAdobeGraniteAcpPlatformPlatformServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'query.limit': opts['queryLimit'],
        'file.type.extension.map': this.apiClient.buildCollectionParam(opts['fileTypeExtensionMap'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAcpPlatformPlatformServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteActivitystreamsImplActivityManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteActivitystreamsImplActivityManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.aggregateRelationships 
     * @param {Boolean} opts.aggregateDescendVirtual 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteActivitystreamsImplActivityManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo}
     */
    comAdobeGraniteActivitystreamsImplActivityManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'aggregate.relationships': this.apiClient.buildCollectionParam(opts['aggregateRelationships'], 'multi'),
        'aggregate.descend.virtual': opts['aggregateDescendVirtual']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAnalyzerBaseSystemStatusServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAnalyzerBaseSystemStatusServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.disabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAnalyzerBaseSystemStatusServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo}
     */
    comAdobeGraniteAnalyzerBaseSystemStatusServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'disabled': opts['disabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.disabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo}
     */
    comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'disabled': opts['disabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteApicontrollerFilterResolverHookFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteApicontrollerFilterResolverHookFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.comAdobeCqCdnCdnRewriter 
     * @param {String} opts.comAdobeCqCloudConfigComponents 
     * @param {String} opts.comAdobeCqCloudConfigCore 
     * @param {String} opts.comAdobeCqCloudConfigUi 
     * @param {String} opts.comAdobeCqComAdobeCqEditor 
     * @param {String} opts.comAdobeCqComAdobeCqProjectsCore 
     * @param {String} opts.comAdobeCqComAdobeCqProjectsWcmCore 
     * @param {String} opts.comAdobeCqComAdobeCqUiCommons 
     * @param {String} opts.comAdobeCqComAdobeCqWcmStyle 
     * @param {String} opts.comAdobeCqCqActivitymapIntegration 
     * @param {String} opts.comAdobeCqCqContexthubCommons 
     * @param {String} opts.comAdobeCqCqDtm 
     * @param {String} opts.comAdobeCqCqHealthcheck 
     * @param {String} opts.comAdobeCqCqMultisiteTargeting 
     * @param {String} opts.comAdobeCqCqPreUpgradeCleanup 
     * @param {String} opts.comAdobeCqCqProductInfoProvider 
     * @param {String} opts.comAdobeCqCqRestSites 
     * @param {String} opts.comAdobeCqCqSecurityHc 
     * @param {String} opts.comAdobeCqDamCqDamSvgHandler 
     * @param {String} opts.comAdobeCqDamCqScene7Imaging 
     * @param {String} opts.comAdobeCqDtmReactorCore 
     * @param {String} opts.comAdobeCqDtmReactorUi 
     * @param {String} opts.comAdobeCqExpJspelResolver 
     * @param {String} opts.comAdobeCqInboxCqInbox 
     * @param {String} opts.comAdobeCqJsonSchemaParser 
     * @param {String} opts.comAdobeCqMediaCqMediaPublishingDpsFpCore 
     * @param {String} opts.comAdobeCqMobileCqMobileCaas 
     * @param {String} opts.comAdobeCqMobileCqMobileIndexBuilder 
     * @param {String} opts.comAdobeCqMobileCqMobilePhonegapBuild 
     * @param {String} opts.comAdobeCqMyspell 
     * @param {String} opts.comAdobeCqSampleWeRetailCore 
     * @param {String} opts.comAdobeCqScreensComAdobeCqScreensDcc 
     * @param {String} opts.comAdobeCqScreensComAdobeCqScreensMqCore 
     * @param {String} opts.comAdobeCqSocialCqSocialAsProvider 
     * @param {String} opts.comAdobeCqSocialCqSocialBadgingBasicImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialBadgingImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialCalendarImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialContentFragmentsImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialEnablementImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialGraphImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialIdeationImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialJcrProvider 
     * @param {String} opts.comAdobeCqSocialCqSocialMembersImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialMsProvider 
     * @param {String} opts.comAdobeCqSocialCqSocialNotificationsChannelsWeb 
     * @param {String} opts.comAdobeCqSocialCqSocialNotificationsImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialRdbProvider 
     * @param {String} opts.comAdobeCqSocialCqSocialScfImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialScoringBasicImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialScoringImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialServiceusersImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialSrpImpl 
     * @param {String} opts.comAdobeCqSocialCqSocialUgcbaseImpl 
     * @param {String} opts.comAdobeDamCqDamCfmImpl 
     * @param {String} opts.comAdobeFormsFoundationFormsFoundationBase 
     * @param {String} opts.comAdobeGraniteApicontroller 
     * @param {String} opts.comAdobeGraniteAssetCore 
     * @param {String} opts.comAdobeGraniteAuthSso 
     * @param {String} opts.comAdobeGraniteBundlesHcImpl 
     * @param {String} opts.comAdobeGraniteCompatRouter 
     * @param {String} opts.comAdobeGraniteConf 
     * @param {String} opts.comAdobeGraniteConfUiCore 
     * @param {String} opts.comAdobeGraniteCors 
     * @param {String} opts.comAdobeGraniteCrxExplorer 
     * @param {String} opts.comAdobeGraniteCrxdeLite 
     * @param {String} opts.comAdobeGraniteCryptoConfig 
     * @param {String} opts.comAdobeGraniteCryptoExtension 
     * @param {String} opts.comAdobeGraniteCryptoFile 
     * @param {String} opts.comAdobeGraniteCryptoJcr 
     * @param {String} opts.comAdobeGraniteCsrf 
     * @param {String} opts.comAdobeGraniteDistributionCore 
     * @param {String} opts.comAdobeGraniteDropwizardMetrics 
     * @param {String} opts.comAdobeGraniteFragsImpl 
     * @param {String} opts.comAdobeGraniteGibson 
     * @param {String} opts.comAdobeGraniteInfocollector 
     * @param {String} opts.comAdobeGraniteInstallerFactoryPackages 
     * @param {String} opts.comAdobeGraniteJettySsl 
     * @param {String} opts.comAdobeGraniteJobsAsync 
     * @param {String} opts.comAdobeGraniteMaintenanceOak 
     * @param {String} opts.comAdobeGraniteMonitoringCore 
     * @param {String} opts.comAdobeGraniteQueries 
     * @param {String} opts.comAdobeGraniteReplicationHcImpl 
     * @param {String} opts.comAdobeGraniteRepositoryChecker 
     * @param {String} opts.comAdobeGraniteRepositoryHcImpl 
     * @param {String} opts.comAdobeGraniteRestAssets 
     * @param {String} opts.comAdobeGraniteSecurityUi 
     * @param {String} opts.comAdobeGraniteStartup 
     * @param {String} opts.comAdobeGraniteTagsoup 
     * @param {String} opts.comAdobeGraniteTaskmanagementCore 
     * @param {String} opts.comAdobeGraniteTaskmanagementWorkflow 
     * @param {String} opts.comAdobeGraniteUiClientlibsCompilerLess 
     * @param {String} opts.comAdobeGraniteUiClientlibsProcessorGcc 
     * @param {String} opts.comAdobeGraniteWebconsolePlugins 
     * @param {String} opts.comAdobeGraniteWorkflowConsole 
     * @param {String} opts.comAdobeXmpWorkerFilesNativeFragmentLinux 
     * @param {String} opts.comAdobeXmpWorkerFilesNativeFragmentMacosx 
     * @param {String} opts.comAdobeXmpWorkerFilesNativeFragmentWin 
     * @param {String} opts.comDayCommonsOsgiWrapperSimpleJndi 
     * @param {String} opts.comDayCqCqAuthhandler 
     * @param {String} opts.comDayCqCqCompatConfigupdate 
     * @param {String} opts.comDayCqCqLicensebranding 
     * @param {String} opts.comDayCqCqNotifcationImpl 
     * @param {String} opts.comDayCqCqReplicationAudit 
     * @param {String} opts.comDayCqCqSearchExt 
     * @param {String} opts.comDayCqDamCqDamAnnotationPrint 
     * @param {String} opts.comDayCqDamCqDamAssetUsage 
     * @param {String} opts.comDayCqDamCqDamS7dam 
     * @param {String} opts.comDayCqDamCqDamSimilaritysearch 
     * @param {String} opts.comDayCqDamDamWebdavSupport 
     * @param {String} opts.comDayCqPreUpgradeTasks 
     * @param {String} opts.comDayCqReplicationExtensions 
     * @param {String} opts.comDayCqWcmCqMsmCore 
     * @param {String} opts.comDayCqWcmCqWcmTranslation 
     * @param {String} opts.dayCommonsJrawio 
     * @param {String} opts.orgApacheAriesJmxWhiteboard 
     * @param {String} opts.orgApacheFelixHttpSslfilter 
     * @param {String} opts.orgApacheFelixOrgApacheFelixThreaddump 
     * @param {String} opts.orgApacheFelixWebconsolePluginsDs 
     * @param {String} opts.orgApacheFelixWebconsolePluginsEvent 
     * @param {String} opts.orgApacheFelixWebconsolePluginsMemoryusage 
     * @param {String} opts.orgApacheFelixWebconsolePluginsPackageadmin 
     * @param {String} opts.orgApacheJackrabbitOakAuthLdap 
     * @param {String} opts.orgApacheJackrabbitOakSegmentTar 
     * @param {String} opts.orgApacheJackrabbitOakSolrOsgi 
     * @param {String} opts.orgApacheSlingBundleresourceImpl 
     * @param {String} opts.orgApacheSlingCommonsFsclassloader 
     * @param {String} opts.orgApacheSlingCommonsLogWebconsole 
     * @param {String} opts.orgApacheSlingDatasource 
     * @param {String} opts.orgApacheSlingDiscoveryBase 
     * @param {String} opts.orgApacheSlingDiscoveryOak 
     * @param {String} opts.orgApacheSlingDiscoverySupport 
     * @param {String} opts.orgApacheSlingDistributionApi 
     * @param {String} opts.orgApacheSlingDistributionCore 
     * @param {String} opts.orgApacheSlingExtensionsWebconsolesecurityprovider 
     * @param {String} opts.orgApacheSlingHcWebconsole 
     * @param {String} opts.orgApacheSlingInstallerConsole 
     * @param {String} opts.orgApacheSlingInstallerProviderFile 
     * @param {String} opts.orgApacheSlingInstallerProviderJcr 
     * @param {String} opts.orgApacheSlingJcrDavex 
     * @param {String} opts.orgApacheSlingJcrResourcesecurity 
     * @param {String} opts.orgApacheSlingJmxProvider 
     * @param {String} opts.orgApacheSlingLaunchpadInstaller 
     * @param {String} opts.orgApacheSlingModelsImpl 
     * @param {String} opts.orgApacheSlingRepoinitParser 
     * @param {String} opts.orgApacheSlingResourceInventory 
     * @param {String} opts.orgApacheSlingResourceresolver 
     * @param {String} opts.orgApacheSlingScriptingJavascript 
     * @param {String} opts.orgApacheSlingScriptingJst 
     * @param {String} opts.orgApacheSlingScriptingSightlyJsProvider 
     * @param {String} opts.orgApacheSlingScriptingSightlyModelsProvider 
     * @param {String} opts.orgApacheSlingSecurity 
     * @param {String} opts.orgApacheSlingServletsCompat 
     * @param {String} opts.orgApacheSlingServletsGet 
     * @param {String} opts.orgApacheSlingStartupfilterDisabler 
     * @param {String} opts.orgApacheSlingTracer 
     * @param {String} opts.weRetailClientAppCore 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteApicontrollerFilterResolverHookFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo}
     */
    comAdobeGraniteApicontrollerFilterResolverHookFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.cq.cdn.cdn-rewriter': opts['comAdobeCqCdnCdnRewriter'],
        'com.adobe.cq.cloud-config.components': opts['comAdobeCqCloudConfigComponents'],
        'com.adobe.cq.cloud-config.core': opts['comAdobeCqCloudConfigCore'],
        'com.adobe.cq.cloud-config.ui': opts['comAdobeCqCloudConfigUi'],
        'com.adobe.cq.com.adobe.cq.editor': opts['comAdobeCqComAdobeCqEditor'],
        'com.adobe.cq.com.adobe.cq.projects.core': opts['comAdobeCqComAdobeCqProjectsCore'],
        'com.adobe.cq.com.adobe.cq.projects.wcm.core': opts['comAdobeCqComAdobeCqProjectsWcmCore'],
        'com.adobe.cq.com.adobe.cq.ui.commons': opts['comAdobeCqComAdobeCqUiCommons'],
        'com.adobe.cq.com.adobe.cq.wcm.style': opts['comAdobeCqComAdobeCqWcmStyle'],
        'com.adobe.cq.cq-activitymap-integration': opts['comAdobeCqCqActivitymapIntegration'],
        'com.adobe.cq.cq-contexthub-commons': opts['comAdobeCqCqContexthubCommons'],
        'com.adobe.cq.cq-dtm': opts['comAdobeCqCqDtm'],
        'com.adobe.cq.cq-healthcheck': opts['comAdobeCqCqHealthcheck'],
        'com.adobe.cq.cq-multisite-targeting': opts['comAdobeCqCqMultisiteTargeting'],
        'com.adobe.cq.cq-pre-upgrade-cleanup': opts['comAdobeCqCqPreUpgradeCleanup'],
        'com.adobe.cq.cq-product-info-provider': opts['comAdobeCqCqProductInfoProvider'],
        'com.adobe.cq.cq-rest-sites': opts['comAdobeCqCqRestSites'],
        'com.adobe.cq.cq-security-hc': opts['comAdobeCqCqSecurityHc'],
        'com.adobe.cq.dam.cq-dam-svg-handler': opts['comAdobeCqDamCqDamSvgHandler'],
        'com.adobe.cq.dam.cq-scene7-imaging': opts['comAdobeCqDamCqScene7Imaging'],
        'com.adobe.cq.dtm-reactor.core': opts['comAdobeCqDtmReactorCore'],
        'com.adobe.cq.dtm-reactor.ui': opts['comAdobeCqDtmReactorUi'],
        'com.adobe.cq.exp-jspel-resolver': opts['comAdobeCqExpJspelResolver'],
        'com.adobe.cq.inbox.cq-inbox': opts['comAdobeCqInboxCqInbox'],
        'com.adobe.cq.json-schema-parser': opts['comAdobeCqJsonSchemaParser'],
        'com.adobe.cq.media.cq-media-publishing-dps-fp-core': opts['comAdobeCqMediaCqMediaPublishingDpsFpCore'],
        'com.adobe.cq.mobile.cq-mobile-caas': opts['comAdobeCqMobileCqMobileCaas'],
        'com.adobe.cq.mobile.cq-mobile-index-builder': opts['comAdobeCqMobileCqMobileIndexBuilder'],
        'com.adobe.cq.mobile.cq-mobile-phonegap-build': opts['comAdobeCqMobileCqMobilePhonegapBuild'],
        'com.adobe.cq.myspell': opts['comAdobeCqMyspell'],
        'com.adobe.cq.sample.we.retail.core': opts['comAdobeCqSampleWeRetailCore'],
        'com.adobe.cq.screens.com.adobe.cq.screens.dcc': opts['comAdobeCqScreensComAdobeCqScreensDcc'],
        'com.adobe.cq.screens.com.adobe.cq.screens.mq.core': opts['comAdobeCqScreensComAdobeCqScreensMqCore'],
        'com.adobe.cq.social.cq-social-as-provider': opts['comAdobeCqSocialCqSocialAsProvider'],
        'com.adobe.cq.social.cq-social-badging-basic-impl': opts['comAdobeCqSocialCqSocialBadgingBasicImpl'],
        'com.adobe.cq.social.cq-social-badging-impl': opts['comAdobeCqSocialCqSocialBadgingImpl'],
        'com.adobe.cq.social.cq-social-calendar-impl': opts['comAdobeCqSocialCqSocialCalendarImpl'],
        'com.adobe.cq.social.cq-social-content-fragments-impl': opts['comAdobeCqSocialCqSocialContentFragmentsImpl'],
        'com.adobe.cq.social.cq-social-enablement-impl': opts['comAdobeCqSocialCqSocialEnablementImpl'],
        'com.adobe.cq.social.cq-social-graph-impl': opts['comAdobeCqSocialCqSocialGraphImpl'],
        'com.adobe.cq.social.cq-social-ideation-impl': opts['comAdobeCqSocialCqSocialIdeationImpl'],
        'com.adobe.cq.social.cq-social-jcr-provider': opts['comAdobeCqSocialCqSocialJcrProvider'],
        'com.adobe.cq.social.cq-social-members-impl': opts['comAdobeCqSocialCqSocialMembersImpl'],
        'com.adobe.cq.social.cq-social-ms-provider': opts['comAdobeCqSocialCqSocialMsProvider'],
        'com.adobe.cq.social.cq-social-notifications-channels-web': opts['comAdobeCqSocialCqSocialNotificationsChannelsWeb'],
        'com.adobe.cq.social.cq-social-notifications-impl': opts['comAdobeCqSocialCqSocialNotificationsImpl'],
        'com.adobe.cq.social.cq-social-rdb-provider': opts['comAdobeCqSocialCqSocialRdbProvider'],
        'com.adobe.cq.social.cq-social-scf-impl': opts['comAdobeCqSocialCqSocialScfImpl'],
        'com.adobe.cq.social.cq-social-scoring-basic-impl': opts['comAdobeCqSocialCqSocialScoringBasicImpl'],
        'com.adobe.cq.social.cq-social-scoring-impl': opts['comAdobeCqSocialCqSocialScoringImpl'],
        'com.adobe.cq.social.cq-social-serviceusers-impl': opts['comAdobeCqSocialCqSocialServiceusersImpl'],
        'com.adobe.cq.social.cq-social-srp-impl': opts['comAdobeCqSocialCqSocialSrpImpl'],
        'com.adobe.cq.social.cq-social-ugcbase-impl': opts['comAdobeCqSocialCqSocialUgcbaseImpl'],
        'com.adobe.dam.cq-dam-cfm-impl': opts['comAdobeDamCqDamCfmImpl'],
        'com.adobe.forms.foundation-forms-foundation-base': opts['comAdobeFormsFoundationFormsFoundationBase'],
        'com.adobe.granite.apicontroller': opts['comAdobeGraniteApicontroller'],
        'com.adobe.granite.asset.core': opts['comAdobeGraniteAssetCore'],
        'com.adobe.granite.auth.sso': opts['comAdobeGraniteAuthSso'],
        'com.adobe.granite.bundles.hc.impl': opts['comAdobeGraniteBundlesHcImpl'],
        'com.adobe.granite.compat-router': opts['comAdobeGraniteCompatRouter'],
        'com.adobe.granite.conf': opts['comAdobeGraniteConf'],
        'com.adobe.granite.conf.ui.core': opts['comAdobeGraniteConfUiCore'],
        'com.adobe.granite.cors': opts['comAdobeGraniteCors'],
        'com.adobe.granite.crx-explorer': opts['comAdobeGraniteCrxExplorer'],
        'com.adobe.granite.crxde-lite': opts['comAdobeGraniteCrxdeLite'],
        'com.adobe.granite.crypto.config': opts['comAdobeGraniteCryptoConfig'],
        'com.adobe.granite.crypto.extension': opts['comAdobeGraniteCryptoExtension'],
        'com.adobe.granite.crypto.file': opts['comAdobeGraniteCryptoFile'],
        'com.adobe.granite.crypto.jcr': opts['comAdobeGraniteCryptoJcr'],
        'com.adobe.granite.csrf': opts['comAdobeGraniteCsrf'],
        'com.adobe.granite.distribution.core': opts['comAdobeGraniteDistributionCore'],
        'com.adobe.granite.dropwizard.metrics': opts['comAdobeGraniteDropwizardMetrics'],
        'com.adobe.granite.frags.impl': opts['comAdobeGraniteFragsImpl'],
        'com.adobe.granite.gibson': opts['comAdobeGraniteGibson'],
        'com.adobe.granite.infocollector': opts['comAdobeGraniteInfocollector'],
        'com.adobe.granite.installer.factory.packages': opts['comAdobeGraniteInstallerFactoryPackages'],
        'com.adobe.granite.jetty.ssl': opts['comAdobeGraniteJettySsl'],
        'com.adobe.granite.jobs.async': opts['comAdobeGraniteJobsAsync'],
        'com.adobe.granite.maintenance.oak': opts['comAdobeGraniteMaintenanceOak'],
        'com.adobe.granite.monitoring.core': opts['comAdobeGraniteMonitoringCore'],
        'com.adobe.granite.queries': opts['comAdobeGraniteQueries'],
        'com.adobe.granite.replication.hc.impl': opts['comAdobeGraniteReplicationHcImpl'],
        'com.adobe.granite.repository.checker': opts['comAdobeGraniteRepositoryChecker'],
        'com.adobe.granite.repository.hc.impl': opts['comAdobeGraniteRepositoryHcImpl'],
        'com.adobe.granite.rest.assets': opts['comAdobeGraniteRestAssets'],
        'com.adobe.granite.security.ui': opts['comAdobeGraniteSecurityUi'],
        'com.adobe.granite.startup': opts['comAdobeGraniteStartup'],
        'com.adobe.granite.tagsoup': opts['comAdobeGraniteTagsoup'],
        'com.adobe.granite.taskmanagement.core': opts['comAdobeGraniteTaskmanagementCore'],
        'com.adobe.granite.taskmanagement.workflow': opts['comAdobeGraniteTaskmanagementWorkflow'],
        'com.adobe.granite.ui.clientlibs.compiler.less': opts['comAdobeGraniteUiClientlibsCompilerLess'],
        'com.adobe.granite.ui.clientlibs.processor.gcc': opts['comAdobeGraniteUiClientlibsProcessorGcc'],
        'com.adobe.granite.webconsole.plugins': opts['comAdobeGraniteWebconsolePlugins'],
        'com.adobe.granite.workflow.console': opts['comAdobeGraniteWorkflowConsole'],
        'com.adobe.xmp.worker.files.native.fragment.linux': opts['comAdobeXmpWorkerFilesNativeFragmentLinux'],
        'com.adobe.xmp.worker.files.native.fragment.macosx': opts['comAdobeXmpWorkerFilesNativeFragmentMacosx'],
        'com.adobe.xmp.worker.files.native.fragment.win': opts['comAdobeXmpWorkerFilesNativeFragmentWin'],
        'com.day.commons.osgi.wrapper.simple-jndi': opts['comDayCommonsOsgiWrapperSimpleJndi'],
        'com.day.cq.cq-authhandler': opts['comDayCqCqAuthhandler'],
        'com.day.cq.cq-compat-configupdate': opts['comDayCqCqCompatConfigupdate'],
        'com.day.cq.cq-licensebranding': opts['comDayCqCqLicensebranding'],
        'com.day.cq.cq-notifcation-impl': opts['comDayCqCqNotifcationImpl'],
        'com.day.cq.cq-replication-audit': opts['comDayCqCqReplicationAudit'],
        'com.day.cq.cq-search-ext': opts['comDayCqCqSearchExt'],
        'com.day.cq.dam.cq-dam-annotation-print': opts['comDayCqDamCqDamAnnotationPrint'],
        'com.day.cq.dam.cq-dam-asset-usage': opts['comDayCqDamCqDamAssetUsage'],
        'com.day.cq.dam.cq-dam-s7dam': opts['comDayCqDamCqDamS7dam'],
        'com.day.cq.dam.cq-dam-similaritysearch': opts['comDayCqDamCqDamSimilaritysearch'],
        'com.day.cq.dam.dam-webdav-support': opts['comDayCqDamDamWebdavSupport'],
        'com.day.cq.pre-upgrade-tasks': opts['comDayCqPreUpgradeTasks'],
        'com.day.cq.replication.extensions': opts['comDayCqReplicationExtensions'],
        'com.day.cq.wcm.cq-msm-core': opts['comDayCqWcmCqMsmCore'],
        'com.day.cq.wcm.cq-wcm-translation': opts['comDayCqWcmCqWcmTranslation'],
        'day-commons-jrawio': opts['dayCommonsJrawio'],
        'org.apache.aries.jmx.whiteboard': opts['orgApacheAriesJmxWhiteboard'],
        'org.apache.felix.http.sslfilter': opts['orgApacheFelixHttpSslfilter'],
        'org.apache.felix.org.apache.felix.threaddump': opts['orgApacheFelixOrgApacheFelixThreaddump'],
        'org.apache.felix.webconsole.plugins.ds': opts['orgApacheFelixWebconsolePluginsDs'],
        'org.apache.felix.webconsole.plugins.event': opts['orgApacheFelixWebconsolePluginsEvent'],
        'org.apache.felix.webconsole.plugins.memoryusage': opts['orgApacheFelixWebconsolePluginsMemoryusage'],
        'org.apache.felix.webconsole.plugins.packageadmin': opts['orgApacheFelixWebconsolePluginsPackageadmin'],
        'org.apache.jackrabbit.oak-auth-ldap': opts['orgApacheJackrabbitOakAuthLdap'],
        'org.apache.jackrabbit.oak-segment-tar': opts['orgApacheJackrabbitOakSegmentTar'],
        'org.apache.jackrabbit.oak-solr-osgi': opts['orgApacheJackrabbitOakSolrOsgi'],
        'org.apache.sling.bundleresource.impl': opts['orgApacheSlingBundleresourceImpl'],
        'org.apache.sling.commons.fsclassloader': opts['orgApacheSlingCommonsFsclassloader'],
        'org.apache.sling.commons.log.webconsole': opts['orgApacheSlingCommonsLogWebconsole'],
        'org.apache.sling.datasource': opts['orgApacheSlingDatasource'],
        'org.apache.sling.discovery.base': opts['orgApacheSlingDiscoveryBase'],
        'org.apache.sling.discovery.oak': opts['orgApacheSlingDiscoveryOak'],
        'org.apache.sling.discovery.support': opts['orgApacheSlingDiscoverySupport'],
        'org.apache.sling.distribution.api': opts['orgApacheSlingDistributionApi'],
        'org.apache.sling.distribution.core': opts['orgApacheSlingDistributionCore'],
        'org.apache.sling.extensions.webconsolesecurityprovider': opts['orgApacheSlingExtensionsWebconsolesecurityprovider'],
        'org.apache.sling.hc.webconsole': opts['orgApacheSlingHcWebconsole'],
        'org.apache.sling.installer.console': opts['orgApacheSlingInstallerConsole'],
        'org.apache.sling.installer.provider.file': opts['orgApacheSlingInstallerProviderFile'],
        'org.apache.sling.installer.provider.jcr': opts['orgApacheSlingInstallerProviderJcr'],
        'org.apache.sling.jcr.davex': opts['orgApacheSlingJcrDavex'],
        'org.apache.sling.jcr.resourcesecurity': opts['orgApacheSlingJcrResourcesecurity'],
        'org.apache.sling.jmx.provider': opts['orgApacheSlingJmxProvider'],
        'org.apache.sling.launchpad.installer': opts['orgApacheSlingLaunchpadInstaller'],
        'org.apache.sling.models.impl': opts['orgApacheSlingModelsImpl'],
        'org.apache.sling.repoinit.parser': opts['orgApacheSlingRepoinitParser'],
        'org.apache.sling.resource.inventory': opts['orgApacheSlingResourceInventory'],
        'org.apache.sling.resourceresolver': opts['orgApacheSlingResourceresolver'],
        'org.apache.sling.scripting.javascript': opts['orgApacheSlingScriptingJavascript'],
        'org.apache.sling.scripting.jst': opts['orgApacheSlingScriptingJst'],
        'org.apache.sling.scripting.sightly.js.provider': opts['orgApacheSlingScriptingSightlyJsProvider'],
        'org.apache.sling.scripting.sightly.models.provider': opts['orgApacheSlingScriptingSightlyModelsProvider'],
        'org.apache.sling.security': opts['orgApacheSlingSecurity'],
        'org.apache.sling.servlets.compat': opts['orgApacheSlingServletsCompat'],
        'org.apache.sling.servlets.get': opts['orgApacheSlingServletsGet'],
        'org.apache.sling.startupfilter.disabler': opts['orgApacheSlingStartupfilterDisabler'],
        'org.apache.sling.tracer': opts['orgApacheSlingTracer'],
        'we.retail.client.app.core': opts['weRetailClientAppCore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthCertImplClientCertAuthHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthCertImplClientCertAuthHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthCertImplClientCertAuthHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo}
     */
    comAdobeGraniteAuthCertImplClientCertAuthHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path'],
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthIms operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.configid 
     * @param {String} opts.scope 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsInfo}
     */
    comAdobeGraniteAuthIms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'configid': opts['configid'],
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthImsInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo}
     */
    comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.provider.id': opts['oauthProviderId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.authImsClientSecret 
     * @param {String} opts.customizerType 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo}
     */
    comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'auth.ims.client.secret': opts['authImsClientSecret'],
        'customizer.type': opts['customizerType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo}
     */
    comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.provider.id': opts['oauthProviderId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplIMSProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplIMSProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthProviderImsAuthorizationUrl 
     * @param {String} opts.oauthProviderImsTokenUrl 
     * @param {String} opts.oauthProviderImsProfileUrl 
     * @param {Array.<String>} opts.oauthProviderImsExtendedDetailsUrls 
     * @param {String} opts.oauthProviderImsValidateTokenUrl 
     * @param {String} opts.oauthProviderImsSessionProperty 
     * @param {String} opts.oauthProviderImsServiceTokenClientId 
     * @param {String} opts.oauthProviderImsServiceTokenClientSecret 
     * @param {String} opts.oauthProviderImsServiceToken 
     * @param {String} opts.imsOrgRef 
     * @param {Array.<String>} opts.imsGroupMapping 
     * @param {Boolean} opts.oauthProviderImsOnlyLicenseGroup 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplIMSProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplIMSProviderImplInfo}
     */
    comAdobeGraniteAuthImsImplIMSProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.provider.ims.authorization.url': opts['oauthProviderImsAuthorizationUrl'],
        'oauth.provider.ims.token.url': opts['oauthProviderImsTokenUrl'],
        'oauth.provider.ims.profile.url': opts['oauthProviderImsProfileUrl'],
        'oauth.provider.ims.extended.details.urls': this.apiClient.buildCollectionParam(opts['oauthProviderImsExtendedDetailsUrls'], 'multi'),
        'oauth.provider.ims.validate.token.url': opts['oauthProviderImsValidateTokenUrl'],
        'oauth.provider.ims.session.property': opts['oauthProviderImsSessionProperty'],
        'oauth.provider.ims.service.token.client.id': opts['oauthProviderImsServiceTokenClientId'],
        'oauth.provider.ims.service.token.client.secret': opts['oauthProviderImsServiceTokenClientSecret'],
        'oauth.provider.ims.service.token': opts['oauthProviderImsServiceToken'],
        'ims.org.ref': opts['imsOrgRef'],
        'ims.group.mapping': this.apiClient.buildCollectionParam(opts['imsGroupMapping'], 'multi'),
        'oauth.provider.ims.only.license.group': opts['oauthProviderImsOnlyLicenseGroup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthImsImplIMSProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthImsImplImsConfigProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplImsConfigProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthConfigmanagerImsConfigid 
     * @param {String} opts.imsOwningEntity 
     * @param {String} opts.aemInstanceId 
     * @param {String} opts.imsServiceCode 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthImsImplImsConfigProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo}
     */
    comAdobeGraniteAuthImsImplImsConfigProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.configmanager.ims.configid': opts['oauthConfigmanagerImsConfigid'],
        'ims.owningEntity': opts['imsOwningEntity'],
        'aem.instanceId': opts['aemInstanceId'],
        'ims.serviceCode': opts['imsServiceCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthAccesstokenProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthAccesstokenProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthAccesstokenProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.authTokenProviderTitle 
     * @param {Array.<String>} opts.authTokenProviderDefaultClaims 
     * @param {String} opts.authTokenProviderEndpoint 
     * @param {String} opts.authAccessTokenRequest 
     * @param {String} opts.authTokenProviderKeypairAlias 
     * @param {Number} opts.authTokenProviderConnTimeout 
     * @param {Number} opts.authTokenProviderSoTimeout 
     * @param {String} opts.authTokenProviderClientId 
     * @param {String} opts.authTokenProviderScope 
     * @param {Boolean} opts.authTokenProviderReuseAccessToken 
     * @param {Boolean} opts.authTokenProviderRelaxedSsl 
     * @param {String} opts.tokenRequestCustomizerType 
     * @param {String} opts.authTokenValidatorType 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthAccesstokenProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthAccesstokenProviderInfo}
     */
    comAdobeGraniteAuthOauthAccesstokenProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'auth.token.provider.title': opts['authTokenProviderTitle'],
        'auth.token.provider.default.claims': this.apiClient.buildCollectionParam(opts['authTokenProviderDefaultClaims'], 'multi'),
        'auth.token.provider.endpoint': opts['authTokenProviderEndpoint'],
        'auth.access.token.request': opts['authAccessTokenRequest'],
        'auth.token.provider.keypair.alias': opts['authTokenProviderKeypairAlias'],
        'auth.token.provider.conn.timeout': opts['authTokenProviderConnTimeout'],
        'auth.token.provider.so.timeout': opts['authTokenProviderSoTimeout'],
        'auth.token.provider.client.id': opts['authTokenProviderClientId'],
        'auth.token.provider.scope': opts['authTokenProviderScope'],
        'auth.token.provider.reuse.access.token': opts['authTokenProviderReuseAccessToken'],
        'auth.token.provider.relaxed.ssl': opts['authTokenProviderRelaxedSsl'],
        'token.request.customizer.type': opts['tokenRequestCustomizerType'],
        'auth.token.validator.type': opts['authTokenValidatorType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthAccesstokenProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplBearerAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Array.<String>} opts.oauthClientIdsAllowed 
     * @param {Boolean} opts.authBearerSyncIms 
     * @param {String} opts.authTokenRequestParameter 
     * @param {String} opts.oauthBearerConfigid 
     * @param {Boolean} opts.oauthJwtSupport 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo}
     */
    comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path'],
        'oauth.clientIds.allowed': this.apiClient.buildCollectionParam(opts['oauthClientIdsAllowed'], 'multi'),
        'auth.bearer.sync.ims': opts['authBearerSyncIms'],
        'auth.tokenRequestParameter': opts['authTokenRequestParameter'],
        'oauth.bearer.configid': opts['oauthBearerConfigid'],
        'oauth.jwt.support': opts['oauthJwtSupport']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.authTokenValidatorType 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo}
     */
    comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'auth.token.validator.type': opts['authTokenValidatorType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplFacebookProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplFacebookProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplFacebookProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo}
     */
    comAdobeGraniteAuthOauthImplFacebookProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.provider.id': opts['oauthProviderId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplGithubProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplGithubProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplGithubProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthProviderGithubAuthorizationUrl 
     * @param {String} opts.oauthProviderGithubTokenUrl 
     * @param {String} opts.oauthProviderGithubProfileUrl 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplGithubProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplGithubProviderImplInfo}
     */
    comAdobeGraniteAuthOauthImplGithubProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.provider.github.authorization.url': opts['oauthProviderGithubAuthorizationUrl'],
        'oauth.provider.github.token.url': opts['oauthProviderGithubTokenUrl'],
        'oauth.provider.github.profile.url': opts['oauthProviderGithubProfileUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplGraniteProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplGraniteProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplGraniteProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {String} opts.oauthProviderGraniteAuthorizationUrl 
     * @param {String} opts.oauthProviderGraniteTokenUrl 
     * @param {String} opts.oauthProviderGraniteProfileUrl 
     * @param {String} opts.oauthProviderGraniteExtendedDetailsUrls 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplGraniteProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplGraniteProviderInfo}
     */
    comAdobeGraniteAuthOauthImplGraniteProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.provider.id': opts['oauthProviderId'],
        'oauth.provider.granite.authorization.url': opts['oauthProviderGraniteAuthorizationUrl'],
        'oauth.provider.granite.token.url': opts['oauthProviderGraniteTokenUrl'],
        'oauth.provider.granite.profile.url': opts['oauthProviderGraniteProfileUrl'],
        'oauth.provider.granite.extended.details.urls': opts['oauthProviderGraniteExtendedDetailsUrls']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthImplGraniteProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplHelperProviderConfigManager operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplHelperProviderConfigManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthCookieLoginTimeout 
     * @param {String} opts.oauthCookieMaxAge 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplHelperProviderConfigManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo}
     */
    comAdobeGraniteAuthOauthImplHelperProviderConfigManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.cookie.login.timeout': opts['oauthCookieLoginTimeout'],
        'oauth.cookie.max.age': opts['oauthCookieMaxAge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthCookieLoginTimeout 
     * @param {String} opts.oauthCookieMaxAge 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo}
     */
    comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.cookie.login.timeout': opts['oauthCookieLoginTimeout'],
        'oauth.cookie.max.age': opts['oauthCookieMaxAge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo}
     */
    comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthImplTwitterProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplTwitterProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthProviderId 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthImplTwitterProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo}
     */
    comAdobeGraniteAuthOauthImplTwitterProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.provider.id': opts['oauthProviderId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthOauthProvider operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthOauthProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthOauthProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthConfigId 
     * @param {String} opts.oauthClientId 
     * @param {String} opts.oauthClientSecret 
     * @param {Array.<String>} opts.oauthScope 
     * @param {String} opts.oauthConfigProviderId 
     * @param {Boolean} opts.oauthCreateUsers 
     * @param {String} opts.oauthUseridProperty 
     * @param {Boolean} opts.forceStrictUsernameMatching 
     * @param {Boolean} opts.oauthEncodeUserids 
     * @param {Boolean} opts.oauthHashUserids 
     * @param {String} opts.oauthCallBackUrl 
     * @param {Boolean} opts.oauthAccessTokenPersist 
     * @param {Boolean} opts.oauthAccessTokenPersistCookie 
     * @param {Boolean} opts.oauthCsrfStateProtection 
     * @param {Boolean} opts.oauthRedirectRequestParams 
     * @param {Boolean} opts.oauthConfigSiblingsAllow 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthOauthProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthOauthProviderInfo}
     */
    comAdobeGraniteAuthOauthProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.config.id': opts['oauthConfigId'],
        'oauth.client.id': opts['oauthClientId'],
        'oauth.client.secret': opts['oauthClientSecret'],
        'oauth.scope': this.apiClient.buildCollectionParam(opts['oauthScope'], 'multi'),
        'oauth.config.provider.id': opts['oauthConfigProviderId'],
        'oauth.create.users': opts['oauthCreateUsers'],
        'oauth.userid.property': opts['oauthUseridProperty'],
        'force.strict.username.matching': opts['forceStrictUsernameMatching'],
        'oauth.encode.userids': opts['oauthEncodeUserids'],
        'oauth.hash.userids': opts['oauthHashUserids'],
        'oauth.callBackUrl': opts['oauthCallBackUrl'],
        'oauth.access.token.persist': opts['oauthAccessTokenPersist'],
        'oauth.access.token.persist.cookie': opts['oauthAccessTokenPersistCookie'],
        'oauth.csrf.state.protection': opts['oauthCsrfStateProtection'],
        'oauth.redirect.request.params': opts['oauthRedirectRequestParams'],
        'oauth.config.siblings.allow': opts['oauthConfigSiblingsAllow']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthOauthProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.oauth.provider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthRequirementImplDefaultRequirementHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.supportedPaths 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo}
     */
    comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'supportedPaths': this.apiClient.buildCollectionParam(opts['supportedPaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthSamlSamlAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthSamlSamlAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.idpUrl 
     * @param {String} opts.idpCertAlias 
     * @param {Boolean} opts.idpHttpRedirect 
     * @param {String} opts.serviceProviderEntityId 
     * @param {String} opts.assertionConsumerServiceURL 
     * @param {String} opts.spPrivateKeyAlias 
     * @param {String} opts.keyStorePassword 
     * @param {String} opts.defaultRedirectUrl 
     * @param {String} opts.userIDAttribute 
     * @param {Boolean} opts.useEncryption 
     * @param {Boolean} opts.createUser 
     * @param {String} opts.userIntermediatePath 
     * @param {Boolean} opts.addGroupMemberships 
     * @param {String} opts.groupMembershipAttribute 
     * @param {Array.<String>} opts.defaultGroups 
     * @param {String} opts.nameIdFormat 
     * @param {Array.<String>} opts.synchronizeAttributes 
     * @param {Boolean} opts.handleLogout 
     * @param {String} opts.logoutUrl 
     * @param {Number} opts.clockTolerance 
     * @param {String} opts.digestMethod 
     * @param {String} opts.signatureMethod 
     * @param {String} opts.identitySyncType 
     * @param {String} opts.idpIdentifier 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthSamlSamlAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo}
     */
    comAdobeGraniteAuthSamlSamlAuthenticationHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': this.apiClient.buildCollectionParam(opts['path'], 'multi'),
        'service.ranking': opts['serviceRanking'],
        'idpUrl': opts['idpUrl'],
        'idpCertAlias': opts['idpCertAlias'],
        'idpHttpRedirect': opts['idpHttpRedirect'],
        'serviceProviderEntityId': opts['serviceProviderEntityId'],
        'assertionConsumerServiceURL': opts['assertionConsumerServiceURL'],
        'spPrivateKeyAlias': opts['spPrivateKeyAlias'],
        'keyStorePassword': opts['keyStorePassword'],
        'defaultRedirectUrl': opts['defaultRedirectUrl'],
        'userIDAttribute': opts['userIDAttribute'],
        'useEncryption': opts['useEncryption'],
        'createUser': opts['createUser'],
        'userIntermediatePath': opts['userIntermediatePath'],
        'addGroupMemberships': opts['addGroupMemberships'],
        'groupMembershipAttribute': opts['groupMembershipAttribute'],
        'defaultGroups': this.apiClient.buildCollectionParam(opts['defaultGroups'], 'multi'),
        'nameIdFormat': opts['nameIdFormat'],
        'synchronizeAttributes': this.apiClient.buildCollectionParam(opts['synchronizeAttributes'], 'multi'),
        'handleLogout': opts['handleLogout'],
        'logoutUrl': opts['logoutUrl'],
        'clockTolerance': opts['clockTolerance'],
        'digestMethod': opts['digestMethod'],
        'signatureMethod': opts['signatureMethod'],
        'identitySyncType': opts['identitySyncType'],
        'idpIdentifier': opts['idpIdentifier']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteAuthSsoImplSsoAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.jaasControlFlag 
     * @param {String} opts.jaasRealmName 
     * @param {Number} opts.jaasRanking 
     * @param {Array.<String>} opts.headers 
     * @param {Array.<String>} opts.cookies 
     * @param {Array.<String>} opts.parameters 
     * @param {Array.<String>} opts.usermap 
     * @param {String} opts.format 
     * @param {String} opts.trustedCredentialsAttribute 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo}
     */
    comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path'],
        'service.ranking': opts['serviceRanking'],
        'jaas.controlFlag': opts['jaasControlFlag'],
        'jaas.realmName': opts['jaasRealmName'],
        'jaas.ranking': opts['jaasRanking'],
        'headers': this.apiClient.buildCollectionParam(opts['headers'], 'multi'),
        'cookies': this.apiClient.buildCollectionParam(opts['cookies'], 'multi'),
        'parameters': this.apiClient.buildCollectionParam(opts['parameters'], 'multi'),
        'usermap': this.apiClient.buildCollectionParam(opts['usermap'], 'multi'),
        'format': opts['format'],
        'trustedCredentialsAttribute': opts['trustedCredentialsAttribute']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplCodeCacheHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplCodeCacheHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Number} opts.minimumCodeCacheSize 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplCodeCacheHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'minimum.code.cache.size': opts['minimumCodeCacheSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplDavExBundleHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplDavExBundleHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplDavExBundleHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Array.<String>} opts.ignoredBundles 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'ignored.bundles': this.apiClient.buildCollectionParam(opts['ignoredBundles'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplJobsHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplJobsHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Number} opts.maxQueuedJobs 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplJobsHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplJobsHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'max.queued.jobs': opts['maxQueuedJobs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo}
     */
    comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.replicateCommentResourceTypes 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo}
     */
    comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'replicate.comment.resourceTypes': this.apiClient.buildCollectionParam(opts['replicateCommentResourceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.compatgroups 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo}
     */
    comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'compatgroups': this.apiClient.buildCollectionParam(opts['compatgroups'], 'multi'),
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCompatrouterImplRoutingConfig operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplRoutingConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCompatrouterImplRoutingConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.id 
     * @param {String} opts.compatPath 
     * @param {String} opts.newPath 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplRoutingConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCompatrouterImplRoutingConfigInfo}
     */
    comAdobeGraniteCompatrouterImplRoutingConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'id': opts['id'],
        'compatPath': opts['compatPath'],
        'newPath': opts['newPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteCompatrouterImplRoutingConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCompatrouterImplSwitchMappingConfig operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplSwitchMappingConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.group 
     * @param {Array.<String>} opts.ids 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCompatrouterImplSwitchMappingConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo}
     */
    comAdobeGraniteCompatrouterImplSwitchMappingConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'group': opts['group'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.fallbackPaths 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo}
     */
    comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled'],
        'fallbackPaths': this.apiClient.buildCollectionParam(opts['fallbackPaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteContexthubImplContextHubImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteContexthubImplContextHubImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteContexthubImplContextHubImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.comAdobeGraniteContexthubSilentMode 
     * @param {Boolean} opts.comAdobeGraniteContexthubShowUi 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteContexthubImplContextHubImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteContexthubImplContextHubImplInfo}
     */
    comAdobeGraniteContexthubImplContextHubImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.granite.contexthub.silent_mode': opts['comAdobeGraniteContexthubSilentMode'],
        'com.adobe.granite.contexthub.show_ui': opts['comAdobeGraniteContexthubShowUi']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteContexthubImplContextHubImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCorsImplCORSPolicyImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCorsImplCORSPolicyImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCorsImplCORSPolicyImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.alloworigin 
     * @param {Array.<String>} opts.alloworiginregexp 
     * @param {Array.<String>} opts.allowedpaths 
     * @param {Array.<String>} opts.exposedheaders 
     * @param {Number} opts.maxage 
     * @param {Array.<String>} opts.supportedheaders 
     * @param {Array.<String>} opts.supportedmethods 
     * @param {Boolean} opts.supportscredentials 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCorsImplCORSPolicyImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCorsImplCORSPolicyImplInfo}
     */
    comAdobeGraniteCorsImplCORSPolicyImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'alloworigin': this.apiClient.buildCollectionParam(opts['alloworigin'], 'multi'),
        'alloworiginregexp': this.apiClient.buildCollectionParam(opts['alloworiginregexp'], 'multi'),
        'allowedpaths': this.apiClient.buildCollectionParam(opts['allowedpaths'], 'multi'),
        'exposedheaders': this.apiClient.buildCollectionParam(opts['exposedheaders'], 'multi'),
        'maxage': opts['maxage'],
        'supportedheaders': this.apiClient.buildCollectionParam(opts['supportedheaders'], 'multi'),
        'supportedmethods': this.apiClient.buildCollectionParam(opts['supportedmethods'], 'multi'),
        'supportscredentials': opts['supportscredentials']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteCorsImplCORSPolicyImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCsrfImplCSRFFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCsrfImplCSRFFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCsrfImplCSRFFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.filterMethods 
     * @param {Boolean} opts.filterEnableSafeUserAgents 
     * @param {Array.<String>} opts.filterSafeUserAgents 
     * @param {Array.<String>} opts.filterExcludedPaths 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCsrfImplCSRFFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCsrfImplCSRFFilterInfo}
     */
    comAdobeGraniteCsrfImplCSRFFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'filter.methods': this.apiClient.buildCollectionParam(opts['filterMethods'], 'multi'),
        'filter.enable.safe.user.agents': opts['filterEnableSafeUserAgents'],
        'filter.safe.user.agents': this.apiClient.buildCollectionParam(opts['filterSafeUserAgents'], 'multi'),
        'filter.excluded.paths': this.apiClient.buildCollectionParam(opts['filterExcludedPaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteCsrfImplCSRFFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteCsrfImplCSRFServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteCsrfImplCSRFServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteCsrfImplCSRFServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.csrfTokenExpiresIn 
     * @param {String} opts.slingAuthRequirements 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteCsrfImplCSRFServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteCsrfImplCSRFServletInfo}
     */
    comAdobeGraniteCsrfImplCSRFServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'csrf.token.expires.in': opts['csrfTokenExpiresIn'],
        'sling.auth.requirements': opts['slingAuthRequirements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteCsrfImplCSRFServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.username 
     * @param {String} opts.encryptedPassword 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo}
     */
    comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'username': opts['username'],
        'encryptedPassword': opts['encryptedPassword']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.agentName 
     * @param {String} opts.diffPath 
     * @param {String} opts.observedPath 
     * @param {String} opts.serviceName 
     * @param {String} opts.propertyNames 
     * @param {Number} opts.distributionDelay 
     * @param {String} opts.serviceUserTarget 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo}
     */
    comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled'],
        'agentName': opts['agentName'],
        'diffPath': opts['diffPath'],
        'observedPath': opts['observedPath'],
        'serviceName': opts['serviceName'],
        'propertyNames': opts['propertyNames'],
        'distributionDelay': opts['distributionDelay'],
        'serviceUser.target': opts['serviceUserTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplDiffDiffEventListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDiffDiffEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.diffPath 
     * @param {String} opts.serviceName 
     * @param {String} opts.serviceUserTarget 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDiffDiffEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo}
     */
    comAdobeGraniteDistributionCoreImplDiffDiffEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'diffPath': opts['diffPath'],
        'serviceName': opts['serviceName'],
        'serviceUser.target': opts['serviceUserTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplDistributionToReplicationEven operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.importerName 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo}
     */
    comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'importer.name': this.apiClient.buildCollectionParam(opts['importerName'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerName 
     * @param {Boolean} opts.forwardRequests 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo}
     */
    comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'providerName': opts['providerName'],
        'forward.requests': opts['forwardRequests']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplReplicationDistributionTrans operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplReplicationDistributionTransCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.forwardRequests 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplReplicationDistributionTransCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo}
     */
    comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'forward.requests': opts['forwardRequests']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.serviceName 
     * @param {String} opts.userId 
     * @param {String} opts.accessTokenProviderTarget 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo}
     */
    comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'serviceName': opts['serviceName'],
        'userId': opts['userId'],
        'accessTokenProvider.target': opts['accessTokenProviderTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteFragsImplCheckHttpHeaderFlag operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteFragsImplCheckHttpHeaderFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.featureName 
     * @param {String} opts.featureDescription 
     * @param {String} opts.httpHeaderName 
     * @param {String} opts.httpHeaderValuepattern 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteFragsImplCheckHttpHeaderFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo}
     */
    comAdobeGraniteFragsImplCheckHttpHeaderFlag(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'feature.name': opts['featureName'],
        'feature.description': opts['featureDescription'],
        'http.header.name': opts['httpHeaderName'],
        'http.header.valuepattern': opts['httpHeaderValuepattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteFragsImplRandomFeature operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteFragsImplRandomFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteFragsImplRandomFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.featureName 
     * @param {String} opts.featureDescription 
     * @param {String} opts.activePercentage 
     * @param {String} opts.cookieName 
     * @param {Number} opts.cookieMaxAge 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteFragsImplRandomFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteFragsImplRandomFeatureInfo}
     */
    comAdobeGraniteFragsImplRandomFeature(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'feature.name': opts['featureName'],
        'feature.description': opts['featureDescription'],
        'active.percentage': opts['activePercentage'],
        'cookie.name': opts['cookieName'],
        'cookie.maxAge': opts['cookieMaxAge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteFragsImplRandomFeatureInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteHttpcacheFileFileCacheStore operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteHttpcacheFileFileCacheStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteHttpcacheFileFileCacheStoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.comAdobeGraniteHttpcacheFileDocumentRoot 
     * @param {String} opts.comAdobeGraniteHttpcacheFileIncludeHost 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteHttpcacheFileFileCacheStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteHttpcacheFileFileCacheStoreInfo}
     */
    comAdobeGraniteHttpcacheFileFileCacheStore(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.granite.httpcache.file.documentRoot': opts['comAdobeGraniteHttpcacheFileDocumentRoot'],
        'com.adobe.granite.httpcache.file.includeHost': opts['comAdobeGraniteHttpcacheFileIncludeHost']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteHttpcacheImplOuterCacheFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteHttpcacheImplOuterCacheFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comAdobeGraniteHttpcacheUrlPaths 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteHttpcacheImplOuterCacheFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo}
     */
    comAdobeGraniteHttpcacheImplOuterCacheFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.granite.httpcache.url.paths': this.apiClient.buildCollectionParam(opts['comAdobeGraniteHttpcacheUrlPaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteI18nImplBundlePseudoTranslations operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteI18nImplBundlePseudoTranslationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.pseudoPatterns 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteI18nImplBundlePseudoTranslationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo}
     */
    comAdobeGraniteI18nImplBundlePseudoTranslations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'pseudo.patterns': this.apiClient.buildCollectionParam(opts['pseudoPatterns'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteI18nImplPreferencesLocaleResolverService operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteI18nImplPreferencesLocaleResolverServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.securityPreferencesName 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteI18nImplPreferencesLocaleResolverServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo}
     */
    comAdobeGraniteI18nImplPreferencesLocaleResolverService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'security.preferences.name': opts['securityPreferencesName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteInfocollectorInfoCollector operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteInfocollectorInfoCollectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteInfocollectorInfoCollectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.graniteInfocollectorIncludeThreadDumps 
     * @param {Boolean} opts.graniteInfocollectorIncludeHeapDump 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteInfocollectorInfoCollectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteInfocollectorInfoCollectorInfo}
     */
    comAdobeGraniteInfocollectorInfoCollector(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'granite.infocollector.includeThreadDumps': opts['graniteInfocollectorIncludeThreadDumps'],
        'granite.infocollector.includeHeapDump': opts['graniteInfocollectorIncludeHeapDump']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteInfocollectorInfoCollectorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteJettySslInternalGraniteSslConnectorFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.comAdobeGraniteJettySslPort 
     * @param {String} opts.comAdobeGraniteJettySslKeystoreUser 
     * @param {String} opts.comAdobeGraniteJettySslKeystorePassword 
     * @param {Array.<String>} opts.comAdobeGraniteJettySslCiphersuitesExcluded 
     * @param {Array.<String>} opts.comAdobeGraniteJettySslCiphersuitesIncluded 
     * @param {String} opts.comAdobeGraniteJettySslClientCertificate 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo}
     */
    comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.adobe.granite.jetty.ssl.port': opts['comAdobeGraniteJettySslPort'],
        'com.adobe.granite.jetty.ssl.keystore.user': opts['comAdobeGraniteJettySslKeystoreUser'],
        'com.adobe.granite.jetty.ssl.keystore.password': opts['comAdobeGraniteJettySslKeystorePassword'],
        'com.adobe.granite.jetty.ssl.ciphersuites.excluded': this.apiClient.buildCollectionParam(opts['comAdobeGraniteJettySslCiphersuitesExcluded'], 'multi'),
        'com.adobe.granite.jetty.ssl.ciphersuites.included': this.apiClient.buildCollectionParam(opts['comAdobeGraniteJettySslCiphersuitesIncluded'], 'multi'),
        'com.adobe.granite.jetty.ssl.client.certificate': opts['comAdobeGraniteJettySslClientCertificate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteLicenseImplLicenseCheckFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteLicenseImplLicenseCheckFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteLicenseImplLicenseCheckFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.checkInternval 
     * @param {Array.<String>} opts.excludeIds 
     * @param {Boolean} opts.encryptPing 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteLicenseImplLicenseCheckFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteLicenseImplLicenseCheckFilterInfo}
     */
    comAdobeGraniteLicenseImplLicenseCheckFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'checkInternval': opts['checkInternval'],
        'excludeIds': this.apiClient.buildCollectionParam(opts['excludeIds'], 'multi'),
        'encryptPing': opts['encryptPing']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteLoggingImplLogAnalyserImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteLoggingImplLogAnalyserImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteLoggingImplLogAnalyserImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.messagesQueueSize 
     * @param {Array.<String>} opts.loggerConfig 
     * @param {Number} opts.messagesSize 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteLoggingImplLogAnalyserImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteLoggingImplLogAnalyserImplInfo}
     */
    comAdobeGraniteLoggingImplLogAnalyserImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'messages.queue.size': opts['messagesQueueSize'],
        'logger.config': this.apiClient.buildCollectionParam(opts['loggerConfig'], 'multi'),
        'messages.size': opts['messagesSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteLoggingImplLogAnalyserImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteLoggingImplLogErrorHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteLoggingImplLogErrorHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteLoggingImplLogErrorHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo}
     */
    comAdobeGraniteLoggingImplLogErrorHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.graniteMaintenanceMandatory 
     * @param {String} opts.jobTopics 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo}
     */
    comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'granite.maintenance.mandatory': opts['graniteMaintenanceMandatory'],
        'job.topics': opts['jobTopics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jobTopics 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo}
     */
    comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'job.topics': opts['jobTopics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fullGcDays 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo}
     */
    comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'full.gc.days': this.apiClient.buildCollectionParam(opts['fullGcDays'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteMonitoringImplScriptConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteMonitoringImplScriptConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteMonitoringImplScriptConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.scriptFilename 
     * @param {String} opts.scriptDisplay 
     * @param {String} opts.scriptPath 
     * @param {Array.<String>} opts.scriptPlatform 
     * @param {Number} opts.interval 
     * @param {String} opts.jmxdomain 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteMonitoringImplScriptConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteMonitoringImplScriptConfigImplInfo}
     */
    comAdobeGraniteMonitoringImplScriptConfigImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'script.filename': opts['scriptFilename'],
        'script.display': opts['scriptDisplay'],
        'script.path': opts['scriptPath'],
        'script.platform': this.apiClient.buildCollectionParam(opts['scriptPlatform'], 'multi'),
        'interval': opts['interval'],
        'jmxdomain': opts['jmxdomain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteMonitoringImplScriptConfigImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {String} opts.jaasControlFlag 
     * @param {String} opts.jaasRealmName 
     * @param {Number} opts.jaasRanking 
     * @param {Boolean} opts.oauthOfflineValidation 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo}
     */
    comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path'],
        'jaas.controlFlag': opts['jaasControlFlag'],
        'jaas.realmName': opts['jaasRealmName'],
        'jaas.ranking': opts['jaasRanking'],
        'oauth.offline.validation': opts['oauthOfflineValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplAccessTokenCleanupTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplAccessTokenCleanupTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplAccessTokenCleanupTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo}
     */
    comAdobeGraniteOauthServerImplAccessTokenCleanupTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.oauthClientRevocationActive 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo}
     */
    comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.client.revocation.active': opts['oauthClientRevocationActive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletPaths 
     * @param {Boolean} opts.oauthRevocationActive 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo}
     */
    comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.paths': opts['slingServletPaths'],
        'oauth.revocation.active': opts['oauthRevocationActive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.oauthIssuer 
     * @param {String} opts.oauthAccessTokenExpiresIn 
     * @param {String} opts.osgiHttpWhiteboardServletPattern 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo}
     */
    comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.issuer': opts['oauthIssuer'],
        'oauth.access.token.expires.in': opts['oauthAccessTokenExpiresIn'],
        'osgi.http.whiteboard.servlet.pattern': opts['osgiHttpWhiteboardServletPattern'],
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.oauthTokenRevocationActive 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo}
     */
    comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'oauth.token.revocation.active': opts['oauthTokenRevocationActive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplOffloadingConfigurator operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingConfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.offloadingTransporter 
     * @param {Boolean} opts.offloadingCleanupPayload 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingConfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo}
     */
    comAdobeGraniteOffloadingImplOffloadingConfigurator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'offloading.transporter': opts['offloadingTransporter'],
        'offloading.cleanup.payload': opts['offloadingCleanupPayload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplOffloadingJobCloner operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingJobClonerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.offloadingJobclonerEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingJobClonerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo}
     */
    comAdobeGraniteOffloadingImplOffloadingJobCloner(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'offloading.jobcloner.enabled': opts['offloadingJobclonerEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplOffloadingJobOffloader operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingJobOffloaderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.offloadingOffloaderEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplOffloadingJobOffloaderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo}
     */
    comAdobeGraniteOffloadingImplOffloadingJobOffloader(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'offloading.offloader.enabled': opts['offloadingOffloaderEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.offloadingAgentmanagerEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo}
     */
    comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'offloading.agentmanager.enabled': opts['offloadingAgentmanagerEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.defaultTransportAgentToWorkerPrefix 
     * @param {String} opts.defaultTransportAgentToMasterPrefix 
     * @param {String} opts.defaultTransportInputPackage 
     * @param {String} opts.defaultTransportOutputPackage 
     * @param {Boolean} opts.defaultTransportReplicationSynchronous 
     * @param {Boolean} opts.defaultTransportContentpackage 
     * @param {Boolean} opts.offloadingTransporterDefaultEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo}
     */
    comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'default.transport.agent-to-worker.prefix': opts['defaultTransportAgentToWorkerPrefix'],
        'default.transport.agent-to-master.prefix': opts['defaultTransportAgentToMasterPrefix'],
        'default.transport.input.package': opts['defaultTransportInputPackage'],
        'default.transport.output.package': opts['defaultTransportOutputPackage'],
        'default.transport.replication.synchronous': opts['defaultTransportReplicationSynchronous'],
        'default.transport.contentpackage': opts['defaultTransportContentpackage'],
        'offloading.transporter.default.enabled': opts['offloadingTransporterDefaultEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.omnisearchSuggestionRequiretextMin 
     * @param {Boolean} opts.omnisearchSuggestionSpellcheckRequire 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo}
     */
    comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'omnisearch.suggestion.requiretext.min': opts['omnisearchSuggestionRequiretextMin'],
        'omnisearch.suggestion.spellcheck.require': opts['omnisearchSuggestionSpellcheckRequire']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteOptoutImplOptOutServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteOptoutImplOptOutServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteOptoutImplOptOutServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.optoutCookies 
     * @param {Array.<String>} opts.optoutHeaders 
     * @param {Array.<String>} opts.optoutWhitelistCookies 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteOptoutImplOptOutServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteOptoutImplOptOutServiceImplInfo}
     */
    comAdobeGraniteOptoutImplOptOutServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'optout.cookies': this.apiClient.buildCollectionParam(opts['optoutCookies'], 'multi'),
        'optout.headers': this.apiClient.buildCollectionParam(opts['optoutHeaders'], 'multi'),
        'optout.whitelist.cookies': this.apiClient.buildCollectionParam(opts['optoutWhitelistCookies'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteOptoutImplOptOutServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.indexingCriticalThreshold 
     * @param {Number} opts.indexingWarnThreshold 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo}
     */
    comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'indexing.critical.threshold': opts['indexingCriticalThreshold'],
        'indexing.warn.threshold': opts['indexingWarnThreshold'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcLargeIndexHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcLargeIndexHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.largeIndexCriticalThreshold 
     * @param {Number} opts.largeIndexWarnThreshold 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcLargeIndexHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo}
     */
    comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'large.index.critical.threshold': opts['largeIndexCriticalThreshold'],
        'large.index.warn.threshold': opts['largeIndexWarnThreshold'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo}
     */
    comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.getPeriod 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo}
     */
    comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'getPeriod': opts['getPeriod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo}
     */
    comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.numberOfRetriesAllowed 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo}
     */
    comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'number.of.retries.allowed': opts['numberOfRetriesAllowed'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo}
     */
    comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo}
     */
    comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Array.<String>} opts.excludeSearchPath 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo}
     */
    comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'exclude.search.path': this.apiClient.buildCollectionParam(opts['excludeSearchPath'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo}
     */
    comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo}
     */
    comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Array.<String>} opts.accountLogins 
     * @param {Array.<String>} opts.consoleLogins 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo}
     */
    comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'account.logins': this.apiClient.buildCollectionParam(opts['accountLogins'], 'multi'),
        'console.logins': this.apiClient.buildCollectionParam(opts['consoleLogins'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {Number} opts.diskSpaceWarnThreshold 
     * @param {Number} opts.diskSpaceErrorThreshold 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo}
     */
    comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'disk.space.warn.threshold': opts['diskSpaceWarnThreshold'],
        'disk.space.error.threshold': opts['diskSpaceErrorThreshold']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo}
     */
    comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryImplCommitStatsConfig operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryImplCommitStatsConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryImplCommitStatsConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Number} opts.intervalSeconds 
     * @param {Number} opts.commitsPerIntervalThreshold 
     * @param {Number} opts.maxLocationLength 
     * @param {Number} opts.maxDetailsShown 
     * @param {Number} opts.minDetailsPercentage 
     * @param {Array.<String>} opts.threadMatchers 
     * @param {Number} opts.maxGreedyDepth 
     * @param {String} opts.greedyStackMatchers 
     * @param {Array.<String>} opts.stackFilters 
     * @param {Array.<String>} opts.stackMatchers 
     * @param {Array.<String>} opts.stackCategorizers 
     * @param {Array.<String>} opts.stackShorteners 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryImplCommitStatsConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryImplCommitStatsConfigInfo}
     */
    comAdobeGraniteRepositoryImplCommitStatsConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled'],
        'intervalSeconds': opts['intervalSeconds'],
        'commitsPerIntervalThreshold': opts['commitsPerIntervalThreshold'],
        'maxLocationLength': opts['maxLocationLength'],
        'maxDetailsShown': opts['maxDetailsShown'],
        'minDetailsPercentage': opts['minDetailsPercentage'],
        'threadMatchers': this.apiClient.buildCollectionParam(opts['threadMatchers'], 'multi'),
        'maxGreedyDepth': opts['maxGreedyDepth'],
        'greedyStackMatchers': opts['greedyStackMatchers'],
        'stackFilters': this.apiClient.buildCollectionParam(opts['stackFilters'], 'multi'),
        'stackMatchers': this.apiClient.buildCollectionParam(opts['stackMatchers'], 'multi'),
        'stackCategorizers': this.apiClient.buildCollectionParam(opts['stackCategorizers'], 'multi'),
        'stackShorteners': this.apiClient.buildCollectionParam(opts['stackShorteners'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRepositoryServiceUserConfiguration operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRepositoryServiceUserConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRepositoryServiceUserConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Boolean} opts.serviceusersSimpleSubjectPopulation 
     * @param {Array.<String>} opts.serviceusersList 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRepositoryServiceUserConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRepositoryServiceUserConfigurationInfo}
     */
    comAdobeGraniteRepositoryServiceUserConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'serviceusers.simpleSubjectPopulation': opts['serviceusersSimpleSubjectPopulation'],
        'serviceusers.list': this.apiClient.buildCollectionParam(opts['serviceusersList'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRepositoryServiceUserConfigurationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo}
     */
    comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteResourcestatusImplCompositeStatusType operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteResourcestatusImplCompositeStatusTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {Array.<String>} opts.types 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteResourcestatusImplCompositeStatusTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo}
     */
    comAdobeGraniteResourcestatusImplCompositeStatusType(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteResourcestatusImplStatusResourceProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteResourcestatusImplStatusResourceProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoot 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteResourcestatusImplStatusResourceProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo}
     */
    comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'provider.root': opts['providerRoot']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRestAssetsImplAssetContentDispositionFilter operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRestAssetsImplAssetContentDispositionFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.mimeAllowEmpty 
     * @param {Array.<String>} opts.mimeAllowed 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRestAssetsImplAssetContentDispositionFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo}
     */
    comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'mime.allowEmpty': opts['mimeAllowEmpty'],
        'mime.allowed': this.apiClient.buildCollectionParam(opts['mimeAllowed'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoots 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo}
     */
    comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'provider.roots': opts['providerRoots']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteRestImplServletDefaultGETServlet operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteRestImplServletDefaultGETServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteRestImplServletDefaultGETServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.defaultLimit 
     * @param {Boolean} opts.useAbsoluteUri 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteRestImplServletDefaultGETServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteRestImplServletDefaultGETServletInfo}
     */
    comAdobeGraniteRestImplServletDefaultGETServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'default.limit': opts['defaultLimit'],
        'use.absolute.uri': opts['useAbsoluteUri']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteRestImplServletDefaultGETServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.hcTags 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo}
     */
    comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteSecurityUserUserPropertiesService operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteSecurityUserUserPropertiesServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteSecurityUserUserPropertiesServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.adapterCondition 
     * @param {Array.<String>} opts.graniteUserpropertiesNodetypes 
     * @param {Array.<String>} opts.graniteUserpropertiesResourcetypes 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteSecurityUserUserPropertiesServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteSecurityUserUserPropertiesServiceInfo}
     */
    comAdobeGraniteSecurityUserUserPropertiesService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'adapter.condition': opts['adapterCondition'],
        'granite.userproperties.nodetypes': this.apiClient.buildCollectionParam(opts['graniteUserpropertiesNodetypes'], 'multi'),
        'granite.userproperties.resourcetypes': this.apiClient.buildCollectionParam(opts['graniteUserpropertiesResourcetypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteSocialgraphImplSocialGraphFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.group2memberRelationshipOutgoing 
     * @param {Array.<String>} opts.group2memberExcludedOutgoing 
     * @param {String} opts.group2memberRelationshipIncoming 
     * @param {Array.<String>} opts.group2memberExcludedIncoming 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteSocialgraphImplSocialGraphFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo}
     */
    comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'group2member.relationship.outgoing': opts['group2memberRelationshipOutgoing'],
        'group2member.excluded.outgoing': this.apiClient.buildCollectionParam(opts['group2memberExcludedOutgoing'], 'multi'),
        'group2member.relationship.incoming': opts['group2memberRelationshipIncoming'],
        'group2member.excluded.incoming': this.apiClient.buildCollectionParam(opts['group2memberExcludedIncoming'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {String} opts.jmxObjectname 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo}
     */
    comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression'],
        'jmx.objectname': opts['jmxObjectname']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.adapterCondition 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo}
     */
    comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'adapter.condition': opts['adapterCondition']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTaskmanagementImplJcrTaskArchiveService operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.archivingEnabled 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.archiveSinceDaysCompleted 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo}
     */
    comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'archiving.enabled': opts['archivingEnabled'],
        'scheduler.expression': opts['schedulerExpression'],
        'archive.since.days.completed': opts['archiveSinceDaysCompleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.purgeCompleted 
     * @param {Number} opts.completedAge 
     * @param {Boolean} opts.purgeActive 
     * @param {Number} opts.activeAge 
     * @param {Number} opts.saveThreshold 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo}
     */
    comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'purgeCompleted': opts['purgeCompleted'],
        'completedAge': opts['completedAge'],
        'purgeActive': opts['purgeActive'],
        'activeAge': opts['activeAge'],
        'saveThreshold': opts['saveThreshold']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.adapterCondition 
     * @param {Array.<String>} opts.taskmanagerAdmingroups 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo}
     */
    comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'adapter.condition': opts['adapterCondition'],
        'taskmanager.admingroups': this.apiClient.buildCollectionParam(opts['taskmanagerAdmingroups'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteThreaddumpThreadDumpCollector operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteThreaddumpThreadDumpCollectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteThreaddumpThreadDumpCollectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {String} opts.schedulerRunOn 
     * @param {Boolean} opts.graniteThreaddumpEnabled 
     * @param {Number} opts.graniteThreaddumpDumpsPerFile 
     * @param {Boolean} opts.graniteThreaddumpEnableGzipCompression 
     * @param {Boolean} opts.graniteThreaddumpEnableDirectoriesCompression 
     * @param {Boolean} opts.graniteThreaddumpEnableJStack 
     * @param {Number} opts.graniteThreaddumpMaxBackupDays 
     * @param {String} opts.graniteThreaddumpBackupCleanTrigger 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteThreaddumpThreadDumpCollectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteThreaddumpThreadDumpCollectorInfo}
     */
    comAdobeGraniteThreaddumpThreadDumpCollector(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.period': opts['schedulerPeriod'],
        'scheduler.runOn': opts['schedulerRunOn'],
        'granite.threaddump.enabled': opts['graniteThreaddumpEnabled'],
        'granite.threaddump.dumpsPerFile': opts['graniteThreaddumpDumpsPerFile'],
        'granite.threaddump.enableGzipCompression': opts['graniteThreaddumpEnableGzipCompression'],
        'granite.threaddump.enableDirectoriesCompression': opts['graniteThreaddumpEnableDirectoriesCompression'],
        'granite.threaddump.enableJStack': opts['graniteThreaddumpEnableJStack'],
        'granite.threaddump.maxBackupDays': opts['graniteThreaddumpMaxBackupDays'],
        'granite.threaddump.backupCleanTrigger': opts['graniteThreaddumpBackupCleanTrigger']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.translationFactory 
     * @param {String} opts.defaultConnectorLabel 
     * @param {String} opts.defaultConnectorAttribution 
     * @param {String} opts.defaultConnectorWorkspaceId 
     * @param {String} opts.defaultConnectorSubscriptionKey 
     * @param {String} opts.languageMapLocation 
     * @param {String} opts.categoryMapLocation 
     * @param {Number} opts.retryAttempts 
     * @param {Number} opts.timeoutCount 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo}
     */
    comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'translationFactory': opts['translationFactory'],
        'defaultConnectorLabel': opts['defaultConnectorLabel'],
        'defaultConnectorAttribution': opts['defaultConnectorAttribution'],
        'defaultConnectorWorkspaceId': opts['defaultConnectorWorkspaceId'],
        'defaultConnectorSubscriptionKey': opts['defaultConnectorSubscriptionKey'],
        'languageMapLocation': opts['languageMapLocation'],
        'categoryMapLocation': opts['categoryMapLocation'],
        'retryAttempts': opts['retryAttempts'],
        'timeoutCount': opts['timeoutCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteTranslationCoreImplTranslationManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteTranslationCoreImplTranslationManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.defaultConnectorName 
     * @param {String} opts.defaultCategory 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteTranslationCoreImplTranslationManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo}
     */
    comAdobeGraniteTranslationCoreImplTranslationManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'defaultConnectorName': opts['defaultConnectorName'],
        'defaultCategory': opts['defaultCategory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.htmllibmanagerTiming 
     * @param {String} opts.htmllibmanagerDebugInitJs 
     * @param {Boolean} opts.htmllibmanagerMinify 
     * @param {Boolean} opts.htmllibmanagerDebug 
     * @param {Boolean} opts.htmllibmanagerGzip 
     * @param {Number} opts.htmllibmanagerMaxDataUriSize 
     * @param {Number} opts.htmllibmanagerMaxage 
     * @param {Boolean} opts.htmllibmanagerForceCQUrlInfo 
     * @param {String} opts.htmllibmanagerDefaultthemename 
     * @param {String} opts.htmllibmanagerDefaultuserthemename 
     * @param {String} opts.htmllibmanagerClientmanager 
     * @param {Array.<String>} opts.htmllibmanagerPathList 
     * @param {Array.<String>} opts.htmllibmanagerExcludedPathList 
     * @param {Array.<String>} opts.htmllibmanagerProcessorJs 
     * @param {Array.<String>} opts.htmllibmanagerProcessorCss 
     * @param {Array.<String>} opts.htmllibmanagerLongcachePatterns 
     * @param {String} opts.htmllibmanagerLongcacheFormat 
     * @param {Boolean} opts.htmllibmanagerUseFileSystemOutputCache 
     * @param {String} opts.htmllibmanagerFileSystemOutputCacheLocation 
     * @param {Array.<String>} opts.htmllibmanagerDisableReplacement 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo}
     */
    comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'htmllibmanager.timing': opts['htmllibmanagerTiming'],
        'htmllibmanager.debug.init.js': opts['htmllibmanagerDebugInitJs'],
        'htmllibmanager.minify': opts['htmllibmanagerMinify'],
        'htmllibmanager.debug': opts['htmllibmanagerDebug'],
        'htmllibmanager.gzip': opts['htmllibmanagerGzip'],
        'htmllibmanager.maxDataUriSize': opts['htmllibmanagerMaxDataUriSize'],
        'htmllibmanager.maxage': opts['htmllibmanagerMaxage'],
        'htmllibmanager.forceCQUrlInfo': opts['htmllibmanagerForceCQUrlInfo'],
        'htmllibmanager.defaultthemename': opts['htmllibmanagerDefaultthemename'],
        'htmllibmanager.defaultuserthemename': opts['htmllibmanagerDefaultuserthemename'],
        'htmllibmanager.clientmanager': opts['htmllibmanagerClientmanager'],
        'htmllibmanager.path.list': this.apiClient.buildCollectionParam(opts['htmllibmanagerPathList'], 'multi'),
        'htmllibmanager.excluded.path.list': this.apiClient.buildCollectionParam(opts['htmllibmanagerExcludedPathList'], 'multi'),
        'htmllibmanager.processor.js': this.apiClient.buildCollectionParam(opts['htmllibmanagerProcessorJs'], 'multi'),
        'htmllibmanager.processor.css': this.apiClient.buildCollectionParam(opts['htmllibmanagerProcessorCss'], 'multi'),
        'htmllibmanager.longcache.patterns': this.apiClient.buildCollectionParam(opts['htmllibmanagerLongcachePatterns'], 'multi'),
        'htmllibmanager.longcache.format': opts['htmllibmanagerLongcacheFormat'],
        'htmllibmanager.useFileSystemOutputCache': opts['htmllibmanagerUseFileSystemOutputCache'],
        'htmllibmanager.fileSystemOutputCacheLocation': opts['htmllibmanagerFileSystemOutputCacheLocation'],
        'htmllibmanager.disable.replacement': this.apiClient.buildCollectionParam(opts['htmllibmanagerDisableReplacement'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo}
     */
    comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.graniteWorkflowWorkflowPublishEventServiceEnabled 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo}
     */
    comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'granite.workflow.WorkflowPublishEventService.enabled': opts['graniteWorkflowWorkflowPublishEventServiceEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.bucketSize 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo}
     */
    comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'bucketSize': opts['bucketSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.defaultTimeout 
     * @param {Number} opts.maxTimeout 
     * @param {Number} opts.defaultPeriod 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo}
     */
    comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'default.timeout': opts['defaultTimeout'],
        'max.timeout': opts['maxTimeout'],
        'default.period': opts['defaultPeriod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreJobJobHandler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJobJobHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreJobJobHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.jobTopics 
     * @param {Boolean} opts.allowSelfProcessTermination 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreJobJobHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreJobJobHandlerInfo}
     */
    comAdobeGraniteWorkflowCoreJobJobHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'job.topics': this.apiClient.buildCollectionParam(opts['jobTopics'], 'multi'),
        'allow.self.process.termination': opts['allowSelfProcessTermination']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jobTopics 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo}
     */
    comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'job.topics': opts['jobTopics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCorePayloadMapCache operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCorePayloadMapCacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCorePayloadMapCacheInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.getSystemWorkflowModels 
     * @param {String} opts.getPackageRootPath 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCorePayloadMapCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCorePayloadMapCacheInfo}
     */
    comAdobeGraniteWorkflowCorePayloadMapCache(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'getSystemWorkflowModels': this.apiClient.buildCollectionParam(opts['getSystemWorkflowModels'], 'multi'),
        'getPackageRootPath': opts['getPackageRootPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.payloadMoveWhiteList 
     * @param {Boolean} opts.payloadMoveHandleFromWorkflowProcess 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo}
     */
    comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'payload.move.white.list': this.apiClient.buildCollectionParam(opts['payloadMoveWhiteList'], 'multi'),
        'payload.move.handle.from.workflow.process': opts['payloadMoveHandleFromWorkflowProcess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreWorkflowConfig operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreWorkflowConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreWorkflowConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWorkflowConfigWorkflowPackagesRootPath 
     * @param {Boolean} opts.cqWorkflowConfigWorkflowProcessLegacyMode 
     * @param {Boolean} opts.cqWorkflowConfigAllowLocking 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreWorkflowConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreWorkflowConfigInfo}
     */
    comAdobeGraniteWorkflowCoreWorkflowConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.workflow.config.workflow.packages.root.path': this.apiClient.buildCollectionParam(opts['cqWorkflowConfigWorkflowPackagesRootPath'], 'multi'),
        'cq.workflow.config.workflow.process.legacy.mode': opts['cqWorkflowConfigWorkflowProcessLegacyMode'],
        'cq.workflow.config.allow.locking': opts['cqWorkflowConfigAllowLocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowCoreWorkflowSessionFactory operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreWorkflowSessionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.graniteWorkflowinboxSortPropertyName 
     * @param {String} opts.graniteWorkflowinboxSortOrder 
     * @param {Number} opts.cqWorkflowJobRetry 
     * @param {Array.<String>} opts.cqWorkflowSuperuser 
     * @param {Number} opts.graniteWorkflowInboxQuerySize 
     * @param {Boolean} opts.graniteWorkflowAdminUserGroupFilter 
     * @param {Boolean} opts.graniteWorkflowEnforceWorkitemAssigneePermissions 
     * @param {Boolean} opts.graniteWorkflowEnforceWorkflowInitiatorPermissions 
     * @param {Boolean} opts.graniteWorkflowInjectTenantIdInJobTopics 
     * @param {Number} opts.graniteWorkflowMaxPurgeSaveThreshold 
     * @param {Number} opts.graniteWorkflowMaxPurgeQueryCount 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowCoreWorkflowSessionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo}
     */
    comAdobeGraniteWorkflowCoreWorkflowSessionFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'granite.workflowinbox.sort.propertyName': opts['graniteWorkflowinboxSortPropertyName'],
        'granite.workflowinbox.sort.order': opts['graniteWorkflowinboxSortOrder'],
        'cq.workflow.job.retry': opts['cqWorkflowJobRetry'],
        'cq.workflow.superuser': this.apiClient.buildCollectionParam(opts['cqWorkflowSuperuser'], 'multi'),
        'granite.workflow.inboxQuerySize': opts['graniteWorkflowInboxQuerySize'],
        'granite.workflow.adminUserGroupFilter': opts['graniteWorkflowAdminUserGroupFilter'],
        'granite.workflow.enforceWorkitemAssigneePermissions': opts['graniteWorkflowEnforceWorkitemAssigneePermissions'],
        'granite.workflow.enforceWorkflowInitiatorPermissions': opts['graniteWorkflowEnforceWorkflowInitiatorPermissions'],
        'granite.workflow.injectTenantIdInJobTopics': opts['graniteWorkflowInjectTenantIdInJobTopics'],
        'granite.workflow.maxPurgeSaveThreshold': opts['graniteWorkflowMaxPurgeSaveThreshold'],
        'granite.workflow.maxPurgeQueryCount': opts['graniteWorkflowMaxPurgeQueryCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeGraniteWorkflowPurgeScheduler operation.
     * @callback module:api/ConfigmgrApi~comAdobeGraniteWorkflowPurgeSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeGraniteWorkflowPurgeSchedulerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.scheduledpurgeName 
     * @param {String} opts.scheduledpurgeWorkflowStatus 
     * @param {Array.<String>} opts.scheduledpurgeModelIds 
     * @param {Number} opts.scheduledpurgeDaysold 
     * @param {module:api/ConfigmgrApi~comAdobeGraniteWorkflowPurgeSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeGraniteWorkflowPurgeSchedulerInfo}
     */
    comAdobeGraniteWorkflowPurgeScheduler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduledpurge.name': opts['scheduledpurgeName'],
        'scheduledpurge.workflowStatus': opts['scheduledpurgeWorkflowStatus'],
        'scheduledpurge.modelIds': this.apiClient.buildCollectionParam(opts['scheduledpurgeModelIds'], 'multi'),
        'scheduledpurge.daysold': opts['scheduledpurgeDaysold']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeGraniteWorkflowPurgeSchedulerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeOctopusNcommBootstrap operation.
     * @callback module:api/ConfigmgrApi~comAdobeOctopusNcommBootstrapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeOctopusNcommBootstrapInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxConnections 
     * @param {Number} opts.maxRequests 
     * @param {Number} opts.requestTimeout 
     * @param {Number} opts.requestRetries 
     * @param {Number} opts.launchTimeout 
     * @param {module:api/ConfigmgrApi~comAdobeOctopusNcommBootstrapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeOctopusNcommBootstrapInfo}
     */
    comAdobeOctopusNcommBootstrap(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'maxConnections': opts['maxConnections'],
        'maxRequests': opts['maxRequests'],
        'requestTimeout': opts['requestTimeout'],
        'requestRetries': opts['requestRetries'],
        'launchTimeout': opts['launchTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeOctopusNcommBootstrapInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS operation.
     * @callback module:api/ConfigmgrApi~comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.communitiesIntegrationLivefyreSlingEventFilter 
     * @param {module:api/ConfigmgrApi~comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo}
     */
    comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'communities.integration.livefyre.sling.event.filter': opts['communitiesIntegrationLivefyreSlingEventFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comAdobeXmpWorkerFilesNcommXMPFilesNComm operation.
     * @callback module:api/ConfigmgrApi~comAdobeXmpWorkerFilesNcommXMPFilesNCommCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.maxConnections 
     * @param {String} opts.maxRequests 
     * @param {String} opts.requestTimeout 
     * @param {String} opts.logDir 
     * @param {module:api/ConfigmgrApi~comAdobeXmpWorkerFilesNcommXMPFilesNCommCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo}
     */
    comAdobeXmpWorkerFilesNcommXMPFilesNComm(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'maxConnections': opts['maxConnections'],
        'maxRequests': opts['maxRequests'],
        'requestTimeout': opts['requestTimeout'],
        'logDir': opts['logDir']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCommonsDatasourceJdbcpoolJdbcPoolService operation.
     * @callback module:api/ConfigmgrApi~comDayCommonsDatasourceJdbcpoolJdbcPoolServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jdbcDriverClass 
     * @param {String} opts.jdbcConnectionUri 
     * @param {String} opts.jdbcUsername 
     * @param {String} opts.jdbcPassword 
     * @param {String} opts.jdbcValidationQuery 
     * @param {Boolean} opts.defaultReadonly 
     * @param {Boolean} opts.defaultAutocommit 
     * @param {Number} opts.poolSize 
     * @param {Number} opts.poolMaxWaitMsec 
     * @param {String} opts.datasourceName 
     * @param {Array.<String>} opts.datasourceSvcProperties 
     * @param {module:api/ConfigmgrApi~comDayCommonsDatasourceJdbcpoolJdbcPoolServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo}
     */
    comDayCommonsDatasourceJdbcpoolJdbcPoolService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'jdbc.driver.class': opts['jdbcDriverClass'],
        'jdbc.connection.uri': opts['jdbcConnectionUri'],
        'jdbc.username': opts['jdbcUsername'],
        'jdbc.password': opts['jdbcPassword'],
        'jdbc.validation.query': opts['jdbcValidationQuery'],
        'default.readonly': opts['defaultReadonly'],
        'default.autocommit': opts['defaultAutocommit'],
        'pool.size': opts['poolSize'],
        'pool.max.wait.msec': opts['poolMaxWaitMsec'],
        'datasource.name': opts['datasourceName'],
        'datasource.svc.properties': this.apiClient.buildCollectionParam(opts['datasourceSvcProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCommonsHttpclient operation.
     * @callback module:api/ConfigmgrApi~comDayCommonsHttpclientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCommonsHttpclientInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.proxyEnabled 
     * @param {String} opts.proxyHost 
     * @param {String} opts.proxyUser 
     * @param {String} opts.proxyPassword 
     * @param {String} opts.proxyNtlmHost 
     * @param {String} opts.proxyNtlmDomain 
     * @param {Array.<String>} opts.proxyExceptions 
     * @param {module:api/ConfigmgrApi~comDayCommonsHttpclientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCommonsHttpclientInfo}
     */
    comDayCommonsHttpclient(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'proxy.enabled': opts['proxyEnabled'],
        'proxy.host': opts['proxyHost'],
        'proxy.user': opts['proxyUser'],
        'proxy.password': opts['proxyPassword'],
        'proxy.ntlm.host': opts['proxyNtlmHost'],
        'proxy.ntlm.domain': opts['proxyNtlmDomain'],
        'proxy.exceptions': this.apiClient.buildCollectionParam(opts['proxyExceptions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCommonsHttpclientInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.commons.httpclient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsImplStorePropertiesChangeListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsImplStorePropertiesChangeListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqStoreListenerAdditionalStorePaths 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsImplStorePropertiesChangeListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo}
     */
    comDayCqAnalyticsImplStorePropertiesChangeListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.store.listener.additionalStorePaths': this.apiClient.buildCollectionParam(opts['cqStoreListenerAdditionalStorePaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.allowedPaths 
     * @param {Number} opts.cqAnalyticsSaintExporterPagesize 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo}
     */
    comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'allowed.paths': this.apiClient.buildCollectionParam(opts['allowedPaths'], 'multi'),
        'cq.analytics.saint.exporter.pagesize': opts['cqAnalyticsSaintExporterPagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsSitecatalystImplImporterReportImporter operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplImporterReportImporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.reportFetchAttempts 
     * @param {Number} opts.reportFetchDelay 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplImporterReportImporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo}
     */
    comDayCqAnalyticsSitecatalystImplImporterReportImporter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'report.fetch.attempts': opts['reportFetchAttempts'],
        'report.fetch.delay': opts['reportFetchDelay']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqAnalyticsAdapterfactoryContextstores 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo}
     */
    comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.analytics.adapterfactory.contextstores': this.apiClient.buildCollectionParam(opts['cqAnalyticsAdapterfactoryContextstores'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqAnalyticsSitecatalystServiceDatacenterUrl 
     * @param {Array.<String>} opts.devhostnamepatterns 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo}
     */
    comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.analytics.sitecatalyst.service.datacenter.url': this.apiClient.buildCollectionParam(opts['cqAnalyticsSitecatalystServiceDatacenterUrl'], 'multi'),
        'devhostnamepatterns': this.apiClient.buildCollectionParam(opts['devhostnamepatterns'], 'multi'),
        'connection.timeout': opts['connectionTimeout'],
        'socket.timeout': opts['socketTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqAnalyticsTestandtargetAccountoptionsupdaterEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo}
     */
    comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.analytics.testandtarget.accountoptionsupdater.enabled': opts['cqAnalyticsTestandtargetAccountoptionsupdaterEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo}
     */
    comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.analytics.testandtarget.deleteauthoractivitylistener.enabled': opts['cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo}
     */
    comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled': opts['cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplSegmentImporter operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplSegmentImporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqAnalyticsTestandtargetSegmentimporterEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplSegmentImporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo}
     */
    comDayCqAnalyticsTestandtargetImplSegmentImporter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.analytics.testandtarget.segmentimporter.enabled': opts['cqAnalyticsTestandtargetSegmentimporterEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplServiceWebServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.endpointUri 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplServiceWebServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo}
     */
    comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'endpointUri': opts['endpointUri'],
        'connectionTimeout': opts['connectionTimeout'],
        'socketTimeout': opts['socketTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplServletsAdminServerServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.testandtargetEndpointUrl 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplServletsAdminServerServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo}
     */
    comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'testandtarget.endpoint.url': opts['testandtargetEndpointUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqAnalyticsTestandtargetApiUrl 
     * @param {Number} opts.cqAnalyticsTestandtargetTimeout 
     * @param {Number} opts.cqAnalyticsTestandtargetSockettimeout 
     * @param {String} opts.cqAnalyticsTestandtargetRecommendationsUrlReplace 
     * @param {String} opts.cqAnalyticsTestandtargetRecommendationsUrlReplacewith 
     * @param {module:api/ConfigmgrApi~comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo}
     */
    comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.analytics.testandtarget.api.url': opts['cqAnalyticsTestandtargetApiUrl'],
        'cq.analytics.testandtarget.timeout': opts['cqAnalyticsTestandtargetTimeout'],
        'cq.analytics.testandtarget.sockettimeout': opts['cqAnalyticsTestandtargetSockettimeout'],
        'cq.analytics.testandtarget.recommendations.url.replace': opts['cqAnalyticsTestandtargetRecommendationsUrlReplace'],
        'cq.analytics.testandtarget.recommendations.url.replacewith': opts['cqAnalyticsTestandtargetRecommendationsUrlReplacewith']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAuthImplCugCugSupportImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqAuthImplCugCugSupportImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAuthImplCugCugSupportImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cugExemptedPrincipals 
     * @param {Boolean} opts.cugEnabled 
     * @param {String} opts.cugPrincipalsRegex 
     * @param {String} opts.cugPrincipalsReplacement 
     * @param {module:api/ConfigmgrApi~comDayCqAuthImplCugCugSupportImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAuthImplCugCugSupportImplInfo}
     */
    comDayCqAuthImplCugCugSupportImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cug.exempted.principals': this.apiClient.buildCollectionParam(opts['cugExemptedPrincipals'], 'multi'),
        'cug.enabled': opts['cugEnabled'],
        'cug.principals.regex': opts['cugPrincipalsRegex'],
        'cug.principals.replacement': opts['cugPrincipalsReplacement']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAuthImplCugCugSupportImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqAuthImplLoginSelectorHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqAuthImplLoginSelectorHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqAuthImplLoginSelectorHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {Array.<String>} opts.authLoginselectorMappings 
     * @param {Array.<String>} opts.authLoginselectorChangepwMappings 
     * @param {String} opts.authLoginselectorDefaultloginpage 
     * @param {String} opts.authLoginselectorDefaultchangepwpage 
     * @param {Array.<String>} opts.authLoginselectorHandle 
     * @param {Boolean} opts.authLoginselectorHandleAllExtensions 
     * @param {module:api/ConfigmgrApi~comDayCqAuthImplLoginSelectorHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqAuthImplLoginSelectorHandlerInfo}
     */
    comDayCqAuthImplLoginSelectorHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path'],
        'service.ranking': opts['serviceRanking'],
        'auth.loginselector.mappings': this.apiClient.buildCollectionParam(opts['authLoginselectorMappings'], 'multi'),
        'auth.loginselector.changepw.mappings': this.apiClient.buildCollectionParam(opts['authLoginselectorChangepwMappings'], 'multi'),
        'auth.loginselector.defaultloginpage': opts['authLoginselectorDefaultloginpage'],
        'auth.loginselector.defaultchangepwpage': opts['authLoginselectorDefaultchangepwpage'],
        'auth.loginselector.handle': this.apiClient.buildCollectionParam(opts['authLoginselectorHandle'], 'multi'),
        'auth.loginselector.handle.all.extensions': opts['authLoginselectorHandleAllExtensions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqAuthImplLoginSelectorHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCommonsImplExternalizerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqCommonsImplExternalizerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCommonsImplExternalizerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.externalizerDomains 
     * @param {String} opts.externalizerHost 
     * @param {String} opts.externalizerContextpath 
     * @param {Boolean} opts.externalizerEncodedpath 
     * @param {module:api/ConfigmgrApi~comDayCqCommonsImplExternalizerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCommonsImplExternalizerImplInfo}
     */
    comDayCqCommonsImplExternalizerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'externalizer.domains': this.apiClient.buildCollectionParam(opts['externalizerDomains'], 'multi'),
        'externalizer.host': opts['externalizerHost'],
        'externalizer.contextpath': opts['externalizerContextpath'],
        'externalizer.encodedpath': opts['externalizerEncodedpath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqCommonsImplExternalizerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCommonsServletsRootMappingServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqCommonsServletsRootMappingServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCommonsServletsRootMappingServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.rootmappingTarget 
     * @param {module:api/ConfigmgrApi~comDayCqCommonsServletsRootMappingServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCommonsServletsRootMappingServletInfo}
     */
    comDayCqCommonsServletsRootMappingServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'rootmapping.target': opts['rootmappingTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqCommonsServletsRootMappingServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke operation.
     * @callback module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.codeupgradetasks 
     * @param {Array.<String>} opts.codeupgradetaskfilters 
     * @param {module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo}
     */
    comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'codeupgradetasks': this.apiClient.buildCollectionParam(opts['codeupgradetasks'], 'multi'),
        'codeupgradetaskfilters': this.apiClient.buildCollectionParam(opts['codeupgradetaskfilters'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList operation.
     * @callback module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.upgradeTaskIgnoreList 
     * @param {module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo}
     */
    comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'upgradeTaskIgnoreList': this.apiClient.buildCollectionParam(opts['upgradeTaskIgnoreList'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist operation.
     * @callback module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.effectiveBundleListPath 
     * @param {module:api/ConfigmgrApi~comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo}
     */
    comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'effectiveBundleListPath': opts['effectiveBundleListPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqContentsyncImplContentSyncManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqContentsyncImplContentSyncManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqContentsyncImplContentSyncManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.contentsyncFallbackAuthorizable 
     * @param {String} opts.contentsyncFallbackUpdateuser 
     * @param {module:api/ConfigmgrApi~comDayCqContentsyncImplContentSyncManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqContentsyncImplContentSyncManagerImplInfo}
     */
    comDayCqContentsyncImplContentSyncManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'contentsync.fallback.authorizable': opts['contentsyncFallbackAuthorizable'],
        'contentsync.fallback.updateuser': opts['contentsyncFallbackUpdateuser']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqContentsyncImplContentSyncManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCommonsHandlerStandardImageHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCommonsHandlerStandardImageHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCommonsHandlerStandardImageHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.largeFileThreshold 
     * @param {Number} opts.largeCommentThreshold 
     * @param {Boolean} opts.cqDamEnableExtMetaExtraction 
     * @param {module:api/ConfigmgrApi~comDayCqDamCommonsHandlerStandardImageHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCommonsHandlerStandardImageHandlerInfo}
     */
    comDayCqDamCommonsHandlerStandardImageHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'large_file_threshold': opts['largeFileThreshold'],
        'large_comment_threshold': opts['largeCommentThreshold'],
        'cq.dam.enable.ext.meta.extraction': opts['cqDamEnableExtMetaExtraction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCommonsHandlerStandardImageHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCommonsMetadataXmpFilterBlackWhite operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCommonsMetadataXmpFilterBlackWhiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.xmpFilterApplyWhitelist 
     * @param {Array.<String>} opts.xmpFilterWhitelist 
     * @param {Boolean} opts.xmpFilterApplyBlacklist 
     * @param {Array.<String>} opts.xmpFilterBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqDamCommonsMetadataXmpFilterBlackWhiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo}
     */
    comDayCqDamCommonsMetadataXmpFilterBlackWhite(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'xmp.filter.apply_whitelist': opts['xmpFilterApplyWhitelist'],
        'xmp.filter.whitelist': this.apiClient.buildCollectionParam(opts['xmpFilterWhitelist'], 'multi'),
        'xmp.filter.apply_blacklist': opts['xmpFilterApplyBlacklist'],
        'xmp.filter.blacklist': this.apiClient.buildCollectionParam(opts['xmpFilterBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCommonsUtilImplAssetCacheImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCommonsUtilImplAssetCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCommonsUtilImplAssetCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.largeFileMin 
     * @param {Boolean} opts.cacheApply 
     * @param {Array.<String>} opts.mimeTypes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCommonsUtilImplAssetCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCommonsUtilImplAssetCacheImplInfo}
     */
    comDayCqDamCommonsUtilImplAssetCacheImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'large.file.min': opts['largeFileMin'],
        'cache.apply': opts['cacheApply'],
        'mime.types': this.apiClient.buildCollectionParam(opts['mimeTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCommonsUtilImplAssetCacheImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamConfigAnnotationPdfDocumentWidth 
     * @param {Number} opts.cqDamConfigAnnotationPdfDocumentHeight 
     * @param {Number} opts.cqDamConfigAnnotationPdfDocumentPaddingHorizontal 
     * @param {Number} opts.cqDamConfigAnnotationPdfDocumentPaddingVertical 
     * @param {Number} opts.cqDamConfigAnnotationPdfFontSize 
     * @param {String} opts.cqDamConfigAnnotationPdfFontColor 
     * @param {String} opts.cqDamConfigAnnotationPdfFontFamily 
     * @param {String} opts.cqDamConfigAnnotationPdfFontLight 
     * @param {Number} opts.cqDamConfigAnnotationPdfMarginTextImage 
     * @param {Number} opts.cqDamConfigAnnotationPdfMinImageHeight 
     * @param {Number} opts.cqDamConfigAnnotationPdfReviewStatusWidth 
     * @param {String} opts.cqDamConfigAnnotationPdfReviewStatusColorApproved 
     * @param {String} opts.cqDamConfigAnnotationPdfReviewStatusColorRejected 
     * @param {String} opts.cqDamConfigAnnotationPdfReviewStatusColorChangesRequested 
     * @param {Number} opts.cqDamConfigAnnotationPdfAnnotationMarkerWidth 
     * @param {Number} opts.cqDamConfigAnnotationPdfAssetMinheight 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo}
     */
    comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.config.annotation.pdf.document.width': opts['cqDamConfigAnnotationPdfDocumentWidth'],
        'cq.dam.config.annotation.pdf.document.height': opts['cqDamConfigAnnotationPdfDocumentHeight'],
        'cq.dam.config.annotation.pdf.document.padding.horizontal': opts['cqDamConfigAnnotationPdfDocumentPaddingHorizontal'],
        'cq.dam.config.annotation.pdf.document.padding.vertical': opts['cqDamConfigAnnotationPdfDocumentPaddingVertical'],
        'cq.dam.config.annotation.pdf.font.size': opts['cqDamConfigAnnotationPdfFontSize'],
        'cq.dam.config.annotation.pdf.font.color': opts['cqDamConfigAnnotationPdfFontColor'],
        'cq.dam.config.annotation.pdf.font.family': opts['cqDamConfigAnnotationPdfFontFamily'],
        'cq.dam.config.annotation.pdf.font.light': opts['cqDamConfigAnnotationPdfFontLight'],
        'cq.dam.config.annotation.pdf.marginTextImage': opts['cqDamConfigAnnotationPdfMarginTextImage'],
        'cq.dam.config.annotation.pdf.minImageHeight': opts['cqDamConfigAnnotationPdfMinImageHeight'],
        'cq.dam.config.annotation.pdf.reviewStatus.width': opts['cqDamConfigAnnotationPdfReviewStatusWidth'],
        'cq.dam.config.annotation.pdf.reviewStatus.color.approved': opts['cqDamConfigAnnotationPdfReviewStatusColorApproved'],
        'cq.dam.config.annotation.pdf.reviewStatus.color.rejected': opts['cqDamConfigAnnotationPdfReviewStatusColorRejected'],
        'cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested': opts['cqDamConfigAnnotationPdfReviewStatusColorChangesRequested'],
        'cq.dam.config.annotation.pdf.annotationMarker.width': opts['cqDamConfigAnnotationPdfAnnotationMarkerWidth'],
        'cq.dam.config.annotation.pdf.asset.minheight': opts['cqDamConfigAnnotationPdfAssetMinheight']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplAssetMoveListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplAssetMoveListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplAssetMoveListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplAssetMoveListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplAssetMoveListenerInfo}
     */
    comDayCqDamCoreImplAssetMoveListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplAssetMoveListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplAssethomeAssetHomePageConfiguration operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplAssethomeAssetHomePageConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplAssethomeAssetHomePageConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo}
     */
    comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'isEnabled': opts['isEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamAdhocAssetSharePrezipMaxcontentsize 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo}
     */
    comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.adhoc.asset.share.prezip.maxcontentsize': opts['cqDamAdhocAssetSharePrezipMaxcontentsize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplCacheCQBufferedImageCache operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplCacheCQBufferedImageCacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamImageCacheMaxMemory 
     * @param {Number} opts.cqDamImageCacheMaxAge 
     * @param {String} opts.cqDamImageCacheMaxDimension 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplCacheCQBufferedImageCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo}
     */
    comDayCqDamCoreImplCacheCQBufferedImageCache(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.image.cache.max.memory': opts['cqDamImageCacheMaxMemory'],
        'cq.dam.image.cache.max.age': opts['cqDamImageCacheMaxAge'],
        'cq.dam.image.cache.max.dimension': opts['cqDamImageCacheMaxDimension']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplDamChangeEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplDamChangeEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplDamChangeEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.changeeventlistenerObservedPaths 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplDamChangeEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplDamChangeEventListenerInfo}
     */
    comDayCqDamCoreImplDamChangeEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'changeeventlistener.observed.paths': this.apiClient.buildCollectionParam(opts['changeeventlistenerObservedPaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplDamChangeEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplDamEventPurgeService operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplDamEventPurgeServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplDamEventPurgeServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.maxSavedActivities 
     * @param {Number} opts.saveInterval 
     * @param {Boolean} opts.enableActivityPurge 
     * @param {String} opts.eventTypes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplDamEventPurgeServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplDamEventPurgeServiceInfo}
     */
    comDayCqDamCoreImplDamEventPurgeService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression'],
        'maxSavedActivities': opts['maxSavedActivities'],
        'saveInterval': opts['saveInterval'],
        'enableActivityPurge': opts['enableActivityPurge'],
        'eventTypes': opts['eventTypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplDamEventPurgeServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplDamEventRecorderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplDamEventRecorderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplDamEventRecorderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Number} opts.eventQueueLength 
     * @param {Boolean} opts.eventrecorderEnabled 
     * @param {Array.<String>} opts.eventrecorderBlacklist 
     * @param {String} opts.eventrecorderEventtypes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplDamEventRecorderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplDamEventRecorderImplInfo}
     */
    comDayCqDamCoreImplDamEventRecorderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.filter': opts['eventFilter'],
        'event.queue.length': opts['eventQueueLength'],
        'eventrecorder.enabled': opts['eventrecorderEnabled'],
        'eventrecorder.blacklist': this.apiClient.buildCollectionParam(opts['eventrecorderBlacklist'], 'multi'),
        'eventrecorder.eventtypes': opts['eventrecorderEventtypes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplDamEventRecorderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplEventDamEventAuditListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplEventDamEventAuditListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplEventDamEventAuditListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplEventDamEventAuditListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplEventDamEventAuditListenerInfo}
     */
    comDayCqDamCoreImplEventDamEventAuditListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.filter': opts['eventFilter'],
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplEventDamEventAuditListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplExpiryNotificationJobImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplExpiryNotificationJobImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplExpiryNotificationJobImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamExpiryNotificationSchedulerIstimebased 
     * @param {String} opts.cqDamExpiryNotificationSchedulerTimebasedRule 
     * @param {Number} opts.cqDamExpiryNotificationSchedulerPeriodRule 
     * @param {Boolean} opts.sendEmail 
     * @param {Number} opts.assetExpiredLimit 
     * @param {Number} opts.priorNotificationSeconds 
     * @param {String} opts.cqDamExpiryNotificationUrlProtocol 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplExpiryNotificationJobImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplExpiryNotificationJobImplInfo}
     */
    comDayCqDamCoreImplExpiryNotificationJobImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.expiry.notification.scheduler.istimebased': opts['cqDamExpiryNotificationSchedulerIstimebased'],
        'cq.dam.expiry.notification.scheduler.timebased.rule': opts['cqDamExpiryNotificationSchedulerTimebasedRule'],
        'cq.dam.expiry.notification.scheduler.period.rule': opts['cqDamExpiryNotificationSchedulerPeriodRule'],
        'send_email': opts['sendEmail'],
        'asset_expired_limit': opts['assetExpiredLimit'],
        'prior_notification_seconds': opts['priorNotificationSeconds'],
        'cq.dam.expiry.notification.url.protocol': opts['cqDamExpiryNotificationUrlProtocol']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplExpiryNotificationJobImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.isEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo}
     */
    comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'isEnabled': opts['isEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplGfxCommonsGfxRenderer operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplGfxCommonsGfxRendererCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplGfxCommonsGfxRendererInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.skipBufferedcache 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplGfxCommonsGfxRendererCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplGfxCommonsGfxRendererInfo}
     */
    comDayCqDamCoreImplGfxCommonsGfxRenderer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'skip.bufferedcache': opts['skipBufferedcache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplHandlerEPSFormatHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerEPSFormatHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mimetype 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerEPSFormatHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo}
     */
    comDayCqDamCoreImplHandlerEPSFormatHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'mimetype': opts['mimetype']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplHandlerIndesignFormatHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerIndesignFormatHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.mimetype 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerIndesignFormatHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo}
     */
    comDayCqDamCoreImplHandlerIndesignFormatHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'mimetype': this.apiClient.buildCollectionParam(opts['mimetype'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplHandlerJpegHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerJpegHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplHandlerJpegHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamEnableExtMetaExtraction 
     * @param {Number} opts.largeFileThreshold 
     * @param {Number} opts.largeCommentThreshold 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerJpegHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplHandlerJpegHandlerInfo}
     */
    comDayCqDamCoreImplHandlerJpegHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.enable.ext.meta.extraction': opts['cqDamEnableExtMetaExtraction'],
        'large_file_threshold': opts['largeFileThreshold'],
        'large_comment_threshold': opts['largeCommentThreshold']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplHandlerJpegHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplHandlerXmpNCommXMPHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerXmpNCommXMPHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.xmphandlerCqFormats 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplHandlerXmpNCommXMPHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo}
     */
    comDayCqDamCoreImplHandlerXmpNCommXMPHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'xmphandler.cq.formats': this.apiClient.buildCollectionParam(opts['xmphandlerCqFormats'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJmxAssetIndexUpdateMonitor operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetIndexUpdateMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jmxObjectname 
     * @param {Boolean} opts.propertyMeasureEnabled 
     * @param {String} opts.propertyName 
     * @param {Number} opts.propertyMaxWaitMs 
     * @param {Number} opts.propertyMaxRate 
     * @param {Boolean} opts.fulltextMeasureEnabled 
     * @param {String} opts.fulltextName 
     * @param {Number} opts.fulltextMaxWaitMs 
     * @param {Number} opts.fulltextMaxRate 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetIndexUpdateMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo}
     */
    comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'jmx.objectname': opts['jmxObjectname'],
        'property.measure.enabled': opts['propertyMeasureEnabled'],
        'property.name': opts['propertyName'],
        'property.max.wait.ms': opts['propertyMaxWaitMs'],
        'property.max.rate': opts['propertyMaxRate'],
        'fulltext.measure.enabled': opts['fulltextMeasureEnabled'],
        'fulltext.name': opts['fulltextName'],
        'fulltext.max.wait.ms': opts['fulltextMaxWaitMs'],
        'fulltext.max.rate': opts['fulltextMaxRate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJmxAssetMigrationMBeanImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetMigrationMBeanImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jmxObjectname 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetMigrationMBeanImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo}
     */
    comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'jmx.objectname': opts['jmxObjectname']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJmxAssetUpdateMonitorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetUpdateMonitorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jmxObjectname 
     * @param {Boolean} opts.active 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJmxAssetUpdateMonitorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo}
     */
    comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'jmx.objectname': opts['jmxObjectname'],
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.operation 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo}
     */
    comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'operation': opts['operation'],
        'emailEnabled': opts['emailEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.operation 
     * @param {String} opts.operationIcon 
     * @param {String} opts.topicName 
     * @param {Boolean} opts.emailEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo}
     */
    comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'operation': opts['operation'],
        'operationIcon': opts['operationIcon'],
        'topicName': opts['topicName'],
        'emailEnabled': opts['emailEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplLightboxLightboxServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplLightboxLightboxServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplLightboxLightboxServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletPaths 
     * @param {Array.<String>} opts.slingServletMethods 
     * @param {Boolean} opts.cqDamEnableAnonymous 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplLightboxLightboxServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplLightboxLightboxServletInfo}
     */
    comDayCqDamCoreImplLightboxLightboxServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.paths': opts['slingServletPaths'],
        'sling.servlet.methods': this.apiClient.buildCollectionParam(opts['slingServletMethods'], 'multi'),
        'cq.dam.enable.anonymous': opts['cqDamEnableAnonymous']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplLightboxLightboxServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplMetadataEditorSelectComponentHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplMetadataEditorSelectComponentHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.granitedata 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplMetadataEditorSelectComponentHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo}
     */
    comDayCqDamCoreImplMetadataEditorSelectComponentHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'granite:data': this.apiClient.buildCollectionParam(opts['granitedata'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamAllowAllMime 
     * @param {Array.<String>} opts.cqDamAllowedAssetMimes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo}
     */
    comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.allow.all.mime': opts['cqDamAllowAllMime'],
        'cq.dam.allowed.asset.mimes': this.apiClient.buildCollectionParam(opts['cqDamAllowedAssetMimes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamDetectAssetMimeFromContent 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo}
     */
    comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.detect.asset.mime.from.content': opts['cqDamDetectAssetMimeFromContent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplMissingMetadataNotificationJob operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplMissingMetadataNotificationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplMissingMetadataNotificationJobInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamMissingmetadataNotificationSchedulerIstimebased 
     * @param {String} opts.cqDamMissingmetadataNotificationSchedulerTimebasedRule 
     * @param {Number} opts.cqDamMissingmetadataNotificationSchedulerPeriodRule 
     * @param {String} opts.cqDamMissingmetadataNotificationRecipient 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplMissingMetadataNotificationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplMissingMetadataNotificationJobInfo}
     */
    comDayCqDamCoreImplMissingMetadataNotificationJob(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.missingmetadata.notification.scheduler.istimebased': opts['cqDamMissingmetadataNotificationSchedulerIstimebased'],
        'cq.dam.missingmetadata.notification.scheduler.timebased.rule': opts['cqDamMissingmetadataNotificationSchedulerTimebasedRule'],
        'cq.dam.missingmetadata.notification.scheduler.period.rule': opts['cqDamMissingmetadataNotificationSchedulerPeriodRule'],
        'cq.dam.missingmetadata.notification.recipient': opts['cqDamMissingmetadataNotificationRecipient']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.notifyOnComplete 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo}
     */
    comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'process.label': opts['processLabel'],
        'Notify on Complete': opts['notifyOnComplete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplProcessTextExtractionProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplProcessTextExtractionProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplProcessTextExtractionProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.mimeTypes 
     * @param {Number} opts.maxExtract 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplProcessTextExtractionProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplProcessTextExtractionProcessInfo}
     */
    comDayCqDamCoreImplProcessTextExtractionProcess(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'mimeTypes': this.apiClient.buildCollectionParam(opts['mimeTypes'], 'multi'),
        'maxExtract': opts['maxExtract']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplProcessTextExtractionProcessInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplRenditionMakerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplRenditionMakerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplRenditionMakerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.xmpPropagate 
     * @param {Array.<String>} opts.xmpExcludes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplRenditionMakerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplRenditionMakerImplInfo}
     */
    comDayCqDamCoreImplRenditionMakerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'xmp.propagate': opts['xmpPropagate'],
        'xmp.excludes': this.apiClient.buildCollectionParam(opts['xmpExcludes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplRenditionMakerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplReportsReportExportService operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplReportsReportExportServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplReportsReportExportServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.queryBatchSize 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplReportsReportExportServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplReportsReportExportServiceInfo}
     */
    comDayCqDamCoreImplReportsReportExportService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'queryBatchSize': opts['queryBatchSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplReportsReportExportServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplReportsReportPurgeService operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplReportsReportPurgeServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplReportsReportPurgeServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.maxSavedReports 
     * @param {Number} opts.timeDuration 
     * @param {Boolean} opts.enableReportPurge 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplReportsReportPurgeServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplReportsReportPurgeServiceInfo}
     */
    comDayCqDamCoreImplReportsReportPurgeService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression'],
        'maxSavedReports': opts['maxSavedReports'],
        'timeDuration': opts['timeDuration'],
        'enableReportPurge': opts['enableReportPurge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplReportsReportPurgeServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletAssetDownloadServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetDownloadServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletAssetDownloadServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetDownloadServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletAssetDownloadServletInfo}
     */
    comDayCqDamCoreImplServletAssetDownloadServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletAssetDownloadServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletAssetStatusServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetStatusServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletAssetStatusServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamBatchStatusMaxassets 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetStatusServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletAssetStatusServletInfo}
     */
    comDayCqDamCoreImplServletAssetStatusServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.batch.status.maxassets': opts['cqDamBatchStatusMaxassets']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletAssetStatusServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletAssetXMPSearchServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetXMPSearchServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletAssetXMPSearchServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamBatchIndesignMaxassets 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletAssetXMPSearchServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletAssetXMPSearchServletInfo}
     */
    comDayCqDamCoreImplServletAssetXMPSearchServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.batch.indesign.maxassets': opts['cqDamBatchIndesignMaxassets']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletBatchMetadataServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletBatchMetadataServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletBatchMetadataServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqDamBatchMetadataAssetDefault 
     * @param {Array.<String>} opts.cqDamBatchMetadataCollectionDefault 
     * @param {Number} opts.cqDamBatchMetadataMaxresources 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletBatchMetadataServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletBatchMetadataServletInfo}
     */
    comDayCqDamCoreImplServletBatchMetadataServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.batch.metadata.asset.default': this.apiClient.buildCollectionParam(opts['cqDamBatchMetadataAssetDefault'], 'multi'),
        'cq.dam.batch.metadata.collection.default': this.apiClient.buildCollectionParam(opts['cqDamBatchMetadataCollectionDefault'], 'multi'),
        'cq.dam.batch.metadata.maxresources': opts['cqDamBatchMetadataMaxresources']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletBatchMetadataServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletBinaryProviderServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletBinaryProviderServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletBinaryProviderServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletResourceTypes 
     * @param {Array.<String>} opts.slingServletMethods 
     * @param {Boolean} opts.cqDamDrmEnable 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletBinaryProviderServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletBinaryProviderServletInfo}
     */
    comDayCqDamCoreImplServletBinaryProviderServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.resourceTypes': this.apiClient.buildCollectionParam(opts['slingServletResourceTypes'], 'multi'),
        'sling.servlet.methods': this.apiClient.buildCollectionParam(opts['slingServletMethods'], 'multi'),
        'cq.dam.drm.enable': opts['cqDamDrmEnable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletBinaryProviderServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletCollectionServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletCollectionServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletCollectionServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqDamBatchCollectionProperties 
     * @param {Number} opts.cqDamBatchCollectionMaxcollections 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletCollectionServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletCollectionServletInfo}
     */
    comDayCqDamCoreImplServletCollectionServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.batch.collection.properties': this.apiClient.buildCollectionParam(opts['cqDamBatchCollectionProperties'], 'multi'),
        'cq.dam.batch.collection.maxcollections': opts['cqDamBatchCollectionMaxcollections']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletCollectionServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletCollectionsServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletCollectionsServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletCollectionsServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqDamBatchCollectionsProperties 
     * @param {Number} opts.cqDamBatchCollectionsLimit 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletCollectionsServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletCollectionsServletInfo}
     */
    comDayCqDamCoreImplServletCollectionsServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.batch.collections.properties': this.apiClient.buildCollectionParam(opts['cqDamBatchCollectionsProperties'], 'multi'),
        'cq.dam.batch.collections.limit': opts['cqDamBatchCollectionsLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletCollectionsServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletCompanionServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletCompanionServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletCompanionServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.moreInfo 
     * @param {String} opts.mntOverlayDamGuiContentAssetsMoreinfoHtmlPath 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletCompanionServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletCompanionServletInfo}
     */
    comDayCqDamCoreImplServletCompanionServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'More Info': opts['moreInfo'],
        '/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}': opts['mntOverlayDamGuiContentAssetsMoreinfoHtmlPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletCompanionServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletCreateAssetServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletCreateAssetServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletCreateAssetServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.detectDuplicate 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletCreateAssetServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletCreateAssetServletInfo}
     */
    comDayCqDamCoreImplServletCreateAssetServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'detect_duplicate': opts['detectDuplicate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletCreateAssetServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletDamContentDispositionFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletDamContentDispositionFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletDamContentDispositionFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqMimeTypeBlacklist 
     * @param {Boolean} opts.cqDamEmptyMime 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletDamContentDispositionFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletDamContentDispositionFilterInfo}
     */
    comDayCqDamCoreImplServletDamContentDispositionFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.mime.type.blacklist': this.apiClient.buildCollectionParam(opts['cqMimeTypeBlacklist'], 'multi'),
        'cq.dam.empty.mime': opts['cqDamEmptyMime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletGuidLookupFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletGuidLookupFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletGuidLookupFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamCoreGuidlookupfilterEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletGuidLookupFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletGuidLookupFilterInfo}
     */
    comDayCqDamCoreImplServletGuidLookupFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.core.guidlookupfilter.enabled': opts['cqDamCoreGuidlookupfilterEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletGuidLookupFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletHealthCheckServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletHealthCheckServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletHealthCheckServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqDamSyncWorkflowId 
     * @param {Array.<String>} opts.cqDamSyncFolderTypes 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletHealthCheckServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletHealthCheckServletInfo}
     */
    comDayCqDamCoreImplServletHealthCheckServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.sync.workflow.id': opts['cqDamSyncWorkflowId'],
        'cq.dam.sync.folder.types': this.apiClient.buildCollectionParam(opts['cqDamSyncFolderTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletHealthCheckServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletMetadataGetServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletMetadataGetServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletMetadataGetServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletResourceTypes 
     * @param {String} opts.slingServletMethods 
     * @param {String} opts.slingServletExtensions 
     * @param {String} opts.slingServletSelectors 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletMetadataGetServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletMetadataGetServletInfo}
     */
    comDayCqDamCoreImplServletMetadataGetServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.resourceTypes': opts['slingServletResourceTypes'],
        'sling.servlet.methods': opts['slingServletMethods'],
        'sling.servlet.extensions': opts['slingServletExtensions'],
        'sling.servlet.selectors': opts['slingServletSelectors']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletMetadataGetServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletMultipleLicenseAcceptServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletMultipleLicenseAcceptServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamDrmEnable 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletMultipleLicenseAcceptServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo}
     */
    comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.drm.enable': opts['cqDamDrmEnable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplServletResourceCollectionServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplServletResourceCollectionServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplServletResourceCollectionServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletResourceTypes 
     * @param {String} opts.slingServletMethods 
     * @param {String} opts.slingServletSelectors 
     * @param {String} opts.downloadConfig 
     * @param {String} opts.viewSelector 
     * @param {Boolean} opts.sendEmail 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplServletResourceCollectionServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplServletResourceCollectionServletInfo}
     */
    comDayCqDamCoreImplServletResourceCollectionServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.resourceTypes': this.apiClient.buildCollectionParam(opts['slingServletResourceTypes'], 'multi'),
        'sling.servlet.methods': opts['slingServletMethods'],
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'download.config': opts['downloadConfig'],
        'view.selector': opts['viewSelector'],
        'send_email': opts['sendEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplServletResourceCollectionServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.createPreviewEnabled 
     * @param {Boolean} opts.updatePreviewEnabled 
     * @param {Number} opts.queueSize 
     * @param {String} opts.folderPreviewRenditionRegex 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo}
     */
    comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'createPreviewEnabled': opts['createPreviewEnabled'],
        'updatePreviewEnabled': opts['updatePreviewEnabled'],
        'queueSize': opts['queueSize'],
        'folderPreviewRenditionRegex': opts['folderPreviewRenditionRegex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreImplUnzipUnzipConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreImplUnzipUnzipConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreImplUnzipUnzipConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamConfigUnzipMaxuncompressedsize 
     * @param {String} opts.cqDamConfigUnzipEncoding 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreImplUnzipUnzipConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreImplUnzipUnzipConfigInfo}
     */
    comDayCqDamCoreImplUnzipUnzipConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.config.unzip.maxuncompressedsize': opts['cqDamConfigUnzipMaxuncompressedsize'],
        'cq.dam.config.unzip.encoding': opts['cqDamConfigUnzipEncoding']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreImplUnzipUnzipConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreProcessExifToolExtractMetadataProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreProcessExifToolExtractMetadataProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.cqDamEnableSha1 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreProcessExifToolExtractMetadataProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo}
     */
    comDayCqDamCoreProcessExifToolExtractMetadataProcess(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'process.label': opts['processLabel'],
        'cq.dam.enable.sha1': opts['cqDamEnableSha1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreProcessExtractMetadataProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreProcessExtractMetadataProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreProcessExtractMetadataProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.cqDamEnableSha1 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreProcessExtractMetadataProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreProcessExtractMetadataProcessInfo}
     */
    comDayCqDamCoreProcessExtractMetadataProcess(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'process.label': opts['processLabel'],
        'cq.dam.enable.sha1': opts['cqDamEnableSha1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreProcessExtractMetadataProcessInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamCoreProcessMetadataProcessorProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamCoreProcessMetadataProcessorProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamCoreProcessMetadataProcessorProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.cqDamEnableSha1 
     * @param {Array.<String>} opts.cqDamMetadataXssprotectedProperties 
     * @param {module:api/ConfigmgrApi~comDayCqDamCoreProcessMetadataProcessorProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamCoreProcessMetadataProcessorProcessInfo}
     */
    comDayCqDamCoreProcessMetadataProcessorProcess(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'process.label': opts['processLabel'],
        'cq.dam.enable.sha1': opts['cqDamEnableSha1'],
        'cq.dam.metadata.xssprotected.properties': this.apiClient.buildCollectionParam(opts['cqDamMetadataXssprotectedProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamCoreProcessMetadataProcessorProcessInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerFfmpegLocatorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerFfmpegLocatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerFfmpegLocatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.executableSearchpath 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerFfmpegLocatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerFfmpegLocatorImplInfo}
     */
    comDayCqDamHandlerFfmpegLocatorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'executable.searchpath': this.apiClient.buildCollectionParam(opts['executableSearchpath'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamHandlerFfmpegLocatorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Array.<String>} opts.fontmgrSystemFontDir 
     * @param {String} opts.fontmgrAdobeFontDir 
     * @param {String} opts.fontmgrCustomerFontDir 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo}
     */
    comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.filter': opts['eventFilter'],
        'fontmgr.system.font.dir': this.apiClient.buildCollectionParam(opts['fontmgrSystemFontDir'], 'multi'),
        'fontmgr.adobe.font.dir': opts['fontmgrAdobeFontDir'],
        'fontmgr.customer.font.dir': opts['fontmgrCustomerFontDir']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerStandardPdfPdfHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerStandardPdfPdfHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerStandardPdfPdfHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.rasterAnnotation 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerStandardPdfPdfHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerStandardPdfPdfHandlerInfo}
     */
    comDayCqDamHandlerStandardPdfPdfHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'raster.annotation': opts['rasterAnnotation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamHandlerStandardPdfPdfHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerStandardPsPostScriptHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerStandardPsPostScriptHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerStandardPsPostScriptHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.rasterAnnotation 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerStandardPsPostScriptHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerStandardPsPostScriptHandlerInfo}
     */
    comDayCqDamHandlerStandardPsPostScriptHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'raster.annotation': opts['rasterAnnotation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamHandlerStandardPsdPsdHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamHandlerStandardPsdPsdHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamHandlerStandardPsdPsdHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.largeFileThreshold 
     * @param {module:api/ConfigmgrApi~comDayCqDamHandlerStandardPsdPsdHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamHandlerStandardPsdPsdHandlerInfo}
     */
    comDayCqDamHandlerStandardPsdPsdHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'large_file_threshold': opts['largeFileThreshold']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamHandlerStandardPsdPsdHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamIdsImplIDSJobProcessor operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamIdsImplIDSJobProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamIdsImplIDSJobProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableMultisession 
     * @param {Boolean} opts.idsCcEnable 
     * @param {Boolean} opts.enableRetry 
     * @param {Boolean} opts.enableRetryScripterror 
     * @param {String} opts.externalizerDomainCqhost 
     * @param {String} opts.externalizerDomainHttp 
     * @param {module:api/ConfigmgrApi~comDayCqDamIdsImplIDSJobProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamIdsImplIDSJobProcessorInfo}
     */
    comDayCqDamIdsImplIDSJobProcessor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enable.multisession': opts['enableMultisession'],
        'ids.cc.enable': opts['idsCcEnable'],
        'enable.retry': opts['enableRetry'],
        'enable.retry.scripterror': opts['enableRetryScripterror'],
        'externalizer.domain.cqhost': opts['externalizerDomainCqhost'],
        'externalizer.domain.http': opts['externalizerDomainHttp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamIdsImplIDSJobProcessorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamIdsImplIDSPoolManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamIdsImplIDSPoolManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamIdsImplIDSPoolManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxErrorsToBlacklist 
     * @param {Number} opts.retryIntervalToWhitelist 
     * @param {Number} opts.connectTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {String} opts.processLabel 
     * @param {Number} opts.connectionUseMax 
     * @param {module:api/ConfigmgrApi~comDayCqDamIdsImplIDSPoolManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamIdsImplIDSPoolManagerImplInfo}
     */
    comDayCqDamIdsImplIDSPoolManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'max.errors.to.blacklist': opts['maxErrorsToBlacklist'],
        'retry.interval.to.whitelist': opts['retryIntervalToWhitelist'],
        'connect.timeout': opts['connectTimeout'],
        'socket.timeout': opts['socketTimeout'],
        'process.label': opts['processLabel'],
        'connection.use.max': opts['connectionUseMax']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamIdsImplIDSPoolManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamInddImplHandlerIndesignXMPHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamInddImplHandlerIndesignXMPHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {Boolean} opts.extractPages 
     * @param {module:api/ConfigmgrApi~comDayCqDamInddImplHandlerIndesignXMPHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo}
     */
    comDayCqDamInddImplHandlerIndesignXMPHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'process.label': opts['processLabel'],
        'extract.pages': opts['extractPages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamInddImplServletSnippetCreationServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamInddImplServletSnippetCreationServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamInddImplServletSnippetCreationServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.snippetcreationMaxcollections 
     * @param {module:api/ConfigmgrApi~comDayCqDamInddImplServletSnippetCreationServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamInddImplServletSnippetCreationServletInfo}
     */
    comDayCqDamInddImplServletSnippetCreationServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'snippetcreation.maxcollections': opts['snippetcreationMaxcollections']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamInddImplServletSnippetCreationServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamInddProcessINDDMediaExtractProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamInddProcessINDDMediaExtractProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamInddProcessINDDMediaExtractProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {String} opts.cqDamInddPagesRegex 
     * @param {Boolean} opts.idsJobDecoupled 
     * @param {String} opts.idsJobWorkflowModel 
     * @param {module:api/ConfigmgrApi~comDayCqDamInddProcessINDDMediaExtractProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamInddProcessINDDMediaExtractProcessInfo}
     */
    comDayCqDamInddProcessINDDMediaExtractProcess(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'process.label': opts['processLabel'],
        'cq.dam.indd.pages.regex': opts['cqDamInddPagesRegex'],
        'ids.job.decoupled': opts['idsJobDecoupled'],
        'ids.job.workflow.model': opts['idsJobWorkflowModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamInddProcessINDDMediaExtractProcessInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.batchCommitSize 
     * @param {module:api/ConfigmgrApi~comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo}
     */
    comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'batch.commit.size': opts['batchCommitSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {module:api/ConfigmgrApi~comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo}
     */
    comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.deleteZipFile 
     * @param {module:api/ConfigmgrApi~comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo}
     */
    comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'delete.zip.file': opts['deleteZipFile']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamS7damDynamicmediaconfigeventlistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo}
     */
    comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled': opts['cqDamS7damDynamicmediaconfigeventlistenerEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo}
     */
    comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression'],
        'scheduler.concurrent': opts['schedulerConcurrent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonPostServletsSetCreateHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonPostServletsSetCreateHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingPostOperation 
     * @param {String} opts.slingServletMethods 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonPostServletsSetCreateHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo}
     */
    comDayCqDamS7damCommonPostServletsSetCreateHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.post.operation': opts['slingPostOperation'],
        'sling.servlet.methods': opts['slingServletMethods']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonPostServletsSetModifyHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonPostServletsSetModifyHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingPostOperation 
     * @param {String} opts.slingServletMethods 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonPostServletsSetModifyHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo}
     */
    comDayCqDamS7damCommonPostServletsSetModifyHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.post.operation': opts['slingPostOperation'],
        'sling.servlet.methods': opts['slingServletMethods']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.processLabel 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo}
     */
    comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'process.label': opts['processLabel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonS7damDamChangeEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonS7damDamChangeEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamS7damDamchangeeventlistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonS7damDamChangeEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo}
     */
    comDayCqDamS7damCommonS7damDamChangeEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.s7dam.damchangeeventlistener.enabled': opts['cqDamS7damDamchangeeventlistenerEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonServletsS7damProductInfoServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonServletsS7damProductInfoServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletPaths 
     * @param {String} opts.slingServletMethods 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonServletsS7damProductInfoServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo}
     */
    comDayCqDamS7damCommonServletsS7damProductInfoServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.paths': opts['slingServletPaths'],
        'sling.servlet.methods': opts['slingServletMethods']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceHttpReadtimeoutName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceHttpMaxretrycountName 
     * @param {Number} opts.cqDamS7damVideoproxyclientserviceUploadprogressIntervalName 
     * @param {module:api/ConfigmgrApi~comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo}
     */
    comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name': opts['cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName'],
        'cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name': opts['cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName'],
        'cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name': opts['cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName'],
        'cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name': opts['cqDamS7damVideoproxyclientserviceHttpReadtimeoutName'],
        'cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name': opts['cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName'],
        'cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name': opts['cqDamS7damVideoproxyclientserviceHttpMaxretrycountName'],
        'cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name': opts['cqDamS7damVideoproxyclientserviceUploadprogressIntervalName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7APIClientImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7APIClientImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7APIClientImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamScene7ApiclientRecordsperpageNofilterName 
     * @param {Number} opts.cqDamScene7ApiclientRecordsperpageWithfilterName 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7APIClientImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7APIClientImplInfo}
     */
    comDayCqDamScene7ImplScene7APIClientImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.scene7.apiclient.recordsperpage.nofilter.name': opts['cqDamScene7ApiclientRecordsperpageNofilterName'],
        'cq.dam.scene7.apiclient.recordsperpage.withfilter.name': opts['cqDamScene7ApiclientRecordsperpageWithfilterName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamScene7ImplScene7APIClientImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqDamScene7AssetmimetypeserviceMapping 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo}
     */
    comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.scene7.assetmimetypeservice.mapping': this.apiClient.buildCollectionParam(opts['cqDamScene7AssetmimetypeserviceMapping'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7ConfigurationEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7ConfigurationEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamScene7ConfigurationeventlistenerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7ConfigurationEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo}
     */
    comDayCqDamScene7ImplScene7ConfigurationEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.scene7.configurationeventlistener.enabled': opts['cqDamScene7ConfigurationeventlistenerEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7DamChangeEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7DamChangeEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqDamScene7DamchangeeventlistenerEnabled 
     * @param {Array.<String>} opts.cqDamScene7DamchangeeventlistenerObservedPaths 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7DamChangeEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo}
     */
    comDayCqDamScene7ImplScene7DamChangeEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.scene7.damchangeeventlistener.enabled': opts['cqDamScene7DamchangeeventlistenerEnabled'],
        'cq.dam.scene7.damchangeeventlistener.observed.paths': this.apiClient.buildCollectionParam(opts['cqDamScene7DamchangeeventlistenerObservedPaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7FlashTemplatesServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.scene7FlashTemplatesRti 
     * @param {String} opts.scene7FlashTemplatesRsi 
     * @param {String} opts.scene7FlashTemplatesRb 
     * @param {String} opts.scene7FlashTemplatesRurl 
     * @param {String} opts.scene7FlashTemplateUrlFormatParameter 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7FlashTemplatesServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo}
     */
    comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scene7FlashTemplates.rti': opts['scene7FlashTemplatesRti'],
        'scene7FlashTemplates.rsi': opts['scene7FlashTemplatesRsi'],
        'scene7FlashTemplates.rb': opts['scene7FlashTemplatesRb'],
        'scene7FlashTemplates.rurl': opts['scene7FlashTemplatesRurl'],
        'scene7FlashTemplate.urlFormatParameter': opts['scene7FlashTemplateUrlFormatParameter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamScene7ImplScene7UploadServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7UploadServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamScene7ImplScene7UploadServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.cqDamScene7UploadserviceActivejobtimeoutLabel 
     * @param {Number} opts.cqDamScene7UploadserviceConnectionmaxperrouteLabel 
     * @param {module:api/ConfigmgrApi~comDayCqDamScene7ImplScene7UploadServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamScene7ImplScene7UploadServiceImplInfo}
     */
    comDayCqDamScene7ImplScene7UploadServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.dam.scene7.uploadservice.activejobtimeout.label': opts['cqDamScene7UploadserviceActivejobtimeoutLabel'],
        'cq.dam.scene7.uploadservice.connectionmaxperroute.label': opts['cqDamScene7UploadserviceConnectionmaxperrouteLabel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamScene7ImplScene7UploadServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.getCacheExpirationUnit 
     * @param {Number} opts.getCacheExpirationValue 
     * @param {module:api/ConfigmgrApi~comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo}
     */
    comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'getCacheExpirationUnit': opts['getCacheExpirationUnit'],
        'getCacheExpirationValue': opts['getCacheExpirationValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamStockIntegrationImplConfigurationStockConfiguration operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamStockIntegrationImplConfigurationStockConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.locale 
     * @param {String} opts.imsConfig 
     * @param {module:api/ConfigmgrApi~comDayCqDamStockIntegrationImplConfigurationStockConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo}
     */
    comDayCqDamStockIntegrationImplConfigurationStockConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'locale': opts['locale'],
        'imsConfig': opts['imsConfig']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqDamVideoImplServletVideoTestServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqDamVideoImplServletVideoTestServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqDamVideoImplServletVideoTestServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~comDayCqDamVideoImplServletVideoTestServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqDamVideoImplServletVideoTestServletInfo}
     */
    comDayCqDamVideoImplServletVideoTestServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqDamVideoImplServletVideoTestServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqExtwidgetServletsImageSpriteServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqExtwidgetServletsImageSpriteServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqExtwidgetServletsImageSpriteServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxWidth 
     * @param {Number} opts.maxHeight 
     * @param {module:api/ConfigmgrApi~comDayCqExtwidgetServletsImageSpriteServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqExtwidgetServletsImageSpriteServletInfo}
     */
    comDayCqExtwidgetServletsImageSpriteServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'maxWidth': opts['maxWidth'],
        'maxHeight': opts['maxHeight']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqExtwidgetServletsImageSpriteServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqImageInternalFontFontHelper operation.
     * @callback module:api/ConfigmgrApi~comDayCqImageInternalFontFontHelperCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqImageInternalFontFontHelperInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.fontpath 
     * @param {Number} opts.oversamplingFactor 
     * @param {module:api/ConfigmgrApi~comDayCqImageInternalFontFontHelperCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqImageInternalFontFontHelperInfo}
     */
    comDayCqImageInternalFontFontHelper(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'fontpath': this.apiClient.buildCollectionParam(opts['fontpath'], 'multi'),
        'oversamplingFactor': opts['oversamplingFactor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqImageInternalFontFontHelperInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.image.internal.font.FontHelper', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqJcrclustersupportClusterStartLevelController operation.
     * @callback module:api/ConfigmgrApi~comDayCqJcrclustersupportClusterStartLevelControllerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqJcrclustersupportClusterStartLevelControllerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.clusterLevelEnable 
     * @param {Number} opts.clusterMasterLevel 
     * @param {Number} opts.clusterSlaveLevel 
     * @param {module:api/ConfigmgrApi~comDayCqJcrclustersupportClusterStartLevelControllerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqJcrclustersupportClusterStartLevelControllerInfo}
     */
    comDayCqJcrclustersupportClusterStartLevelController(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cluster.level.enable': opts['clusterLevelEnable'],
        'cluster.master.level': opts['clusterMasterLevel'],
        'cluster.slave.level': opts['clusterSlaveLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqJcrclustersupportClusterStartLevelControllerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMailerDefaultMailService operation.
     * @callback module:api/ConfigmgrApi~comDayCqMailerDefaultMailServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMailerDefaultMailServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.smtpHost 
     * @param {Number} opts.smtpPort 
     * @param {String} opts.smtpUser 
     * @param {String} opts.smtpPassword 
     * @param {String} opts.fromAddress 
     * @param {Boolean} opts.smtpSsl 
     * @param {Boolean} opts.smtpStarttls 
     * @param {Boolean} opts.debugEmail 
     * @param {module:api/ConfigmgrApi~comDayCqMailerDefaultMailServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMailerDefaultMailServiceInfo}
     */
    comDayCqMailerDefaultMailService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'smtp.host': opts['smtpHost'],
        'smtp.port': opts['smtpPort'],
        'smtp.user': opts['smtpUser'],
        'smtp.password': opts['smtpPassword'],
        'from.address': opts['fromAddress'],
        'smtp.ssl': opts['smtpSsl'],
        'smtp.starttls': opts['smtpStarttls'],
        'debug.email': opts['debugEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMailerDefaultMailServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mailer.DefaultMailService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMailerImplCqMailingService operation.
     * @callback module:api/ConfigmgrApi~comDayCqMailerImplCqMailingServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMailerImplCqMailingServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.maxRecipientCount 
     * @param {module:api/ConfigmgrApi~comDayCqMailerImplCqMailingServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMailerImplCqMailingServiceInfo}
     */
    comDayCqMailerImplCqMailingService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'max.recipient.count': opts['maxRecipientCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMailerImplCqMailingServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMailerImplEmailCqEmailTemplateFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqMailerImplEmailCqEmailTemplateFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mailerEmailCharset 
     * @param {module:api/ConfigmgrApi~comDayCqMailerImplEmailCqEmailTemplateFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo}
     */
    comDayCqMailerImplEmailCqEmailTemplateFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'mailer.email.charset': opts['mailerEmailCharset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMailerImplEmailCqRetrieverTemplateFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqMailerImplEmailCqRetrieverTemplateFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.mailerEmailEmbed 
     * @param {String} opts.mailerEmailCharset 
     * @param {String} opts.mailerEmailRetrieverUserID 
     * @param {String} opts.mailerEmailRetrieverUserPWD 
     * @param {module:api/ConfigmgrApi~comDayCqMailerImplEmailCqRetrieverTemplateFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo}
     */
    comDayCqMailerImplEmailCqRetrieverTemplateFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'mailer.email.embed': opts['mailerEmailEmbed'],
        'mailer.email.charset': opts['mailerEmailCharset'],
        'mailer.email.retrieverUserID': opts['mailerEmailRetrieverUserID'],
        'mailer.email.retrieverUserPWD': opts['mailerEmailRetrieverUserPWD']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmCampaignImplIntegrationConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmCampaignImplIntegrationConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmCampaignImplIntegrationConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.aemMcmCampaignFormConstraints 
     * @param {String} opts.aemMcmCampaignPublicUrl 
     * @param {Boolean} opts.aemMcmCampaignRelaxedSSL 
     * @param {module:api/ConfigmgrApi~comDayCqMcmCampaignImplIntegrationConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmCampaignImplIntegrationConfigImplInfo}
     */
    comDayCqMcmCampaignImplIntegrationConfigImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'aem.mcm.campaign.formConstraints': this.apiClient.buildCollectionParam(opts['aemMcmCampaignFormConstraints'], 'multi'),
        'aem.mcm.campaign.publicUrl': opts['aemMcmCampaignPublicUrl'],
        'aem.mcm.campaign.relaxedSSL': opts['aemMcmCampaignRelaxedSSL']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMcmCampaignImplIntegrationConfigImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo}
     */
    comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmCoreNewsletterNewsletterEmailServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.fromAddress 
     * @param {String} opts.senderHost 
     * @param {String} opts.maxBounceCount 
     * @param {module:api/ConfigmgrApi~comDayCqMcmCoreNewsletterNewsletterEmailServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo}
     */
    comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'from.address': opts['fromAddress'],
        'sender.host': opts['senderHost'],
        'max.bounce.count': opts['maxBounceCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmImplMCMConfiguration operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmImplMCMConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmImplMCMConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.experienceIndirection 
     * @param {Array.<String>} opts.touchpointIndirection 
     * @param {module:api/ConfigmgrApi~comDayCqMcmImplMCMConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmImplMCMConfigurationInfo}
     */
    comDayCqMcmImplMCMConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'experience.indirection': this.apiClient.buildCollectionParam(opts['experienceIndirection'], 'multi'),
        'touchpoint.indirection': this.apiClient.buildCollectionParam(opts['touchpointIndirection'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMcmImplMCMConfigurationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo}
     */
    comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo}
     */
    comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo}
     */
    comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo}
     */
    comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH operation.
     * @callback module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo}
     */
    comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqNotificationImplNotificationServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqNotificationImplNotificationServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqNotificationImplNotificationServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {module:api/ConfigmgrApi~comDayCqNotificationImplNotificationServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqNotificationImplNotificationServiceImplInfo}
     */
    comDayCqNotificationImplNotificationServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.filter': opts['eventFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqNotificationImplNotificationServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqPersonalizationImplServletsTargetingConfigurationServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqPersonalizationImplServletsTargetingConfigurationServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.forcelocation 
     * @param {module:api/ConfigmgrApi~comDayCqPersonalizationImplServletsTargetingConfigurationServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo}
     */
    comDayCqPersonalizationImplServletsTargetingConfigurationServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'forcelocation': opts['forcelocation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqPollingImporterImplManagedPollConfigImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqPollingImporterImplManagedPollConfigImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqPollingImporterImplManagedPollConfigImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.id 
     * @param {Boolean} opts.enabled 
     * @param {Boolean} opts.reference 
     * @param {Number} opts.interval 
     * @param {String} opts.expression 
     * @param {String} opts.source 
     * @param {String} opts.target 
     * @param {String} opts.login 
     * @param {String} opts.password 
     * @param {module:api/ConfigmgrApi~comDayCqPollingImporterImplManagedPollConfigImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqPollingImporterImplManagedPollConfigImplInfo}
     */
    comDayCqPollingImporterImplManagedPollConfigImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'id': opts['id'],
        'enabled': opts['enabled'],
        'reference': opts['reference'],
        'interval': opts['interval'],
        'expression': opts['expression'],
        'source': opts['source'],
        'target': opts['target'],
        'login': opts['login'],
        'password': opts['password']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqPollingImporterImplManagedPollConfigImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqPollingImporterImplManagedPollingImporterImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqPollingImporterImplManagedPollingImporterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqPollingImporterImplManagedPollingImporterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.importerUser 
     * @param {module:api/ConfigmgrApi~comDayCqPollingImporterImplManagedPollingImporterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqPollingImporterImplManagedPollingImporterImplInfo}
     */
    comDayCqPollingImporterImplManagedPollingImporterImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'importer.user': opts['importerUser']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqPollingImporterImplManagedPollingImporterImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqPollingImporterImplPollingImporterImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqPollingImporterImplPollingImporterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqPollingImporterImplPollingImporterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.importerMinInterval 
     * @param {String} opts.importerUser 
     * @param {Array.<String>} opts.excludePaths 
     * @param {Array.<String>} opts.includePaths 
     * @param {module:api/ConfigmgrApi~comDayCqPollingImporterImplPollingImporterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqPollingImporterImplPollingImporterImplInfo}
     */
    comDayCqPollingImporterImplPollingImporterImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'importer.min.interval': opts['importerMinInterval'],
        'importer.user': opts['importerUser'],
        'exclude.paths': this.apiClient.buildCollectionParam(opts['excludePaths'], 'multi'),
        'include.paths': this.apiClient.buildCollectionParam(opts['includePaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqPollingImporterImplPollingImporterImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationAuditReplicationEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationAuditReplicationEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationAuditReplicationEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationAuditReplicationEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationAuditReplicationEventListenerInfo}
     */
    comDayCqReplicationAuditReplicationEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationAuditReplicationEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationContentStaticContentBuilder operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationContentStaticContentBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationContentStaticContentBuilderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.host 
     * @param {Number} opts.port 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationContentStaticContentBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationContentStaticContentBuilderInfo}
     */
    comDayCqReplicationContentStaticContentBuilder(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'host': opts['host'],
        'port': opts['port']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationContentStaticContentBuilderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplAgentManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplAgentManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplAgentManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jobTopics 
     * @param {String} opts.serviceUserTarget 
     * @param {String} opts.agentProviderTarget 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplAgentManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplAgentManagerImplInfo}
     */
    comDayCqReplicationImplAgentManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'job.topics': opts['jobTopics'],
        'serviceUser.target': opts['serviceUserTarget'],
        'agentProvider.target': opts['agentProviderTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationImplAgentManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplContentDurboBinaryLessContentBuilder operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplContentDurboBinaryLessContentBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.binaryThreshold 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplContentDurboBinaryLessContentBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo}
     */
    comDayCqReplicationImplContentDurboBinaryLessContentBuilder(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'binary.threshold': opts['binaryThreshold']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplContentDurboDurboImportConfigurationProv operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplContentDurboDurboImportConfigurationProvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.preserveHierarchyNodes 
     * @param {Boolean} opts.ignoreVersioning 
     * @param {Boolean} opts.importAcl 
     * @param {Number} opts.saveThreshold 
     * @param {Boolean} opts.preserveUserPaths 
     * @param {Boolean} opts.preserveUuid 
     * @param {Array.<String>} opts.preserveUuidNodetypes 
     * @param {Array.<String>} opts.preserveUuidSubtrees 
     * @param {Boolean} opts.autoCommit 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplContentDurboDurboImportConfigurationProvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo}
     */
    comDayCqReplicationImplContentDurboDurboImportConfigurationProv(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'preserve.hierarchy.nodes': opts['preserveHierarchyNodes'],
        'ignore.versioning': opts['ignoreVersioning'],
        'import.acl': opts['importAcl'],
        'save.threshold': opts['saveThreshold'],
        'preserve.user.paths': opts['preserveUserPaths'],
        'preserve.uuid': opts['preserveUuid'],
        'preserve.uuid.nodetypes': this.apiClient.buildCollectionParam(opts['preserveUuidNodetypes'], 'multi'),
        'preserve.uuid.subtrees': this.apiClient.buildCollectionParam(opts['preserveUuidSubtrees'], 'multi'),
        'auto.commit': opts['autoCommit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplReplicationContentFactoryProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplReplicationContentFactoryProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.replicationContentUseFileStorage 
     * @param {Number} opts.replicationContentMaxCommitAttempts 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplReplicationContentFactoryProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo}
     */
    comDayCqReplicationImplReplicationContentFactoryProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'replication.content.useFileStorage': opts['replicationContentUseFileStorage'],
        'replication.content.maxCommitAttempts': opts['replicationContentMaxCommitAttempts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplReplicationReceiverImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplReplicationReceiverImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplReplicationReceiverImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.receiverTmpfileThreshold 
     * @param {Boolean} opts.receiverPackagesUseInstall 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplReplicationReceiverImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplReplicationReceiverImplInfo}
     */
    comDayCqReplicationImplReplicationReceiverImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'receiver.tmpfile.threshold': opts['receiverTmpfileThreshold'],
        'receiver.packages.use.install': opts['receiverPackagesUseInstall']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationImplReplicationReceiverImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplReplicatorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplReplicatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplReplicatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.distributeEvents 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplReplicatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplReplicatorImplInfo}
     */
    comDayCqReplicationImplReplicatorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'distribute_events': opts['distributeEvents']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationImplReplicatorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplReverseReplicator operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplReverseReplicatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplReverseReplicatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplReverseReplicatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplReverseReplicatorInfo}
     */
    comDayCqReplicationImplReverseReplicator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.period': opts['schedulerPeriod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationImplReverseReplicatorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplTransportBinaryLessTransportHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplTransportBinaryLessTransportHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.disabledCipherSuites 
     * @param {Array.<String>} opts.enabledCipherSuites 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplTransportBinaryLessTransportHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo}
     */
    comDayCqReplicationImplTransportBinaryLessTransportHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'disabled.cipher.suites': this.apiClient.buildCollectionParam(opts['disabledCipherSuites'], 'multi'),
        'enabled.cipher.suites': this.apiClient.buildCollectionParam(opts['enabledCipherSuites'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReplicationImplTransportHttp operation.
     * @callback module:api/ConfigmgrApi~comDayCqReplicationImplTransportHttpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReplicationImplTransportHttpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.disabledCipherSuites 
     * @param {Array.<String>} opts.enabledCipherSuites 
     * @param {module:api/ConfigmgrApi~comDayCqReplicationImplTransportHttpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReplicationImplTransportHttpInfo}
     */
    comDayCqReplicationImplTransportHttp(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'disabled.cipher.suites': this.apiClient.buildCollectionParam(opts['disabledCipherSuites'], 'multi'),
        'enabled.cipher.suites': this.apiClient.buildCollectionParam(opts['enabledCipherSuites'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReplicationImplTransportHttpInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.replication.impl.transport.Http', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReportingImplCacheCacheImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReportingImplCacheCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReportingImplCacheCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.repcacheEnable 
     * @param {Number} opts.repcacheTtl 
     * @param {Number} opts.repcacheMax 
     * @param {module:api/ConfigmgrApi~comDayCqReportingImplCacheCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReportingImplCacheCacheImplInfo}
     */
    comDayCqReportingImplCacheCacheImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'repcache.enable': opts['repcacheEnable'],
        'repcache.ttl': opts['repcacheTtl'],
        'repcache.max': opts['repcacheMax']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReportingImplCacheCacheImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReportingImplConfigServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqReportingImplConfigServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReportingImplConfigServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.repconfTimezone 
     * @param {String} opts.repconfLocale 
     * @param {String} opts.repconfSnapshots 
     * @param {String} opts.repconfRepdir 
     * @param {Number} opts.repconfHourofday 
     * @param {Number} opts.repconfMinofhour 
     * @param {Number} opts.repconfMaxrows 
     * @param {Boolean} opts.repconfFakedata 
     * @param {String} opts.repconfSnapshotuser 
     * @param {Boolean} opts.repconfEnforcesnapshotuser 
     * @param {module:api/ConfigmgrApi~comDayCqReportingImplConfigServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReportingImplConfigServiceImplInfo}
     */
    comDayCqReportingImplConfigServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'repconf.timezone': opts['repconfTimezone'],
        'repconf.locale': opts['repconfLocale'],
        'repconf.snapshots': opts['repconfSnapshots'],
        'repconf.repdir': opts['repconfRepdir'],
        'repconf.hourofday': opts['repconfHourofday'],
        'repconf.minofhour': opts['repconfMinofhour'],
        'repconf.maxrows': opts['repconfMaxrows'],
        'repconf.fakedata': opts['repconfFakedata'],
        'repconf.snapshotuser': opts['repconfSnapshotuser'],
        'repconf.enforcesnapshotuser': opts['repconfEnforcesnapshotuser']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReportingImplConfigServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqReportingImplRLogAnalyzer operation.
     * @callback module:api/ConfigmgrApi~comDayCqReportingImplRLogAnalyzerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqReportingImplRLogAnalyzerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.requestLogOutput 
     * @param {module:api/ConfigmgrApi~comDayCqReportingImplRLogAnalyzerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqReportingImplRLogAnalyzerInfo}
     */
    comDayCqReportingImplRLogAnalyzer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'request.log.output': opts['requestLogOutput']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqReportingImplRLogAnalyzerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterLinkcheckerImplLinkCheckerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {Number} opts.serviceBadLinkToleranceInterval 
     * @param {Array.<String>} opts.serviceCheckOverridePatterns 
     * @param {Boolean} opts.serviceCacheBrokenInternalLinks 
     * @param {Array.<String>} opts.serviceSpecialLinkPrefix 
     * @param {Array.<String>} opts.serviceSpecialLinkPatterns 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo}
     */
    comDayCqRewriterLinkcheckerImplLinkCheckerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.period': opts['schedulerPeriod'],
        'scheduler.concurrent': opts['schedulerConcurrent'],
        'service.bad_link_tolerance_interval': opts['serviceBadLinkToleranceInterval'],
        'service.check_override_patterns': this.apiClient.buildCollectionParam(opts['serviceCheckOverridePatterns'], 'multi'),
        'service.cache_broken_internal_links': opts['serviceCacheBrokenInternalLinks'],
        'service.special_link_prefix': this.apiClient.buildCollectionParam(opts['serviceSpecialLinkPrefix'], 'multi'),
        'service.special_link_patterns': this.apiClient.buildCollectionParam(opts['serviceSpecialLinkPatterns'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterLinkcheckerImplLinkCheckerTask operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {Number} opts.goodLinkTestInterval 
     * @param {Number} opts.badLinkTestInterval 
     * @param {Number} opts.linkUnusedInterval 
     * @param {Number} opts.connectionTimeout 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo}
     */
    comDayCqRewriterLinkcheckerImplLinkCheckerTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.period': opts['schedulerPeriod'],
        'scheduler.concurrent': opts['schedulerConcurrent'],
        'good_link_test_interval': opts['goodLinkTestInterval'],
        'bad_link_test_interval': opts['badLinkTestInterval'],
        'link_unused_interval': opts['linkUnusedInterval'],
        'connection.timeout': opts['connectionTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.linkcheckertransformerDisableRewriting 
     * @param {Boolean} opts.linkcheckertransformerDisableChecking 
     * @param {Number} opts.linkcheckertransformerMapCacheSize 
     * @param {Boolean} opts.linkcheckertransformerStrictExtensionCheck 
     * @param {Boolean} opts.linkcheckertransformerStripHtmltExtension 
     * @param {Array.<String>} opts.linkcheckertransformerRewriteElements 
     * @param {Array.<String>} opts.linkcheckertransformerStripExtensionPathBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo}
     */
    comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'linkcheckertransformer.disableRewriting': opts['linkcheckertransformerDisableRewriting'],
        'linkcheckertransformer.disableChecking': opts['linkcheckertransformerDisableChecking'],
        'linkcheckertransformer.mapCacheSize': opts['linkcheckertransformerMapCacheSize'],
        'linkcheckertransformer.strictExtensionCheck': opts['linkcheckertransformerStrictExtensionCheck'],
        'linkcheckertransformer.stripHtmltExtension': opts['linkcheckertransformerStripHtmltExtension'],
        'linkcheckertransformer.rewriteElements': this.apiClient.buildCollectionParam(opts['linkcheckertransformerRewriteElements'], 'multi'),
        'linkcheckertransformer.stripExtensionPathBlacklist': this.apiClient.buildCollectionParam(opts['linkcheckertransformerStripExtensionPathBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkInfoStorageImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceMaxLinksPerHost 
     * @param {Boolean} opts.serviceSaveExternalLinkReferences 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterLinkcheckerImplLinkInfoStorageImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo}
     */
    comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.max_links_per_host': opts['serviceMaxLinksPerHost'],
        'service.save_external_link_references': opts['serviceSaveExternalLinkReferences']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqRewriterProcessorImplHtmlParserFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqRewriterProcessorImplHtmlParserFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqRewriterProcessorImplHtmlParserFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.htmlparserProcessTags 
     * @param {Boolean} opts.htmlparserPreserveCamelCase 
     * @param {module:api/ConfigmgrApi~comDayCqRewriterProcessorImplHtmlParserFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqRewriterProcessorImplHtmlParserFactoryInfo}
     */
    comDayCqRewriterProcessorImplHtmlParserFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'htmlparser.processTags': this.apiClient.buildCollectionParam(opts['htmlparserProcessTags'], 'multi'),
        'htmlparser.preserveCamelCase': opts['htmlparserPreserveCamelCase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSearchImplBuilderQueryBuilderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqSearchImplBuilderQueryBuilderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSearchImplBuilderQueryBuilderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.excerptProperties 
     * @param {Number} opts.cacheMaxEntries 
     * @param {Number} opts.cacheEntryLifetime 
     * @param {Boolean} opts.xpathUnion 
     * @param {module:api/ConfigmgrApi~comDayCqSearchImplBuilderQueryBuilderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSearchImplBuilderQueryBuilderImplInfo}
     */
    comDayCqSearchImplBuilderQueryBuilderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'excerpt.properties': this.apiClient.buildCollectionParam(opts['excerptProperties'], 'multi'),
        'cache.max.entries': opts['cacheMaxEntries'],
        'cache.entry.lifetime': opts['cacheEntryLifetime'],
        'xpath.union': opts['xpathUnion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqSearchImplBuilderQueryBuilderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSearchSuggestImplSuggestionIndexManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqSearchSuggestImplSuggestionIndexManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pathBuilderTarget 
     * @param {String} opts.suggestBasepath 
     * @param {module:api/ConfigmgrApi~comDayCqSearchSuggestImplSuggestionIndexManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo}
     */
    comDayCqSearchSuggestImplSuggestionIndexManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'pathBuilder.target': opts['pathBuilderTarget'],
        'suggest.basepath': opts['suggestBasepath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqSearchpromoteConfighandlerEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo}
     */
    comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.searchpromote.confighandler.enabled': opts['cqSearchpromoteConfighandlerEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSearchpromoteImplSearchPromoteServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqSearchpromoteImplSearchPromoteServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.cqSearchpromoteConfigurationServerUri 
     * @param {String} opts.cqSearchpromoteConfigurationEnvironment 
     * @param {Number} opts.connectionTimeout 
     * @param {Number} opts.socketTimeout 
     * @param {module:api/ConfigmgrApi~comDayCqSearchpromoteImplSearchPromoteServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo}
     */
    comDayCqSearchpromoteImplSearchPromoteServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.searchpromote.configuration.server.uri': opts['cqSearchpromoteConfigurationServerUri'],
        'cq.searchpromote.configuration.environment': opts['cqSearchpromoteConfigurationEnvironment'],
        'connection.timeout': opts['connectionTimeout'],
        'socket.timeout': opts['socketTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqSecurityACLSetup operation.
     * @callback module:api/ConfigmgrApi~comDayCqSecurityACLSetupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqSecurityACLSetupInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqAclsetupRules 
     * @param {module:api/ConfigmgrApi~comDayCqSecurityACLSetupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqSecurityACLSetupInfo}
     */
    comDayCqSecurityACLSetup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.aclsetup.rules': this.apiClient.buildCollectionParam(opts['cqAclsetupRules'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqSecurityACLSetupInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.security.ACLSetup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqStatisticsImplStatisticsServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqStatisticsImplStatisticsServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqStatisticsImplStatisticsServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.schedulerPeriod 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {String} opts.path 
     * @param {String} opts.workspace 
     * @param {String} opts.keywordsPath 
     * @param {Boolean} opts.asyncEntries 
     * @param {module:api/ConfigmgrApi~comDayCqStatisticsImplStatisticsServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqStatisticsImplStatisticsServiceImplInfo}
     */
    comDayCqStatisticsImplStatisticsServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.period': opts['schedulerPeriod'],
        'scheduler.concurrent': opts['schedulerConcurrent'],
        'path': opts['path'],
        'workspace': opts['workspace'],
        'keywordsPath': opts['keywordsPath'],
        'asyncEntries': opts['asyncEntries']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqStatisticsImplStatisticsServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqTaggingImplJcrTagManagerFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqTaggingImplJcrTagManagerFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqTaggingImplJcrTagManagerFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.validationEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqTaggingImplJcrTagManagerFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqTaggingImplJcrTagManagerFactoryImplInfo}
     */
    comDayCqTaggingImplJcrTagManagerFactoryImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'validation.enabled': opts['validationEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqTaggingImplSearchTagPredicateEvaluator operation.
     * @callback module:api/ConfigmgrApi~comDayCqTaggingImplSearchTagPredicateEvaluatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.ignorePath 
     * @param {module:api/ConfigmgrApi~comDayCqTaggingImplSearchTagPredicateEvaluatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo}
     */
    comDayCqTaggingImplSearchTagPredicateEvaluator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'ignore_path': opts['ignorePath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqTaggingImplTagGarbageCollector operation.
     * @callback module:api/ConfigmgrApi~comDayCqTaggingImplTagGarbageCollectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqTaggingImplTagGarbageCollectorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {module:api/ConfigmgrApi~comDayCqTaggingImplTagGarbageCollectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqTaggingImplTagGarbageCollectorInfo}
     */
    comDayCqTaggingImplTagGarbageCollector(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqTaggingImplTagGarbageCollectorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmContentsyncImplHandlerPagesUpdateHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqPagesupdatehandlerImageresourcetypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo}
     */
    comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.pagesupdatehandler.imageresourcetypes': this.apiClient.buildCollectionParam(opts['cqPagesupdatehandlerImageresourcetypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqContentsyncPathrewritertransformerMappingLinks 
     * @param {Array.<String>} opts.cqContentsyncPathrewritertransformerMappingClientlibs 
     * @param {Array.<String>} opts.cqContentsyncPathrewritertransformerMappingImages 
     * @param {String} opts.cqContentsyncPathrewritertransformerAttributePattern 
     * @param {String} opts.cqContentsyncPathrewritertransformerClientlibraryPattern 
     * @param {String} opts.cqContentsyncPathrewritertransformerClientlibraryReplace 
     * @param {module:api/ConfigmgrApi~comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo}
     */
    comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.contentsync.pathrewritertransformer.mapping.links': this.apiClient.buildCollectionParam(opts['cqContentsyncPathrewritertransformerMappingLinks'], 'multi'),
        'cq.contentsync.pathrewritertransformer.mapping.clientlibs': this.apiClient.buildCollectionParam(opts['cqContentsyncPathrewritertransformerMappingClientlibs'], 'multi'),
        'cq.contentsync.pathrewritertransformer.mapping.images': this.apiClient.buildCollectionParam(opts['cqContentsyncPathrewritertransformerMappingImages'], 'multi'),
        'cq.contentsync.pathrewritertransformer.attribute.pattern': opts['cqContentsyncPathrewritertransformerAttributePattern'],
        'cq.contentsync.pathrewritertransformer.clientlibrary.pattern': opts['cqContentsyncPathrewritertransformerClientlibraryPattern'],
        'cq.contentsync.pathrewritertransformer.clientlibrary.replace': opts['cqContentsyncPathrewritertransformerClientlibraryReplace']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplAuthoringUIModeServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplAuthoringUIModeServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.authoringUIModeServiceDefault 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplAuthoringUIModeServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo}
     */
    comDayCqWcmCoreImplAuthoringUIModeServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'authoringUIModeService.default': opts['authoringUIModeServiceDefault']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplCommandsWCMCommandServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplCommandsWCMCommandServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplCommandsWCMCommandServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.wcmcommandservletDeleteWhitelist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplCommandsWCMCommandServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplCommandsWCMCommandServletInfo}
     */
    comDayCqWcmCoreImplCommandsWCMCommandServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'wcmcommandservlet.delete_whitelist': this.apiClient.buildCollectionParam(opts['wcmcommandservletDeleteWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.dimDefaultMode 
     * @param {Boolean} opts.dimAppcacheEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo}
     */
    comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'dim.default.mode': opts['dimDefaultMode'],
        'dim.appcache.enabled': opts['dimAppcacheEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplEventPageEventAuditListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplEventPageEventAuditListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplEventPageEventAuditListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.configured 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplEventPageEventAuditListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplEventPageEventAuditListenerInfo}
     */
    comDayCqWcmCoreImplEventPageEventAuditListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'configured': opts['configured']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplEventPagePostProcessor operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplEventPagePostProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplEventPagePostProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.paths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplEventPagePostProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplEventPagePostProcessorInfo}
     */
    comDayCqWcmCoreImplEventPagePostProcessor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'paths': this.apiClient.buildCollectionParam(opts['paths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplEventPagePostProcessorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplEventRepositoryChangeEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplEventRepositoryChangeEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.paths 
     * @param {Array.<String>} opts.excludedPaths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplEventRepositoryChangeEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo}
     */
    comDayCqWcmCoreImplEventRepositoryChangeEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'paths': this.apiClient.buildCollectionParam(opts['paths'], 'multi'),
        'excludedPaths': this.apiClient.buildCollectionParam(opts['excludedPaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplEventTemplatePostProcessor operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplEventTemplatePostProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplEventTemplatePostProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.paths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplEventTemplatePostProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplEventTemplatePostProcessorInfo}
     */
    comDayCqWcmCoreImplEventTemplatePostProcessor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'paths': opts['paths']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplLanguageManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplLanguageManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplLanguageManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.langmgrListPath 
     * @param {Array.<String>} opts.langmgrCountryDefault 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplLanguageManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplLanguageManagerImplInfo}
     */
    comDayCqWcmCoreImplLanguageManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'langmgr.list.path': opts['langmgrListPath'],
        'langmgr.country.default': this.apiClient.buildCollectionParam(opts['langmgrCountryDefault'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplLanguageManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.linkExpiredPrefix 
     * @param {Boolean} opts.linkExpiredRemove 
     * @param {String} opts.linkExpiredSuffix 
     * @param {String} opts.linkInvalidPrefix 
     * @param {Boolean} opts.linkInvalidRemove 
     * @param {String} opts.linkInvalidSuffix 
     * @param {String} opts.linkPredatedPrefix 
     * @param {Boolean} opts.linkPredatedRemove 
     * @param {String} opts.linkPredatedSuffix 
     * @param {Array.<String>} opts.linkWcmmodes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo}
     */
    comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'link.expired.prefix': opts['linkExpiredPrefix'],
        'link.expired.remove': opts['linkExpiredRemove'],
        'link.expired.suffix': opts['linkExpiredSuffix'],
        'link.invalid.prefix': opts['linkInvalidPrefix'],
        'link.invalid.remove': opts['linkInvalidRemove'],
        'link.invalid.suffix': opts['linkInvalidSuffix'],
        'link.predated.prefix': opts['linkPredatedPrefix'],
        'link.predated.remove': opts['linkPredatedRemove'],
        'link.predated.suffix': opts['linkPredatedSuffix'],
        'link.wcmmodes': this.apiClient.buildCollectionParam(opts['linkWcmmodes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplPagePageInfoAggregatorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplPagePageInfoAggregatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pageInfoProviderPropertyRegexDefault 
     * @param {String} opts.pageInfoProviderPropertyName 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplPagePageInfoAggregatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo}
     */
    comDayCqWcmCoreImplPagePageInfoAggregatorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'page.info.provider.property.regex.default': opts['pageInfoProviderPropertyRegexDefault'],
        'page.info.provider.property.name': opts['pageInfoProviderPropertyName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplPagePageManagerFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplPagePageManagerFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.illegalCharMapping 
     * @param {Boolean} opts.pageSubTreeActivationCheck 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplPagePageManagerFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo}
     */
    comDayCqWcmCoreImplPagePageManagerFactoryImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'illegalCharMapping': opts['illegalCharMapping'],
        'pageSubTreeActivationCheck': opts['pageSubTreeActivationCheck']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplReferencesContentContentReferenceConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplReferencesContentContentReferenceConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.contentReferenceConfigResourceTypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplReferencesContentContentReferenceConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo}
     */
    comDayCqWcmCoreImplReferencesContentContentReferenceConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'contentReferenceConfig.resourceTypes': this.apiClient.buildCollectionParam(opts['contentReferenceConfigResourceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsContentfinderAssetViewHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.damShowexpired 
     * @param {Boolean} opts.damShowhidden 
     * @param {Boolean} opts.tagTitleSearch 
     * @param {String} opts.guessTotal 
     * @param {String} opts.damExpiryProperty 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo}
     */
    comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'dam.showexpired': opts['damShowexpired'],
        'dam.showhidden': opts['damShowhidden'],
        'tagTitleSearch': opts['tagTitleSearch'],
        'guessTotal': opts['guessTotal'],
        'dam.expiryProperty': opts['damExpiryProperty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.itemResourceTypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo}
     */
    comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'item.resource.types': this.apiClient.buildCollectionParam(opts['itemResourceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsContentfinderPageViewHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderPageViewHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.guessTotal 
     * @param {Boolean} opts.tagTitleSearch 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsContentfinderPageViewHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo}
     */
    comDayCqWcmCoreImplServletsContentfinderPageViewHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'guessTotal': opts['guessTotal'],
        'tagTitleSearch': opts['tagTitleSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsFindReplaceServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsFindReplaceServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsFindReplaceServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.scope 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsFindReplaceServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsFindReplaceServletInfo}
     */
    comDayCqWcmCoreImplServletsFindReplaceServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplServletsFindReplaceServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsReferenceSearchServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsReferenceSearchServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsReferenceSearchServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.referencesearchservletMaxReferencesPerPage 
     * @param {Number} opts.referencesearchservletMaxPages 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsReferenceSearchServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsReferenceSearchServletInfo}
     */
    comDayCqWcmCoreImplServletsReferenceSearchServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'referencesearchservlet.maxReferencesPerPage': opts['referencesearchservletMaxReferencesPerPage'],
        'referencesearchservlet.maxPages': opts['referencesearchservletMaxPages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplServletsThumbnailServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsThumbnailServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplServletsThumbnailServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.workspace 
     * @param {Array.<String>} opts.dimensions 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplServletsThumbnailServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplServletsThumbnailServletInfo}
     */
    comDayCqWcmCoreImplServletsThumbnailServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'workspace': opts['workspace'],
        'dimensions': this.apiClient.buildCollectionParam(opts['dimensions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplServletsThumbnailServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplUtilsDefaultPageNameValidator operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplUtilsDefaultPageNameValidatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.nonValidChars 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplUtilsDefaultPageNameValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo}
     */
    comDayCqWcmCoreImplUtilsDefaultPageNameValidator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'nonValidChars': opts['nonValidChars']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplVariantsPageVariantsProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplVariantsPageVariantsProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.defaultExternalizerDomain 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplVariantsPageVariantsProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo}
     */
    comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'default.externalizer.domain': opts['defaultExternalizerDomain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplVersionManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplVersionManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplVersionManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.versionmanagerCreateVersionOnActivation 
     * @param {Boolean} opts.versionmanagerPurgingEnabled 
     * @param {Array.<String>} opts.versionmanagerPurgePaths 
     * @param {Array.<String>} opts.versionmanagerIvPaths 
     * @param {Number} opts.versionmanagerMaxAgeDays 
     * @param {Number} opts.versionmanagerMaxNumberVersions 
     * @param {Number} opts.versionmanagerMinNumberVersions 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplVersionManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplVersionManagerImplInfo}
     */
    comDayCqWcmCoreImplVersionManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'versionmanager.createVersionOnActivation': opts['versionmanagerCreateVersionOnActivation'],
        'versionmanager.purgingEnabled': opts['versionmanagerPurgingEnabled'],
        'versionmanager.purgePaths': this.apiClient.buildCollectionParam(opts['versionmanagerPurgePaths'], 'multi'),
        'versionmanager.ivPaths': this.apiClient.buildCollectionParam(opts['versionmanagerIvPaths'], 'multi'),
        'versionmanager.maxAgeDays': opts['versionmanagerMaxAgeDays'],
        'versionmanager.maxNumberVersions': opts['versionmanagerMaxNumberVersions'],
        'versionmanager.minNumberVersions': opts['versionmanagerMinNumberVersions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplVersionManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplVersionPurgeTask operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplVersionPurgeTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplVersionPurgeTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.versionpurgePaths 
     * @param {Boolean} opts.versionpurgeRecursive 
     * @param {Number} opts.versionpurgeMaxVersions 
     * @param {Number} opts.versionpurgeMinVersions 
     * @param {Number} opts.versionpurgeMaxAgeDays 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplVersionPurgeTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplVersionPurgeTaskInfo}
     */
    comDayCqWcmCoreImplVersionPurgeTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'versionpurge.paths': this.apiClient.buildCollectionParam(opts['versionpurgePaths'], 'multi'),
        'versionpurge.recursive': opts['versionpurgeRecursive'],
        'versionpurge.maxVersions': opts['versionpurgeMaxVersions'],
        'versionpurge.minVersions': opts['versionpurgeMinVersions'],
        'versionpurge.maxAgeDays': opts['versionpurgeMaxAgeDays']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplVersionPurgeTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplWCMDebugFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplWCMDebugFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplWCMDebugFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.wcmdbgfilterEnabled 
     * @param {Boolean} opts.wcmdbgfilterJspDebug 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplWCMDebugFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplWCMDebugFilterInfo}
     */
    comDayCqWcmCoreImplWCMDebugFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'wcmdbgfilter.enabled': opts['wcmdbgfilterEnabled'],
        'wcmdbgfilter.jspDebug': opts['wcmdbgfilterJspDebug']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplWCMDebugFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplWCMDeveloperModeFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplWCMDeveloperModeFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.wcmdevmodefilterEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplWCMDeveloperModeFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo}
     */
    comDayCqWcmCoreImplWCMDeveloperModeFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'wcmdevmodefilter.enabled': opts['wcmdevmodefilterEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreImplWarpTimeWarpFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreImplWarpTimeWarpFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreImplWarpTimeWarpFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.filterOrder 
     * @param {String} opts.filterScope 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreImplWarpTimeWarpFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreImplWarpTimeWarpFilterInfo}
     */
    comDayCqWcmCoreImplWarpTimeWarpFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'filter.order': opts['filterOrder'],
        'filter.scope': opts['filterScope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreMvtMVTStatisticsImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreMvtMVTStatisticsImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreMvtMVTStatisticsImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mvtstatisticsTrackingurl 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreMvtMVTStatisticsImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreMvtMVTStatisticsImplInfo}
     */
    comDayCqWcmCoreMvtMVTStatisticsImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'mvtstatistics.trackingurl': opts['mvtstatisticsTrackingurl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreMvtMVTStatisticsImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreStatsPageViewStatisticsImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreStatsPageViewStatisticsImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreStatsPageViewStatisticsImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pageviewstatisticsTrackingurl 
     * @param {String} opts.pageviewstatisticsTrackingscriptEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreStatsPageViewStatisticsImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreStatsPageViewStatisticsImplInfo}
     */
    comDayCqWcmCoreStatsPageViewStatisticsImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'pageviewstatistics.trackingurl': opts['pageviewstatisticsTrackingurl'],
        'pageviewstatistics.trackingscript.enabled': opts['pageviewstatisticsTrackingscriptEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmCoreWCMRequestFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmCoreWCMRequestFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmCoreWCMRequestFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.wcmfilterMode 
     * @param {module:api/ConfigmgrApi~comDayCqWcmCoreWCMRequestFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmCoreWCMRequestFilterInfo}
     */
    comDayCqWcmCoreWCMRequestFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'wcmfilter.mode': opts['wcmfilterMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmCoreWCMRequestFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterDesignPackageImporter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterDesignPackageImporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterDesignPackageImporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.extractFilter 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterDesignPackageImporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterDesignPackageImporterInfo}
     */
    comDayCqWcmDesignimporterDesignPackageImporter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'extract.filter': this.apiClient.buildCollectionParam(opts['extractFilter'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterDesignPackageImporterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterImplCanvasBuilderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplCanvasBuilderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.filepattern 
     * @param {Boolean} opts.buildPageNodes 
     * @param {Boolean} opts.buildClientLibs 
     * @param {Boolean} opts.buildCanvasComponent 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplCanvasBuilderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo}
     */
    comDayCqWcmDesignimporterImplCanvasBuilderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'filepattern': opts['filepattern'],
        'build.page.nodes': opts['buildPageNodes'],
        'build.client.libs': opts['buildClientLibs'],
        'build.canvas.component': opts['buildCanvasComponent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterImplCanvasPageDeleteHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.minThreadPoolSize 
     * @param {Number} opts.maxThreadPoolSize 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo}
     */
    comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'minThreadPoolSize': opts['minThreadPoolSize'],
        'maxThreadPoolSize': opts['maxThreadPoolSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterImplEntryPreprocessorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplEntryPreprocessorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.searchPattern 
     * @param {String} opts.replacePattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplEntryPreprocessorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo}
     */
    comDayCqWcmDesignimporterImplEntryPreprocessorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'search.pattern': opts['searchPattern'],
        'replace.pattern': opts['replacePattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplMobileCanvasBuilderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.filepattern 
     * @param {Array.<String>} opts.deviceGroups 
     * @param {Boolean} opts.buildPageNodes 
     * @param {Boolean} opts.buildClientLibs 
     * @param {Boolean} opts.buildCanvasComponent 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterImplMobileCanvasBuilderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo}
     */
    comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'filepattern': opts['filepattern'],
        'device.groups': this.apiClient.buildCollectionParam(opts['deviceGroups'], 'multi'),
        'build.page.nodes': opts['buildPageNodes'],
        'build.client.libs': opts['buildClientLibs'],
        'build.canvas.component': opts['buildCanvasComponent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {String} opts.componentResourceType 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern'],
        'component.resourceType': opts['componentResourceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.tagpattern 
     * @param {module:api/ConfigmgrApi~comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo}
     */
    comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'tagpattern': opts['tagpattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationFormsImplFormChooserServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormChooserServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationFormsImplFormChooserServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.serviceName 
     * @param {String} opts.slingServletResourceTypes 
     * @param {String} opts.slingServletSelectors 
     * @param {Array.<String>} opts.slingServletMethods 
     * @param {Boolean} opts.formsFormchooserservletAdvansesearchRequire 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormChooserServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationFormsImplFormChooserServletInfo}
     */
    comDayCqWcmFoundationFormsImplFormChooserServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.name': opts['serviceName'],
        'sling.servlet.resourceTypes': opts['slingServletResourceTypes'],
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'sling.servlet.methods': this.apiClient.buildCollectionParam(opts['slingServletMethods'], 'multi'),
        'forms.formchooserservlet.advansesearch.require': opts['formsFormchooserservletAdvansesearchRequire']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationFormsImplFormChooserServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationFormsImplFormParagraphPostProcessor operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormParagraphPostProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.formsFormparagraphpostprocessorEnabled 
     * @param {Array.<String>} opts.formsFormparagraphpostprocessorFormresourcetypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormParagraphPostProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo}
     */
    comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'forms.formparagraphpostprocessor.enabled': opts['formsFormparagraphpostprocessorEnabled'],
        'forms.formparagraphpostprocessor.formresourcetypes': this.apiClient.buildCollectionParam(opts['formsFormparagraphpostprocessorFormresourcetypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationFormsImplFormsHandlingServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormsHandlingServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.nameWhitelist 
     * @param {Boolean} opts.allowExpressions 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplFormsHandlingServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo}
     */
    comDayCqWcmFoundationFormsImplFormsHandlingServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name.whitelist': opts['nameWhitelist'],
        'allow.expressions': opts['allowExpressions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationFormsImplMailServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplMailServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationFormsImplMailServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingServletResourceTypes 
     * @param {String} opts.slingServletSelectors 
     * @param {Array.<String>} opts.resourceWhitelist 
     * @param {String} opts.resourceBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationFormsImplMailServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationFormsImplMailServletInfo}
     */
    comDayCqWcmFoundationFormsImplMailServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.resourceTypes': opts['slingServletResourceTypes'],
        'sling.servlet.selectors': opts['slingServletSelectors'],
        'resource.whitelist': this.apiClient.buildCollectionParam(opts['resourceWhitelist'], 'multi'),
        'resource.blacklist': opts['resourceBlacklist']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationFormsImplMailServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationImplAdaptiveImageComponentServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationImplAdaptiveImageComponentServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.adaptSupportedWidths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationImplAdaptiveImageComponentServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo}
     */
    comDayCqWcmFoundationImplAdaptiveImageComponentServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'adapt.supported.widths': this.apiClient.buildCollectionParam(opts['adaptSupportedWidths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationImplHTTPAuthHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationImplHTTPAuthHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationImplHTTPAuthHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {Boolean} opts.authHttpNologin 
     * @param {String} opts.authHttpRealm 
     * @param {String} opts.authDefaultLoginpage 
     * @param {Array.<String>} opts.authCredForm 
     * @param {Array.<String>} opts.authCredUtf8 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationImplHTTPAuthHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationImplHTTPAuthHandlerInfo}
     */
    comDayCqWcmFoundationImplHTTPAuthHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path'],
        'auth.http.nologin': opts['authHttpNologin'],
        'auth.http.realm': opts['authHttpRealm'],
        'auth.default.loginpage': opts['authDefaultLoginpage'],
        'auth.cred.form': this.apiClient.buildCollectionParam(opts['authCredForm'], 'multi'),
        'auth.cred.utf8': this.apiClient.buildCollectionParam(opts['authCredUtf8'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationImplPageImpressionsTracker operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationImplPageImpressionsTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationImplPageImpressionsTrackerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingAuthRequirements 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationImplPageImpressionsTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationImplPageImpressionsTrackerInfo}
     */
    comDayCqWcmFoundationImplPageImpressionsTracker(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.auth.requirements': opts['slingAuthRequirements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationImplPageRedirectServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationImplPageRedirectServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationImplPageRedirectServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.excludedResourceTypes 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationImplPageRedirectServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationImplPageRedirectServletInfo}
     */
    comDayCqWcmFoundationImplPageRedirectServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'excluded.resource.types': this.apiClient.buildCollectionParam(opts['excludedResourceTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationImplPageRedirectServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.defaultAttachmentTypeBlacklist 
     * @param {Array.<String>} opts.baselineAttachmentTypeBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo}
     */
    comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'default.attachment.type.blacklist': this.apiClient.buildCollectionParam(opts['defaultAttachmentTypeBlacklist'], 'multi'),
        'baseline.attachment.type.blacklist': this.apiClient.buildCollectionParam(opts['baselineAttachmentTypeBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.parameterWhitelist 
     * @param {Array.<String>} opts.parameterWhitelistPrefixes 
     * @param {Array.<String>} opts.binaryParameterWhitelist 
     * @param {Array.<String>} opts.modifierWhitelist 
     * @param {Array.<String>} opts.operationWhitelist 
     * @param {Array.<String>} opts.operationWhitelistPrefixes 
     * @param {Array.<String>} opts.typehintWhitelist 
     * @param {Array.<String>} opts.resourcetypeWhitelist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo}
     */
    comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'parameter.whitelist': this.apiClient.buildCollectionParam(opts['parameterWhitelist'], 'multi'),
        'parameter.whitelist.prefixes': this.apiClient.buildCollectionParam(opts['parameterWhitelistPrefixes'], 'multi'),
        'binary.parameter.whitelist': this.apiClient.buildCollectionParam(opts['binaryParameterWhitelist'], 'multi'),
        'modifier.whitelist': this.apiClient.buildCollectionParam(opts['modifierWhitelist'], 'multi'),
        'operation.whitelist': this.apiClient.buildCollectionParam(opts['operationWhitelist'], 'multi'),
        'operation.whitelist.prefixes': this.apiClient.buildCollectionParam(opts['operationWhitelistPrefixes'], 'multi'),
        'typehint.whitelist': this.apiClient.buildCollectionParam(opts['typehintWhitelist'], 'multi'),
        'resourcetype.whitelist': this.apiClient.buildCollectionParam(opts['resourcetypeWhitelist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.deviceInfoTransformerEnabled 
     * @param {String} opts.deviceInfoTransformerCssStyle 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo}
     */
    comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'device.info.transformer.enabled': opts['deviceInfoTransformerEnabled'],
        'device.info.transformer.css.style': opts['deviceInfoTransformerCssStyle']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMobileCoreImplRedirectRedirectFilter operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMobileCoreImplRedirectRedirectFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.redirectEnabled 
     * @param {Boolean} opts.redirectStatsEnabled 
     * @param {Array.<String>} opts.redirectExtensions 
     * @param {Array.<String>} opts.redirectPaths 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMobileCoreImplRedirectRedirectFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo}
     */
    comDayCqWcmMobileCoreImplRedirectRedirectFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'redirect.enabled': opts['redirectEnabled'],
        'redirect.stats.enabled': opts['redirectStatsEnabled'],
        'redirect.extensions': this.apiClient.buildCollectionParam(opts['redirectExtensions'], 'multi'),
        'redirect.paths': this.apiClient.buildCollectionParam(opts['redirectPaths'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsContentCopyActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentCopyActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {String} opts.contentcopyactionOrderStyle 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentCopyActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo}
     */
    comDayCqWcmMsmImplActionsContentCopyActionFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.wcm.msm.action.excludednodetypes': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludednodetypes'], 'multi'),
        'cq.wcm.msm.action.excludedparagraphitems': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedparagraphitems'], 'multi'),
        'cq.wcm.msm.action.excludedprops': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedprops'], 'multi'),
        'contentcopyaction.order.style': opts['contentcopyactionOrderStyle']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsContentDeleteActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentDeleteActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentDeleteActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo}
     */
    comDayCqWcmMsmImplActionsContentDeleteActionFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.wcm.msm.action.excludednodetypes': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludednodetypes'], 'multi'),
        'cq.wcm.msm.action.excludedparagraphitems': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedparagraphitems'], 'multi'),
        'cq.wcm.msm.action.excludedprops': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedprops'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsContentUpdateActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentUpdateActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {Array.<String>} opts.cqWcmMsmActionIgnoredMixin 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsContentUpdateActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo}
     */
    comDayCqWcmMsmImplActionsContentUpdateActionFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.wcm.msm.action.excludednodetypes': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludednodetypes'], 'multi'),
        'cq.wcm.msm.action.excludedparagraphitems': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedparagraphitems'], 'multi'),
        'cq.wcm.msm.action.excludedprops': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedprops'], 'multi'),
        'cq.wcm.msm.action.ignoredMixin': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionIgnoredMixin'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsOrderChildrenActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsOrderChildrenActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsOrderChildrenActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo}
     */
    comDayCqWcmMsmImplActionsOrderChildrenActionFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.wcm.msm.action.excludednodetypes': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludednodetypes'], 'multi'),
        'cq.wcm.msm.action.excludedparagraphitems': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedparagraphitems'], 'multi'),
        'cq.wcm.msm.action.excludedprops': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedprops'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsPageMoveActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsPageMoveActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {Boolean} opts.cqWcmMsmImplActionsPagemovePropReferenceUpdate 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsPageMoveActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo}
     */
    comDayCqWcmMsmImplActionsPageMoveActionFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.wcm.msm.action.excludednodetypes': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludednodetypes'], 'multi'),
        'cq.wcm.msm.action.excludedparagraphitems': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedparagraphitems'], 'multi'),
        'cq.wcm.msm.action.excludedprops': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedprops'], 'multi'),
        'cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate': opts['cqWcmMsmImplActionsPagemovePropReferenceUpdate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsReferencesUpdateActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {Boolean} opts.cqWcmMsmImplActionReferencesupdatePropUpdateNested 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo}
     */
    comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.wcm.msm.action.excludednodetypes': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludednodetypes'], 'multi'),
        'cq.wcm.msm.action.excludedparagraphitems': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedparagraphitems'], 'multi'),
        'cq.wcm.msm.action.excludedprops': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedprops'], 'multi'),
        'cq.wcm.msm.impl.action.referencesupdate.prop_updateNested': opts['cqWcmMsmImplActionReferencesupdatePropUpdateNested']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplActionsVersionCopyActionFactory operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsVersionCopyActionFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludednodetypes 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedparagraphitems 
     * @param {Array.<String>} opts.cqWcmMsmActionExcludedprops 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplActionsVersionCopyActionFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo}
     */
    comDayCqWcmMsmImplActionsVersionCopyActionFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.wcm.msm.action.excludednodetypes': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludednodetypes'], 'multi'),
        'cq.wcm.msm.action.excludedparagraphitems': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedparagraphitems'], 'multi'),
        'cq.wcm.msm.action.excludedprops': this.apiClient.buildCollectionParam(opts['cqWcmMsmActionExcludedprops'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplLiveRelationshipManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplLiveRelationshipManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.liverelationshipmgrRelationsconfigDefault 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplLiveRelationshipManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo}
     */
    comDayCqWcmMsmImplLiveRelationshipManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'liverelationshipmgr.relationsconfig.default': opts['liverelationshipmgrRelationsconfigDefault']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplRolloutManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplRolloutManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplRolloutManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Array.<String>} opts.rolloutmgrExcludedpropsDefault 
     * @param {Array.<String>} opts.rolloutmgrExcludedparagraphpropsDefault 
     * @param {Array.<String>} opts.rolloutmgrExcludednodetypesDefault 
     * @param {Number} opts.rolloutmgrThreadpoolMaxsize 
     * @param {Number} opts.rolloutmgrThreadpoolMaxshutdowntime 
     * @param {String} opts.rolloutmgrThreadpoolPriority 
     * @param {Number} opts.rolloutmgrCommitSize 
     * @param {Boolean} opts.rolloutmgrConflicthandlingEnabled 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplRolloutManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplRolloutManagerImplInfo}
     */
    comDayCqWcmMsmImplRolloutManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.filter': opts['eventFilter'],
        'rolloutmgr.excludedprops.default': this.apiClient.buildCollectionParam(opts['rolloutmgrExcludedpropsDefault'], 'multi'),
        'rolloutmgr.excludedparagraphprops.default': this.apiClient.buildCollectionParam(opts['rolloutmgrExcludedparagraphpropsDefault'], 'multi'),
        'rolloutmgr.excludednodetypes.default': this.apiClient.buildCollectionParam(opts['rolloutmgrExcludednodetypesDefault'], 'multi'),
        'rolloutmgr.threadpool.maxsize': opts['rolloutmgrThreadpoolMaxsize'],
        'rolloutmgr.threadpool.maxshutdowntime': opts['rolloutmgrThreadpoolMaxshutdowntime'],
        'rolloutmgr.threadpool.priority': opts['rolloutmgrThreadpoolPriority'],
        'rolloutmgr.commit.size': opts['rolloutmgrCommitSize'],
        'rolloutmgr.conflicthandling.enabled': opts['rolloutmgrConflicthandlingEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplRolloutManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmMsmImplServletsAuditLogServlet operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmMsmImplServletsAuditLogServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmMsmImplServletsAuditLogServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.auditlogservletDefaultEventsCount 
     * @param {String} opts.auditlogservletDefaultPath 
     * @param {module:api/ConfigmgrApi~comDayCqWcmMsmImplServletsAuditLogServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmMsmImplServletsAuditLogServletInfo}
     */
    comDayCqWcmMsmImplServletsAuditLogServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'auditlogservlet.default.events.count': opts['auditlogservletDefaultEventsCount'],
        'auditlogservlet.default.path': opts['auditlogservletDefaultPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmMsmImplServletsAuditLogServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmNotificationEmailImplEmailChannel operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmNotificationEmailImplEmailChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmNotificationEmailImplEmailChannelInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.emailFrom 
     * @param {module:api/ConfigmgrApi~comDayCqWcmNotificationEmailImplEmailChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmNotificationEmailImplEmailChannelInfo}
     */
    comDayCqWcmNotificationEmailImplEmailChannel(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'email.from': opts['emailFrom']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmNotificationEmailImplEmailChannelInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmNotificationImplNotificationManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmNotificationImplNotificationManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmNotificationImplNotificationManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.eventTopics 
     * @param {module:api/ConfigmgrApi~comDayCqWcmNotificationImplNotificationManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmNotificationImplNotificationManagerImplInfo}
     */
    comDayCqWcmNotificationImplNotificationManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.topics': this.apiClient.buildCollectionParam(opts['eventTopics'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmNotificationImplNotificationManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmScriptingImplBVPManager operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmScriptingImplBVPManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmScriptingImplBVPManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.comDayCqWcmScriptingBvpScriptEngines 
     * @param {module:api/ConfigmgrApi~comDayCqWcmScriptingImplBVPManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmScriptingImplBVPManagerInfo}
     */
    comDayCqWcmScriptingImplBVPManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'com.day.cq.wcm.scripting.bvp.script.engines': this.apiClient.buildCollectionParam(opts['comDayCqWcmScriptingBvpScriptEngines'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmScriptingImplBVPManagerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmUndoUndoConfig operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmUndoUndoConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmUndoUndoConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.cqWcmUndoEnabled 
     * @param {String} opts.cqWcmUndoPath 
     * @param {Number} opts.cqWcmUndoValidity 
     * @param {Number} opts.cqWcmUndoSteps 
     * @param {String} opts.cqWcmUndoPersistence 
     * @param {Boolean} opts.cqWcmUndoPersistenceMode 
     * @param {String} opts.cqWcmUndoMarkermode 
     * @param {Array.<String>} opts.cqWcmUndoWhitelist 
     * @param {Array.<String>} opts.cqWcmUndoBlacklist 
     * @param {module:api/ConfigmgrApi~comDayCqWcmUndoUndoConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmUndoUndoConfigInfo}
     */
    comDayCqWcmUndoUndoConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cq.wcm.undo.enabled': opts['cqWcmUndoEnabled'],
        'cq.wcm.undo.path': opts['cqWcmUndoPath'],
        'cq.wcm.undo.validity': opts['cqWcmUndoValidity'],
        'cq.wcm.undo.steps': opts['cqWcmUndoSteps'],
        'cq.wcm.undo.persistence': opts['cqWcmUndoPersistence'],
        'cq.wcm.undo.persistence.mode': opts['cqWcmUndoPersistenceMode'],
        'cq.wcm.undo.markermode': opts['cqWcmUndoMarkermode'],
        'cq.wcm.undo.whitelist': this.apiClient.buildCollectionParam(opts['cqWcmUndoWhitelist'], 'multi'),
        'cq.wcm.undo.blacklist': this.apiClient.buildCollectionParam(opts['cqWcmUndoBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmUndoUndoConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmWebservicesupportImplReplicationEventListener operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmWebservicesupportImplReplicationEventListenerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.flushAgents 
     * @param {module:api/ConfigmgrApi~comDayCqWcmWebservicesupportImplReplicationEventListenerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo}
     */
    comDayCqWcmWebservicesupportImplReplicationEventListener(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'Flush agents': this.apiClient.buildCollectionParam(opts['flushAgents'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmWorkflowImplWcmWorkflowServiceImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmWorkflowImplWcmWorkflowServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.eventFilter 
     * @param {Number} opts.minThreadPoolSize 
     * @param {Number} opts.maxThreadPoolSize 
     * @param {Boolean} opts.cqWcmWorkflowTerminateOnActivate 
     * @param {Array.<String>} opts.cqWcmWorklfowTerminateExclusionList 
     * @param {module:api/ConfigmgrApi~comDayCqWcmWorkflowImplWcmWorkflowServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo}
     */
    comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'event.filter': opts['eventFilter'],
        'minThreadPoolSize': opts['minThreadPoolSize'],
        'maxThreadPoolSize': opts['maxThreadPoolSize'],
        'cq.wcm.workflow.terminate.on.activate': opts['cqWcmWorkflowTerminateOnActivate'],
        'cq.wcm.worklfow.terminate.exclusion.list': this.apiClient.buildCollectionParam(opts['cqWcmWorklfowTerminateExclusionList'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWcmWorkflowImplWorkflowPackageInfoProvider operation.
     * @callback module:api/ConfigmgrApi~comDayCqWcmWorkflowImplWorkflowPackageInfoProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.workflowpackageinfoproviderFilter 
     * @param {String} opts.workflowpackageinfoproviderFilterRootpath 
     * @param {module:api/ConfigmgrApi~comDayCqWcmWorkflowImplWorkflowPackageInfoProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo}
     */
    comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'workflowpackageinfoprovider.filter': this.apiClient.buildCollectionParam(opts['workflowpackageinfoproviderFilter'], 'multi'),
        'workflowpackageinfoprovider.filter.rootpath': opts['workflowpackageinfoproviderFilterRootpath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWidgetImplHtmlLibraryManagerImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWidgetImplHtmlLibraryManagerImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWidgetImplHtmlLibraryManagerImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.htmllibmanagerClientmanager 
     * @param {Boolean} opts.htmllibmanagerDebug 
     * @param {Boolean} opts.htmllibmanagerDebugConsole 
     * @param {String} opts.htmllibmanagerDebugInitJs 
     * @param {String} opts.htmllibmanagerDefaultthemename 
     * @param {String} opts.htmllibmanagerDefaultuserthemename 
     * @param {String} opts.htmllibmanagerFirebuglitePath 
     * @param {Boolean} opts.htmllibmanagerForceCQUrlInfo 
     * @param {Boolean} opts.htmllibmanagerGzip 
     * @param {Number} opts.htmllibmanagerMaxage 
     * @param {Number} opts.htmllibmanagerMaxDataUriSize 
     * @param {Boolean} opts.htmllibmanagerMinify 
     * @param {Array.<String>} opts.htmllibmanagerPathList 
     * @param {Boolean} opts.htmllibmanagerTiming 
     * @param {module:api/ConfigmgrApi~comDayCqWidgetImplHtmlLibraryManagerImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWidgetImplHtmlLibraryManagerImplInfo}
     */
    comDayCqWidgetImplHtmlLibraryManagerImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'htmllibmanager.clientmanager': opts['htmllibmanagerClientmanager'],
        'htmllibmanager.debug': opts['htmllibmanagerDebug'],
        'htmllibmanager.debug.console': opts['htmllibmanagerDebugConsole'],
        'htmllibmanager.debug.init.js': opts['htmllibmanagerDebugInitJs'],
        'htmllibmanager.defaultthemename': opts['htmllibmanagerDefaultthemename'],
        'htmllibmanager.defaultuserthemename': opts['htmllibmanagerDefaultuserthemename'],
        'htmllibmanager.firebuglite.path': opts['htmllibmanagerFirebuglitePath'],
        'htmllibmanager.forceCQUrlInfo': opts['htmllibmanagerForceCQUrlInfo'],
        'htmllibmanager.gzip': opts['htmllibmanagerGzip'],
        'htmllibmanager.maxage': opts['htmllibmanagerMaxage'],
        'htmllibmanager.maxDataUriSize': opts['htmllibmanagerMaxDataUriSize'],
        'htmllibmanager.minify': opts['htmllibmanagerMinify'],
        'htmllibmanager.path.list': this.apiClient.buildCollectionParam(opts['htmllibmanagerPathList'], 'multi'),
        'htmllibmanager.timing': opts['htmllibmanagerTiming']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWidgetImplHtmlLibraryManagerImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWidgetImplWidgetExtensionProviderImpl operation.
     * @callback module:api/ConfigmgrApi~comDayCqWidgetImplWidgetExtensionProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWidgetImplWidgetExtensionProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.extendableWidgets 
     * @param {Boolean} opts.widgetextensionproviderDebug 
     * @param {module:api/ConfigmgrApi~comDayCqWidgetImplWidgetExtensionProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWidgetImplWidgetExtensionProviderImplInfo}
     */
    comDayCqWidgetImplWidgetExtensionProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'extendable.widgets': this.apiClient.buildCollectionParam(opts['extendableWidgets'], 'multi'),
        'widgetextensionprovider.debug': opts['widgetextensionproviderDebug']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWidgetImplWidgetExtensionProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWorkflowImplEmailEMailNotificationService operation.
     * @callback module:api/ConfigmgrApi~comDayCqWorkflowImplEmailEMailNotificationServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWorkflowImplEmailEMailNotificationServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.fromAddress 
     * @param {String} opts.hostPrefix 
     * @param {Boolean} opts.notifyOnabort 
     * @param {Boolean} opts.notifyOncomplete 
     * @param {Boolean} opts.notifyOncontainercomplete 
     * @param {Boolean} opts.notifyUseronly 
     * @param {module:api/ConfigmgrApi~comDayCqWorkflowImplEmailEMailNotificationServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWorkflowImplEmailEMailNotificationServiceInfo}
     */
    comDayCqWorkflowImplEmailEMailNotificationService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'from.address': opts['fromAddress'],
        'host.prefix': opts['hostPrefix'],
        'notify.onabort': opts['notifyOnabort'],
        'notify.oncomplete': opts['notifyOncomplete'],
        'notify.oncontainercomplete': opts['notifyOncontainercomplete'],
        'notify.useronly': opts['notifyUseronly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCqWorkflowImplEmailTaskEMailNotificationService operation.
     * @callback module:api/ConfigmgrApi~comDayCqWorkflowImplEmailTaskEMailNotificationServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.notifyOnupdate 
     * @param {Boolean} opts.notifyOncomplete 
     * @param {module:api/ConfigmgrApi~comDayCqWorkflowImplEmailTaskEMailNotificationServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo}
     */
    comDayCqWorkflowImplEmailTaskEMailNotificationService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'notify.onupdate': opts['notifyOnupdate'],
        'notify.oncomplete': opts['notifyOncomplete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCrxSecurityTokenImplImplTokenAuthenticationHandler operation.
     * @callback module:api/ConfigmgrApi~comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {String} opts.tokenRequiredAttr 
     * @param {String} opts.tokenAlternateUrl 
     * @param {Boolean} opts.tokenEncapsulated 
     * @param {Array.<String>} opts.skipTokenRefresh 
     * @param {module:api/ConfigmgrApi~comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo}
     */
    comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path'],
        'token.required.attr': opts['tokenRequiredAttr'],
        'token.alternate.url': opts['tokenAlternateUrl'],
        'token.encapsulated': opts['tokenEncapsulated'],
        'skip.token.refresh': this.apiClient.buildCollectionParam(opts['skipTokenRefresh'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comDayCrxSecurityTokenImplTokenCleanupTask operation.
     * @callback module:api/ConfigmgrApi~comDayCrxSecurityTokenImplTokenCleanupTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComDayCrxSecurityTokenImplTokenCleanupTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enableTokenCleanupTask 
     * @param {String} opts.schedulerExpression 
     * @param {Number} opts.batchSize 
     * @param {module:api/ConfigmgrApi~comDayCrxSecurityTokenImplTokenCleanupTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComDayCrxSecurityTokenImplTokenCleanupTaskInfo}
     */
    comDayCrxSecurityTokenImplTokenCleanupTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enable.token.cleanup.task': opts['enableTokenCleanupTask'],
        'scheduler.expression': opts['schedulerExpression'],
        'batch.size': opts['batchSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the guideLocalizationService operation.
     * @callback module:api/ConfigmgrApi~guideLocalizationServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuideLocalizationServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.supportedLocales 
     * @param {Array.<String>} opts.localizableProperties 
     * @param {module:api/ConfigmgrApi~guideLocalizationServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuideLocalizationServiceInfo}
     */
    guideLocalizationService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'supportedLocales': this.apiClient.buildCollectionParam(opts['supportedLocales'], 'multi'),
        'Localizable Properties': this.apiClient.buildCollectionParam(opts['localizableProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = GuideLocalizationServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/Guide Localization Service', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagingUserComponentFactory operation.
     * @callback module:api/ConfigmgrApi~messagingUserComponentFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagingUserComponentFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.priority 
     * @param {module:api/ConfigmgrApi~messagingUserComponentFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagingUserComponentFactoryInfo}
     */
    messagingUserComponentFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = MessagingUserComponentFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/MessagingUserComponentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheAriesJmxFrameworkStateConfig operation.
     * @callback module:api/ConfigmgrApi~orgApacheAriesJmxFrameworkStateConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheAriesJmxFrameworkStateConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.attributeChangeNotificationEnabled 
     * @param {module:api/ConfigmgrApi~orgApacheAriesJmxFrameworkStateConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheAriesJmxFrameworkStateConfigInfo}
     */
    orgApacheAriesJmxFrameworkStateConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'attributeChangeNotificationEnabled': opts['attributeChangeNotificationEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheAriesJmxFrameworkStateConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixEventadminImplEventAdmin operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixEventadminImplEventAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixEventadminImplEventAdminInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.orgApacheFelixEventadminThreadPoolSize 
     * @param {Number} opts.orgApacheFelixEventadminAsyncToSyncThreadRatio 
     * @param {Number} opts.orgApacheFelixEventadminTimeout 
     * @param {Boolean} opts.orgApacheFelixEventadminRequireTopic 
     * @param {Array.<String>} opts.orgApacheFelixEventadminIgnoreTimeout 
     * @param {Array.<String>} opts.orgApacheFelixEventadminIgnoreTopic 
     * @param {module:api/ConfigmgrApi~orgApacheFelixEventadminImplEventAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixEventadminImplEventAdminInfo}
     */
    orgApacheFelixEventadminImplEventAdmin(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.felix.eventadmin.ThreadPoolSize': opts['orgApacheFelixEventadminThreadPoolSize'],
        'org.apache.felix.eventadmin.AsyncToSyncThreadRatio': opts['orgApacheFelixEventadminAsyncToSyncThreadRatio'],
        'org.apache.felix.eventadmin.Timeout': opts['orgApacheFelixEventadminTimeout'],
        'org.apache.felix.eventadmin.RequireTopic': opts['orgApacheFelixEventadminRequireTopic'],
        'org.apache.felix.eventadmin.IgnoreTimeout': this.apiClient.buildCollectionParam(opts['orgApacheFelixEventadminIgnoreTimeout'], 'multi'),
        'org.apache.felix.eventadmin.IgnoreTopic': this.apiClient.buildCollectionParam(opts['orgApacheFelixEventadminIgnoreTopic'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixEventadminImplEventAdminInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixHttp operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixHttpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixHttpInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheFelixHttpHost 
     * @param {Boolean} opts.orgApacheFelixHttpEnable 
     * @param {Number} opts.orgOsgiServiceHttpPort 
     * @param {Number} opts.orgApacheFelixHttpTimeout 
     * @param {Boolean} opts.orgApacheFelixHttpsEnable 
     * @param {Number} opts.orgOsgiServiceHttpPortSecure 
     * @param {String} opts.orgApacheFelixHttpsKeystore 
     * @param {String} opts.orgApacheFelixHttpsKeystorePassword 
     * @param {String} opts.orgApacheFelixHttpsKeystoreKeyPassword 
     * @param {String} opts.orgApacheFelixHttpsTruststore 
     * @param {String} opts.orgApacheFelixHttpsTruststorePassword 
     * @param {String} opts.orgApacheFelixHttpsClientcertificate 
     * @param {String} opts.orgApacheFelixHttpContextPath 
     * @param {Boolean} opts.orgApacheFelixHttpMbeans 
     * @param {Number} opts.orgApacheFelixHttpSessionTimeout 
     * @param {Number} opts.orgApacheFelixHttpJettyThreadpoolMax 
     * @param {Number} opts.orgApacheFelixHttpJettyAcceptors 
     * @param {Number} opts.orgApacheFelixHttpJettySelectors 
     * @param {Number} opts.orgApacheFelixHttpJettyHeaderBufferSize 
     * @param {Number} opts.orgApacheFelixHttpJettyRequestBufferSize 
     * @param {Number} opts.orgApacheFelixHttpJettyResponseBufferSize 
     * @param {Number} opts.orgApacheFelixHttpJettyMaxFormSize 
     * @param {Array.<String>} opts.orgApacheFelixHttpPathExclusions 
     * @param {Array.<String>} opts.orgApacheFelixHttpsJettyCiphersuitesExcluded 
     * @param {Array.<String>} opts.orgApacheFelixHttpsJettyCiphersuitesIncluded 
     * @param {Boolean} opts.orgApacheFelixHttpJettySendServerHeader 
     * @param {Array.<String>} opts.orgApacheFelixHttpsJettyProtocolsIncluded 
     * @param {Array.<String>} opts.orgApacheFelixHttpsJettyProtocolsExcluded 
     * @param {Boolean} opts.orgApacheFelixProxyLoadBalancerConnectionEnable 
     * @param {Boolean} opts.orgApacheFelixHttpsJettyRenegotiateAllowed 
     * @param {Boolean} opts.orgApacheFelixHttpsJettySessionCookieHttpOnly 
     * @param {Boolean} opts.orgApacheFelixHttpsJettySessionCookieSecure 
     * @param {String} opts.orgEclipseJettyServletSessionIdPathParameterName 
     * @param {Boolean} opts.orgEclipseJettyServletCheckingRemoteSessionIdEncoding 
     * @param {String} opts.orgEclipseJettyServletSessionCookie 
     * @param {String} opts.orgEclipseJettyServletSessionDomain 
     * @param {String} opts.orgEclipseJettyServletSessionPath 
     * @param {Number} opts.orgEclipseJettyServletMaxAge 
     * @param {String} opts.orgApacheFelixHttpName 
     * @param {Boolean} opts.orgApacheFelixJettyGziphandlerEnable 
     * @param {Number} opts.orgApacheFelixJettyGzipMinGzipSize 
     * @param {Number} opts.orgApacheFelixJettyGzipCompressionLevel 
     * @param {Number} opts.orgApacheFelixJettyGzipInflateBufferSize 
     * @param {Boolean} opts.orgApacheFelixJettyGzipSyncFlush 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipExcludedUserAgents 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipIncludedMethods 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipExcludedMethods 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipIncludedPaths 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipExcludedPaths 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipIncludedMimeTypes 
     * @param {Array.<String>} opts.orgApacheFelixJettyGzipExcludedMimeTypes 
     * @param {Boolean} opts.orgApacheFelixHttpSessionInvalidate 
     * @param {Boolean} opts.orgApacheFelixHttpSessionUniqueid 
     * @param {module:api/ConfigmgrApi~orgApacheFelixHttpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixHttpInfo}
     */
    orgApacheFelixHttp(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.felix.http.host': opts['orgApacheFelixHttpHost'],
        'org.apache.felix.http.enable': opts['orgApacheFelixHttpEnable'],
        'org.osgi.service.http.port': opts['orgOsgiServiceHttpPort'],
        'org.apache.felix.http.timeout': opts['orgApacheFelixHttpTimeout'],
        'org.apache.felix.https.enable': opts['orgApacheFelixHttpsEnable'],
        'org.osgi.service.http.port.secure': opts['orgOsgiServiceHttpPortSecure'],
        'org.apache.felix.https.keystore': opts['orgApacheFelixHttpsKeystore'],
        'org.apache.felix.https.keystore.password': opts['orgApacheFelixHttpsKeystorePassword'],
        'org.apache.felix.https.keystore.key.password': opts['orgApacheFelixHttpsKeystoreKeyPassword'],
        'org.apache.felix.https.truststore': opts['orgApacheFelixHttpsTruststore'],
        'org.apache.felix.https.truststore.password': opts['orgApacheFelixHttpsTruststorePassword'],
        'org.apache.felix.https.clientcertificate': opts['orgApacheFelixHttpsClientcertificate'],
        'org.apache.felix.http.context_path': opts['orgApacheFelixHttpContextPath'],
        'org.apache.felix.http.mbeans': opts['orgApacheFelixHttpMbeans'],
        'org.apache.felix.http.session.timeout': opts['orgApacheFelixHttpSessionTimeout'],
        'org.apache.felix.http.jetty.threadpool.max': opts['orgApacheFelixHttpJettyThreadpoolMax'],
        'org.apache.felix.http.jetty.acceptors': opts['orgApacheFelixHttpJettyAcceptors'],
        'org.apache.felix.http.jetty.selectors': opts['orgApacheFelixHttpJettySelectors'],
        'org.apache.felix.http.jetty.headerBufferSize': opts['orgApacheFelixHttpJettyHeaderBufferSize'],
        'org.apache.felix.http.jetty.requestBufferSize': opts['orgApacheFelixHttpJettyRequestBufferSize'],
        'org.apache.felix.http.jetty.responseBufferSize': opts['orgApacheFelixHttpJettyResponseBufferSize'],
        'org.apache.felix.http.jetty.maxFormSize': opts['orgApacheFelixHttpJettyMaxFormSize'],
        'org.apache.felix.http.path_exclusions': this.apiClient.buildCollectionParam(opts['orgApacheFelixHttpPathExclusions'], 'multi'),
        'org.apache.felix.https.jetty.ciphersuites.excluded': this.apiClient.buildCollectionParam(opts['orgApacheFelixHttpsJettyCiphersuitesExcluded'], 'multi'),
        'org.apache.felix.https.jetty.ciphersuites.included': this.apiClient.buildCollectionParam(opts['orgApacheFelixHttpsJettyCiphersuitesIncluded'], 'multi'),
        'org.apache.felix.http.jetty.sendServerHeader': opts['orgApacheFelixHttpJettySendServerHeader'],
        'org.apache.felix.https.jetty.protocols.included': this.apiClient.buildCollectionParam(opts['orgApacheFelixHttpsJettyProtocolsIncluded'], 'multi'),
        'org.apache.felix.https.jetty.protocols.excluded': this.apiClient.buildCollectionParam(opts['orgApacheFelixHttpsJettyProtocolsExcluded'], 'multi'),
        'org.apache.felix.proxy.load.balancer.connection.enable': opts['orgApacheFelixProxyLoadBalancerConnectionEnable'],
        'org.apache.felix.https.jetty.renegotiateAllowed': opts['orgApacheFelixHttpsJettyRenegotiateAllowed'],
        'org.apache.felix.https.jetty.session.cookie.httpOnly': opts['orgApacheFelixHttpsJettySessionCookieHttpOnly'],
        'org.apache.felix.https.jetty.session.cookie.secure': opts['orgApacheFelixHttpsJettySessionCookieSecure'],
        'org.eclipse.jetty.servlet.SessionIdPathParameterName': opts['orgEclipseJettyServletSessionIdPathParameterName'],
        'org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding': opts['orgEclipseJettyServletCheckingRemoteSessionIdEncoding'],
        'org.eclipse.jetty.servlet.SessionCookie': opts['orgEclipseJettyServletSessionCookie'],
        'org.eclipse.jetty.servlet.SessionDomain': opts['orgEclipseJettyServletSessionDomain'],
        'org.eclipse.jetty.servlet.SessionPath': opts['orgEclipseJettyServletSessionPath'],
        'org.eclipse.jetty.servlet.MaxAge': opts['orgEclipseJettyServletMaxAge'],
        'org.apache.felix.http.name': opts['orgApacheFelixHttpName'],
        'org.apache.felix.jetty.gziphandler.enable': opts['orgApacheFelixJettyGziphandlerEnable'],
        'org.apache.felix.jetty.gzip.minGzipSize': opts['orgApacheFelixJettyGzipMinGzipSize'],
        'org.apache.felix.jetty.gzip.compressionLevel': opts['orgApacheFelixJettyGzipCompressionLevel'],
        'org.apache.felix.jetty.gzip.inflateBufferSize': opts['orgApacheFelixJettyGzipInflateBufferSize'],
        'org.apache.felix.jetty.gzip.syncFlush': opts['orgApacheFelixJettyGzipSyncFlush'],
        'org.apache.felix.jetty.gzip.excludedUserAgents': this.apiClient.buildCollectionParam(opts['orgApacheFelixJettyGzipExcludedUserAgents'], 'multi'),
        'org.apache.felix.jetty.gzip.includedMethods': this.apiClient.buildCollectionParam(opts['orgApacheFelixJettyGzipIncludedMethods'], 'multi'),
        'org.apache.felix.jetty.gzip.excludedMethods': this.apiClient.buildCollectionParam(opts['orgApacheFelixJettyGzipExcludedMethods'], 'multi'),
        'org.apache.felix.jetty.gzip.includedPaths': this.apiClient.buildCollectionParam(opts['orgApacheFelixJettyGzipIncludedPaths'], 'multi'),
        'org.apache.felix.jetty.gzip.excludedPaths': this.apiClient.buildCollectionParam(opts['orgApacheFelixJettyGzipExcludedPaths'], 'multi'),
        'org.apache.felix.jetty.gzip.includedMimeTypes': this.apiClient.buildCollectionParam(opts['orgApacheFelixJettyGzipIncludedMimeTypes'], 'multi'),
        'org.apache.felix.jetty.gzip.excludedMimeTypes': this.apiClient.buildCollectionParam(opts['orgApacheFelixJettyGzipExcludedMimeTypes'], 'multi'),
        'org.apache.felix.http.session.invalidate': opts['orgApacheFelixHttpSessionInvalidate'],
        'org.apache.felix.http.session.uniqueid': opts['orgApacheFelixHttpSessionUniqueid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixHttpInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.http', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixHttpSslfilterSslFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixHttpSslfilterSslFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixHttpSslfilterSslFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.sslForwardHeader 
     * @param {String} opts.sslForwardValue 
     * @param {String} opts.sslForwardCertHeader 
     * @param {Boolean} opts.rewriteAbsoluteUrls 
     * @param {module:api/ConfigmgrApi~orgApacheFelixHttpSslfilterSslFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixHttpSslfilterSslFilterInfo}
     */
    orgApacheFelixHttpSslfilterSslFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'ssl-forward.header': opts['sslForwardHeader'],
        'ssl-forward.value': opts['sslForwardValue'],
        'ssl-forward-cert.header': opts['sslForwardCertHeader'],
        'rewrite.absolute.urls': opts['rewriteAbsoluteUrls']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixHttpSslfilterSslFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixJaasConfigurationFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixJaasConfigurationFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixJaasConfigurationFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jaasControlFlag 
     * @param {Number} opts.jaasRanking 
     * @param {String} opts.jaasRealmName 
     * @param {String} opts.jaasClassname 
     * @param {Array.<String>} opts.jaasOptions 
     * @param {module:api/ConfigmgrApi~orgApacheFelixJaasConfigurationFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixJaasConfigurationFactoryInfo}
     */
    orgApacheFelixJaasConfigurationFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'jaas.controlFlag': opts['jaasControlFlag'],
        'jaas.ranking': opts['jaasRanking'],
        'jaas.realmName': opts['jaasRealmName'],
        'jaas.classname': opts['jaasClassname'],
        'jaas.options': this.apiClient.buildCollectionParam(opts['jaasOptions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixJaasConfigurationFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.jaas.Configuration.factory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixJaasConfigurationSpi operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixJaasConfigurationSpiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixJaasConfigurationSpiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jaasDefaultRealmName 
     * @param {String} opts.jaasConfigProviderName 
     * @param {String} opts.jaasGlobalConfigPolicy 
     * @param {module:api/ConfigmgrApi~orgApacheFelixJaasConfigurationSpiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixJaasConfigurationSpiInfo}
     */
    orgApacheFelixJaasConfigurationSpi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'jaas.defaultRealmName': opts['jaasDefaultRealmName'],
        'jaas.configProviderName': opts['jaasConfigProviderName'],
        'jaas.globalConfigPolicy': opts['jaasGlobalConfigPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixJaasConfigurationSpiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixScrScrService operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixScrScrServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixScrScrServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.dsLoglevel 
     * @param {Boolean} opts.dsFactoryEnabled 
     * @param {Boolean} opts.dsDelayedKeepInstances 
     * @param {Number} opts.dsLockTimeoutMilliseconds 
     * @param {Number} opts.dsStopTimeoutMilliseconds 
     * @param {Boolean} opts.dsGlobalExtender 
     * @param {module:api/ConfigmgrApi~orgApacheFelixScrScrServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixScrScrServiceInfo}
     */
    orgApacheFelixScrScrService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'ds.loglevel': opts['dsLoglevel'],
        'ds.factory.enabled': opts['dsFactoryEnabled'],
        'ds.delayed.keepInstances': opts['dsDelayedKeepInstances'],
        'ds.lock.timeout.milliseconds': opts['dsLockTimeoutMilliseconds'],
        'ds.stop.timeout.milliseconds': opts['dsStopTimeoutMilliseconds'],
        'ds.global.extender': opts['dsGlobalExtender']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixScrScrServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.scr.ScrService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplComponentsCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplComponentsCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplComponentsCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.componentsList 
     * @param {String} opts.type 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplComponentsCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplComponentsCheckInfo}
     */
    orgApacheFelixSystemreadyImplComponentsCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'components.list': this.apiClient.buildCollectionParam(opts['componentsList'], 'multi'),
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixSystemreadyImplComponentsCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplFrameworkStartCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplFrameworkStartCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.timeout 
     * @param {Number} opts.targetStartLevel 
     * @param {String} opts.targetStartLevelPropName 
     * @param {String} opts.type 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplFrameworkStartCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo}
     */
    orgApacheFelixSystemreadyImplFrameworkStartCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'timeout': opts['timeout'],
        'target.start.level': opts['targetStartLevel'],
        'target.start.level.prop.name': opts['targetStartLevelPropName'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplServicesCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServicesCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplServicesCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.servicesList 
     * @param {String} opts.type 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServicesCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplServicesCheckInfo}
     */
    orgApacheFelixSystemreadyImplServicesCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'services.list': this.apiClient.buildCollectionParam(opts['servicesList'], 'multi'),
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixSystemreadyImplServicesCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplServletSystemAliveServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServletSystemAliveServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.osgiHttpWhiteboardServletPattern 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServletSystemAliveServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo}
     */
    orgApacheFelixSystemreadyImplServletSystemAliveServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'osgi.http.whiteboard.servlet.pattern': opts['osgiHttpWhiteboardServletPattern'],
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadyImplServletSystemReadyServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServletSystemReadyServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.osgiHttpWhiteboardServletPattern 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadyImplServletSystemReadyServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo}
     */
    orgApacheFelixSystemreadyImplServletSystemReadyServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'osgi.http.whiteboard.servlet.pattern': opts['osgiHttpWhiteboardServletPattern'],
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixSystemreadySystemReadyMonitor operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixSystemreadySystemReadyMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixSystemreadySystemReadyMonitorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.pollInterval 
     * @param {module:api/ConfigmgrApi~orgApacheFelixSystemreadySystemReadyMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixSystemreadySystemReadyMonitorInfo}
     */
    orgApacheFelixSystemreadySystemReadyMonitor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'poll.interval': opts['pollInterval']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixSystemreadySystemReadyMonitorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixWebconsoleInternalServletOsgiManager operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixWebconsoleInternalServletOsgiManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.managerRoot 
     * @param {String} opts.httpServiceFilter 
     * @param {String} opts.defaultRender 
     * @param {String} opts.realm 
     * @param {String} opts.username 
     * @param {String} opts.password 
     * @param {String} opts.category 
     * @param {String} opts.locale 
     * @param {Number} opts.loglevel 
     * @param {String} opts.plugins 
     * @param {module:api/ConfigmgrApi~orgApacheFelixWebconsoleInternalServletOsgiManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo}
     */
    orgApacheFelixWebconsoleInternalServletOsgiManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'manager.root': opts['managerRoot'],
        'http.service.filter': opts['httpServiceFilter'],
        'default.render': opts['defaultRender'],
        'realm': opts['realm'],
        'username': opts['username'],
        'password': opts['password'],
        'category': opts['category'],
        'locale': opts['locale'],
        'loglevel': opts['loglevel'],
        'plugins': opts['plugins']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixWebconsolePluginsEventInternalPluginServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixWebconsolePluginsEventInternalPluginServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxSize 
     * @param {module:api/ConfigmgrApi~orgApacheFelixWebconsolePluginsEventInternalPluginServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo}
     */
    orgApacheFelixWebconsolePluginsEventInternalPluginServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'max.size': opts['maxSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo operation.
     * @callback module:api/ConfigmgrApi~orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.felixMemoryusageDumpThreshold 
     * @param {Number} opts.felixMemoryusageDumpInterval 
     * @param {String} opts.felixMemoryusageDumpLocation 
     * @param {module:api/ConfigmgrApi~orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo}
     */
    orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'felix.memoryusage.dump.threshold': opts['felixMemoryusageDumpThreshold'],
        'felix.memoryusage.dump.interval': opts['felixMemoryusageDumpInterval'],
        'felix.memoryusage.dump.location': opts['felixMemoryusageDumpLocation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheHttpProxyconfigurator operation.
     * @callback module:api/ConfigmgrApi~orgApacheHttpProxyconfiguratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheHttpProxyconfiguratorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.proxyEnabled 
     * @param {String} opts.proxyHost 
     * @param {Number} opts.proxyPort 
     * @param {String} opts.proxyUser 
     * @param {String} opts.proxyPassword 
     * @param {Array.<String>} opts.proxyExceptions 
     * @param {module:api/ConfigmgrApi~orgApacheHttpProxyconfiguratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheHttpProxyconfiguratorInfo}
     */
    orgApacheHttpProxyconfigurator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'proxy.enabled': opts['proxyEnabled'],
        'proxy.host': opts['proxyHost'],
        'proxy.port': opts['proxyPort'],
        'proxy.user': opts['proxyUser'],
        'proxy.password': opts['proxyPassword'],
        'proxy.exceptions': this.apiClient.buildCollectionParam(opts['proxyExceptions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheHttpProxyconfiguratorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.http.proxyconfigurator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.dir 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo}
     */
    orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'dir': opts['dir']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo}
     */
    orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mongouri 
     * @param {String} opts.db 
     * @param {Boolean} opts.socketKeepAlive 
     * @param {Number} opts.cache 
     * @param {Number} opts.nodeCachePercentage 
     * @param {Number} opts.prevDocCachePercentage 
     * @param {Number} opts.childrenCachePercentage 
     * @param {Number} opts.diffCachePercentage 
     * @param {Number} opts.cacheSegmentCount 
     * @param {Number} opts.cacheStackMoveDistance 
     * @param {Number} opts.blobCacheSize 
     * @param {String} opts.persistentCache 
     * @param {String} opts.journalCache 
     * @param {Boolean} opts.customBlobStore 
     * @param {Number} opts.journalGCInterval 
     * @param {Number} opts.journalGCMaxAge 
     * @param {Boolean} opts.prefetchExternalChanges 
     * @param {String} opts.role 
     * @param {Number} opts.versionGcMaxAgeInSecs 
     * @param {String} opts.versionGCExpression 
     * @param {Number} opts.versionGCTimeLimitInSecs 
     * @param {Number} opts.blobGcMaxAgeInSecs 
     * @param {Number} opts.blobTrackSnapshotIntervalInSecs 
     * @param {String} opts.repositoryHome 
     * @param {Number} opts.maxReplicationLagInSecs 
     * @param {String} opts.documentStoreType 
     * @param {Boolean} opts.bundlingDisabled 
     * @param {Number} opts.updateLimit 
     * @param {Array.<String>} opts.persistentCacheIncludes 
     * @param {String} opts.leaseCheckMode 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo}
     */
    orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'mongouri': opts['mongouri'],
        'db': opts['db'],
        'socketKeepAlive': opts['socketKeepAlive'],
        'cache': opts['cache'],
        'nodeCachePercentage': opts['nodeCachePercentage'],
        'prevDocCachePercentage': opts['prevDocCachePercentage'],
        'childrenCachePercentage': opts['childrenCachePercentage'],
        'diffCachePercentage': opts['diffCachePercentage'],
        'cacheSegmentCount': opts['cacheSegmentCount'],
        'cacheStackMoveDistance': opts['cacheStackMoveDistance'],
        'blobCacheSize': opts['blobCacheSize'],
        'persistentCache': opts['persistentCache'],
        'journalCache': opts['journalCache'],
        'customBlobStore': opts['customBlobStore'],
        'journalGCInterval': opts['journalGCInterval'],
        'journalGCMaxAge': opts['journalGCMaxAge'],
        'prefetchExternalChanges': opts['prefetchExternalChanges'],
        'role': opts['role'],
        'versionGcMaxAgeInSecs': opts['versionGcMaxAgeInSecs'],
        'versionGCExpression': opts['versionGCExpression'],
        'versionGCTimeLimitInSecs': opts['versionGCTimeLimitInSecs'],
        'blobGcMaxAgeInSecs': opts['blobGcMaxAgeInSecs'],
        'blobTrackSnapshotIntervalInSecs': opts['blobTrackSnapshotIntervalInSecs'],
        'repository.home': opts['repositoryHome'],
        'maxReplicationLagInSecs': opts['maxReplicationLagInSecs'],
        'documentStoreType': opts['documentStoreType'],
        'bundlingDisabled': opts['bundlingDisabled'],
        'updateLimit': opts['updateLimit'],
        'persistentCacheIncludes': this.apiClient.buildCollectionParam(opts['persistentCacheIncludes'], 'multi'),
        'leaseCheckMode': opts['leaseCheckMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.persistentCacheIncludes 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo}
     */
    orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'persistentCacheIncludes': this.apiClient.buildCollectionParam(opts['persistentCacheIncludes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.includedPaths 
     * @param {Boolean} opts.enableAsyncObserver 
     * @param {Number} opts.observerQueueSize 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo}
     */
    orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'includedPaths': this.apiClient.buildCollectionParam(opts['includedPaths'], 'multi'),
        'enableAsyncObserver': opts['enableAsyncObserver'],
        'observerQueueSize': opts['observerQueueSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexAsyncIndexerService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.asyncConfigs 
     * @param {Number} opts.leaseTimeOutMinutes 
     * @param {Number} opts.failingIndexTimeoutSeconds 
     * @param {Number} opts.errorWarnIntervalSeconds 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo}
     */
    orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'asyncConfigs': this.apiClient.buildCollectionParam(opts['asyncConfigs'], 'multi'),
        'leaseTimeOutMinutes': opts['leaseTimeOutMinutes'],
        'failingIndexTimeoutSeconds': opts['failingIndexTimeoutSeconds'],
        'errorWarnIntervalSeconds': opts['errorWarnIntervalSeconds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.disabled 
     * @param {Boolean} opts.debug 
     * @param {String} opts.localIndexDir 
     * @param {Boolean} opts.enableOpenIndexAsync 
     * @param {Number} opts.threadPoolSize 
     * @param {Boolean} opts.prefetchIndexFiles 
     * @param {Number} opts.extractedTextCacheSizeInMB 
     * @param {Number} opts.extractedTextCacheExpiryInSecs 
     * @param {Boolean} opts.alwaysUsePreExtractedCache 
     * @param {Number} opts.booleanClauseLimit 
     * @param {Boolean} opts.enableHybridIndexing 
     * @param {Number} opts.hybridQueueSize 
     * @param {Boolean} opts.disableStoredIndexDefinition 
     * @param {Boolean} opts.deletedBlobsCollectionEnabled 
     * @param {Number} opts.propIndexCleanerIntervalInSecs 
     * @param {Boolean} opts.enableSingleBlobIndexFiles 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo}
     */
    orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'disabled': opts['disabled'],
        'debug': opts['debug'],
        'localIndexDir': opts['localIndexDir'],
        'enableOpenIndexAsync': opts['enableOpenIndexAsync'],
        'threadPoolSize': opts['threadPoolSize'],
        'prefetchIndexFiles': opts['prefetchIndexFiles'],
        'extractedTextCacheSizeInMB': opts['extractedTextCacheSizeInMB'],
        'extractedTextCacheExpiryInSecs': opts['extractedTextCacheExpiryInSecs'],
        'alwaysUsePreExtractedCache': opts['alwaysUsePreExtractedCache'],
        'booleanClauseLimit': opts['booleanClauseLimit'],
        'enableHybridIndexing': opts['enableHybridIndexing'],
        'hybridQueueSize': opts['hybridQueueSize'],
        'disableStoredIndexDefinition': opts['disableStoredIndexDefinition'],
        'deletedBlobsCollectionEnabled': opts['deletedBlobsCollectionEnabled'],
        'propIndexCleanerIntervalInSecs': opts['propIndexCleanerIntervalInSecs'],
        'enableSingleBlobIndexFiles': opts['enableSingleBlobIndexFiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.solrHomePath 
     * @param {String} opts.solrCoreName 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo}
     */
    orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'solr.home.path': opts['solrHomePath'],
        'solr.core.name': opts['solrCoreName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo}
     */
    orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.pathDescField 
     * @param {String} opts.pathChildField 
     * @param {String} opts.pathParentField 
     * @param {String} opts.pathExactField 
     * @param {String} opts.catchAllField 
     * @param {String} opts.collapsedPathField 
     * @param {String} opts.pathDepthField 
     * @param {String} opts.commitPolicy 
     * @param {Number} opts.rows 
     * @param {Boolean} opts.pathRestrictions 
     * @param {Boolean} opts.propertyRestrictions 
     * @param {Boolean} opts.primarytypesRestrictions 
     * @param {Array.<String>} opts.ignoredProperties 
     * @param {Array.<String>} opts.usedProperties 
     * @param {Array.<String>} opts.typeMappings 
     * @param {Array.<String>} opts.propertyMappings 
     * @param {Boolean} opts.collapseJcrcontentNodes 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo}
     */
    orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path.desc.field': opts['pathDescField'],
        'path.child.field': opts['pathChildField'],
        'path.parent.field': opts['pathParentField'],
        'path.exact.field': opts['pathExactField'],
        'catch.all.field': opts['catchAllField'],
        'collapsed.path.field': opts['collapsedPathField'],
        'path.depth.field': opts['pathDepthField'],
        'commit.policy': opts['commitPolicy'],
        'rows': opts['rows'],
        'path.restrictions': opts['pathRestrictions'],
        'property.restrictions': opts['propertyRestrictions'],
        'primarytypes.restrictions': opts['primarytypesRestrictions'],
        'ignored.properties': this.apiClient.buildCollectionParam(opts['ignoredProperties'], 'multi'),
        'used.properties': this.apiClient.buildCollectionParam(opts['usedProperties'], 'multi'),
        'type.mappings': this.apiClient.buildCollectionParam(opts['typeMappings'], 'multi'),
        'property.mappings': this.apiClient.buildCollectionParam(opts['propertyMappings'], 'multi'),
        'collapse.jcrcontent.nodes': opts['collapseJcrcontentNodes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.solrHttpUrl 
     * @param {String} opts.solrZkHost 
     * @param {String} opts.solrCollection 
     * @param {Number} opts.solrSocketTimeout 
     * @param {Number} opts.solrConnectionTimeout 
     * @param {Number} opts.solrShardsNo 
     * @param {Number} opts.solrReplicationFactor 
     * @param {String} opts.solrConfDir 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo}
     */
    orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'solr.http.url': opts['solrHttpUrl'],
        'solr.zk.host': opts['solrZkHost'],
        'solr.collection': opts['solrCollection'],
        'solr.socket.timeout': opts['solrSocketTimeout'],
        'solr.connection.timeout': opts['solrConnectionTimeout'],
        'solr.shards.no': opts['solrShardsNo'],
        'solr.replication.factor': opts['solrReplicationFactor'],
        'solr.conf.dir': opts['solrConfDir']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.queryAggregation 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo}
     */
    orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'query.aggregation': opts['queryAggregation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.serverType 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo}
     */
    orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'server.type': opts['serverType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerType 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo}
     */
    orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'providerType': opts['providerType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxItems 
     * @param {Number} opts.maxPathDepth 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo}
     */
    orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'maxItems': opts['maxItems'],
        'maxPathDepth': opts['maxPathDepth'],
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakQueryQueryEngineSettingsService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakQueryQueryEngineSettingsServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.queryLimitInMemory 
     * @param {Number} opts.queryLimitReads 
     * @param {Boolean} opts.queryFailTraversal 
     * @param {Boolean} opts.fastQuerySize 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakQueryQueryEngineSettingsServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo}
     */
    orgApacheJackrabbitOakQueryQueryEngineSettingsService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'queryLimitInMemory': opts['queryLimitInMemory'],
        'queryLimitReads': opts['queryLimitReads'],
        'queryFailTraversal': opts['queryFailTraversal'],
        'fastQuerySize': opts['fastQuerySize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheJackrabbitOakAuthenticationAppName 
     * @param {String} opts.orgApacheJackrabbitOakAuthenticationConfigSpiName 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo}
     */
    orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.jackrabbit.oak.authentication.appName': opts['orgApacheJackrabbitOakAuthenticationAppName'],
        'org.apache.jackrabbit.oak.authentication.configSpiName': opts['orgApacheJackrabbitOakAuthenticationConfigSpiName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerName 
     * @param {String} opts.hostName 
     * @param {Number} opts.hostPort 
     * @param {Boolean} opts.hostSsl 
     * @param {Boolean} opts.hostTls 
     * @param {Boolean} opts.hostNoCertCheck 
     * @param {String} opts.bindDn 
     * @param {String} opts.bindPassword 
     * @param {String} opts.searchTimeout 
     * @param {Number} opts.adminPoolMaxActive 
     * @param {Boolean} opts.adminPoolLookupOnValidate 
     * @param {Number} opts.userPoolMaxActive 
     * @param {Boolean} opts.userPoolLookupOnValidate 
     * @param {String} opts.userBaseDN 
     * @param {Array.<String>} opts.userObjectclass 
     * @param {String} opts.userIdAttribute 
     * @param {String} opts.userExtraFilter 
     * @param {Boolean} opts.userMakeDnPath 
     * @param {String} opts.groupBaseDN 
     * @param {Array.<String>} opts.groupObjectclass 
     * @param {String} opts.groupNameAttribute 
     * @param {String} opts.groupExtraFilter 
     * @param {Boolean} opts.groupMakeDnPath 
     * @param {String} opts.groupMemberAttribute 
     * @param {Boolean} opts.useUidForExtId 
     * @param {Array.<String>} opts.customattributes 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo}
     */
    orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'provider.name': opts['providerName'],
        'host.name': opts['hostName'],
        'host.port': opts['hostPort'],
        'host.ssl': opts['hostSsl'],
        'host.tls': opts['hostTls'],
        'host.noCertCheck': opts['hostNoCertCheck'],
        'bind.dn': opts['bindDn'],
        'bind.password': opts['bindPassword'],
        'searchTimeout': opts['searchTimeout'],
        'adminPool.maxActive': opts['adminPoolMaxActive'],
        'adminPool.lookupOnValidate': opts['adminPoolLookupOnValidate'],
        'userPool.maxActive': opts['userPoolMaxActive'],
        'userPool.lookupOnValidate': opts['userPoolLookupOnValidate'],
        'user.baseDN': opts['userBaseDN'],
        'user.objectclass': this.apiClient.buildCollectionParam(opts['userObjectclass'], 'multi'),
        'user.idAttribute': opts['userIdAttribute'],
        'user.extraFilter': opts['userExtraFilter'],
        'user.makeDnPath': opts['userMakeDnPath'],
        'group.baseDN': opts['groupBaseDN'],
        'group.objectclass': this.apiClient.buildCollectionParam(opts['groupObjectclass'], 'multi'),
        'group.nameAttribute': opts['groupNameAttribute'],
        'group.extraFilter': opts['groupExtraFilter'],
        'group.makeDnPath': opts['groupMakeDnPath'],
        'group.memberAttribute': opts['groupMemberAttribute'],
        'useUidForExtId': opts['useUidForExtId'],
        'customattributes': this.apiClient.buildCollectionParam(opts['customattributes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.tokenExpiration 
     * @param {String} opts.tokenLength 
     * @param {Boolean} opts.tokenRefresh 
     * @param {Number} opts.tokenCleanupThreshold 
     * @param {String} opts.passwordHashAlgorithm 
     * @param {Number} opts.passwordHashIterations 
     * @param {Number} opts.passwordSaltSize 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo}
     */
    orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'tokenExpiration': opts['tokenExpiration'],
        'tokenLength': opts['tokenLength'],
        'tokenRefresh': opts['tokenRefresh'],
        'tokenCleanupThreshold': opts['tokenCleanupThreshold'],
        'passwordHashAlgorithm': opts['passwordHashAlgorithm'],
        'passwordHashIterations': opts['passwordHashIterations'],
        'passwordSaltSize': opts['passwordSaltSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.permissionsJr2 
     * @param {String} opts.importBehavior 
     * @param {Array.<String>} opts.readPaths 
     * @param {Array.<String>} opts.administrativePrincipals 
     * @param {Number} opts.configurationRanking 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo}
     */
    orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'permissionsJr2': opts['permissionsJr2'],
        'importBehavior': opts['importBehavior'],
        'readPaths': this.apiClient.buildCollectionParam(opts['readPaths'], 'multi'),
        'administrativePrincipals': this.apiClient.buildCollectionParam(opts['administrativePrincipals'], 'multi'),
        'configurationRanking': opts['configurationRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.requiredServicePids 
     * @param {String} opts.authorizationCompositionType 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo}
     */
    orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'requiredServicePids': this.apiClient.buildCollectionParam(opts['requiredServicePids'], 'multi'),
        'authorizationCompositionType': opts['authorizationCompositionType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.length 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo}
     */
    orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'length': opts['length']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSecurityUserUserConfigurationImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityUserUserConfigurationImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.usersPath 
     * @param {String} opts.groupsPath 
     * @param {String} opts.systemRelativePath 
     * @param {Number} opts.defaultDepth 
     * @param {String} opts.importBehavior 
     * @param {String} opts.passwordHashAlgorithm 
     * @param {Number} opts.passwordHashIterations 
     * @param {Number} opts.passwordSaltSize 
     * @param {Boolean} opts.omitAdminPw 
     * @param {Boolean} opts.supportAutoSave 
     * @param {Number} opts.passwordMaxAge 
     * @param {Boolean} opts.initialPasswordChange 
     * @param {Number} opts.passwordHistorySize 
     * @param {Boolean} opts.passwordExpiryForAdmin 
     * @param {Number} opts.cacheExpiration 
     * @param {Boolean} opts.enableRFC7613UsercaseMappedProfile 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSecurityUserUserConfigurationImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo}
     */
    orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'usersPath': opts['usersPath'],
        'groupsPath': opts['groupsPath'],
        'systemRelativePath': opts['systemRelativePath'],
        'defaultDepth': opts['defaultDepth'],
        'importBehavior': opts['importBehavior'],
        'passwordHashAlgorithm': opts['passwordHashAlgorithm'],
        'passwordHashIterations': opts['passwordHashIterations'],
        'passwordSaltSize': opts['passwordSaltSize'],
        'omitAdminPw': opts['omitAdminPw'],
        'supportAutoSave': opts['supportAutoSave'],
        'passwordMaxAge': opts['passwordMaxAge'],
        'initialPasswordChange': opts['initialPasswordChange'],
        'passwordHistorySize': opts['passwordHistorySize'],
        'passwordExpiryForAdmin': opts['passwordExpiryForAdmin'],
        'cacheExpiration': opts['cacheExpiration'],
        'enableRFC7613UsercaseMappedProfile': opts['enableRFC7613UsercaseMappedProfile']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.accountName 
     * @param {String} opts.containerName 
     * @param {String} opts.accessKey 
     * @param {String} opts.rootPath 
     * @param {String} opts.connectionURL 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo}
     */
    orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'accountName': opts['accountName'],
        'containerName': opts['containerName'],
        'accessKey': opts['accessKey'],
        'rootPath': opts['rootPath'],
        'connectionURL': opts['connectionURL']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.repositoryHome 
     * @param {String} opts.tarmkMode 
     * @param {Number} opts.tarmkSize 
     * @param {Number} opts.segmentCacheSize 
     * @param {Number} opts.stringCacheSize 
     * @param {Number} opts.templateCacheSize 
     * @param {Number} opts.stringDeduplicationCacheSize 
     * @param {Number} opts.templateDeduplicationCacheSize 
     * @param {Number} opts.nodeDeduplicationCacheSize 
     * @param {Boolean} opts.pauseCompaction 
     * @param {Number} opts.compactionRetryCount 
     * @param {Number} opts.compactionForceTimeout 
     * @param {Number} opts.compactionSizeDeltaEstimation 
     * @param {Boolean} opts.compactionDisableEstimation 
     * @param {Number} opts.compactionRetainedGenerations 
     * @param {Number} opts.compactionMemoryThreshold 
     * @param {Number} opts.compactionProgressLog 
     * @param {Boolean} opts.standby 
     * @param {Boolean} opts.customBlobStore 
     * @param {Boolean} opts.customSegmentStore 
     * @param {Boolean} opts.splitPersistence 
     * @param {String} opts.repositoryBackupDir 
     * @param {Number} opts.blobGcMaxAgeInSecs 
     * @param {Number} opts.blobTrackSnapshotIntervalInSecs 
     * @param {String} opts.role 
     * @param {Boolean} opts.registerDescriptors 
     * @param {Boolean} opts.dispatchChanges 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo}
     */
    orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'repository.home': opts['repositoryHome'],
        'tarmk.mode': opts['tarmkMode'],
        'tarmk.size': opts['tarmkSize'],
        'segmentCache.size': opts['segmentCacheSize'],
        'stringCache.size': opts['stringCacheSize'],
        'templateCache.size': opts['templateCacheSize'],
        'stringDeduplicationCache.size': opts['stringDeduplicationCacheSize'],
        'templateDeduplicationCache.size': opts['templateDeduplicationCacheSize'],
        'nodeDeduplicationCache.size': opts['nodeDeduplicationCacheSize'],
        'pauseCompaction': opts['pauseCompaction'],
        'compaction.retryCount': opts['compactionRetryCount'],
        'compaction.force.timeout': opts['compactionForceTimeout'],
        'compaction.sizeDeltaEstimation': opts['compactionSizeDeltaEstimation'],
        'compaction.disableEstimation': opts['compactionDisableEstimation'],
        'compaction.retainedGenerations': opts['compactionRetainedGenerations'],
        'compaction.memoryThreshold': opts['compactionMemoryThreshold'],
        'compaction.progressLog': opts['compactionProgressLog'],
        'standby': opts['standby'],
        'customBlobStore': opts['customBlobStore'],
        'customSegmentStore': opts['customSegmentStore'],
        'splitPersistence': opts['splitPersistence'],
        'repository.backup.dir': opts['repositoryBackupDir'],
        'blobGcMaxAgeInSecs': opts['blobGcMaxAgeInSecs'],
        'blobTrackSnapshotIntervalInSecs': opts['blobTrackSnapshotIntervalInSecs'],
        'role': opts['role'],
        'registerDescriptors': opts['registerDescriptors'],
        'dispatchChanges': opts['dispatchChanges']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.commitsTrackerWriterGroups 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo}
     */
    orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'commitsTrackerWriterGroups': this.apiClient.buildCollectionParam(opts['commitsTrackerWriterGroups'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentSegmentNodeStoreService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.repositoryHome 
     * @param {String} opts.tarmkMode 
     * @param {Number} opts.tarmkSize 
     * @param {Number} opts.segmentCacheSize 
     * @param {Number} opts.stringCacheSize 
     * @param {Number} opts.templateCacheSize 
     * @param {Number} opts.stringDeduplicationCacheSize 
     * @param {Number} opts.templateDeduplicationCacheSize 
     * @param {Number} opts.nodeDeduplicationCacheSize 
     * @param {Boolean} opts.pauseCompaction 
     * @param {Number} opts.compactionRetryCount 
     * @param {Number} opts.compactionForceTimeout 
     * @param {Number} opts.compactionSizeDeltaEstimation 
     * @param {Boolean} opts.compactionDisableEstimation 
     * @param {Number} opts.compactionRetainedGenerations 
     * @param {Number} opts.compactionMemoryThreshold 
     * @param {Number} opts.compactionProgressLog 
     * @param {Boolean} opts.standby 
     * @param {Boolean} opts.customBlobStore 
     * @param {Boolean} opts.customSegmentStore 
     * @param {Boolean} opts.splitPersistence 
     * @param {String} opts.repositoryBackupDir 
     * @param {Number} opts.blobGcMaxAgeInSecs 
     * @param {Number} opts.blobTrackSnapshotIntervalInSecs 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo}
     */
    orgApacheJackrabbitOakSegmentSegmentNodeStoreService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'repository.home': opts['repositoryHome'],
        'tarmk.mode': opts['tarmkMode'],
        'tarmk.size': opts['tarmkSize'],
        'segmentCache.size': opts['segmentCacheSize'],
        'stringCache.size': opts['stringCacheSize'],
        'templateCache.size': opts['templateCacheSize'],
        'stringDeduplicationCache.size': opts['stringDeduplicationCacheSize'],
        'templateDeduplicationCache.size': opts['templateDeduplicationCacheSize'],
        'nodeDeduplicationCache.size': opts['nodeDeduplicationCacheSize'],
        'pauseCompaction': opts['pauseCompaction'],
        'compaction.retryCount': opts['compactionRetryCount'],
        'compaction.force.timeout': opts['compactionForceTimeout'],
        'compaction.sizeDeltaEstimation': opts['compactionSizeDeltaEstimation'],
        'compaction.disableEstimation': opts['compactionDisableEstimation'],
        'compaction.retainedGenerations': opts['compactionRetainedGenerations'],
        'compaction.memoryThreshold': opts['compactionMemoryThreshold'],
        'compaction.progressLog': opts['compactionProgressLog'],
        'standby': opts['standby'],
        'customBlobStore': opts['customBlobStore'],
        'customSegmentStore': opts['customSegmentStore'],
        'splitPersistence': opts['splitPersistence'],
        'repository.backup.dir': opts['repositoryBackupDir'],
        'blobGcMaxAgeInSecs': opts['blobGcMaxAgeInSecs'],
        'blobTrackSnapshotIntervalInSecs': opts['blobTrackSnapshotIntervalInSecs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.orgApacheSlingInstallerConfigurationPersist 
     * @param {String} opts.mode 
     * @param {Number} opts.port 
     * @param {String} opts.primaryHost 
     * @param {Number} opts.interval 
     * @param {Array.<String>} opts.primaryAllowedClientIpRanges 
     * @param {Boolean} opts.secure 
     * @param {Number} opts.standbyReadtimeout 
     * @param {Boolean} opts.standbyAutoclean 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo}
     */
    orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.sling.installer.configuration.persist': opts['orgApacheSlingInstallerConfigurationPersist'],
        'mode': opts['mode'],
        'port': opts['port'],
        'primary.host': opts['primaryHost'],
        'interval': opts['interval'],
        'primary.allowed-client-ip-ranges': this.apiClient.buildCollectionParam(opts['primaryAllowedClientIpRanges'], 'multi'),
        'secure': opts['secure'],
        'standby.readtimeout': opts['standbyReadtimeout'],
        'standby.autoclean': opts['standbyAutoclean']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.handlerName 
     * @param {String} opts.userExpirationTime 
     * @param {Array.<String>} opts.userAutoMembership 
     * @param {Array.<String>} opts.userPropertyMapping 
     * @param {String} opts.userPathPrefix 
     * @param {String} opts.userMembershipExpTime 
     * @param {Number} opts.userMembershipNestingDepth 
     * @param {Boolean} opts.userDynamicMembership 
     * @param {Boolean} opts.userDisableMissing 
     * @param {String} opts.groupExpirationTime 
     * @param {Array.<String>} opts.groupAutoMembership 
     * @param {Array.<String>} opts.groupPropertyMapping 
     * @param {String} opts.groupPathPrefix 
     * @param {Boolean} opts.enableRFC7613UsercaseMappedProfile 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo}
     */
    orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'handler.name': opts['handlerName'],
        'user.expirationTime': opts['userExpirationTime'],
        'user.autoMembership': this.apiClient.buildCollectionParam(opts['userAutoMembership'], 'multi'),
        'user.propertyMapping': this.apiClient.buildCollectionParam(opts['userPropertyMapping'], 'multi'),
        'user.pathPrefix': opts['userPathPrefix'],
        'user.membershipExpTime': opts['userMembershipExpTime'],
        'user.membershipNestingDepth': opts['userMembershipNestingDepth'],
        'user.dynamicMembership': opts['userDynamicMembership'],
        'user.disableMissing': opts['userDisableMissing'],
        'group.expirationTime': opts['groupExpirationTime'],
        'group.autoMembership': this.apiClient.buildCollectionParam(opts['groupAutoMembership'], 'multi'),
        'group.propertyMapping': this.apiClient.buildCollectionParam(opts['groupPropertyMapping'], 'multi'),
        'group.pathPrefix': opts['groupPathPrefix'],
        'enableRFC7613UsercaseMappedProfile': opts['enableRFC7613UsercaseMappedProfile']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.jaasRanking 
     * @param {String} opts.jaasControlFlag 
     * @param {String} opts.jaasRealmName 
     * @param {String} opts.idpName 
     * @param {String} opts.syncHandlerName 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo}
     */
    orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'jaas.ranking': opts['jaasRanking'],
        'jaas.controlFlag': opts['jaasControlFlag'],
        'jaas.realmName': opts['jaasRealmName'],
        'idp.name': opts['idpName'],
        'sync.handlerName': opts['syncHandlerName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.protectExternalId 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo}
     */
    orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'protectExternalId': opts['protectExternalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.cugSupportedPaths 
     * @param {Boolean} opts.cugEnabled 
     * @param {Number} opts.configurationRanking 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo}
     */
    orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'cugSupportedPaths': this.apiClient.buildCollectionParam(opts['cugSupportedPaths'], 'multi'),
        'cugEnabled': opts['cugEnabled'],
        'configurationRanking': opts['configurationRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.principalNames 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo}
     */
    orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'principalNames': this.apiClient.buildCollectionParam(opts['principalNames'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.enabledActions 
     * @param {Array.<String>} opts.userPrivilegeNames 
     * @param {Array.<String>} opts.groupPrivilegeNames 
     * @param {String} opts.constraint 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo}
     */
    orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabledActions': opts['enabledActions'],
        'userPrivilegeNames': this.apiClient.buildCollectionParam(opts['userPrivilegeNames'], 'multi'),
        'groupPrivilegeNames': this.apiClient.buildCollectionParam(opts['groupPrivilegeNames'], 'multi'),
        'constraint': opts['constraint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitVaultPackagingImplPackagingImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitVaultPackagingImplPackagingImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.packageRoots 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitVaultPackagingImplPackagingImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo}
     */
    orgApacheJackrabbitVaultPackagingImplPackagingImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'packageRoots': this.apiClient.buildCollectionParam(opts['packageRoots'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry operation.
     * @callback module:api/ConfigmgrApi~orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.homePath 
     * @param {module:api/ConfigmgrApi~orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo}
     */
    orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'homePath': opts['homePath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingAuthCoreImplLogoutServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingAuthCoreImplLogoutServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingAuthCoreImplLogoutServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletMethods 
     * @param {String} opts.slingServletPaths 
     * @param {module:api/ConfigmgrApi~orgApacheSlingAuthCoreImplLogoutServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingAuthCoreImplLogoutServletInfo}
     */
    orgApacheSlingAuthCoreImplLogoutServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.methods': this.apiClient.buildCollectionParam(opts['slingServletMethods'], 'multi'),
        'sling.servlet.paths': opts['slingServletPaths']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingAuthCoreImplLogoutServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplConfigurationBindingsValueProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplConfigurationBindingsValueProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplConfigurationBindingsValueProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo}
     */
    orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplConfigurationResolverImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplConfigurationResolverImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplConfigurationResolverImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.configBucketNames 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplConfigurationResolverImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplConfigurationResolverImplInfo}
     */
    orgApacheSlingCaconfigImplConfigurationResolverImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'configBucketNames': this.apiClient.buildCollectionParam(opts['configBucketNames'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.configPropertyInheritancePropertyNames 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo}
     */
    orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled'],
        'configPropertyInheritancePropertyNames': this.apiClient.buildCollectionParam(opts['configPropertyInheritancePropertyNames'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo}
     */
    orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.description 
     * @param {Array.<String>} opts.overrides 
     * @param {Boolean} opts.enabled 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo}
     */
    orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'description': opts['description'],
        'overrides': this.apiClient.buildCollectionParam(opts['overrides'], 'multi'),
        'enabled': opts['enabled'],
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo}
     */
    orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled'],
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigManagementImplConfigurationManagementSetti operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigManagementImplConfigurationManagementSettiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.ignorePropertyNameRegex 
     * @param {Array.<String>} opts.configCollectionPropertiesResourceNames 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigManagementImplConfigurationManagementSettiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo}
     */
    orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'ignorePropertyNameRegex': this.apiClient.buildCollectionParam(opts['ignorePropertyNameRegex'], 'multi'),
        'configCollectionPropertiesResourceNames': this.apiClient.buildCollectionParam(opts['configCollectionPropertiesResourceNames'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.configPath 
     * @param {Array.<String>} opts.fallbackPaths 
     * @param {Array.<String>} opts.configCollectionInheritancePropertyNames 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo}
     */
    orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled'],
        'configPath': opts['configPath'],
        'fallbackPaths': this.apiClient.buildCollectionParam(opts['fallbackPaths'], 'multi'),
        'configCollectionInheritancePropertyNames': this.apiClient.buildCollectionParam(opts['configCollectionInheritancePropertyNames'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.enabled 
     * @param {Array.<String>} opts.configRefResourceNames 
     * @param {Array.<String>} opts.configRefPropertyNames 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo}
     */
    orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'enabled': opts['enabled'],
        'configRefResourceNames': this.apiClient.buildCollectionParam(opts['configRefResourceNames'], 'multi'),
        'configRefPropertyNames': this.apiClient.buildCollectionParam(opts['configRefPropertyNames'], 'multi'),
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.parserFeatures 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo}
     */
    orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'parser.features': this.apiClient.buildCollectionParam(opts['parserFeatures'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsLogLogManager operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsLogLogManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheSlingCommonsLogLevel 
     * @param {String} opts.orgApacheSlingCommonsLogFile 
     * @param {Number} opts.orgApacheSlingCommonsLogFileNumber 
     * @param {String} opts.orgApacheSlingCommonsLogFileSize 
     * @param {String} opts.orgApacheSlingCommonsLogPattern 
     * @param {String} opts.orgApacheSlingCommonsLogConfigurationFile 
     * @param {Boolean} opts.orgApacheSlingCommonsLogPackagingDataEnabled 
     * @param {Number} opts.orgApacheSlingCommonsLogMaxCallerDataDepth 
     * @param {Number} opts.orgApacheSlingCommonsLogMaxOldFileCountInDump 
     * @param {Number} opts.orgApacheSlingCommonsLogNumOfLines 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsLogLogManagerInfo}
     */
    orgApacheSlingCommonsLogLogManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.sling.commons.log.level': opts['orgApacheSlingCommonsLogLevel'],
        'org.apache.sling.commons.log.file': opts['orgApacheSlingCommonsLogFile'],
        'org.apache.sling.commons.log.file.number': opts['orgApacheSlingCommonsLogFileNumber'],
        'org.apache.sling.commons.log.file.size': opts['orgApacheSlingCommonsLogFileSize'],
        'org.apache.sling.commons.log.pattern': opts['orgApacheSlingCommonsLogPattern'],
        'org.apache.sling.commons.log.configurationFile': opts['orgApacheSlingCommonsLogConfigurationFile'],
        'org.apache.sling.commons.log.packagingDataEnabled': opts['orgApacheSlingCommonsLogPackagingDataEnabled'],
        'org.apache.sling.commons.log.maxCallerDataDepth': opts['orgApacheSlingCommonsLogMaxCallerDataDepth'],
        'org.apache.sling.commons.log.maxOldFileCountInDump': opts['orgApacheSlingCommonsLogMaxOldFileCountInDump'],
        'org.apache.sling.commons.log.numOfLines': opts['orgApacheSlingCommonsLogNumOfLines']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsLogLogManagerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.log.LogManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsLogLogManagerFactoryConfig operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerFactoryConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheSlingCommonsLogLevel 
     * @param {String} opts.orgApacheSlingCommonsLogFile 
     * @param {String} opts.orgApacheSlingCommonsLogPattern 
     * @param {Array.<String>} opts.orgApacheSlingCommonsLogNames 
     * @param {Boolean} opts.orgApacheSlingCommonsLogAdditiv 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerFactoryConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo}
     */
    orgApacheSlingCommonsLogLogManagerFactoryConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.sling.commons.log.level': opts['orgApacheSlingCommonsLogLevel'],
        'org.apache.sling.commons.log.file': opts['orgApacheSlingCommonsLogFile'],
        'org.apache.sling.commons.log.pattern': opts['orgApacheSlingCommonsLogPattern'],
        'org.apache.sling.commons.log.names': this.apiClient.buildCollectionParam(opts['orgApacheSlingCommonsLogNames'], 'multi'),
        'org.apache.sling.commons.log.additiv': opts['orgApacheSlingCommonsLogAdditiv']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsLogLogManagerFactoryWriter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerFactoryWriterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheSlingCommonsLogFile 
     * @param {Number} opts.orgApacheSlingCommonsLogFileNumber 
     * @param {String} opts.orgApacheSlingCommonsLogFileSize 
     * @param {Boolean} opts.orgApacheSlingCommonsLogFileBuffered 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsLogLogManagerFactoryWriterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo}
     */
    orgApacheSlingCommonsLogLogManagerFactoryWriter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.sling.commons.log.file': opts['orgApacheSlingCommonsLogFile'],
        'org.apache.sling.commons.log.file.number': opts['orgApacheSlingCommonsLogFileNumber'],
        'org.apache.sling.commons.log.file.size': opts['orgApacheSlingCommonsLogFileSize'],
        'org.apache.sling.commons.log.file.buffered': opts['orgApacheSlingCommonsLogFileBuffered']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsMetricsInternalLogReporter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsMetricsInternalLogReporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsMetricsInternalLogReporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.period 
     * @param {String} opts.timeUnit 
     * @param {String} opts.level 
     * @param {String} opts.loggerName 
     * @param {String} opts.prefix 
     * @param {String} opts.pattern 
     * @param {String} opts.registryName 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsMetricsInternalLogReporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsMetricsInternalLogReporterInfo}
     */
    orgApacheSlingCommonsMetricsInternalLogReporter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'period': opts['period'],
        'timeUnit': opts['timeUnit'],
        'level': opts['level'],
        'loggerName': opts['loggerName'],
        'prefix': opts['prefix'],
        'pattern': opts['pattern'],
        'registryName': opts['registryName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsMetricsInternalLogReporterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.datasources 
     * @param {Number} opts.step 
     * @param {Array.<String>} opts.archives 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo}
     */
    orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'datasources': this.apiClient.buildCollectionParam(opts['datasources'], 'multi'),
        'step': opts['step'],
        'archives': this.apiClient.buildCollectionParam(opts['archives'], 'multi'),
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsMimeInternalMimeTypeServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.mimeTypes 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsMimeInternalMimeTypeServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo}
     */
    orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'mime.types': this.apiClient.buildCollectionParam(opts['mimeTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsSchedulerImplQuartzScheduler operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsSchedulerImplQuartzSchedulerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.poolName 
     * @param {Array.<String>} opts.allowedPoolNames 
     * @param {Boolean} opts.schedulerUseleaderforsingle 
     * @param {Array.<String>} opts.metricsFilters 
     * @param {Number} opts.slowThresholdMillis 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsSchedulerImplQuartzSchedulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo}
     */
    orgApacheSlingCommonsSchedulerImplQuartzScheduler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'poolName': opts['poolName'],
        'allowedPoolNames': this.apiClient.buildCollectionParam(opts['allowedPoolNames'], 'multi'),
        'scheduler.useleaderforsingle': opts['schedulerUseleaderforsingle'],
        'metrics.filters': this.apiClient.buildCollectionParam(opts['metricsFilters'], 'multi'),
        'slowThresholdMillis': opts['slowThresholdMillis']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxQuartzJobDurationAcceptable 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo}
     */
    orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'max.quartzJob.duration.acceptable': opts['maxQuartzJobDurationAcceptable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {Number} opts.minPoolSize 
     * @param {Number} opts.maxPoolSize 
     * @param {Number} opts.queueSize 
     * @param {Number} opts.maxThreadAge 
     * @param {Number} opts.keepAliveTime 
     * @param {String} opts.blockPolicy 
     * @param {Boolean} opts.shutdownGraceful 
     * @param {Boolean} opts.daemon 
     * @param {Number} opts.shutdownWaitTime 
     * @param {String} opts.priority 
     * @param {module:api/ConfigmgrApi~orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo}
     */
    orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'minPoolSize': opts['minPoolSize'],
        'maxPoolSize': opts['maxPoolSize'],
        'queueSize': opts['queueSize'],
        'maxThreadAge': opts['maxThreadAge'],
        'keepAliveTime': opts['keepAliveTime'],
        'blockPolicy': opts['blockPolicy'],
        'shutdownGraceful': opts['shutdownGraceful'],
        'daemon': opts['daemon'],
        'shutdownWaitTime': opts['shutdownWaitTime'],
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDatasourceDataSourceFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDatasourceDataSourceFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDatasourceDataSourceFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.datasourceName 
     * @param {String} opts.datasourceSvcPropName 
     * @param {String} opts.driverClassName 
     * @param {String} opts.url 
     * @param {String} opts.username 
     * @param {String} opts.password 
     * @param {String} opts.defaultAutoCommit 
     * @param {String} opts.defaultReadOnly 
     * @param {String} opts.defaultTransactionIsolation 
     * @param {String} opts.defaultCatalog 
     * @param {Number} opts.maxActive 
     * @param {Number} opts.maxIdle 
     * @param {Number} opts.minIdle 
     * @param {Number} opts.initialSize 
     * @param {Number} opts.maxWait 
     * @param {Number} opts.maxAge 
     * @param {Boolean} opts.testOnBorrow 
     * @param {Boolean} opts.testOnReturn 
     * @param {Boolean} opts.testWhileIdle 
     * @param {String} opts.validationQuery 
     * @param {Number} opts.validationQueryTimeout 
     * @param {Number} opts.timeBetweenEvictionRunsMillis 
     * @param {Number} opts.minEvictableIdleTimeMillis 
     * @param {String} opts.connectionProperties 
     * @param {String} opts.initSQL 
     * @param {String} opts.jdbcInterceptors 
     * @param {Number} opts.validationInterval 
     * @param {Boolean} opts.logValidationErrors 
     * @param {Array.<String>} opts.datasourceSvcProperties 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDatasourceDataSourceFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDatasourceDataSourceFactoryInfo}
     */
    orgApacheSlingDatasourceDataSourceFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'datasource.name': opts['datasourceName'],
        'datasource.svc.prop.name': opts['datasourceSvcPropName'],
        'driverClassName': opts['driverClassName'],
        'url': opts['url'],
        'username': opts['username'],
        'password': opts['password'],
        'defaultAutoCommit': opts['defaultAutoCommit'],
        'defaultReadOnly': opts['defaultReadOnly'],
        'defaultTransactionIsolation': opts['defaultTransactionIsolation'],
        'defaultCatalog': opts['defaultCatalog'],
        'maxActive': opts['maxActive'],
        'maxIdle': opts['maxIdle'],
        'minIdle': opts['minIdle'],
        'initialSize': opts['initialSize'],
        'maxWait': opts['maxWait'],
        'maxAge': opts['maxAge'],
        'testOnBorrow': opts['testOnBorrow'],
        'testOnReturn': opts['testOnReturn'],
        'testWhileIdle': opts['testWhileIdle'],
        'validationQuery': opts['validationQuery'],
        'validationQueryTimeout': opts['validationQueryTimeout'],
        'timeBetweenEvictionRunsMillis': opts['timeBetweenEvictionRunsMillis'],
        'minEvictableIdleTimeMillis': opts['minEvictableIdleTimeMillis'],
        'connectionProperties': opts['connectionProperties'],
        'initSQL': opts['initSQL'],
        'jdbcInterceptors': opts['jdbcInterceptors'],
        'validationInterval': opts['validationInterval'],
        'logValidationErrors': opts['logValidationErrors'],
        'datasource.svc.properties': this.apiClient.buildCollectionParam(opts['datasourceSvcProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDatasourceDataSourceFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDatasourceJNDIDataSourceFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDatasourceJNDIDataSourceFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.datasourceName 
     * @param {String} opts.datasourceSvcPropName 
     * @param {String} opts.datasourceJndiName 
     * @param {Array.<String>} opts.jndiProperties 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDatasourceJNDIDataSourceFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo}
     */
    orgApacheSlingDatasourceJNDIDataSourceFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'datasource.name': opts['datasourceName'],
        'datasource.svc.prop.name': opts['datasourceSvcPropName'],
        'datasource.jndi.name': opts['datasourceJndiName'],
        'jndi.properties': this.apiClient.buildCollectionParam(opts['jndiProperties'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDiscoveryOakConfig operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDiscoveryOakConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDiscoveryOakConfigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.connectorPingTimeout 
     * @param {Number} opts.connectorPingInterval 
     * @param {Number} opts.discoveryLiteCheckInterval 
     * @param {Number} opts.clusterSyncServiceTimeout 
     * @param {Number} opts.clusterSyncServiceInterval 
     * @param {Boolean} opts.enableSyncToken 
     * @param {Number} opts.minEventDelay 
     * @param {Number} opts.socketConnectTimeout 
     * @param {Number} opts.soTimeout 
     * @param {Array.<String>} opts.topologyConnectorUrls 
     * @param {Array.<String>} opts.topologyConnectorWhitelist 
     * @param {Boolean} opts.autoStopLocalLoopEnabled 
     * @param {Boolean} opts.gzipConnectorRequestsEnabled 
     * @param {Boolean} opts.hmacEnabled 
     * @param {Boolean} opts.enableEncryption 
     * @param {String} opts.sharedKey 
     * @param {Number} opts.hmacSharedKeyTTL 
     * @param {String} opts.backoffStandbyFactor 
     * @param {String} opts.backoffStableFactor 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDiscoveryOakConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDiscoveryOakConfigInfo}
     */
    orgApacheSlingDiscoveryOakConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'connectorPingTimeout': opts['connectorPingTimeout'],
        'connectorPingInterval': opts['connectorPingInterval'],
        'discoveryLiteCheckInterval': opts['discoveryLiteCheckInterval'],
        'clusterSyncServiceTimeout': opts['clusterSyncServiceTimeout'],
        'clusterSyncServiceInterval': opts['clusterSyncServiceInterval'],
        'enableSyncToken': opts['enableSyncToken'],
        'minEventDelay': opts['minEventDelay'],
        'socketConnectTimeout': opts['socketConnectTimeout'],
        'soTimeout': opts['soTimeout'],
        'topologyConnectorUrls': this.apiClient.buildCollectionParam(opts['topologyConnectorUrls'], 'multi'),
        'topologyConnectorWhitelist': this.apiClient.buildCollectionParam(opts['topologyConnectorWhitelist'], 'multi'),
        'autoStopLocalLoopEnabled': opts['autoStopLocalLoopEnabled'],
        'gzipConnectorRequestsEnabled': opts['gzipConnectorRequestsEnabled'],
        'hmacEnabled': opts['hmacEnabled'],
        'enableEncryption': opts['enableEncryption'],
        'sharedKey': opts['sharedKey'],
        'hmacSharedKeyTTL': opts['hmacSharedKeyTTL'],
        'backoffStandbyFactor': opts['backoffStandbyFactor'],
        'backoffStableFactor': opts['backoffStableFactor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDiscoveryOakConfigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.discovery.oak.Config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo}
     */
    orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.name': opts['hcName'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'hc.mbean.name': opts['hcMbeanName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Array.<String>} opts.allowedRoots 
     * @param {Boolean} opts.queueProcessingEnabled 
     * @param {Array.<String>} opts.packageImporterEndpoints 
     * @param {Array.<String>} opts.passiveQueues 
     * @param {Array.<String>} opts.priorityQueues 
     * @param {String} opts.retryStrategy 
     * @param {Number} opts.retryAttempts 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.triggersTarget 
     * @param {String} opts.queueProvider 
     * @param {Boolean} opts.asyncDelivery 
     * @param {Number} opts.httpConnTimeout 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo}
     */
    orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'allowed.roots': this.apiClient.buildCollectionParam(opts['allowedRoots'], 'multi'),
        'queue.processing.enabled': opts['queueProcessingEnabled'],
        'packageImporter.endpoints': this.apiClient.buildCollectionParam(opts['packageImporterEndpoints'], 'multi'),
        'passiveQueues': this.apiClient.buildCollectionParam(opts['passiveQueues'], 'multi'),
        'priorityQueues': this.apiClient.buildCollectionParam(opts['priorityQueues'], 'multi'),
        'retry.strategy': opts['retryStrategy'],
        'retry.attempts': opts['retryAttempts'],
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'triggers.target': opts['triggersTarget'],
        'queue.provider': opts['queueProvider'],
        'async.delivery': opts['asyncDelivery'],
        'http.conn.timeout': opts['httpConnTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestACallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.jcrPrivilege 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo}
     */
    orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'jcrPrivilege': opts['jcrPrivilege']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Array.<String>} opts.allowedRoots 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.queueProviderFactoryTarget 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.triggersTarget 
     * @param {Array.<String>} opts.priorityQueues 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo}
     */
    orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'allowed.roots': this.apiClient.buildCollectionParam(opts['allowedRoots'], 'multi'),
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'queueProviderFactory.target': opts['queueProviderFactoryTarget'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'triggers.target': opts['triggersTarget'],
        'priorityQueues': this.apiClient.buildCollectionParam(opts['priorityQueues'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Boolean} opts.queueProcessingEnabled 
     * @param {Array.<String>} opts.packageExporterEndpoints 
     * @param {Number} opts.pullItems 
     * @param {Number} opts.httpConnTimeout 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.triggersTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo}
     */
    orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'queue.processing.enabled': opts['queueProcessingEnabled'],
        'packageExporter.endpoints': this.apiClient.buildCollectionParam(opts['packageExporterEndpoints'], 'multi'),
        'pull.items': opts['pullItems'],
        'http.conn.timeout': opts['httpConnTimeout'],
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'triggers.target': opts['triggersTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Boolean} opts.queueProcessingEnabled 
     * @param {String} opts.packageExporterTarget 
     * @param {String} opts.packageImporterTarget 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.triggersTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo}
     */
    orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'queue.processing.enabled': opts['queueProcessingEnabled'],
        'packageExporter.target': opts['packageExporterTarget'],
        'packageImporter.target': opts['packageImporterTarget'],
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'triggers.target': opts['triggersTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.title 
     * @param {String} opts.details 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.serviceName 
     * @param {String} opts.logLevel 
     * @param {Boolean} opts.queueProcessingEnabled 
     * @param {Array.<String>} opts.passiveQueues 
     * @param {Array.<String>} opts.packageExporterEndpoints 
     * @param {Array.<String>} opts.packageImporterEndpoints 
     * @param {String} opts.retryStrategy 
     * @param {Number} opts.retryAttempts 
     * @param {Number} opts.pullItems 
     * @param {Number} opts.httpConnTimeout 
     * @param {String} opts.requestAuthorizationStrategyTarget 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.triggersTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo}
     */
    orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'title': opts['title'],
        'details': opts['details'],
        'enabled': opts['enabled'],
        'serviceName': opts['serviceName'],
        'log.level': opts['logLevel'],
        'queue.processing.enabled': opts['queueProcessingEnabled'],
        'passiveQueues': this.apiClient.buildCollectionParam(opts['passiveQueues'], 'multi'),
        'packageExporter.endpoints': this.apiClient.buildCollectionParam(opts['packageExporterEndpoints'], 'multi'),
        'packageImporter.endpoints': this.apiClient.buildCollectionParam(opts['packageImporterEndpoints'], 'multi'),
        'retry.strategy': opts['retryStrategy'],
        'retry.attempts': opts['retryAttempts'],
        'pull.items': opts['pullItems'],
        'http.conn.timeout': opts['httpConnTimeout'],
        'requestAuthorizationStrategy.target': opts['requestAuthorizationStrategyTarget'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'triggers.target': opts['triggersTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionMonitorDistributionQueueHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionMonitorDistributionQueueHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {Number} opts.numberOfRetriesAllowed 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionMonitorDistributionQueueHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo}
     */
    orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.name': opts['hcName'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'hc.mbean.name': opts['hcMbeanName'],
        'numberOfRetriesAllowed': opts['numberOfRetriesAllowed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplExporterAgentDistributio operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterAgentDistributioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.queue 
     * @param {Boolean} opts.dropInvalidItems 
     * @param {String} opts.agentTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterAgentDistributioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo}
     */
    orgApacheSlingDistributionPackagingImplExporterAgentDistributio(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'queue': opts['queue'],
        'drop.invalid.items': opts['dropInvalidItems'],
        'agent.target': opts['agentTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplExporterLocalDistributio operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterLocalDistributioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.packageBuilderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterLocalDistributioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo}
     */
    orgApacheSlingDistributionPackagingImplExporterLocalDistributio(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'packageBuilder.target': opts['packageBuilderTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplExporterRemoteDistributi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterRemoteDistributiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {Array.<String>} opts.endpoints 
     * @param {Number} opts.pullItems 
     * @param {String} opts.packageBuilderTarget 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplExporterRemoteDistributiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo}
     */
    orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'endpoints': this.apiClient.buildCollectionParam(opts['endpoints'], 'multi'),
        'pull.items': opts['pullItems'],
        'packageBuilder.target': opts['packageBuilderTarget'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplImporterLocalDistributio operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterLocalDistributioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.packageBuilderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterLocalDistributioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo}
     */
    orgApacheSlingDistributionPackagingImplImporterLocalDistributio(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'packageBuilder.target': opts['packageBuilderTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplImporterRemoteDistributi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterRemoteDistributiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {Array.<String>} opts.endpoints 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterRemoteDistributiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo}
     */
    orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'endpoints': this.apiClient.buildCollectionParam(opts['endpoints'], 'multi'),
        'transportSecretProvider.target': opts['transportSecretProviderTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionPackagingImplImporterRepositoryDistri operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterRepositoryDistriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.serviceName 
     * @param {String} opts.path 
     * @param {String} opts.privilegeName 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionPackagingImplImporterRepositoryDistriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo}
     */
    orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'service.name': opts['serviceName'],
        'path': opts['path'],
        'privilege.name': opts['privilegeName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionResourcesImplDistributionConfiguration operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionResourcesImplDistributionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoots 
     * @param {String} opts.kind 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionResourcesImplDistributionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo}
     */
    orgApacheSlingDistributionResourcesImplDistributionConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'provider.roots': opts['providerRoots'],
        'kind': opts['kind']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionResourcesImplDistributionServiceResour operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionResourcesImplDistributionServiceResourCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoots 
     * @param {String} opts.kind 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionResourcesImplDistributionServiceResourCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo}
     */
    orgApacheSlingDistributionResourcesImplDistributionServiceResour(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'provider.roots': opts['providerRoots'],
        'kind': opts['kind']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionSerializationImplDistributionPackageBu operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionSerializationImplDistributionPackageBuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.type 
     * @param {String} opts.formatTarget 
     * @param {String} opts.tempFsFolder 
     * @param {Number} opts.fileThreshold 
     * @param {String} opts.memoryUnit 
     * @param {Boolean} opts.useOffHeapMemory 
     * @param {String} opts.digestAlgorithm 
     * @param {Number} opts.monitoringQueueSize 
     * @param {Number} opts.cleanupDelay 
     * @param {Array.<String>} opts.packageFilters 
     * @param {Array.<String>} opts.propertyFilters 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionSerializationImplDistributionPackageBuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo}
     */
    orgApacheSlingDistributionSerializationImplDistributionPackageBu(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'type': opts['type'],
        'format.target': opts['formatTarget'],
        'tempFsFolder': opts['tempFsFolder'],
        'fileThreshold': opts['fileThreshold'],
        'memoryUnit': opts['memoryUnit'],
        'useOffHeapMemory': opts['useOffHeapMemory'],
        'digestAlgorithm': opts['digestAlgorithm'],
        'monitoringQueueSize': opts['monitoringQueueSize'],
        'cleanupDelay': opts['cleanupDelay'],
        'package.filters': this.apiClient.buildCollectionParam(opts['packageFilters'], 'multi'),
        'property.filters': this.apiClient.buildCollectionParam(opts['propertyFilters'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionSerializationImplVltVaultDistribution operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionSerializationImplVltVaultDistributionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.type 
     * @param {String} opts.importMode 
     * @param {String} opts.aclHandling 
     * @param {String} opts.packageRoots 
     * @param {Array.<String>} opts.packageFilters 
     * @param {Array.<String>} opts.propertyFilters 
     * @param {String} opts.tempFsFolder 
     * @param {Boolean} opts.useBinaryReferences 
     * @param {Number} opts.autoSaveThreshold 
     * @param {Number} opts.cleanupDelay 
     * @param {Number} opts.fileThreshold 
     * @param {String} opts.MEGA_BYTES 
     * @param {Boolean} opts.useOffHeapMemory 
     * @param {String} opts.digestAlgorithm 
     * @param {Number} opts.monitoringQueueSize 
     * @param {Array.<String>} opts.pathsMapping 
     * @param {Boolean} opts.strictImport 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionSerializationImplVltVaultDistributionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo}
     */
    orgApacheSlingDistributionSerializationImplVltVaultDistribution(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'type': opts['type'],
        'importMode': opts['importMode'],
        'aclHandling': opts['aclHandling'],
        'package.roots': opts['packageRoots'],
        'package.filters': this.apiClient.buildCollectionParam(opts['packageFilters'], 'multi'),
        'property.filters': this.apiClient.buildCollectionParam(opts['propertyFilters'], 'multi'),
        'tempFsFolder': opts['tempFsFolder'],
        'useBinaryReferences': opts['useBinaryReferences'],
        'autoSaveThreshold': opts['autoSaveThreshold'],
        'cleanupDelay': opts['cleanupDelay'],
        'fileThreshold': opts['fileThreshold'],
        'MEGA_BYTES': opts['MEGA_BYTES'],
        'useOffHeapMemory': opts['useOffHeapMemory'],
        'digestAlgorithm': opts['digestAlgorithm'],
        'monitoringQueueSize': opts['monitoringQueueSize'],
        'pathsMapping': this.apiClient.buildCollectionParam(opts['pathsMapping'], 'multi'),
        'strictImport': opts['strictImport']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTransportImplUserCredentialsDistributi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTransportImplUserCredentialsDistributiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.username 
     * @param {String} opts.password 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTransportImplUserCredentialsDistributiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo}
     */
    orgApacheSlingDistributionTransportImplUserCredentialsDistributi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'username': opts['username'],
        'password': opts['password']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplDistributionEventDistribute operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplDistributionEventDistributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplDistributionEventDistributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo}
     */
    orgApacheSlingDistributionTriggerImplDistributionEventDistribute(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {Array.<String>} opts.ignoredPathsPatterns 
     * @param {String} opts.serviceName 
     * @param {Boolean} opts.deep 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo}
     */
    orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'path': opts['path'],
        'ignoredPathsPatterns': this.apiClient.buildCollectionParam(opts['ignoredPathsPatterns'], 'multi'),
        'serviceName': opts['serviceName'],
        'deep': opts['deep']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {String} opts.serviceName 
     * @param {String} opts.nuggetsPath 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo}
     */
    orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'path': opts['path'],
        'serviceName': opts['serviceName'],
        'nuggetsPath': opts['nuggetsPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.endpoint 
     * @param {String} opts.transportSecretProviderTarget 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo}
     */
    orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'endpoint': opts['endpoint'],
        'transportSecretProvider.target': opts['transportSecretProviderTarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplResourceEventDistributionTr operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplResourceEventDistributionTrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplResourceEventDistributionTrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo}
     */
    orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.path 
     * @param {String} opts.seconds 
     * @param {String} opts.serviceName 
     * @param {module:api/ConfigmgrApi~orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo}
     */
    orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'path': opts['path'],
        'seconds': opts['seconds'],
        'serviceName': opts['serviceName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplAuthSlingAuthenticator operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplAuthSlingAuthenticatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {String} opts.osgiHttpWhiteboardListener 
     * @param {String} opts.authSudoCookie 
     * @param {String} opts.authSudoParameter 
     * @param {Boolean} opts.authAnnonymous 
     * @param {Array.<String>} opts.slingAuthRequirements 
     * @param {String} opts.slingAuthAnonymousUser 
     * @param {String} opts.slingAuthAnonymousPassword 
     * @param {String} opts.authHttp 
     * @param {String} opts.authHttpRealm 
     * @param {Array.<String>} opts.authUriSuffix 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplAuthSlingAuthenticatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo}
     */
    orgApacheSlingEngineImplAuthSlingAuthenticator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect'],
        'osgi.http.whiteboard.listener': opts['osgiHttpWhiteboardListener'],
        'auth.sudo.cookie': opts['authSudoCookie'],
        'auth.sudo.parameter': opts['authSudoParameter'],
        'auth.annonymous': opts['authAnnonymous'],
        'sling.auth.requirements': this.apiClient.buildCollectionParam(opts['slingAuthRequirements'], 'multi'),
        'sling.auth.anonymous.user': opts['slingAuthAnonymousUser'],
        'sling.auth.anonymous.password': opts['slingAuthAnonymousPassword'],
        'auth.http': opts['authHttp'],
        'auth.http.realm': opts['authHttpRealm'],
        'auth.uri.suffix': this.apiClient.buildCollectionParam(opts['authUriSuffix'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.extensions 
     * @param {Number} opts.minDurationMs 
     * @param {Number} opts.maxDurationMs 
     * @param {Boolean} opts.compactLogFormat 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo}
     */
    orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'extensions': this.apiClient.buildCollectionParam(opts['extensions'], 'multi'),
        'minDurationMs': opts['minDurationMs'],
        'maxDurationMs': opts['maxDurationMs'],
        'compactLogFormat': opts['compactLogFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplLogRequestLogger operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplLogRequestLoggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplLogRequestLoggerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.requestLogOutput 
     * @param {Number} opts.requestLogOutputtype 
     * @param {Boolean} opts.requestLogEnabled 
     * @param {String} opts.accessLogOutput 
     * @param {Number} opts.accessLogOutputtype 
     * @param {Boolean} opts.accessLogEnabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplLogRequestLoggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplLogRequestLoggerInfo}
     */
    orgApacheSlingEngineImplLogRequestLogger(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'request.log.output': opts['requestLogOutput'],
        'request.log.outputtype': opts['requestLogOutputtype'],
        'request.log.enabled': opts['requestLogEnabled'],
        'access.log.output': opts['accessLogOutput'],
        'access.log.outputtype': opts['accessLogOutputtype'],
        'access.log.enabled': opts['accessLogEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEngineImplLogRequestLoggerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplLogRequestLoggerService operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplLogRequestLoggerServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplLogRequestLoggerServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.requestLogServiceFormat 
     * @param {String} opts.requestLogServiceOutput 
     * @param {Number} opts.requestLogServiceOutputtype 
     * @param {Boolean} opts.requestLogServiceOnentry 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplLogRequestLoggerServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplLogRequestLoggerServiceInfo}
     */
    orgApacheSlingEngineImplLogRequestLoggerService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'request.log.service.format': opts['requestLogServiceFormat'],
        'request.log.service.output': opts['requestLogServiceOutput'],
        'request.log.service.outputtype': opts['requestLogServiceOutputtype'],
        'request.log.service.onentry': opts['requestLogServiceOnentry']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineImplSlingMainServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineImplSlingMainServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineImplSlingMainServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.slingMaxCalls 
     * @param {Number} opts.slingMaxInclusions 
     * @param {Boolean} opts.slingTraceAllow 
     * @param {Number} opts.slingMaxRecordRequests 
     * @param {Array.<String>} opts.slingStorePatternRequests 
     * @param {String} opts.slingServerinfo 
     * @param {Array.<String>} opts.slingAdditionalResponseHeaders 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineImplSlingMainServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineImplSlingMainServletInfo}
     */
    orgApacheSlingEngineImplSlingMainServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.max.calls': opts['slingMaxCalls'],
        'sling.max.inclusions': opts['slingMaxInclusions'],
        'sling.trace.allow': opts['slingTraceAllow'],
        'sling.max.record.requests': opts['slingMaxRecordRequests'],
        'sling.store.pattern.requests': this.apiClient.buildCollectionParam(opts['slingStorePatternRequests'], 'multi'),
        'sling.serverinfo': opts['slingServerinfo'],
        'sling.additional.response.headers': this.apiClient.buildCollectionParam(opts['slingAdditionalResponseHeaders'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEngineImplSlingMainServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEngineParameters operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEngineParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEngineParametersInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingDefaultParameterEncoding 
     * @param {Number} opts.slingDefaultMaxParameters 
     * @param {String} opts.fileLocation 
     * @param {Number} opts.fileThreshold 
     * @param {Number} opts.fileMax 
     * @param {Number} opts.requestMax 
     * @param {Boolean} opts.slingDefaultParameterCheckForAdditionalContainerParameters 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEngineParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEngineParametersInfo}
     */
    orgApacheSlingEngineParameters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.default.parameter.encoding': opts['slingDefaultParameterEncoding'],
        'sling.default.max.parameters': opts['slingDefaultMaxParameters'],
        'file.location': opts['fileLocation'],
        'file.threshold': opts['fileThreshold'],
        'file.max': opts['fileMax'],
        'request.max': opts['requestMax'],
        'sling.default.parameter.checkForAdditionalContainerParameters': opts['slingDefaultParameterCheckForAdditionalContainerParameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEngineParametersInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.engine.parameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventImplEventingThreadPool operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventImplEventingThreadPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventImplEventingThreadPoolInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.minPoolSize 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventImplEventingThreadPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventImplEventingThreadPoolInfo}
     */
    orgApacheSlingEventImplEventingThreadPool(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'minPoolSize': opts['minPoolSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEventImplEventingThreadPoolInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventImplJobsDefaultJobManager operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventImplJobsDefaultJobManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventImplJobsDefaultJobManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.queuePriority 
     * @param {Number} opts.queueRetries 
     * @param {Number} opts.queueRetrydelay 
     * @param {Number} opts.queueMaxparallel 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventImplJobsDefaultJobManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventImplJobsDefaultJobManagerInfo}
     */
    orgApacheSlingEventImplJobsDefaultJobManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'queue.priority': opts['queuePriority'],
        'queue.retries': opts['queueRetries'],
        'queue.retrydelay': opts['queueRetrydelay'],
        'queue.maxparallel': opts['queueMaxparallel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEventImplJobsDefaultJobManagerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventImplJobsJcrPersistenceHandler operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventImplJobsJcrPersistenceHandlerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.jobConsumermanagerDisableDistribution 
     * @param {Number} opts.startupDelay 
     * @param {Number} opts.cleanupPeriod 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventImplJobsJcrPersistenceHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo}
     */
    orgApacheSlingEventImplJobsJcrPersistenceHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'job.consumermanager.disableDistribution': opts['jobConsumermanagerDisableDistribution'],
        'startup.delay': opts['startupDelay'],
        'cleanup.period': opts['cleanupPeriod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventImplJobsJobConsumerManager operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventImplJobsJobConsumerManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventImplJobsJobConsumerManagerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.orgApacheSlingInstallerConfigurationPersist 
     * @param {Array.<String>} opts.jobConsumermanagerWhitelist 
     * @param {Array.<String>} opts.jobConsumermanagerBlacklist 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventImplJobsJobConsumerManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventImplJobsJobConsumerManagerInfo}
     */
    orgApacheSlingEventImplJobsJobConsumerManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.sling.installer.configuration.persist': opts['orgApacheSlingInstallerConfigurationPersist'],
        'job.consumermanager.whitelist': this.apiClient.buildCollectionParam(opts['jobConsumermanagerWhitelist'], 'multi'),
        'job.consumermanager.blacklist': this.apiClient.buildCollectionParam(opts['jobConsumermanagerBlacklist'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEventImplJobsJobConsumerManagerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingEventJobsQueueConfiguration operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingEventJobsQueueConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingEventJobsQueueConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.queueName 
     * @param {Array.<String>} opts.queueTopics 
     * @param {String} opts.queueType 
     * @param {String} opts.queuePriority 
     * @param {Number} opts.queueRetries 
     * @param {Number} opts.queueRetrydelay 
     * @param {Number} opts.queueMaxparallel 
     * @param {Boolean} opts.queueKeepJobs 
     * @param {Boolean} opts.queuePreferRunOnCreationInstance 
     * @param {Number} opts.queueThreadPoolSize 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingEventJobsQueueConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingEventJobsQueueConfigurationInfo}
     */
    orgApacheSlingEventJobsQueueConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'queue.name': opts['queueName'],
        'queue.topics': this.apiClient.buildCollectionParam(opts['queueTopics'], 'multi'),
        'queue.type': opts['queueType'],
        'queue.priority': opts['queuePriority'],
        'queue.retries': opts['queueRetries'],
        'queue.retrydelay': opts['queueRetrydelay'],
        'queue.maxparallel': opts['queueMaxparallel'],
        'queue.keepJobs': opts['queueKeepJobs'],
        'queue.preferRunOnCreationInstance': opts['queuePreferRunOnCreationInstance'],
        'queue.threadPoolSize': opts['queueThreadPoolSize'],
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingEventJobsQueueConfigurationInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.users 
     * @param {Array.<String>} opts.groups 
     * @param {module:api/ConfigmgrApi~orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo}
     */
    orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'users': this.apiClient.buildCollectionParam(opts['users'], 'multi'),
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingFeatureflagsFeature operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingFeatureflagsFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingFeatureflagsFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.description 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingFeatureflagsFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingFeatureflagsFeatureInfo}
     */
    orgApacheSlingFeatureflagsFeature(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'description': opts['description'],
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingFeatureflagsFeatureInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.featureflags.Feature', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingFeatureflagsImplConfiguredFeature operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingFeatureflagsImplConfiguredFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.name 
     * @param {String} opts.description 
     * @param {Boolean} opts.enabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingFeatureflagsImplConfiguredFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo}
     */
    orgApacheSlingFeatureflagsImplConfiguredFeature(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'name': opts['name'],
        'description': opts['description'],
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHapiImplHApiUtilImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHapiImplHApiUtilImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHapiImplHApiUtilImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.orgApacheSlingHapiToolsResourcetype 
     * @param {String} opts.orgApacheSlingHapiToolsCollectionresourcetype 
     * @param {Array.<String>} opts.orgApacheSlingHapiToolsSearchpaths 
     * @param {String} opts.orgApacheSlingHapiToolsExternalurl 
     * @param {Boolean} opts.orgApacheSlingHapiToolsEnabled 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHapiImplHApiUtilImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHapiImplHApiUtilImplInfo}
     */
    orgApacheSlingHapiImplHApiUtilImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.sling.hapi.tools.resourcetype': opts['orgApacheSlingHapiToolsResourcetype'],
        'org.apache.sling.hapi.tools.collectionresourcetype': opts['orgApacheSlingHapiToolsCollectionresourcetype'],
        'org.apache.sling.hapi.tools.searchpaths': this.apiClient.buildCollectionParam(opts['orgApacheSlingHapiToolsSearchpaths'], 'multi'),
        'org.apache.sling.hapi.tools.externalurl': opts['orgApacheSlingHapiToolsExternalurl'],
        'org.apache.sling.hapi.tools.enabled': opts['orgApacheSlingHapiToolsEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingHapiImplHApiUtilImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplCompositeHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplCompositeHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplCompositeHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {Array.<String>} opts.filterTags 
     * @param {Boolean} opts.filterCombineTagsWithOr 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplCompositeHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplCompositeHealthCheckInfo}
     */
    orgApacheSlingHcCoreImplCompositeHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.name': opts['hcName'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'hc.mbean.name': opts['hcMbeanName'],
        'filter.tags': this.apiClient.buildCollectionParam(opts['filterTags'], 'multi'),
        'filter.combineTagsWithOr': opts['filterCombineTagsWithOr']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.timeoutInMs 
     * @param {Number} opts.longRunningFutureThresholdForCriticalMs 
     * @param {Number} opts.resultCacheTtlInMs 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo}
     */
    orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'timeoutInMs': opts['timeoutInMs'],
        'longRunningFutureThresholdForCriticalMs': opts['longRunningFutureThresholdForCriticalMs'],
        'resultCacheTtlInMs': opts['resultCacheTtlInMs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplJmxAttributeHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplJmxAttributeHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {String} opts.mbeanName 
     * @param {String} opts.attributeName 
     * @param {String} opts.attributeValueConstraint 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplJmxAttributeHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo}
     */
    orgApacheSlingHcCoreImplJmxAttributeHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.name': opts['hcName'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'hc.mbean.name': opts['hcMbeanName'],
        'mbean.name': opts['mbeanName'],
        'attribute.name': opts['attributeName'],
        'attribute.value.constraint': opts['attributeValueConstraint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplScriptableHealthCheck operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplScriptableHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplScriptableHealthCheckInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.hcName 
     * @param {Array.<String>} opts.hcTags 
     * @param {String} opts.hcMbeanName 
     * @param {String} opts.expression 
     * @param {String} opts.languageExtension 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplScriptableHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplScriptableHealthCheckInfo}
     */
    orgApacheSlingHcCoreImplScriptableHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'hc.name': opts['hcName'],
        'hc.tags': this.apiClient.buildCollectionParam(opts['hcTags'], 'multi'),
        'hc.mbean.name': opts['hcMbeanName'],
        'expression': opts['expression'],
        'language.extension': opts['languageExtension']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplServletHealthCheckExecutorServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.servletPath 
     * @param {Boolean} opts.disabled 
     * @param {String} opts.corsAccessControlAllowOrigin 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplServletHealthCheckExecutorServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo}
     */
    orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'servletPath': opts['servletPath'],
        'disabled': opts['disabled'],
        'cors.accessControlAllowOrigin': opts['corsAccessControlAllowOrigin']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.totalWidth 
     * @param {Number} opts.colWidthName 
     * @param {Number} opts.colWidthResult 
     * @param {Number} opts.colWidthTiming 
     * @param {module:api/ConfigmgrApi~orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo}
     */
    orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'totalWidth': opts['totalWidth'],
        'colWidthName': opts['colWidthName'],
        'colWidthResult': opts['colWidthResult'],
        'colWidthTiming': opts['colWidthTiming']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingI18nImplI18NFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingI18nImplI18NFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingI18nImplI18NFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Array.<String>} opts.slingFilterScope 
     * @param {module:api/ConfigmgrApi~orgApacheSlingI18nImplI18NFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingI18nImplI18NFilterInfo}
     */
    orgApacheSlingI18nImplI18NFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'sling.filter.scope': this.apiClient.buildCollectionParam(opts['slingFilterScope'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingI18nImplI18NFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingI18nImplJcrResourceBundleProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingI18nImplJcrResourceBundleProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingI18nImplJcrResourceBundleProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.localeDefault 
     * @param {Boolean} opts.preloadBundles 
     * @param {Number} opts.invalidationDelay 
     * @param {module:api/ConfigmgrApi~orgApacheSlingI18nImplJcrResourceBundleProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingI18nImplJcrResourceBundleProviderInfo}
     */
    orgApacheSlingI18nImplJcrResourceBundleProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'locale.default': opts['localeDefault'],
        'preload.bundles': opts['preloadBundles'],
        'invalidation.delay': opts['invalidationDelay']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingInstallerProviderJcrImplJcrInstaller operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingInstallerProviderJcrImplJcrInstallerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.handlerSchemes 
     * @param {String} opts.slingJcrinstallFolderNameRegexp 
     * @param {Number} opts.slingJcrinstallFolderMaxDepth 
     * @param {Array.<String>} opts.slingJcrinstallSearchPath 
     * @param {String} opts.slingJcrinstallNewConfigPath 
     * @param {String} opts.slingJcrinstallSignalPath 
     * @param {Boolean} opts.slingJcrinstallEnableWriteback 
     * @param {module:api/ConfigmgrApi~orgApacheSlingInstallerProviderJcrImplJcrInstallerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo}
     */
    orgApacheSlingInstallerProviderJcrImplJcrInstaller(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'handler.schemes': this.apiClient.buildCollectionParam(opts['handlerSchemes'], 'multi'),
        'sling.jcrinstall.folder.name.regexp': opts['slingJcrinstallFolderNameRegexp'],
        'sling.jcrinstall.folder.max.depth': opts['slingJcrinstallFolderMaxDepth'],
        'sling.jcrinstall.search.path': this.apiClient.buildCollectionParam(opts['slingJcrinstallSearchPath'], 'multi'),
        'sling.jcrinstall.new.config.path': opts['slingJcrinstallNewConfigPath'],
        'sling.jcrinstall.signal.path': opts['slingJcrinstallSignalPath'],
        'sling.jcrinstall.enable.writeback': opts['slingJcrinstallEnableWriteback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrBaseInternalLoginAdminWhitelist operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrBaseInternalLoginAdminWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.whitelistBypass 
     * @param {String} opts.whitelistBundlesRegexp 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrBaseInternalLoginAdminWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo}
     */
    orgApacheSlingJcrBaseInternalLoginAdminWhitelist(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'whitelist.bypass': opts['whitelistBypass'],
        'whitelist.bundles.regexp': opts['whitelistBundlesRegexp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.whitelistName 
     * @param {Array.<String>} opts.whitelistBundles 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo}
     */
    orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'whitelist.name': opts['whitelistName'],
        'whitelist.bundles': this.apiClient.buildCollectionParam(opts['whitelistBundles'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrDavexImplServletsSlingDavExServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrDavexImplServletsSlingDavExServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.alias 
     * @param {Boolean} opts.davCreateAbsoluteUri 
     * @param {String} opts.davProtectedhandlers 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrDavexImplServletsSlingDavExServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo}
     */
    orgApacheSlingJcrDavexImplServletsSlingDavExServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'alias': opts['alias'],
        'dav.create-absolute-uri': opts['davCreateAbsoluteUri'],
        'dav.protectedhandlers': opts['davProtectedhandlers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.javaNamingFactoryInitial 
     * @param {String} opts.javaNamingProviderUrl 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo}
     */
    orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'java.naming.factory.initial': opts['javaNamingFactoryInitial'],
        'java.naming.provider.url': opts['javaNamingProviderUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.port 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo}
     */
    orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'port': opts['port']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrRepoinitImplRepositoryInitializer operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrRepoinitImplRepositoryInitializerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.references 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrRepoinitImplRepositoryInitializerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo}
     */
    orgApacheSlingJcrRepoinitImplRepositoryInitializer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'references': this.apiClient.buildCollectionParam(opts['references'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrRepoinitRepositoryInitializer operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrRepoinitRepositoryInitializerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrRepoinitRepositoryInitializerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.references 
     * @param {Array.<String>} opts.scripts 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrRepoinitRepositoryInitializerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrRepoinitRepositoryInitializerInfo}
     */
    orgApacheSlingJcrRepoinitRepositoryInitializer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'references': this.apiClient.buildCollectionParam(opts['references'], 'multi'),
        'scripts': this.apiClient.buildCollectionParam(opts['scripts'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.resourceResolverSearchpath 
     * @param {Boolean} opts.resourceResolverManglenamespaces 
     * @param {Boolean} opts.resourceResolverAllowDirect 
     * @param {Array.<String>} opts.resourceResolverRequiredProviders 
     * @param {Array.<String>} opts.resourceResolverRequiredProvidernames 
     * @param {Array.<String>} opts.resourceResolverVirtual 
     * @param {Array.<String>} opts.resourceResolverMapping 
     * @param {String} opts.resourceResolverMapLocation 
     * @param {Array.<String>} opts.resourceResolverMapObservation 
     * @param {Number} opts.resourceResolverDefaultVanityRedirectStatus 
     * @param {Boolean} opts.resourceResolverEnableVanitypath 
     * @param {Number} opts.resourceResolverVanitypathMaxEntries 
     * @param {Boolean} opts.resourceResolverVanitypathMaxEntriesStartup 
     * @param {Number} opts.resourceResolverVanitypathBloomfilterMaxBytes 
     * @param {Boolean} opts.resourceResolverOptimizeAliasResolution 
     * @param {Array.<String>} opts.resourceResolverVanitypathWhitelist 
     * @param {Array.<String>} opts.resourceResolverVanitypathBlacklist 
     * @param {Boolean} opts.resourceResolverVanityPrecedence 
     * @param {Boolean} opts.resourceResolverProviderhandlingParanoid 
     * @param {Boolean} opts.resourceResolverLogClosing 
     * @param {Boolean} opts.resourceResolverLogUnclosed 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo}
     */
    orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'resource.resolver.searchpath': this.apiClient.buildCollectionParam(opts['resourceResolverSearchpath'], 'multi'),
        'resource.resolver.manglenamespaces': opts['resourceResolverManglenamespaces'],
        'resource.resolver.allowDirect': opts['resourceResolverAllowDirect'],
        'resource.resolver.required.providers': this.apiClient.buildCollectionParam(opts['resourceResolverRequiredProviders'], 'multi'),
        'resource.resolver.required.providernames': this.apiClient.buildCollectionParam(opts['resourceResolverRequiredProvidernames'], 'multi'),
        'resource.resolver.virtual': this.apiClient.buildCollectionParam(opts['resourceResolverVirtual'], 'multi'),
        'resource.resolver.mapping': this.apiClient.buildCollectionParam(opts['resourceResolverMapping'], 'multi'),
        'resource.resolver.map.location': opts['resourceResolverMapLocation'],
        'resource.resolver.map.observation': this.apiClient.buildCollectionParam(opts['resourceResolverMapObservation'], 'multi'),
        'resource.resolver.default.vanity.redirect.status': opts['resourceResolverDefaultVanityRedirectStatus'],
        'resource.resolver.enable.vanitypath': opts['resourceResolverEnableVanitypath'],
        'resource.resolver.vanitypath.maxEntries': opts['resourceResolverVanitypathMaxEntries'],
        'resource.resolver.vanitypath.maxEntries.startup': opts['resourceResolverVanitypathMaxEntriesStartup'],
        'resource.resolver.vanitypath.bloomfilter.maxBytes': opts['resourceResolverVanitypathBloomfilterMaxBytes'],
        'resource.resolver.optimize.alias.resolution': opts['resourceResolverOptimizeAliasResolution'],
        'resource.resolver.vanitypath.whitelist': this.apiClient.buildCollectionParam(opts['resourceResolverVanitypathWhitelist'], 'multi'),
        'resource.resolver.vanitypath.blacklist': this.apiClient.buildCollectionParam(opts['resourceResolverVanitypathBlacklist'], 'multi'),
        'resource.resolver.vanity.precedence': opts['resourceResolverVanityPrecedence'],
        'resource.resolver.providerhandling.paranoid': opts['resourceResolverProviderhandlingParanoid'],
        'resource.resolver.log.closing': opts['resourceResolverLogClosing'],
        'resource.resolver.log.unclosed': opts['resourceResolverLogUnclosed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrResourceInternalJcrSystemUserValidator operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrResourceInternalJcrSystemUserValidatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.allowOnlySystemUser 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrResourceInternalJcrSystemUserValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo}
     */
    orgApacheSlingJcrResourceInternalJcrSystemUserValidator(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'allow.only.system.user': opts['allowOnlySystemUser']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.path 
     * @param {String} opts.checkpathPrefix 
     * @param {String} opts.jcrPath 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo}
     */
    orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'path': opts['path'],
        'checkpath.prefix': opts['checkpathPrefix'],
        'jcrPath': opts['jcrPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.typeCollections 
     * @param {String} opts.typeNoncollections 
     * @param {String} opts.typeContent 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo}
     */
    orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'type.collections': opts['typeCollections'],
        'type.noncollections': opts['typeNoncollections'],
        'type.content': opts['typeContent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo}
     */
    orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.davRoot 
     * @param {Boolean} opts.davCreateAbsoluteUri 
     * @param {String} opts.davRealm 
     * @param {Array.<String>} opts.collectionTypes 
     * @param {Array.<String>} opts.filterPrefixes 
     * @param {String} opts.filterTypes 
     * @param {String} opts.filterUris 
     * @param {String} opts.typeCollections 
     * @param {String} opts.typeNoncollections 
     * @param {String} opts.typeContent 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo}
     */
    orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'dav.root': opts['davRoot'],
        'dav.create-absolute-uri': opts['davCreateAbsoluteUri'],
        'dav.realm': opts['davRealm'],
        'collection.types': this.apiClient.buildCollectionParam(opts['collectionTypes'], 'multi'),
        'filter.prefixes': this.apiClient.buildCollectionParam(opts['filterPrefixes'], 'multi'),
        'filter.types': opts['filterTypes'],
        'filter.uris': opts['filterUris'],
        'type.collections': opts['typeCollections'],
        'type.noncollections': opts['typeNoncollections'],
        'type.content': opts['typeContent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingJmxProviderImplJMXResourceProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingJmxProviderImplJMXResourceProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingJmxProviderImplJMXResourceProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.providerRoots 
     * @param {module:api/ConfigmgrApi~orgApacheSlingJmxProviderImplJMXResourceProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingJmxProviderImplJMXResourceProviderInfo}
     */
    orgApacheSlingJmxProviderImplJMXResourceProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'provider.roots': opts['providerRoots']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingModelsImplModelAdapterFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingModelsImplModelAdapterFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingModelsImplModelAdapterFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.osgiHttpWhiteboardListener 
     * @param {String} opts.osgiHttpWhiteboardContextSelect 
     * @param {Number} opts.maxRecursionDepth 
     * @param {Number} opts.cleanupJobPeriod 
     * @param {module:api/ConfigmgrApi~orgApacheSlingModelsImplModelAdapterFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingModelsImplModelAdapterFactoryInfo}
     */
    orgApacheSlingModelsImplModelAdapterFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'osgi.http.whiteboard.listener': opts['osgiHttpWhiteboardListener'],
        'osgi.http.whiteboard.context.select': opts['osgiHttpWhiteboardContextSelect'],
        'max.recursion.depth': opts['maxRecursionDepth'],
        'cleanup.job.period': opts['cleanupJobPeriod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingModelsImplModelAdapterFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingModelsJacksonexporterImplResourceModuleProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingModelsJacksonexporterImplResourceModuleProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.maxRecursionLevels 
     * @param {module:api/ConfigmgrApi~orgApacheSlingModelsJacksonexporterImplResourceModuleProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo}
     */
    orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'max.recursion.levels': opts['maxRecursionLevels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.felixInventoryPrinterName 
     * @param {String} opts.felixInventoryPrinterTitle 
     * @param {String} opts.path 
     * @param {module:api/ConfigmgrApi~orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo}
     */
    orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'felix.inventory.printer.name': opts['felixInventoryPrinterName'],
        'felix.inventory.printer.title': opts['felixInventoryPrinterTitle'],
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingResourcemergerImplMergedResourceProviderFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingResourcemergerImplMergedResourceProviderFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mergeRoot 
     * @param {Boolean} opts.mergeReadOnly 
     * @param {module:api/ConfigmgrApi~orgApacheSlingResourcemergerImplMergedResourceProviderFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo}
     */
    orgApacheSlingResourcemergerImplMergedResourceProviderFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'merge.root': opts['mergeRoot'],
        'merge.readOnly': opts['mergeReadOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingResourcemergerPickerOverriding operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingResourcemergerPickerOverridingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingResourcemergerPickerOverridingInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.mergeRoot 
     * @param {Boolean} opts.mergeReadOnly 
     * @param {module:api/ConfigmgrApi~orgApacheSlingResourcemergerPickerOverridingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingResourcemergerPickerOverridingInfo}
     */
    orgApacheSlingResourcemergerPickerOverriding(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'merge.root': opts['mergeRoot'],
        'merge.readOnly': opts['mergeReadOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingResourcemergerPickerOverridingInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingCoreImplScriptCacheImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingCoreImplScriptCacheImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingCoreImplScriptCacheImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.orgApacheSlingScriptingCacheSize 
     * @param {Array.<String>} opts.orgApacheSlingScriptingCacheAdditionalExtensions 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingCoreImplScriptCacheImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingCoreImplScriptCacheImplInfo}
     */
    orgApacheSlingScriptingCoreImplScriptCacheImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.sling.scripting.cache.size': opts['orgApacheSlingScriptingCacheSize'],
        'org.apache.sling.scripting.cache.additional_extensions': this.apiClient.buildCollectionParam(opts['orgApacheSlingScriptingCacheAdditionalExtensions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.logStacktraceOnclose 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo}
     */
    orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'log.stacktrace.onclose': opts['logStacktraceOnclose']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingJavaImplJavaScriptEngineFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.javaClassdebuginfo 
     * @param {String} opts.javaJavaEncoding 
     * @param {String} opts.javaCompilerSourceVM 
     * @param {String} opts.javaCompilerTargetVM 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo}
     */
    orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'java.classdebuginfo': opts['javaClassdebuginfo'],
        'java.javaEncoding': opts['javaJavaEncoding'],
        'java.compilerSourceVM': opts['javaCompilerSourceVM'],
        'java.compilerTargetVM': opts['javaCompilerTargetVM']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.orgApacheSlingScriptingJavascriptRhinoOptLevel 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo}
     */
    orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.sling.scripting.javascript.rhino.optLevel': opts['orgApacheSlingScriptingJavascriptRhinoOptLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingJspJspScriptEngineFactory operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingJspJspScriptEngineFactoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.jasperCompilerTargetVM 
     * @param {String} opts.jasperCompilerSourceVM 
     * @param {Boolean} opts.jasperClassdebuginfo 
     * @param {Boolean} opts.jasperEnablePooling 
     * @param {String} opts.jasperIeClassId 
     * @param {Boolean} opts.jasperGenStringAsCharArray 
     * @param {Boolean} opts.jasperKeepgenerated 
     * @param {Boolean} opts.jasperMappedfile 
     * @param {Boolean} opts.jasperTrimSpaces 
     * @param {Boolean} opts.jasperDisplaySourceFragments 
     * @param {Boolean} opts.defaultIsSession 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingJspJspScriptEngineFactoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo}
     */
    orgApacheSlingScriptingJspJspScriptEngineFactory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'jasper.compilerTargetVM': opts['jasperCompilerTargetVM'],
        'jasper.compilerSourceVM': opts['jasperCompilerSourceVM'],
        'jasper.classdebuginfo': opts['jasperClassdebuginfo'],
        'jasper.enablePooling': opts['jasperEnablePooling'],
        'jasper.ieClassId': opts['jasperIeClassId'],
        'jasper.genStringAsCharArray': opts['jasperGenStringAsCharArray'],
        'jasper.keepgenerated': opts['jasperKeepgenerated'],
        'jasper.mappedfile': opts['jasperMappedfile'],
        'jasper.trimSpaces': opts['jasperTrimSpaces'],
        'jasper.displaySourceFragments': opts['jasperDisplaySourceFragments'],
        'default.is.session': opts['defaultIsSession']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.orgApacheSlingScriptingSightlyJsBindings 
     * @param {module:api/ConfigmgrApi~orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo}
     */
    orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'org.apache.sling.scripting.sightly.js.bindings': this.apiClient.buildCollectionParam(opts['orgApacheSlingScriptingSightlyJsBindings'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingSecurityImplContentDispositionFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingSecurityImplContentDispositionFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingSecurityImplContentDispositionFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingContentDispositionPaths 
     * @param {Array.<String>} opts.slingContentDispositionExcludedPaths 
     * @param {Boolean} opts.slingContentDispositionAllPaths 
     * @param {module:api/ConfigmgrApi~orgApacheSlingSecurityImplContentDispositionFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingSecurityImplContentDispositionFilterInfo}
     */
    orgApacheSlingSecurityImplContentDispositionFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.content.disposition.paths': this.apiClient.buildCollectionParam(opts['slingContentDispositionPaths'], 'multi'),
        'sling.content.disposition.excluded.paths': this.apiClient.buildCollectionParam(opts['slingContentDispositionExcludedPaths'], 'multi'),
        'sling.content.disposition.all.paths': opts['slingContentDispositionAllPaths']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingSecurityImplContentDispositionFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingSecurityImplReferrerFilter operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingSecurityImplReferrerFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingSecurityImplReferrerFilterInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.allowEmpty 
     * @param {Array.<String>} opts.allowHosts 
     * @param {Array.<String>} opts.allowHostsRegexp 
     * @param {Array.<String>} opts.filterMethods 
     * @param {Array.<String>} opts.excludeAgentsRegexp 
     * @param {module:api/ConfigmgrApi~orgApacheSlingSecurityImplReferrerFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingSecurityImplReferrerFilterInfo}
     */
    orgApacheSlingSecurityImplReferrerFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'allow.empty': opts['allowEmpty'],
        'allow.hosts': this.apiClient.buildCollectionParam(opts['allowHosts'], 'multi'),
        'allow.hosts.regexp': this.apiClient.buildCollectionParam(opts['allowHostsRegexp'], 'multi'),
        'filter.methods': this.apiClient.buildCollectionParam(opts['filterMethods'], 'multi'),
        'exclude.agents.regexp': this.apiClient.buildCollectionParam(opts['excludeAgentsRegexp'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingSecurityImplReferrerFilterInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServiceusermappingImplServiceUserMapperImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServiceusermappingImplServiceUserMapperImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.userMapping 
     * @param {String} opts.userDefault 
     * @param {Boolean} opts.userEnableDefaultMapping 
     * @param {Boolean} opts.requireValidation 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServiceusermappingImplServiceUserMapperImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo}
     */
    orgApacheSlingServiceusermappingImplServiceUserMapperImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'user.mapping': this.apiClient.buildCollectionParam(opts['userMapping'], 'multi'),
        'user.default': opts['userDefault'],
        'user.enable.default.mapping': opts['userEnableDefaultMapping'],
        'require.validation': opts['requireValidation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Number} opts.serviceRanking 
     * @param {Array.<String>} opts.userMapping 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo}
     */
    orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'service.ranking': opts['serviceRanking'],
        'user.mapping': this.apiClient.buildCollectionParam(opts['userMapping'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsGetDefaultGetServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsGetDefaultGetServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsGetDefaultGetServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.aliases 
     * @param {Boolean} opts.index 
     * @param {Array.<String>} opts.indexFiles 
     * @param {Boolean} opts.enableHtml 
     * @param {Boolean} opts.enableJson 
     * @param {Boolean} opts.enableTxt 
     * @param {Boolean} opts.enableXml 
     * @param {Number} opts.jsonMaximumresults 
     * @param {Boolean} opts.ecmaSuport 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsGetDefaultGetServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsGetDefaultGetServletInfo}
     */
    orgApacheSlingServletsGetDefaultGetServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'index': opts['index'],
        'index.files': this.apiClient.buildCollectionParam(opts['indexFiles'], 'multi'),
        'enable.html': opts['enableHtml'],
        'enable.json': opts['enableJson'],
        'enable.txt': opts['enableTxt'],
        'enable.xml': opts['enableXml'],
        'json.maximumresults': opts['jsonMaximumresults'],
        'ecmaSuport': opts['ecmaSuport']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingServletsGetDefaultGetServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsGetImplVersionVersionInfoServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsGetImplVersionVersionInfoServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.slingServletSelectors 
     * @param {Boolean} opts.ecmaSuport 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsGetImplVersionVersionInfoServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo}
     */
    orgApacheSlingServletsGetImplVersionVersionInfoServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.servlet.selectors': this.apiClient.buildCollectionParam(opts['slingServletSelectors'], 'multi'),
        'ecmaSuport': opts['ecmaSuport']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsPostImplHelperChunkCleanUpTask operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsPostImplHelperChunkCleanUpTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.schedulerExpression 
     * @param {Boolean} opts.schedulerConcurrent 
     * @param {Number} opts.chunkCleanupAge 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsPostImplHelperChunkCleanUpTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo}
     */
    orgApacheSlingServletsPostImplHelperChunkCleanUpTask(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'scheduler.expression': opts['schedulerExpression'],
        'scheduler.concurrent': opts['schedulerConcurrent'],
        'chunk.cleanup.age': opts['chunkCleanupAge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsPostImplSlingPostServlet operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsPostImplSlingPostServletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsPostImplSlingPostServletInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.servletPostDateFormats 
     * @param {Array.<String>} opts.servletPostNodeNameHints 
     * @param {Number} opts.servletPostNodeNameMaxLength 
     * @param {Boolean} opts.servletPostCheckinNewVersionableNodes 
     * @param {Boolean} opts.servletPostAutoCheckout 
     * @param {Boolean} opts.servletPostAutoCheckin 
     * @param {String} opts.servletPostIgnorePattern 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsPostImplSlingPostServletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsPostImplSlingPostServletInfo}
     */
    orgApacheSlingServletsPostImplSlingPostServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'servlet.post.dateFormats': this.apiClient.buildCollectionParam(opts['servletPostDateFormats'], 'multi'),
        'servlet.post.nodeNameHints': this.apiClient.buildCollectionParam(opts['servletPostNodeNameHints'], 'multi'),
        'servlet.post.nodeNameMaxLength': opts['servletPostNodeNameMaxLength'],
        'servlet.post.checkinNewVersionableNodes': opts['servletPostCheckinNewVersionableNodes'],
        'servlet.post.autoCheckout': opts['servletPostAutoCheckout'],
        'servlet.post.autoCheckin': opts['servletPostAutoCheckin'],
        'servlet.post.ignorePattern': opts['servletPostIgnorePattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingServletsPostImplSlingPostServletInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingServletsResolverSlingServletResolver operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingServletsResolverSlingServletResolverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingServletsResolverSlingServletResolverInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.servletresolverServletRoot 
     * @param {Number} opts.servletresolverCacheSize 
     * @param {Array.<String>} opts.servletresolverPaths 
     * @param {Array.<String>} opts.servletresolverDefaultExtensions 
     * @param {module:api/ConfigmgrApi~orgApacheSlingServletsResolverSlingServletResolverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingServletsResolverSlingServletResolverInfo}
     */
    orgApacheSlingServletsResolverSlingServletResolver(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'servletresolver.servletRoot': opts['servletresolverServletRoot'],
        'servletresolver.cacheSize': opts['servletresolverCacheSize'],
        'servletresolver.paths': this.apiClient.buildCollectionParam(opts['servletresolverPaths'], 'multi'),
        'servletresolver.defaultExtensions': this.apiClient.buildCollectionParam(opts['servletresolverDefaultExtensions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingServletsResolverSlingServletResolverInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingSettingsImplSlingSettingsServiceImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingSettingsImplSlingSettingsServiceImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.slingName 
     * @param {String} opts.slingDescription 
     * @param {module:api/ConfigmgrApi~orgApacheSlingSettingsImplSlingSettingsServiceImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo}
     */
    orgApacheSlingSettingsImplSlingSettingsServiceImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'sling.name': opts['slingName'],
        'sling.description': opts['slingDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingStartupfilterImplStartupFilterImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingStartupfilterImplStartupFilterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingStartupfilterImplStartupFilterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Boolean} opts.activeByDefault 
     * @param {String} opts.defaultMessage 
     * @param {module:api/ConfigmgrApi~orgApacheSlingStartupfilterImplStartupFilterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingStartupfilterImplStartupFilterImplInfo}
     */
    orgApacheSlingStartupfilterImplStartupFilterImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'active.by.default': opts['activeByDefault'],
        'default.message': opts['defaultMessage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingStartupfilterImplStartupFilterImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingTenantInternalTenantProviderImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingTenantInternalTenantProviderImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingTenantInternalTenantProviderImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.tenantRoot 
     * @param {Array.<String>} opts.tenantPathMatcher 
     * @param {module:api/ConfigmgrApi~orgApacheSlingTenantInternalTenantProviderImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingTenantInternalTenantProviderImplInfo}
     */
    orgApacheSlingTenantInternalTenantProviderImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'tenant.root': opts['tenantRoot'],
        'tenant.path.matcher': this.apiClient.buildCollectionParam(opts['tenantPathMatcher'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingTenantInternalTenantProviderImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingTracerInternalLogTracer operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingTracerInternalLogTracerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingTracerInternalLogTracerInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {Array.<String>} opts.tracerSets 
     * @param {Boolean} opts.enabled 
     * @param {Boolean} opts.servletEnabled 
     * @param {Number} opts.recordingCacheSizeInMB 
     * @param {Number} opts.recordingCacheDurationInSecs 
     * @param {Boolean} opts.recordingCompressionEnabled 
     * @param {Boolean} opts.gzipResponse 
     * @param {module:api/ConfigmgrApi~orgApacheSlingTracerInternalLogTracerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingTracerInternalLogTracerInfo}
     */
    orgApacheSlingTracerInternalLogTracer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'tracerSets': this.apiClient.buildCollectionParam(opts['tracerSets'], 'multi'),
        'enabled': opts['enabled'],
        'servletEnabled': opts['servletEnabled'],
        'recordingCacheSizeInMB': opts['recordingCacheSizeInMB'],
        'recordingCacheDurationInSecs': opts['recordingCacheDurationInSecs'],
        'recordingCompressionEnabled': opts['recordingCompressionEnabled'],
        'gzipResponse': opts['gzipResponse']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingTracerInternalLogTracerInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgApacheSlingXssImplXSSFilterImpl operation.
     * @callback module:api/ConfigmgrApi~orgApacheSlingXssImplXSSFilterImplCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgApacheSlingXssImplXSSFilterImplInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.propertylist 
     * @param {String} opts.policyPath 
     * @param {module:api/ConfigmgrApi~orgApacheSlingXssImplXSSFilterImplCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgApacheSlingXssImplXSSFilterImplInfo}
     */
    orgApacheSlingXssImplXSSFilterImpl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'propertylist': this.apiClient.buildCollectionParam(opts['propertylist'], 'csv'),
        'policyPath': opts['policyPath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = OrgApacheSlingXssImplXSSFilterImplInfo;
      return this.apiClient.callApi(
        '/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
